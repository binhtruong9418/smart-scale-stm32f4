
smart-scale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7bc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  0800a970  0800a970  0000b970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b09c  0800b09c  0000d1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b09c  0800b09c  0000c09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0a4  0800b0a4  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0a4  0800b0a4  0000c0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b0a8  0800b0a8  0000c0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800b0ac  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1e0  2**0
                  CONTENTS
 10 .bss          0000081c  200001e0  200001e0  0000d1e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009fc  200009fc  0000d1e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011616  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000297c  00000000  00000000  0001e826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  000211a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d58  00000000  00000000  000222d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025864  00000000  00000000  00023028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001351a  00000000  00000000  0004888c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfb21  00000000  00000000  0005bda6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013b8c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005db4  00000000  00000000  0013b90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  001416c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a954 	.word	0x0800a954

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800a954 	.word	0x0800a954

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <Set7SegDisplayWithDecimal>:
    ShowDecimalPoint = 1; // Hiển thị dấu thập phân ở digit đầu tiên
}

// Hàm hiển thị số với dấu thập phân tùy chọn
void Set7SegDisplayWithDecimal(int val, int show_decimal)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
    if(val > 99) val = 99;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b63      	cmp	r3, #99	@ 0x63
 800104e:	dd01      	ble.n	8001054 <Set7SegDisplayWithDecimal+0x14>
 8001050:	2363      	movs	r3, #99	@ 0x63
 8001052:	607b      	str	r3, [r7, #4]
    if(val < 0) val = 0;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	da01      	bge.n	800105e <Set7SegDisplayWithDecimal+0x1e>
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]

    DisplayValue = val;
 800105e:	4a07      	ldr	r2, [pc, #28]	@ (800107c <Set7SegDisplayWithDecimal+0x3c>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6013      	str	r3, [r2, #0]
    pos = 0;
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <Set7SegDisplayWithDecimal+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
    ShowDecimalPoint = show_decimal;
 800106a:	4a06      	ldr	r2, [pc, #24]	@ (8001084 <Set7SegDisplayWithDecimal+0x44>)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	200001fc 	.word	0x200001fc
 8001080:	20000200 	.word	0x20000200
 8001084:	20000204 	.word	0x20000204

08001088 <Run7SegDisplay>:

void Run7SegDisplay()
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
    unsigned char val;
    int show_decimal_now = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]

    pos++;
 8001092:	4b73      	ldr	r3, [pc, #460]	@ (8001260 <Run7SegDisplay+0x1d8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	4a71      	ldr	r2, [pc, #452]	@ (8001260 <Run7SegDisplay+0x1d8>)
 800109a:	6013      	str	r3, [r2, #0]
    HAL_GPIO_WritePin(PORT_7SEG_CONTROL0, PIN_7SEG_CONTROL0, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	2104      	movs	r1, #4
 80010a0:	4870      	ldr	r0, [pc, #448]	@ (8001264 <Run7SegDisplay+0x1dc>)
 80010a2:	f002 fa47 	bl	8003534 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2108      	movs	r1, #8
 80010aa:	486e      	ldr	r0, [pc, #440]	@ (8001264 <Run7SegDisplay+0x1dc>)
 80010ac:	f002 fa42 	bl	8003534 <HAL_GPIO_WritePin>

    if (pos & 0x1) {
 80010b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001260 <Run7SegDisplay+0x1d8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d012      	beq.n	80010e2 <Run7SegDisplay+0x5a>
        // Digit đầu tiên (bên phải) - hàng đơn vị
        val = Mask[DisplayValue % 10];
 80010bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001268 <Run7SegDisplay+0x1e0>)
 80010be:	6819      	ldr	r1, [r3, #0]
 80010c0:	4b6a      	ldr	r3, [pc, #424]	@ (800126c <Run7SegDisplay+0x1e4>)
 80010c2:	fb83 2301 	smull	r2, r3, r3, r1
 80010c6:	109a      	asrs	r2, r3, #2
 80010c8:	17cb      	asrs	r3, r1, #31
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	1aca      	subs	r2, r1, r3
 80010d6:	4b66      	ldr	r3, [pc, #408]	@ (8001270 <Run7SegDisplay+0x1e8>)
 80010d8:	5c9b      	ldrb	r3, [r3, r2]
 80010da:	71fb      	strb	r3, [r7, #7]
        show_decimal_now = 0; // Không hiển thị dấu thập phân ở digit này
 80010dc:	2300      	movs	r3, #0
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	e01b      	b.n	800111a <Run7SegDisplay+0x92>
    } else {
        // Digit thứ hai (bên trái) - hàng chục
        val = Mask[(DisplayValue / 10) % 10];
 80010e2:	4b61      	ldr	r3, [pc, #388]	@ (8001268 <Run7SegDisplay+0x1e0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a61      	ldr	r2, [pc, #388]	@ (800126c <Run7SegDisplay+0x1e4>)
 80010e8:	fb82 1203 	smull	r1, r2, r2, r3
 80010ec:	1092      	asrs	r2, r2, #2
 80010ee:	17db      	asrs	r3, r3, #31
 80010f0:	1ad1      	subs	r1, r2, r3
 80010f2:	4b5e      	ldr	r3, [pc, #376]	@ (800126c <Run7SegDisplay+0x1e4>)
 80010f4:	fb83 2301 	smull	r2, r3, r3, r1
 80010f8:	109a      	asrs	r2, r3, #2
 80010fa:	17cb      	asrs	r3, r1, #31
 80010fc:	1ad2      	subs	r2, r2, r3
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	1aca      	subs	r2, r1, r3
 8001108:	4b59      	ldr	r3, [pc, #356]	@ (8001270 <Run7SegDisplay+0x1e8>)
 800110a:	5c9b      	ldrb	r3, [r3, r2]
 800110c:	71fb      	strb	r3, [r7, #7]
        // Hiển thị dấu thập phân ở digit này nếu cần (sau số hàng chục)
        if(ShowDecimalPoint) {
 800110e:	4b59      	ldr	r3, [pc, #356]	@ (8001274 <Run7SegDisplay+0x1ec>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <Run7SegDisplay+0x92>
            show_decimal_now = 1;
 8001116:	2301      	movs	r3, #1
 8001118:	603b      	str	r3, [r7, #0]
        }
    }

    // Thiết lập segment P (decimal point)
    if (show_decimal_now)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <Run7SegDisplay+0xa6>
        HAL_GPIO_WritePin(PORT_7SEG_P, PIN_7SEG_P, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001126:	4854      	ldr	r0, [pc, #336]	@ (8001278 <Run7SegDisplay+0x1f0>)
 8001128:	f002 fa04 	bl	8003534 <HAL_GPIO_WritePin>
 800112c:	e005      	b.n	800113a <Run7SegDisplay+0xb2>
    else
        HAL_GPIO_WritePin(PORT_7SEG_P, PIN_7SEG_P, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001134:	4850      	ldr	r0, [pc, #320]	@ (8001278 <Run7SegDisplay+0x1f0>)
 8001136:	f002 f9fd 	bl	8003534 <HAL_GPIO_WritePin>

    // Thiết lập các segment khác (G, F, E, D, C, B, A)
    if (val & 0x40)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <Run7SegDisplay+0xca>
        HAL_GPIO_WritePin(PORT_7SEG_G, PIN_7SEG_G, GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800114a:	484b      	ldr	r0, [pc, #300]	@ (8001278 <Run7SegDisplay+0x1f0>)
 800114c:	f002 f9f2 	bl	8003534 <HAL_GPIO_WritePin>
 8001150:	e005      	b.n	800115e <Run7SegDisplay+0xd6>
    else
        HAL_GPIO_WritePin(PORT_7SEG_G, PIN_7SEG_G, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001158:	4847      	ldr	r0, [pc, #284]	@ (8001278 <Run7SegDisplay+0x1f0>)
 800115a:	f002 f9eb 	bl	8003534 <HAL_GPIO_WritePin>

    if (val & 0x20)
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 0320 	and.w	r3, r3, #32
 8001164:	2b00      	cmp	r3, #0
 8001166:	d006      	beq.n	8001176 <Run7SegDisplay+0xee>
        HAL_GPIO_WritePin(PORT_7SEG_F, PIN_7SEG_F, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800116e:	4842      	ldr	r0, [pc, #264]	@ (8001278 <Run7SegDisplay+0x1f0>)
 8001170:	f002 f9e0 	bl	8003534 <HAL_GPIO_WritePin>
 8001174:	e005      	b.n	8001182 <Run7SegDisplay+0xfa>
    else
        HAL_GPIO_WritePin(PORT_7SEG_F, PIN_7SEG_F, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800117c:	483e      	ldr	r0, [pc, #248]	@ (8001278 <Run7SegDisplay+0x1f0>)
 800117e:	f002 f9d9 	bl	8003534 <HAL_GPIO_WritePin>

    if (val & 0x10)
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 0310 	and.w	r3, r3, #16
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <Run7SegDisplay+0x112>
        HAL_GPIO_WritePin(PORT_7SEG_E, PIN_7SEG_E, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001192:	4839      	ldr	r0, [pc, #228]	@ (8001278 <Run7SegDisplay+0x1f0>)
 8001194:	f002 f9ce 	bl	8003534 <HAL_GPIO_WritePin>
 8001198:	e005      	b.n	80011a6 <Run7SegDisplay+0x11e>
    else
        HAL_GPIO_WritePin(PORT_7SEG_E, PIN_7SEG_E, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011a0:	4835      	ldr	r0, [pc, #212]	@ (8001278 <Run7SegDisplay+0x1f0>)
 80011a2:	f002 f9c7 	bl	8003534 <HAL_GPIO_WritePin>

    if (val & 0x8)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <Run7SegDisplay+0x136>
        HAL_GPIO_WritePin(PORT_7SEG_D, PIN_7SEG_D, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011b6:	4830      	ldr	r0, [pc, #192]	@ (8001278 <Run7SegDisplay+0x1f0>)
 80011b8:	f002 f9bc 	bl	8003534 <HAL_GPIO_WritePin>
 80011bc:	e005      	b.n	80011ca <Run7SegDisplay+0x142>
    else
        HAL_GPIO_WritePin(PORT_7SEG_D, PIN_7SEG_D, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011c4:	482c      	ldr	r0, [pc, #176]	@ (8001278 <Run7SegDisplay+0x1f0>)
 80011c6:	f002 f9b5 	bl	8003534 <HAL_GPIO_WritePin>

    if (val & 0x4)
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <Run7SegDisplay+0x15a>
        HAL_GPIO_WritePin(PORT_7SEG_C, PIN_7SEG_C, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011da:	4827      	ldr	r0, [pc, #156]	@ (8001278 <Run7SegDisplay+0x1f0>)
 80011dc:	f002 f9aa 	bl	8003534 <HAL_GPIO_WritePin>
 80011e0:	e005      	b.n	80011ee <Run7SegDisplay+0x166>
    else
        HAL_GPIO_WritePin(PORT_7SEG_C, PIN_7SEG_C, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011e8:	4823      	ldr	r0, [pc, #140]	@ (8001278 <Run7SegDisplay+0x1f0>)
 80011ea:	f002 f9a3 	bl	8003534 <HAL_GPIO_WritePin>

    if (val & 0x2)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d006      	beq.n	8001206 <Run7SegDisplay+0x17e>
        HAL_GPIO_WritePin(PORT_7SEG_B, PIN_7SEG_B, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011fe:	481e      	ldr	r0, [pc, #120]	@ (8001278 <Run7SegDisplay+0x1f0>)
 8001200:	f002 f998 	bl	8003534 <HAL_GPIO_WritePin>
 8001204:	e005      	b.n	8001212 <Run7SegDisplay+0x18a>
    else
        HAL_GPIO_WritePin(PORT_7SEG_B, PIN_7SEG_B, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800120c:	481a      	ldr	r0, [pc, #104]	@ (8001278 <Run7SegDisplay+0x1f0>)
 800120e:	f002 f991 	bl	8003534 <HAL_GPIO_WritePin>

    if (val & 0x1)
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <Run7SegDisplay+0x1a2>
        HAL_GPIO_WritePin(PORT_7SEG_A, PIN_7SEG_A, GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001222:	4815      	ldr	r0, [pc, #84]	@ (8001278 <Run7SegDisplay+0x1f0>)
 8001224:	f002 f986 	bl	8003534 <HAL_GPIO_WritePin>
 8001228:	e005      	b.n	8001236 <Run7SegDisplay+0x1ae>
    else
        HAL_GPIO_WritePin(PORT_7SEG_A, PIN_7SEG_A, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001230:	4811      	ldr	r0, [pc, #68]	@ (8001278 <Run7SegDisplay+0x1f0>)
 8001232:	f002 f97f 	bl	8003534 <HAL_GPIO_WritePin>

    // Kích hoạt digit tương ứng
    if (pos & 0x1)
 8001236:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <Run7SegDisplay+0x1d8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <Run7SegDisplay+0x1c6>
        HAL_GPIO_WritePin(PORT_7SEG_CONTROL0, PIN_7SEG_CONTROL0, GPIO_PIN_SET);
 8001242:	2201      	movs	r2, #1
 8001244:	2104      	movs	r1, #4
 8001246:	4807      	ldr	r0, [pc, #28]	@ (8001264 <Run7SegDisplay+0x1dc>)
 8001248:	f002 f974 	bl	8003534 <HAL_GPIO_WritePin>
    else
        HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_SET);
}
 800124c:	e004      	b.n	8001258 <Run7SegDisplay+0x1d0>
        HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_SET);
 800124e:	2201      	movs	r2, #1
 8001250:	2108      	movs	r1, #8
 8001252:	4804      	ldr	r0, [pc, #16]	@ (8001264 <Run7SegDisplay+0x1dc>)
 8001254:	f002 f96e 	bl	8003534 <HAL_GPIO_WritePin>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000200 	.word	0x20000200
 8001264:	40021800 	.word	0x40021800
 8001268:	200001fc 	.word	0x200001fc
 800126c:	66666667 	.word	0x66666667
 8001270:	20000000 	.word	0x20000000
 8001274:	20000204 	.word	0x20000204
 8001278:	40021000 	.word	0x40021000

0800127c <hx711_init>:
 */

#include <HX711.h>

//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	@ 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	4613      	mov	r3, r2
 800128a:	80fb      	strh	r3, [r7, #6]
  // Setup the pin connections with the STM Board
  hx711->clk_gpio = clk_gpio;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	88fa      	ldrh	r2, [r7, #6]
 8001296:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80012a2:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	68b8      	ldr	r0, [r7, #8]
 80012cc:	f001 ff6e 	bl	80031ac <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d8:	2302      	movs	r3, #2
 80012da:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 80012dc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80012de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	6838      	ldr	r0, [r7, #0]
 80012e8:	f001 ff60 	bl	80031ac <HAL_GPIO_Init>

}
 80012ec:	bf00      	nop
 80012ee:	3728      	adds	r7, #40	@ 0x28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <set_scale>:

//#############################################################################################
void set_scale(hx711_t *hx711, float Ascale, float Bscale){
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001300:	edc7 0a01 	vstr	s1, [r7, #4]
  // Set the scale. To calibrate the cell, run the program with a scale of 1, call the tare function and then the get_units function. 
  // Divide the obtained weight by the real weight. The result is the parameter to pass to scale
	hx711->Ascale = Ascale;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	611a      	str	r2, [r3, #16]
	hx711->Bscale = Bscale;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	61da      	str	r2, [r3, #28]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <set_gain>:

//#############################################################################################
void set_gain(hx711_t *hx711, uint8_t Again, uint8_t Bgain){
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	70fb      	strb	r3, [r7, #3]
 8001328:	4613      	mov	r3, r2
 800132a:	70bb      	strb	r3, [r7, #2]
  // Define A channel's gain
	switch (Again) {
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	2b40      	cmp	r3, #64	@ 0x40
 8001330:	d005      	beq.n	800133e <set_gain+0x22>
 8001332:	2b80      	cmp	r3, #128	@ 0x80
 8001334:	d107      	bne.n	8001346 <set_gain+0x2a>
			case 128:		// channel A, gain factor 128
				hx711->Again = 1;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	751a      	strb	r2, [r3, #20]
				break;
 800133c:	e003      	b.n	8001346 <set_gain+0x2a>
			case 64:		// channel A, gain factor 64
				hx711->Again = 3;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2203      	movs	r2, #3
 8001342:	751a      	strb	r2, [r3, #20]
				break;
 8001344:	bf00      	nop
		}
	hx711->Bgain = 2;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2202      	movs	r2, #2
 800134a:	f883 2020 	strb.w	r2, [r3, #32]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <set_offset>:

//#############################################################################################
void set_offset(hx711_t *hx711, long offset, uint8_t channel){
 800135a:	b480      	push	{r7}
 800135c:	b085      	sub	sp, #20
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	4613      	mov	r3, r2
 8001366:	71fb      	strb	r3, [r7, #7]
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d103      	bne.n	8001376 <set_offset+0x1c>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	60da      	str	r2, [r3, #12]
	else hx711->Boffset = offset;
}
 8001374:	e002      	b.n	800137c <set_offset+0x22>
	else hx711->Boffset = offset;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	619a      	str	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <shiftIn>:

//############################################################################################
uint8_t shiftIn(hx711_t *hx711, uint8_t bitOrder) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]
    uint8_t i;

    for(i = 0; i < 8; ++i) {
 8001398:	2300      	movs	r3, #0
 800139a:	73bb      	strb	r3, [r7, #14]
 800139c:	e03e      	b.n	800141c <shiftIn+0x94>
    	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	891b      	ldrh	r3, [r3, #8]
 80013a6:	2201      	movs	r2, #1
 80013a8:	4619      	mov	r1, r3
 80013aa:	f002 f8c3 	bl	8003534 <HAL_GPIO_WritePin>
        if(bitOrder == 0)
 80013ae:	78fb      	ldrb	r3, [r7, #3]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d113      	bne.n	80013dc <shiftIn+0x54>
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << i;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	895b      	ldrh	r3, [r3, #10]
 80013bc:	4619      	mov	r1, r3
 80013be:	4610      	mov	r0, r2
 80013c0:	f002 f8a0 	bl	8003504 <HAL_GPIO_ReadPin>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	7bbb      	ldrb	r3, [r7, #14]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	b25a      	sxtb	r2, r3
 80013d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b25b      	sxtb	r3, r3
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	e014      	b.n	8001406 <shiftIn+0x7e>
        else
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << (7 - i);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	895b      	ldrh	r3, [r3, #10]
 80013e4:	4619      	mov	r1, r3
 80013e6:	4610      	mov	r0, r2
 80013e8:	f002 f88c 	bl	8003504 <HAL_GPIO_ReadPin>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	b25a      	sxtb	r2, r3
 80013fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001400:	4313      	orrs	r3, r2
 8001402:	b25b      	sxtb	r3, r3
 8001404:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6818      	ldr	r0, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	891b      	ldrh	r3, [r3, #8]
 800140e:	2200      	movs	r2, #0
 8001410:	4619      	mov	r1, r3
 8001412:	f002 f88f 	bl	8003534 <HAL_GPIO_WritePin>
    for(i = 0; i < 8; ++i) {
 8001416:	7bbb      	ldrb	r3, [r7, #14]
 8001418:	3301      	adds	r3, #1
 800141a:	73bb      	strb	r3, [r7, #14]
 800141c:	7bbb      	ldrb	r3, [r7, #14]
 800141e:	2b07      	cmp	r3, #7
 8001420:	d9bd      	bls.n	800139e <shiftIn+0x16>
    }
    return value;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <is_ready>:

//############################################################################################
bool is_ready(hx711_t *hx711) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_RESET){
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	895b      	ldrh	r3, [r3, #10]
 800143c:	4619      	mov	r1, r3
 800143e:	4610      	mov	r0, r2
 8001440:	f002 f860 	bl	8003504 <HAL_GPIO_ReadPin>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <is_ready+0x22>
		return 1;
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <is_ready+0x24>
	}
	return 0;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <wait_ready>:

//############################################################################################
void wait_ready(hx711_t *hx711) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	// Wait for the chip to become ready.
	while (!is_ready(hx711)) {
 8001460:	e002      	b.n	8001468 <wait_ready+0x10>
		HAL_Delay(0);
 8001462:	2000      	movs	r0, #0
 8001464:	f001 fcda 	bl	8002e1c <HAL_Delay>
	while (!is_ready(hx711)) {
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ffdf 	bl	800142c <is_ready>
 800146e:	4603      	mov	r3, r0
 8001470:	f083 0301 	eor.w	r3, r3, #1
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f3      	bne.n	8001462 <wait_ready+0xa>
	}
}
 800147a:	bf00      	nop
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <read>:

//############################################################################################
long read(hx711_t *hx711, uint8_t channel){
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	70fb      	strb	r3, [r7, #3]
	wait_ready(hx711);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ffe1 	bl	8001458 <wait_ready>
	unsigned long value = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = { 0 };
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	2100      	movs	r1, #0
 80014a0:	460a      	mov	r2, r1
 80014a2:	801a      	strh	r2, [r3, #0]
 80014a4:	460a      	mov	r2, r1
 80014a6:	709a      	strb	r2, [r3, #2]
	uint8_t filler = 0x00;
 80014a8:	2300      	movs	r3, #0
 80014aa:	75fb      	strb	r3, [r7, #23]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ac:	b672      	cpsid	i
}
 80014ae:	bf00      	nop

	noInterrupts();

	data[2] = shiftIn(hx711, 1);
 80014b0:	2101      	movs	r1, #1
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ff68 	bl	8001388 <shiftIn>
 80014b8:	4603      	mov	r3, r0
 80014ba:	72bb      	strb	r3, [r7, #10]
	data[1] = shiftIn(hx711, 1);
 80014bc:	2101      	movs	r1, #1
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ff62 	bl	8001388 <shiftIn>
 80014c4:	4603      	mov	r3, r0
 80014c6:	727b      	strb	r3, [r7, #9]
	data[0] = shiftIn(hx711, 1);
 80014c8:	2101      	movs	r1, #1
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ff5c 	bl	8001388 <shiftIn>
 80014d0:	4603      	mov	r3, r0
 80014d2:	723b      	strb	r3, [r7, #8]

	uint8_t gain = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	75bb      	strb	r3, [r7, #22]
	if(channel == 0) gain = hx711->Again;
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d103      	bne.n	80014e6 <read+0x62>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7d1b      	ldrb	r3, [r3, #20]
 80014e2:	75bb      	strb	r3, [r7, #22]
 80014e4:	e003      	b.n	80014ee <read+0x6a>
	else gain = hx711->Bgain;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ec:	75bb      	strb	r3, [r7, #22]

	for (unsigned int i = 0; i < gain; i++) {
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	e012      	b.n	800151a <read+0x96>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	891b      	ldrh	r3, [r3, #8]
 80014fc:	2201      	movs	r2, #1
 80014fe:	4619      	mov	r1, r3
 8001500:	f002 f818 	bl	8003534 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	891b      	ldrh	r3, [r3, #8]
 800150c:	2200      	movs	r2, #0
 800150e:	4619      	mov	r1, r3
 8001510:	f002 f810 	bl	8003534 <HAL_GPIO_WritePin>
	for (unsigned int i = 0; i < gain; i++) {
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	3301      	adds	r3, #1
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	7dbb      	ldrb	r3, [r7, #22]
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	429a      	cmp	r2, r3
 8001520:	d3e8      	bcc.n	80014f4 <read+0x70>
  __ASM volatile ("cpsie i" : : : "memory");
 8001522:	b662      	cpsie	i
}
 8001524:	bf00      	nop
	}

	interrupts();

	// Replicate the most significant bit to pad out a 32-bit signed integer
	if (data[2] & 0x80) {
 8001526:	7abb      	ldrb	r3, [r7, #10]
 8001528:	b25b      	sxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	da02      	bge.n	8001534 <read+0xb0>
		filler = 0xFF;
 800152e:	23ff      	movs	r3, #255	@ 0xff
 8001530:	75fb      	strb	r3, [r7, #23]
 8001532:	e001      	b.n	8001538 <read+0xb4>
	} else {
		filler = 0x00;
 8001534:	2300      	movs	r3, #0
 8001536:	75fb      	strb	r3, [r7, #23]
	}

	// Construct a 32-bit signed integer
	value = ( (unsigned long)(filler) << 24
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	061a      	lsls	r2, r3, #24
			| (unsigned long)(data[2]) << 16
 800153c:	7abb      	ldrb	r3, [r7, #10]
 800153e:	041b      	lsls	r3, r3, #16
 8001540:	431a      	orrs	r2, r3
			| (unsigned long)(data[1]) << 8
 8001542:	7a7b      	ldrb	r3, [r7, #9]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	4313      	orrs	r3, r2
			| (unsigned long)(data[0]) );
 8001548:	7a3a      	ldrb	r2, [r7, #8]
	value = ( (unsigned long)(filler) << 24
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]

	return (long)(value);
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <read_average>:

//############################################################################################
long read_average(hx711_t *hx711, int8_t times, uint8_t channel) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	70fb      	strb	r3, [r7, #3]
 8001564:	4613      	mov	r3, r2
 8001566:	70bb      	strb	r3, [r7, #2]
	long sum = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
	for (int8_t i = 0; i < times; i++) {
 800156c:	2300      	movs	r3, #0
 800156e:	72fb      	strb	r3, [r7, #11]
 8001570:	e011      	b.n	8001596 <read_average+0x3e>
		sum += read(hx711, channel);
 8001572:	78bb      	ldrb	r3, [r7, #2]
 8001574:	4619      	mov	r1, r3
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ff84 	bl	8001484 <read>
 800157c:	4602      	mov	r2, r0
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4413      	add	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]
		HAL_Delay(0);
 8001584:	2000      	movs	r0, #0
 8001586:	f001 fc49 	bl	8002e1c <HAL_Delay>
	for (int8_t i = 0; i < times; i++) {
 800158a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	3301      	adds	r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	72fb      	strb	r3, [r7, #11]
 8001596:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800159a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dbe7      	blt.n	8001572 <read_average+0x1a>
	}
	return sum / times;
 80015a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <get_value>:

//############################################################################################
double get_value(hx711_t *hx711, int8_t times, uint8_t channel) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	70fb      	strb	r3, [r7, #3]
 80015c0:	4613      	mov	r3, r2
 80015c2:	70bb      	strb	r3, [r7, #2]
	long offset = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) offset = hx711->Aoffset;
 80015c8:	78bb      	ldrb	r3, [r7, #2]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d103      	bne.n	80015d6 <get_value+0x22>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	e002      	b.n	80015dc <get_value+0x28>
	else offset = hx711->Boffset;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	60fb      	str	r3, [r7, #12]
	return read_average(hx711, times, channel) - offset;
 80015dc:	78ba      	ldrb	r2, [r7, #2]
 80015de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015e2:	4619      	mov	r1, r3
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ffb7 	bl	8001558 <read_average>
 80015ea:	4602      	mov	r2, r0
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ffa7 	bl	8000544 <__aeabi_i2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	ec43 2b17 	vmov	d7, r2, r3
}
 80015fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001602:	eef0 0a67 	vmov.f32	s1, s15
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <tare>:

//############################################################################################
void tare(hx711_t *hx711, uint8_t times, uint8_t channel) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	70fb      	strb	r3, [r7, #3]
 8001618:	4613      	mov	r3, r2
 800161a:	70bb      	strb	r3, [r7, #2]
	read(hx711, channel); // Change channel
 800161c:	78bb      	ldrb	r3, [r7, #2]
 800161e:	4619      	mov	r1, r3
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff2f 	bl	8001484 <read>
	double sum = read_average(hx711, times, channel);
 8001626:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800162a:	78ba      	ldrb	r2, [r7, #2]
 800162c:	4619      	mov	r1, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ff92 	bl	8001558 <read_average>
 8001634:	4603      	mov	r3, r0
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff84 	bl	8000544 <__aeabi_i2d>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	e9c7 2302 	strd	r2, r3, [r7, #8]
	set_offset(hx711, sum, channel);
 8001644:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001648:	f7ff fa96 	bl	8000b78 <__aeabi_d2iz>
 800164c:	4601      	mov	r1, r0
 800164e:	78bb      	ldrb	r3, [r7, #2]
 8001650:	461a      	mov	r2, r3
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff fe81 	bl	800135a <set_offset>
}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <tare_all>:

//############################################################################################
void tare_all(hx711_t *hx711, uint8_t times) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
	tare(hx711, times, CHANNEL_A);
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	2200      	movs	r2, #0
 8001670:	4619      	mov	r1, r3
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ffca 	bl	800160c <tare>
	tare(hx711, times, CHANNEL_B);
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	2201      	movs	r2, #1
 800167c:	4619      	mov	r1, r3
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffc4 	bl	800160c <tare>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <get_weight>:

//############################################################################################
float get_weight(hx711_t *hx711, int8_t times, uint8_t channel) {
 800168c:	b5b0      	push	{r4, r5, r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	70fb      	strb	r3, [r7, #3]
 8001698:	4613      	mov	r3, r2
 800169a:	70bb      	strb	r3, [r7, #2]
  // Read load cell
	read(hx711, channel);
 800169c:	78bb      	ldrb	r3, [r7, #2]
 800169e:	4619      	mov	r1, r3
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff feef 	bl	8001484 <read>
	float scale = 0;
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) scale = hx711->Ascale;
 80016ac:	78bb      	ldrb	r3, [r7, #2]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d103      	bne.n	80016ba <get_weight+0x2e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	e002      	b.n	80016c0 <get_weight+0x34>
	else scale = hx711->Bscale;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	60fb      	str	r3, [r7, #12]
	return get_value(hx711, times, channel) / scale;
 80016c0:	78ba      	ldrb	r2, [r7, #2]
 80016c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff73 	bl	80015b4 <get_value>
 80016ce:	ec55 4b10 	vmov	r4, r5, d0
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f7fe ff48 	bl	8000568 <__aeabi_f2d>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4620      	mov	r0, r4
 80016de:	4629      	mov	r1, r5
 80016e0:	f7ff f8c4 	bl	800086c <__aeabi_ddiv>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff fa8c 	bl	8000c08 <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	ee07 3a90 	vmov	s15, r3
}
 80016f6:	eeb0 0a67 	vmov.f32	s0, s15
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bdb0      	pop	{r4, r5, r7, pc}

08001700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001706:	f001 fb17 	bl	8002d38 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800170a:	f000 f881 	bl	8001810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800170e:	f000 f985 	bl	8001a1c <MX_GPIO_Init>
  MX_SPI4_Init();
 8001712:	f000 f8ed 	bl	80018f0 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8001716:	f000 f957 	bl	80019c8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800171a:	f000 f91f 	bl	800195c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //led 7 segment
  HAL_TIM_Base_Start_IT(&htim6);
 800171e:	4836      	ldr	r0, [pc, #216]	@ (80017f8 <main+0xf8>)
 8001720:	f003 fa3a 	bl	8004b98 <HAL_TIM_Base_Start_IT>

  // Initialize scale system
  scale_init();
 8001724:	f000 fbee 	bl	8001f04 <scale_init>

  //RFID
  TM_MFRC522_Init();
 8001728:	f001 f818 	bl	800275c <TM_MFRC522_Init>
  scale_send_uart_data("Smart Scale System Initialized\r\n");
 800172c:	4833      	ldr	r0, [pc, #204]	@ (80017fc <main+0xfc>)
 800172e:	f000 fdd1 	bl	80022d4 <scale_send_uart_data>

  HAL_UART_Receive_IT(&huart1, &uart_rx_data, 1);
 8001732:	2201      	movs	r2, #1
 8001734:	4932      	ldr	r1, [pc, #200]	@ (8001800 <main+0x100>)
 8001736:	4833      	ldr	r0, [pc, #204]	@ (8001804 <main+0x104>)
 8001738:	f003 fdc7 	bl	80052ca <HAL_UART_Receive_IT>

  HAL_Delay(1000);
 800173c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001740:	f001 fb6c 	bl	8002e1c <HAL_Delay>
  scale_state.system_ready = 1;
 8001744:	4b30      	ldr	r3, [pc, #192]	@ (8001808 <main+0x108>)
 8001746:	2201      	movs	r2, #1
 8001748:	725a      	strb	r2, [r3, #9]
  scale_state.last_measurement_time = HAL_GetTick();
 800174a:	f001 fb5b 	bl	8002e04 <HAL_GetTick>
 800174e:	4603      	mov	r3, r0
 8001750:	4a2d      	ldr	r2, [pc, #180]	@ (8001808 <main+0x108>)
 8001752:	60d3      	str	r3, [r2, #12]
  scale_state.last_display_time = HAL_GetTick();
 8001754:	f001 fb56 	bl	8002e04 <HAL_GetTick>
 8001758:	4603      	mov	r3, r0
 800175a:	4a2b      	ldr	r2, [pc, #172]	@ (8001808 <main+0x108>)
 800175c:	6113      	str	r3, [r2, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (uart_command_ready) {
 800175e:	4b2b      	ldr	r3, [pc, #172]	@ (800180c <main+0x10c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <main+0x6c>
		   process_uart_command();
 8001768:	f000 fab4 	bl	8001cd4 <process_uart_command>
		   // Cờ uart_command_ready sẽ được reset bên trong process_uart_command()
	   }

	  uint32_t current_time = HAL_GetTick();
 800176c:	f001 fb4a 	bl	8002e04 <HAL_GetTick>
 8001770:	60f8      	str	r0, [r7, #12]


	  // Periodic weight measurement
	  if (current_time - scale_state.last_measurement_time >= MEASUREMENT_INTERVAL) {
 8001772:	4b25      	ldr	r3, [pc, #148]	@ (8001808 <main+0x108>)
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b63      	cmp	r3, #99	@ 0x63
 800177c:	d938      	bls.n	80017f0 <main+0xf0>
		  scale_state.last_measurement_time = current_time;
 800177e:	4a22      	ldr	r2, [pc, #136]	@ (8001808 <main+0x108>)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	60d3      	str	r3, [r2, #12]
		  // Read and filter weight
		  float raw_weight = scale_read_weight();
 8001784:	f000 fc42 	bl	800200c <scale_read_weight>
 8001788:	ed87 0a02 	vstr	s0, [r7, #8]
		  float filtered_weight = scale_filter_weight(raw_weight);
 800178c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001790:	f000 fc74 	bl	800207c <scale_filter_weight>
 8001794:	ed87 0a01 	vstr	s0, [r7, #4]
		  scale_state.current_weight = filtered_weight;
 8001798:	4a1b      	ldr	r2, [pc, #108]	@ (8001808 <main+0x108>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6013      	str	r3, [r2, #0]

		  // Check weight stability
		  if (scale_is_weight_stable(filtered_weight)) {
 800179e:	ed97 0a01 	vldr	s0, [r7, #4]
 80017a2:	f000 fca1 	bl	80020e8 <scale_is_weight_stable>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00a      	beq.n	80017c2 <main+0xc2>
			  // Weight is stable, update display
			  if (current_time - scale_state.last_display_time >= DISPLAY_UPDATE_INTERVAL) {
 80017ac:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <main+0x108>)
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017b8:	d31a      	bcc.n	80017f0 <main+0xf0>
				  scale_state.last_display_time = current_time;
 80017ba:	4a13      	ldr	r2, [pc, #76]	@ (8001808 <main+0x108>)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6113      	str	r3, [r2, #16]
 80017c0:	e016      	b.n	80017f0 <main+0xf0>
//				  scale_display_weight(scale_state.current_weight);
//				  scale_process_rfid(scale_state.current_weight);
			  }
		  } else {
			  // Weight is not stable, but still update display more frequently for debugging
			  if (current_time - scale_state.last_display_time >= (DISPLAY_UPDATE_INTERVAL / 2)) {
 80017c2:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <main+0x108>)
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2bf9      	cmp	r3, #249	@ 0xf9
 80017cc:	d910      	bls.n	80017f0 <main+0xf0>
				  scale_state.last_display_time = current_time;
 80017ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001808 <main+0x108>)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6113      	str	r3, [r2, #16]
				  scale_display_weight(scale_state.current_weight);
 80017d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <main+0x108>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	eeb0 0a67 	vmov.f32	s0, s15
 80017de:	f000 fcbf 	bl	8002160 <scale_display_weight>
				  scale_process_rfid(scale_state.current_weight);
 80017e2:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <main+0x108>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	eeb0 0a67 	vmov.f32	s0, s15
 80017ec:	f000 fcfa 	bl	80021e4 <scale_process_rfid>
			  }
		  }
	  }
	  // Small delay to prevent excessive CPU usage
	  HAL_Delay(10);
 80017f0:	200a      	movs	r0, #10
 80017f2:	f001 fb13 	bl	8002e1c <HAL_Delay>
  {
 80017f6:	e7b2      	b.n	800175e <main+0x5e>
 80017f8:	20000260 	.word	0x20000260
 80017fc:	0800a970 	.word	0x0800a970
 8001800:	200008a0 	.word	0x200008a0
 8001804:	200002a8 	.word	0x200002a8
 8001808:	200002f0 	.word	0x200002f0
 800180c:	200008a2 	.word	0x200008a2

08001810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b094      	sub	sp, #80	@ 0x50
 8001814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001816:	f107 0320 	add.w	r3, r7, #32
 800181a:	2230      	movs	r2, #48	@ 0x30
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f005 fcbc 	bl	800719c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	4b2b      	ldr	r3, [pc, #172]	@ (80018e8 <SystemClock_Config+0xd8>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183c:	4a2a      	ldr	r2, [pc, #168]	@ (80018e8 <SystemClock_Config+0xd8>)
 800183e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001842:	6413      	str	r3, [r2, #64]	@ 0x40
 8001844:	4b28      	ldr	r3, [pc, #160]	@ (80018e8 <SystemClock_Config+0xd8>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001850:	2300      	movs	r3, #0
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <SystemClock_Config+0xdc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a24      	ldr	r2, [pc, #144]	@ (80018ec <SystemClock_Config+0xdc>)
 800185a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <SystemClock_Config+0xdc>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800186c:	2301      	movs	r3, #1
 800186e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001870:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001876:	2302      	movs	r3, #2
 8001878:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800187a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800187e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001880:	2304      	movs	r3, #4
 8001882:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001884:	23b4      	movs	r3, #180	@ 0xb4
 8001886:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001888:	2302      	movs	r3, #2
 800188a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800188c:	2304      	movs	r3, #4
 800188e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001890:	f107 0320 	add.w	r3, r7, #32
 8001894:	4618      	mov	r0, r3
 8001896:	f001 feb7 	bl	8003608 <HAL_RCC_OscConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018a0:	f000 fd40 	bl	8002324 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018a4:	f001 fe60 	bl	8003568 <HAL_PWREx_EnableOverDrive>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80018ae:	f000 fd39 	bl	8002324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b2:	230f      	movs	r3, #15
 80018b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b6:	2302      	movs	r3, #2
 80018b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80018c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018ca:	f107 030c 	add.w	r3, r7, #12
 80018ce:	2105      	movs	r1, #5
 80018d0:	4618      	mov	r0, r3
 80018d2:	f002 f911 	bl	8003af8 <HAL_RCC_ClockConfig>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80018dc:	f000 fd22 	bl	8002324 <Error_Handler>
  }
}
 80018e0:	bf00      	nop
 80018e2:	3750      	adds	r7, #80	@ 0x50
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40007000 	.word	0x40007000

080018f0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80018f4:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <MX_SPI4_Init+0x64>)
 80018f6:	4a18      	ldr	r2, [pc, #96]	@ (8001958 <MX_SPI4_Init+0x68>)
 80018f8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80018fa:	4b16      	ldr	r3, [pc, #88]	@ (8001954 <MX_SPI4_Init+0x64>)
 80018fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001900:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001902:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <MX_SPI4_Init+0x64>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001908:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <MX_SPI4_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800190e:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <MX_SPI4_Init+0x64>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001914:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <MX_SPI4_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800191a:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <MX_SPI4_Init+0x64>)
 800191c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001920:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001922:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <MX_SPI4_Init+0x64>)
 8001924:	2218      	movs	r2, #24
 8001926:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001928:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <MX_SPI4_Init+0x64>)
 800192a:	2200      	movs	r2, #0
 800192c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800192e:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <MX_SPI4_Init+0x64>)
 8001930:	2200      	movs	r2, #0
 8001932:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001934:	4b07      	ldr	r3, [pc, #28]	@ (8001954 <MX_SPI4_Init+0x64>)
 8001936:	2200      	movs	r2, #0
 8001938:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 800193a:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <MX_SPI4_Init+0x64>)
 800193c:	220a      	movs	r2, #10
 800193e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001940:	4804      	ldr	r0, [pc, #16]	@ (8001954 <MX_SPI4_Init+0x64>)
 8001942:	f002 faf9 	bl	8003f38 <HAL_SPI_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 800194c:	f000 fcea 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000208 	.word	0x20000208
 8001958:	40013400 	.word	0x40013400

0800195c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001962:	463b      	mov	r3, r7
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800196a:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <MX_TIM6_Init+0x64>)
 800196c:	4a15      	ldr	r2, [pc, #84]	@ (80019c4 <MX_TIM6_Init+0x68>)
 800196e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001970:	4b13      	ldr	r3, [pc, #76]	@ (80019c0 <MX_TIM6_Init+0x64>)
 8001972:	2200      	movs	r2, #0
 8001974:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001976:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <MX_TIM6_Init+0x64>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800197c:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <MX_TIM6_Init+0x64>)
 800197e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001982:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001984:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <MX_TIM6_Init+0x64>)
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800198a:	480d      	ldr	r0, [pc, #52]	@ (80019c0 <MX_TIM6_Init+0x64>)
 800198c:	f003 f8b4 	bl	8004af8 <HAL_TIM_Base_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001996:	f000 fcc5 	bl	8002324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019a2:	463b      	mov	r3, r7
 80019a4:	4619      	mov	r1, r3
 80019a6:	4806      	ldr	r0, [pc, #24]	@ (80019c0 <MX_TIM6_Init+0x64>)
 80019a8:	f003 fb24 	bl	8004ff4 <HAL_TIMEx_MasterConfigSynchronization>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80019b2:	f000 fcb7 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000260 	.word	0x20000260
 80019c4:	40001000 	.word	0x40001000

080019c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <MX_USART1_UART_Init+0x4c>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	@ (8001a18 <MX_USART1_UART_Init+0x50>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019d2:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <MX_USART1_UART_Init+0x4c>)
 80019d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <MX_USART1_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <MX_USART1_UART_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <MX_USART1_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <MX_USART1_UART_Init+0x4c>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <MX_USART1_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <MX_USART1_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	@ (8001a14 <MX_USART1_UART_Init+0x4c>)
 8001a00:	f003 fb88 	bl	8005114 <HAL_UART_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a0a:	f000 fc8b 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200002a8 	.word	0x200002a8
 8001a18:	40011000 	.word	0x40011000

08001a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	@ 0x28
 8001a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	4b43      	ldr	r3, [pc, #268]	@ (8001b44 <MX_GPIO_Init+0x128>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4a42      	ldr	r2, [pc, #264]	@ (8001b44 <MX_GPIO_Init+0x128>)
 8001a3c:	f043 0310 	orr.w	r3, r3, #16
 8001a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a42:	4b40      	ldr	r3, [pc, #256]	@ (8001b44 <MX_GPIO_Init+0x128>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b3c      	ldr	r3, [pc, #240]	@ (8001b44 <MX_GPIO_Init+0x128>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	4a3b      	ldr	r2, [pc, #236]	@ (8001b44 <MX_GPIO_Init+0x128>)
 8001a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5e:	4b39      	ldr	r3, [pc, #228]	@ (8001b44 <MX_GPIO_Init+0x128>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	4b35      	ldr	r3, [pc, #212]	@ (8001b44 <MX_GPIO_Init+0x128>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a34      	ldr	r2, [pc, #208]	@ (8001b44 <MX_GPIO_Init+0x128>)
 8001a74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b32      	ldr	r3, [pc, #200]	@ (8001b44 <MX_GPIO_Init+0x128>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b44 <MX_GPIO_Init+0x128>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001b44 <MX_GPIO_Init+0x128>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b2b      	ldr	r3, [pc, #172]	@ (8001b44 <MX_GPIO_Init+0x128>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f64f 7110 	movw	r1, #65296	@ 0xff10
 8001aa8:	4827      	ldr	r0, [pc, #156]	@ (8001b48 <MX_GPIO_Init+0x12c>)
 8001aaa:	f001 fd43 	bl	8003534 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f246 010c 	movw	r1, #24588	@ 0x600c
 8001ab4:	4825      	ldr	r0, [pc, #148]	@ (8001b4c <MX_GPIO_Init+0x130>)
 8001ab6:	f001 fd3d 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ac0:	4823      	ldr	r0, [pc, #140]	@ (8001b50 <MX_GPIO_Init+0x134>)
 8001ac2:	f001 fd37 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001ac6:	f64f 7310 	movw	r3, #65296	@ 0xff10
 8001aca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	4619      	mov	r1, r3
 8001ade:	481a      	ldr	r0, [pc, #104]	@ (8001b48 <MX_GPIO_Init+0x12c>)
 8001ae0:	f001 fb64 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_14;
 8001ae4:	f246 030c 	movw	r3, #24588	@ 0x600c
 8001ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	4813      	ldr	r0, [pc, #76]	@ (8001b4c <MX_GPIO_Init+0x130>)
 8001afe:	f001 fb55 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	480e      	ldr	r0, [pc, #56]	@ (8001b50 <MX_GPIO_Init+0x134>)
 8001b18:	f001 fb48 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4619      	mov	r1, r3
 8001b34:	4806      	ldr	r0, [pc, #24]	@ (8001b50 <MX_GPIO_Init+0x134>)
 8001b36:	f001 fb39 	bl	80031ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b3a:	bf00      	nop
 8001b3c:	3728      	adds	r7, #40	@ 0x28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40021800 	.word	0x40021800
 8001b50:	40020000 	.word	0x40020000

08001b54 <find_or_register_card>:

/* USER CODE BEGIN 4 */

CardData* find_or_register_card(uint8_t* card_uid) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
    // 1. Tìm thẻ đã tồn tại
    for (int i = 0; i < registered_card_count; i++) {
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	e019      	b.n	8001b96 <find_or_register_card+0x42>
        if (memcmp(card_database[i].uid, card_uid, 5) == 0) {
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	4613      	mov	r3, r2
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	1a9b      	subs	r3, r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4a24      	ldr	r2, [pc, #144]	@ (8001c00 <find_or_register_card+0xac>)
 8001b6e:	4413      	add	r3, r2
 8001b70:	2205      	movs	r2, #5
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f005 fb01 	bl	800717c <memcmp>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d107      	bne.n	8001b90 <find_or_register_card+0x3c>
            return &card_database[i];
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4613      	mov	r3, r2
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	1a9b      	subs	r3, r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001c00 <find_or_register_card+0xac>)
 8001b8c:	4413      	add	r3, r2
 8001b8e:	e032      	b.n	8001bf6 <find_or_register_card+0xa2>
    for (int i = 0; i < registered_card_count; i++) {
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3301      	adds	r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <find_or_register_card+0xb0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	dbe0      	blt.n	8001b62 <find_or_register_card+0xe>
        }
    }

    // 2. Nếu không tìm thấy, đăng ký thẻ mới nếu còn chỗ
    if (registered_card_count < MAX_REGISTERED_CARDS) {
 8001ba0:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <find_or_register_card+0xb0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b13      	cmp	r3, #19
 8001ba6:	dc22      	bgt.n	8001bee <find_or_register_card+0x9a>
        CardData* new_card = &card_database[registered_card_count];
 8001ba8:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <find_or_register_card+0xb0>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4613      	mov	r3, r2
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	1a9b      	subs	r3, r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4a12      	ldr	r2, [pc, #72]	@ (8001c00 <find_or_register_card+0xac>)
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60bb      	str	r3, [r7, #8]
        memcpy(new_card->uid, card_uid, 5);
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2205      	movs	r2, #5
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f005 fb6a 	bl	800729a <memcpy>
        // Khởi tạo lịch sử cân nặng
        memset(&new_card->weight_data, 0, sizeof(WeightHistory));
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	3308      	adds	r3, #8
 8001bca:	2234      	movs	r2, #52	@ 0x34
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f005 fae4 	bl	800719c <memset>
        registered_card_count++;
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <find_or_register_card+0xb0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <find_or_register_card+0xb0>)
 8001bdc:	6013      	str	r3, [r2, #0]
        scale_send_uart_data("New card registered. Total: %d\r\n", registered_card_count);
 8001bde:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <find_or_register_card+0xb0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4619      	mov	r1, r3
 8001be4:	4808      	ldr	r0, [pc, #32]	@ (8001c08 <find_or_register_card+0xb4>)
 8001be6:	f000 fb75 	bl	80022d4 <scale_send_uart_data>
        return new_card;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	e003      	b.n	8001bf6 <find_or_register_card+0xa2>
    }

    // 3. Database đầy
    scale_send_uart_data("ERROR: Card database is full. Cannot register new card.\r\n");
 8001bee:	4807      	ldr	r0, [pc, #28]	@ (8001c0c <find_or_register_card+0xb8>)
 8001bf0:	f000 fb70 	bl	80022d4 <scale_send_uart_data>
    return NULL;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200003ac 	.word	0x200003ac
 8001c04:	2000085c 	.word	0x2000085c
 8001c08:	0800a994 	.word	0x0800a994
 8001c0c:	0800a9b8 	.word	0x0800a9b8

08001c10 <push_weight_to_history>:

void push_weight_to_history(WeightHistory* history, float weight) {
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	ed87 0a00 	vstr	s0, [r7]
    history->history[history->head] = weight;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	601a      	str	r2, [r3, #0]
    history->head = (history->head + 1) % MAX_WEIGHT_HISTORY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2e:	1c59      	adds	r1, r3, #1
 8001c30:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <push_weight_to_history+0x58>)
 8001c32:	fb83 2301 	smull	r2, r3, r3, r1
 8001c36:	109a      	asrs	r2, r3, #2
 8001c38:	17cb      	asrs	r3, r1, #31
 8001c3a:	1ad2      	subs	r2, r2, r3
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	1aca      	subs	r2, r1, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	629a      	str	r2, [r3, #40]	@ 0x28
    if (history->count < MAX_WEIGHT_HISTORY) {
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4e:	2b09      	cmp	r3, #9
 8001c50:	dc04      	bgt.n	8001c5c <push_weight_to_history+0x4c>
        history->count++;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	66666667 	.word	0x66666667

08001c6c <are_all_weights_stable>:

uint8_t are_all_weights_stable(WeightHistory* history) {
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    if (history->count < MAX_WEIGHT_HISTORY) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c78:	2b09      	cmp	r3, #9
 8001c7a:	dc01      	bgt.n	8001c80 <are_all_weights_stable+0x14>
        return 0; // Chưa đủ 10 giá trị
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	e021      	b.n	8001cc4 <are_all_weights_stable+0x58>
    }

    float first_weight = history->history[0];
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60bb      	str	r3, [r7, #8]
    for (int i = 1; i < MAX_WEIGHT_HISTORY; i++) {
 8001c86:	2301      	movs	r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	e017      	b.n	8001cbc <are_all_weights_stable+0x50>
        // Sử dụng một ngưỡng nhỏ để so sánh số thực
        if (fabsf(history->history[i] - first_weight) > WEIGHT_STABILITY_THRESHOLD) {
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	ed93 7a00 	vldr	s14, [r3]
 8001c98:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca0:	eef0 7ae7 	vabs.f32	s15, s15
 8001ca4:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001cd0 <are_all_weights_stable+0x64>
 8001ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb0:	dd01      	ble.n	8001cb6 <are_all_weights_stable+0x4a>
            return 0; // Tìm thấy một giá trị khác biệt
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e006      	b.n	8001cc4 <are_all_weights_stable+0x58>
    for (int i = 1; i < MAX_WEIGHT_HISTORY; i++) {
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b09      	cmp	r3, #9
 8001cc0:	dde4      	ble.n	8001c8c <are_all_weights_stable+0x20>
        }
    }

    return 1; // Tất cả 10 giá trị đều giống nhau
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	3c23d70a 	.word	0x3c23d70a

08001cd4 <process_uart_command>:

void process_uart_command(void) {
 8001cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cd8:	b08b      	sub	sp, #44	@ 0x2c
 8001cda:	af06      	add	r7, sp, #24
    if (strlen((char*)uart_rx_buffer) > 0) {
 8001cdc:	4b3f      	ldr	r3, [pc, #252]	@ (8001ddc <process_uart_command+0x108>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d066      	beq.n	8001db2 <process_uart_command+0xde>
        scale_send_uart_data("\r\n--- Registered Card List ---\r\n");
 8001ce4:	483e      	ldr	r0, [pc, #248]	@ (8001de0 <process_uart_command+0x10c>)
 8001ce6:	f000 faf5 	bl	80022d4 <scale_send_uart_data>
        if (registered_card_count == 0) {
 8001cea:	4b3e      	ldr	r3, [pc, #248]	@ (8001de4 <process_uart_command+0x110>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d103      	bne.n	8001cfa <process_uart_command+0x26>
            scale_send_uart_data("No cards registered yet.\r\n");
 8001cf2:	483d      	ldr	r0, [pc, #244]	@ (8001de8 <process_uart_command+0x114>)
 8001cf4:	f000 faee 	bl	80022d4 <scale_send_uart_data>
 8001cf8:	e057      	b.n	8001daa <process_uart_command+0xd6>
        } else {
            for (int i = 0; i < registered_card_count; i++) {
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	e04f      	b.n	8001da0 <process_uart_command+0xcc>
                scale_send_uart_data("Card %d | UID: %02X%02X%02X%02X%02X | Saved Weight: %.3f kg\r\n",
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1c5c      	adds	r4, r3, #1
                                     i + 1,
                                     card_database[i].uid[0],
 8001d04:	4939      	ldr	r1, [pc, #228]	@ (8001dec <process_uart_command+0x118>)
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	781b      	ldrb	r3, [r3, #0]
                scale_send_uart_data("Card %d | UID: %02X%02X%02X%02X%02X | Saved Weight: %.3f kg\r\n",
 8001d14:	4698      	mov	r8, r3
                                     card_database[i].uid[1],
 8001d16:	4935      	ldr	r1, [pc, #212]	@ (8001dec <process_uart_command+0x118>)
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	1a9b      	subs	r3, r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	3301      	adds	r3, #1
 8001d26:	781b      	ldrb	r3, [r3, #0]
                scale_send_uart_data("Card %d | UID: %02X%02X%02X%02X%02X | Saved Weight: %.3f kg\r\n",
 8001d28:	4699      	mov	r9, r3
                                     card_database[i].uid[2],
 8001d2a:	4930      	ldr	r1, [pc, #192]	@ (8001dec <process_uart_command+0x118>)
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	3302      	adds	r3, #2
 8001d3a:	781b      	ldrb	r3, [r3, #0]
                scale_send_uart_data("Card %d | UID: %02X%02X%02X%02X%02X | Saved Weight: %.3f kg\r\n",
 8001d3c:	461d      	mov	r5, r3
                                     card_database[i].uid[3],
 8001d3e:	492b      	ldr	r1, [pc, #172]	@ (8001dec <process_uart_command+0x118>)
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4613      	mov	r3, r2
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	1a9b      	subs	r3, r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3303      	adds	r3, #3
 8001d4e:	781b      	ldrb	r3, [r3, #0]
                scale_send_uart_data("Card %d | UID: %02X%02X%02X%02X%02X | Saved Weight: %.3f kg\r\n",
 8001d50:	461e      	mov	r6, r3
                                     card_database[i].uid[4],
 8001d52:	4926      	ldr	r1, [pc, #152]	@ (8001dec <process_uart_command+0x118>)
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	4613      	mov	r3, r2
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	3304      	adds	r3, #4
 8001d62:	781b      	ldrb	r3, [r3, #0]
                scale_send_uart_data("Card %d | UID: %02X%02X%02X%02X%02X | Saved Weight: %.3f kg\r\n",
 8001d64:	607b      	str	r3, [r7, #4]
                                     card_database[i].weight_data.saved_weight);
 8001d66:	4921      	ldr	r1, [pc, #132]	@ (8001dec <process_uart_command+0x118>)
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	3338      	adds	r3, #56	@ 0x38
 8001d76:	681b      	ldr	r3, [r3, #0]
                scale_send_uart_data("Card %d | UID: %02X%02X%02X%02X%02X | Saved Weight: %.3f kg\r\n",
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fbf5 	bl	8000568 <__aeabi_f2d>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	9302      	str	r3, [sp, #8]
 8001d8a:	9601      	str	r6, [sp, #4]
 8001d8c:	9500      	str	r5, [sp, #0]
 8001d8e:	464b      	mov	r3, r9
 8001d90:	4642      	mov	r2, r8
 8001d92:	4621      	mov	r1, r4
 8001d94:	4816      	ldr	r0, [pc, #88]	@ (8001df0 <process_uart_command+0x11c>)
 8001d96:	f000 fa9d 	bl	80022d4 <scale_send_uart_data>
            for (int i = 0; i < registered_card_count; i++) {
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <process_uart_command+0x110>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	dbaa      	blt.n	8001d00 <process_uart_command+0x2c>
            }
        }
        scale_send_uart_data("----------------------------\r\n");
 8001daa:	4812      	ldr	r0, [pc, #72]	@ (8001df4 <process_uart_command+0x120>)
 8001dac:	f000 fa92 	bl	80022d4 <scale_send_uart_data>
 8001db0:	e003      	b.n	8001dba <process_uart_command+0xe6>
    } else {
        scale_send_uart_data("Unknown command: %s\r\n", uart_rx_buffer);
 8001db2:	490a      	ldr	r1, [pc, #40]	@ (8001ddc <process_uart_command+0x108>)
 8001db4:	4810      	ldr	r0, [pc, #64]	@ (8001df8 <process_uart_command+0x124>)
 8001db6:	f000 fa8d 	bl	80022d4 <scale_send_uart_data>
    }

    // Reset buffer và cờ
    memset(uart_rx_buffer, 0, sizeof(uart_rx_buffer));
 8001dba:	2240      	movs	r2, #64	@ 0x40
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4807      	ldr	r0, [pc, #28]	@ (8001ddc <process_uart_command+0x108>)
 8001dc0:	f005 f9ec 	bl	800719c <memset>
    uart_rx_index = 0;
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <process_uart_command+0x128>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
    uart_command_ready = 0;
 8001dca:	4b0d      	ldr	r3, [pc, #52]	@ (8001e00 <process_uart_command+0x12c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000860 	.word	0x20000860
 8001de0:	0800a9f4 	.word	0x0800a9f4
 8001de4:	2000085c 	.word	0x2000085c
 8001de8:	0800aa18 	.word	0x0800aa18
 8001dec:	200003ac 	.word	0x200003ac
 8001df0:	0800aa34 	.word	0x0800aa34
 8001df4:	0800aa74 	.word	0x0800aa74
 8001df8:	0800aa94 	.word	0x0800aa94
 8001dfc:	200008a1 	.word	0x200008a1
 8001e00:	200008a2 	.word	0x200008a2

08001e04 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a19      	ldr	r2, [pc, #100]	@ (8001e78 <HAL_UART_RxCpltCallback+0x74>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d12c      	bne.n	8001e70 <HAL_UART_RxCpltCallback+0x6c>
        if (uart_rx_data == '\n' || uart_rx_data == '\r' || uart_rx_index >= sizeof(uart_rx_buffer) - 1) {
 8001e16:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <HAL_UART_RxCpltCallback+0x78>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b0a      	cmp	r3, #10
 8001e1c:	d007      	beq.n	8001e2e <HAL_UART_RxCpltCallback+0x2a>
 8001e1e:	4b17      	ldr	r3, [pc, #92]	@ (8001e7c <HAL_UART_RxCpltCallback+0x78>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b0d      	cmp	r3, #13
 8001e24:	d003      	beq.n	8001e2e <HAL_UART_RxCpltCallback+0x2a>
 8001e26:	4b16      	ldr	r3, [pc, #88]	@ (8001e80 <HAL_UART_RxCpltCallback+0x7c>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b3e      	cmp	r3, #62	@ 0x3e
 8001e2c:	d910      	bls.n	8001e50 <HAL_UART_RxCpltCallback+0x4c>
            uart_rx_buffer[uart_rx_index] = '\0'; // Kết thúc chuỗi
 8001e2e:	4b14      	ldr	r3, [pc, #80]	@ (8001e80 <HAL_UART_RxCpltCallback+0x7c>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <HAL_UART_RxCpltCallback+0x80>)
 8001e36:	2100      	movs	r1, #0
 8001e38:	5499      	strb	r1, [r3, r2]
            if (uart_rx_index > 0) {
 8001e3a:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <HAL_UART_RxCpltCallback+0x7c>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <HAL_UART_RxCpltCallback+0x44>
                uart_command_ready = 1; // Báo hiệu có lệnh cần xử lý
 8001e42:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <HAL_UART_RxCpltCallback+0x84>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
            }
            uart_rx_index = 0;
 8001e48:	4b0d      	ldr	r3, [pc, #52]	@ (8001e80 <HAL_UART_RxCpltCallback+0x7c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	e00a      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x62>
        } else {
            uart_rx_buffer[uart_rx_index++] = uart_rx_data;
 8001e50:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <HAL_UART_RxCpltCallback+0x7c>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	b2d1      	uxtb	r1, r2
 8001e58:	4a09      	ldr	r2, [pc, #36]	@ (8001e80 <HAL_UART_RxCpltCallback+0x7c>)
 8001e5a:	7011      	strb	r1, [r2, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <HAL_UART_RxCpltCallback+0x78>)
 8001e60:	7819      	ldrb	r1, [r3, #0]
 8001e62:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <HAL_UART_RxCpltCallback+0x80>)
 8001e64:	5499      	strb	r1, [r3, r2]
        }
        // Kích hoạt lại ngắt nhận UART cho byte tiếp theo
        HAL_UART_Receive_IT(&huart1, &uart_rx_data, 1);
 8001e66:	2201      	movs	r2, #1
 8001e68:	4904      	ldr	r1, [pc, #16]	@ (8001e7c <HAL_UART_RxCpltCallback+0x78>)
 8001e6a:	4808      	ldr	r0, [pc, #32]	@ (8001e8c <HAL_UART_RxCpltCallback+0x88>)
 8001e6c:	f003 fa2d 	bl	80052ca <HAL_UART_Receive_IT>
    }
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40011000 	.word	0x40011000
 8001e7c:	200008a0 	.word	0x200008a0
 8001e80:	200008a1 	.word	0x200008a1
 8001e84:	20000860 	.word	0x20000860
 8001e88:	200008a2 	.word	0x200008a2
 8001e8c:	200002a8 	.word	0x200002a8

08001e90 <save_weight_to_rfid_card>:

void save_weight_to_rfid_card(uint8_t* card_uid, float weight) {
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	ed87 0a00 	vstr	s0, [r7]
    // 3. Chuẩn bị dữ liệu (chuyển float sang mảng byte).
    // 4. Ghi dữ liệu vào block (ví dụ: PCD_Write).
    // 5. Kết thúc giao tiếp.

    // Tạm thời, chúng ta chỉ in ra UART để mô phỏng
    scale_send_uart_data("------ SAVING TO CARD ------\r\n");
 8001e9c:	4815      	ldr	r0, [pc, #84]	@ (8001ef4 <save_weight_to_rfid_card+0x64>)
 8001e9e:	f000 fa19 	bl	80022d4 <scale_send_uart_data>
    scale_send_uart_data("Card UID: %02X%02X%02X%02X%02X\r\n",
                         card_uid[0], card_uid[1], card_uid[2], card_uid[3], card_uid[4]);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
    scale_send_uart_data("Card UID: %02X%02X%02X%02X%02X\r\n",
 8001ea6:	4619      	mov	r1, r3
                         card_uid[0], card_uid[1], card_uid[2], card_uid[3], card_uid[4]);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	781b      	ldrb	r3, [r3, #0]
    scale_send_uart_data("Card UID: %02X%02X%02X%02X%02X\r\n",
 8001eae:	4618      	mov	r0, r3
                         card_uid[0], card_uid[1], card_uid[2], card_uid[3], card_uid[4]);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	781b      	ldrb	r3, [r3, #0]
    scale_send_uart_data("Card UID: %02X%02X%02X%02X%02X\r\n",
 8001eb6:	461c      	mov	r4, r3
                         card_uid[0], card_uid[1], card_uid[2], card_uid[3], card_uid[4]);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3303      	adds	r3, #3
 8001ebc:	781b      	ldrb	r3, [r3, #0]
    scale_send_uart_data("Card UID: %02X%02X%02X%02X%02X\r\n",
 8001ebe:	461a      	mov	r2, r3
                         card_uid[0], card_uid[1], card_uid[2], card_uid[3], card_uid[4]);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	781b      	ldrb	r3, [r3, #0]
    scale_send_uart_data("Card UID: %02X%02X%02X%02X%02X\r\n",
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	9200      	str	r2, [sp, #0]
 8001eca:	4623      	mov	r3, r4
 8001ecc:	4602      	mov	r2, r0
 8001ece:	480a      	ldr	r0, [pc, #40]	@ (8001ef8 <save_weight_to_rfid_card+0x68>)
 8001ed0:	f000 fa00 	bl	80022d4 <scale_send_uart_data>
    scale_send_uart_data("Saving Weight: %.3f kg\r\n", weight);
 8001ed4:	6838      	ldr	r0, [r7, #0]
 8001ed6:	f7fe fb47 	bl	8000568 <__aeabi_f2d>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4807      	ldr	r0, [pc, #28]	@ (8001efc <save_weight_to_rfid_card+0x6c>)
 8001ee0:	f000 f9f8 	bl	80022d4 <scale_send_uart_data>
    scale_send_uart_data("--------------------------\r\n");
 8001ee4:	4806      	ldr	r0, [pc, #24]	@ (8001f00 <save_weight_to_rfid_card+0x70>)
 8001ee6:	f000 f9f5 	bl	80022d4 <scale_send_uart_data>
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd90      	pop	{r4, r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	0800aaac 	.word	0x0800aaac
 8001ef8:	0800aacc 	.word	0x0800aacc
 8001efc:	0800aaf0 	.word	0x0800aaf0
 8001f00:	0800ab0c 	.word	0x0800ab0c

08001f04 <scale_init>:
void scale_init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af02      	add	r7, sp, #8
    scale_send_uart_data("Initializing HX711 load cell...\r\n");
 8001f0a:	482b      	ldr	r0, [pc, #172]	@ (8001fb8 <scale_init+0xb4>)
 8001f0c:	f000 f9e2 	bl	80022d4 <scale_send_uart_data>

    // Initialize HX711
    hx711_init(&hx711, HX711_SCK_PORT, HX711_SCK_PIN, HX711_DT_PORT, HX711_DT_PIN);
 8001f10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	4b29      	ldr	r3, [pc, #164]	@ (8001fbc <scale_init+0xb8>)
 8001f18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f1c:	4927      	ldr	r1, [pc, #156]	@ (8001fbc <scale_init+0xb8>)
 8001f1e:	4828      	ldr	r0, [pc, #160]	@ (8001fc0 <scale_init+0xbc>)
 8001f20:	f7ff f9ac 	bl	800127c <hx711_init>

    set_gain(&hx711, 128, 32);  // Channel A: 128 gain, Channel B: 32 gain
 8001f24:	2220      	movs	r2, #32
 8001f26:	2180      	movs	r1, #128	@ 0x80
 8001f28:	4825      	ldr	r0, [pc, #148]	@ (8001fc0 <scale_init+0xbc>)
 8001f2a:	f7ff f9f7 	bl	800131c <set_gain>

    // Debug: Test if HX711 is responding
	if (is_ready(&hx711)) {
 8001f2e:	4824      	ldr	r0, [pc, #144]	@ (8001fc0 <scale_init+0xbc>)
 8001f30:	f7ff fa7c 	bl	800142c <is_ready>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d01c      	beq.n	8001f74 <scale_init+0x70>
		scale_send_uart_data("HX711 is ready!\r\n");
 8001f3a:	4822      	ldr	r0, [pc, #136]	@ (8001fc4 <scale_init+0xc0>)
 8001f3c:	f000 f9ca 	bl	80022d4 <scale_send_uart_data>

		// Read some raw values for debugging
		for (int i = 0; i < 5; i++) {
 8001f40:	2300      	movs	r3, #0
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	e012      	b.n	8001f6c <scale_init+0x68>
			long raw = get_value(&hx711, 1, CHANNEL_A);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2101      	movs	r1, #1
 8001f4a:	481d      	ldr	r0, [pc, #116]	@ (8001fc0 <scale_init+0xbc>)
 8001f4c:	f7ff fb32 	bl	80015b4 <get_value>
 8001f50:	ec53 2b10 	vmov	r2, r3, d0
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	f7fe fe0e 	bl	8000b78 <__aeabi_d2iz>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	603b      	str	r3, [r7, #0]
			HAL_Delay(100);
 8001f60:	2064      	movs	r0, #100	@ 0x64
 8001f62:	f000 ff5b 	bl	8002e1c <HAL_Delay>
		for (int i = 0; i < 5; i++) {
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	dde9      	ble.n	8001f46 <scale_init+0x42>
 8001f72:	e002      	b.n	8001f7a <scale_init+0x76>
		}
	} else {
		scale_send_uart_data("HX711 is NOT ready!\r\n");
 8001f74:	4814      	ldr	r0, [pc, #80]	@ (8001fc8 <scale_init+0xc4>)
 8001f76:	f000 f9ad 	bl	80022d4 <scale_send_uart_data>
	}

    // Set initial scale factor (you may need to adjust this)
    set_scale(&hx711, SCALE_FACTOR, SCALE_FACTOR);
 8001f7a:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8001fcc <scale_init+0xc8>
 8001f7e:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8001fcc <scale_init+0xc8>
 8001f82:	480f      	ldr	r0, [pc, #60]	@ (8001fc0 <scale_init+0xbc>)
 8001f84:	f7ff f9b6 	bl	80012f4 <set_scale>

    // Perform initial calibration
    scale_calibrate();
 8001f88:	f000 f828 	bl	8001fdc <scale_calibrate>

    // Initialize state variables
    scale_state.current_weight = 0.0f;
 8001f8c:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <scale_init+0xcc>)
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
    scale_state.previous_weight = 0.0f;
 8001f94:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd0 <scale_init+0xcc>)
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	605a      	str	r2, [r3, #4]
    scale_state.weight_stable_count = 0;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <scale_init+0xcc>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	721a      	strb	r2, [r3, #8]
    scale_state.weight_threshold = WEIGHT_STABILITY_THRESHOLD;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd0 <scale_init+0xcc>)
 8001fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd4 <scale_init+0xd0>)
 8001fa6:	615a      	str	r2, [r3, #20]

    scale_send_uart_data("Scale initialization complete\r\n");
 8001fa8:	480b      	ldr	r0, [pc, #44]	@ (8001fd8 <scale_init+0xd4>)
 8001faa:	f000 f993 	bl	80022d4 <scale_send_uart_data>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	0800ab2c 	.word	0x0800ab2c
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	20000308 	.word	0x20000308
 8001fc4:	0800ab50 	.word	0x0800ab50
 8001fc8:	0800ab64 	.word	0x0800ab64
 8001fcc:	472be000 	.word	0x472be000
 8001fd0:	200002f0 	.word	0x200002f0
 8001fd4:	3c23d70a 	.word	0x3c23d70a
 8001fd8:	0800ab7c 	.word	0x0800ab7c

08001fdc <scale_calibrate>:

/**
 * @brief Calibrate the scale (tare)
 */
void scale_calibrate(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
    scale_send_uart_data("Calibrating scale... Please ensure scale is empty\r\n");
 8001fe0:	4807      	ldr	r0, [pc, #28]	@ (8002000 <scale_calibrate+0x24>)
 8001fe2:	f000 f977 	bl	80022d4 <scale_send_uart_data>
    HAL_Delay(2000);  // Give user time to clear scale
 8001fe6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001fea:	f000 ff17 	bl	8002e1c <HAL_Delay>
    tare_all(&hx711, 10);
 8001fee:	210a      	movs	r1, #10
 8001ff0:	4804      	ldr	r0, [pc, #16]	@ (8002004 <scale_calibrate+0x28>)
 8001ff2:	f7ff fb35 	bl	8001660 <tare_all>
    scale_send_uart_data("Scale calibration complete\r\n");
 8001ff6:	4804      	ldr	r0, [pc, #16]	@ (8002008 <scale_calibrate+0x2c>)
 8001ff8:	f000 f96c 	bl	80022d4 <scale_send_uart_data>
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	0800ab9c 	.word	0x0800ab9c
 8002004:	20000308 	.word	0x20000308
 8002008:	0800abd0 	.word	0x0800abd0

0800200c <scale_read_weight>:
/**
 * @brief Read raw weight from HX711
 * @return Raw weight value in kg
 */
float scale_read_weight(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
	// Debug: Check if HX711 is ready
	if (!is_ready(&hx711)) {
 8002012:	4819      	ldr	r0, [pc, #100]	@ (8002078 <scale_read_weight+0x6c>)
 8002014:	f7ff fa0a 	bl	800142c <is_ready>
 8002018:	4603      	mov	r3, r0
 800201a:	f083 0301 	eor.w	r3, r3, #1
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <scale_read_weight+0x1e>
//		scale_send_uart_data("DEBUG - HX711 not ready!\r\n");
		return 0.0f;
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	e01e      	b.n	8002068 <scale_read_weight+0x5c>
	}

	// Get raw value first for debugging
	long raw_value = get_value(&hx711, 1, CHANNEL_A);  // Single reading for faster response
 800202a:	2200      	movs	r2, #0
 800202c:	2101      	movs	r1, #1
 800202e:	4812      	ldr	r0, [pc, #72]	@ (8002078 <scale_read_weight+0x6c>)
 8002030:	f7ff fac0 	bl	80015b4 <get_value>
 8002034:	ec53 2b10 	vmov	r2, r3, d0
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f7fe fd9c 	bl	8000b78 <__aeabi_d2iz>
 8002040:	4603      	mov	r3, r0
 8002042:	603b      	str	r3, [r7, #0]

	// Get weight using library function
	float weight = get_weight(&hx711, 1, CHANNEL_A);  // Single reading for faster response
 8002044:	2200      	movs	r2, #0
 8002046:	2101      	movs	r1, #1
 8002048:	480b      	ldr	r0, [pc, #44]	@ (8002078 <scale_read_weight+0x6c>)
 800204a:	f7ff fb1f 	bl	800168c <get_weight>
 800204e:	ed87 0a01 	vstr	s0, [r7, #4]


	// Ensure weight is not negative (noise or drift)
	if (weight < 0.0f) {
 8002052:	edd7 7a01 	vldr	s15, [r7, #4]
 8002056:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800205a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205e:	d502      	bpl.n	8002066 <scale_read_weight+0x5a>
		weight = 0.0f;
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
	}

	return weight;
 8002066:	687b      	ldr	r3, [r7, #4]
}
 8002068:	ee07 3a90 	vmov	s15, r3
 800206c:	eeb0 0a67 	vmov.f32	s0, s15
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000308 	.word	0x20000308

0800207c <scale_filter_weight>:
 * @brief Apply low-pass filter to weight reading
 * @param raw_weight: Raw weight reading
 * @return Filtered weight
 */
float scale_filter_weight(float raw_weight)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	ed87 0a01 	vstr	s0, [r7, #4]
    static float filtered_weight = 0.0f;
    static uint8_t first_reading = 1;

    if (first_reading) {
 8002086:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <scale_filter_weight+0x5c>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <scale_filter_weight+0x20>
        filtered_weight = raw_weight;
 800208e:	4a13      	ldr	r2, [pc, #76]	@ (80020dc <scale_filter_weight+0x60>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6013      	str	r3, [r2, #0]
        first_reading = 0;
 8002094:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <scale_filter_weight+0x5c>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	e011      	b.n	80020c0 <scale_filter_weight+0x44>
    } else {
        // Simple low-pass filter: y[n] = α * x[n] + (1-α) * y[n-1]
        filtered_weight = WEIGHT_FILTER_ALPHA * raw_weight + (1.0f - WEIGHT_FILTER_ALPHA) * filtered_weight;
 800209c:	edd7 7a01 	vldr	s15, [r7, #4]
 80020a0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80020e0 <scale_filter_weight+0x64>
 80020a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <scale_filter_weight+0x60>)
 80020aa:	edd3 7a00 	vldr	s15, [r3]
 80020ae:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80020e4 <scale_filter_weight+0x68>
 80020b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ba:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <scale_filter_weight+0x60>)
 80020bc:	edc3 7a00 	vstr	s15, [r3]
    }

    return filtered_weight;
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <scale_filter_weight+0x60>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	ee07 3a90 	vmov	s15, r3
}
 80020c8:	eeb0 0a67 	vmov.f32	s0, s15
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	2000000a 	.word	0x2000000a
 80020dc:	200008a4 	.word	0x200008a4
 80020e0:	3e99999a 	.word	0x3e99999a
 80020e4:	3f333333 	.word	0x3f333333

080020e8 <scale_is_weight_stable>:
 * @brief Check if weight reading is stable
 * @param weight: Current weight reading
 * @return 1 if stable, 0 if not stable
 */
uint8_t scale_is_weight_stable(float weight)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	ed87 0a01 	vstr	s0, [r7, #4]
    float weight_diff = fabsf(weight - scale_state.previous_weight);
 80020f2:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <scale_is_weight_stable+0x74>)
 80020f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80020f8:	ed97 7a01 	vldr	s14, [r7, #4]
 80020fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002100:	eef0 7ae7 	vabs.f32	s15, s15
 8002104:	edc7 7a03 	vstr	s15, [r7, #12]

    if (weight_diff < scale_state.weight_threshold) {
 8002108:	4b14      	ldr	r3, [pc, #80]	@ (800215c <scale_is_weight_stable+0x74>)
 800210a:	edd3 7a05 	vldr	s15, [r3, #20]
 800210e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211a:	d511      	bpl.n	8002140 <scale_is_weight_stable+0x58>
        scale_state.weight_stable_count++;
 800211c:	4b0f      	ldr	r3, [pc, #60]	@ (800215c <scale_is_weight_stable+0x74>)
 800211e:	7a1b      	ldrb	r3, [r3, #8]
 8002120:	3301      	adds	r3, #1
 8002122:	b2da      	uxtb	r2, r3
 8002124:	4b0d      	ldr	r3, [pc, #52]	@ (800215c <scale_is_weight_stable+0x74>)
 8002126:	721a      	strb	r2, [r3, #8]
        if (scale_state.weight_stable_count >= WEIGHT_STABILITY_COUNT) {
 8002128:	4b0c      	ldr	r3, [pc, #48]	@ (800215c <scale_is_weight_stable+0x74>)
 800212a:	7a1b      	ldrb	r3, [r3, #8]
 800212c:	2b04      	cmp	r3, #4
 800212e:	d90d      	bls.n	800214c <scale_is_weight_stable+0x64>
            scale_state.weight_stable_count = WEIGHT_STABILITY_COUNT;  // Cap the counter
 8002130:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <scale_is_weight_stable+0x74>)
 8002132:	2205      	movs	r2, #5
 8002134:	721a      	strb	r2, [r3, #8]
            scale_state.previous_weight = weight;
 8002136:	4a09      	ldr	r2, [pc, #36]	@ (800215c <scale_is_weight_stable+0x74>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6053      	str	r3, [r2, #4]
            return 1;
 800213c:	2301      	movs	r3, #1
 800213e:	e006      	b.n	800214e <scale_is_weight_stable+0x66>
        }
    } else {
        scale_state.weight_stable_count = 0;
 8002140:	4b06      	ldr	r3, [pc, #24]	@ (800215c <scale_is_weight_stable+0x74>)
 8002142:	2200      	movs	r2, #0
 8002144:	721a      	strb	r2, [r3, #8]
        scale_state.previous_weight = weight;
 8002146:	4a05      	ldr	r2, [pc, #20]	@ (800215c <scale_is_weight_stable+0x74>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6053      	str	r3, [r2, #4]
    }

    return 0;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	200002f0 	.word	0x200002f0

08002160 <scale_display_weight>:
/**
 * @brief Display weight on 7-segment display and send via UART
 * @param weight: Weight to display in kg
 */
void scale_display_weight(float weight)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	ed87 0a01 	vstr	s0, [r7, #4]
	if (weight < 0.0f) weight = 0.0f;
 800216a:	edd7 7a01 	vldr	s15, [r7, #4]
 800216e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002176:	d502      	bpl.n	800217e <scale_display_weight+0x1e>
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
	if (weight > 9.9f) weight = 9.9f;
 800217e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002182:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80021d8 <scale_display_weight+0x78>
 8002186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800218a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218e:	dd01      	ble.n	8002194 <scale_display_weight+0x34>
 8002190:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <scale_display_weight+0x7c>)
 8002192:	607b      	str	r3, [r7, #4]

	// Chuyển đổi sang số nguyên để hiển thị (VD: 2.5kg -> 25)
	int display_value = (int)(weight * 10 + 0.5f);  // +0.5 để làm tròn
 8002194:	edd7 7a01 	vldr	s15, [r7, #4]
 8002198:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800219c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021a0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80021a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ac:	ee17 3a90 	vmov	r3, s15
 80021b0:	60fb      	str	r3, [r7, #12]

	// Hiển thị trên LED 7 đoạn với 1 chữ số thập phân
	Set7SegDisplayWithDecimal(display_value, 1);  // Hiển thị với 1 chữ số sau dấu phẩy
 80021b2:	2101      	movs	r1, #1
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f7fe ff43 	bl	8001040 <Set7SegDisplayWithDecimal>

	// Gọi hàm chạy hiển thị LED 7 đoạn
	Run7SegDisplay();
 80021ba:	f7fe ff65 	bl	8001088 <Run7SegDisplay>

    // Send weight data via UART
//    scale_send_uart_data("Weight: %.3f kg (%.0f g)\r\n", weight, weight * 1000);
    scale_send_uart_data("Weight: %d (display_value) = %.1f kg\r\n", display_value, weight);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe f9d2 	bl	8000568 <__aeabi_f2d>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	68f9      	ldr	r1, [r7, #12]
 80021ca:	4805      	ldr	r0, [pc, #20]	@ (80021e0 <scale_display_weight+0x80>)
 80021cc:	f000 f882 	bl	80022d4 <scale_send_uart_data>
}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	411e6666 	.word	0x411e6666
 80021dc:	411e6666 	.word	0x411e6666
 80021e0:	0800abf0 	.word	0x0800abf0

080021e4 <scale_process_rfid>:
/**
 * @brief Process RFID reading and combine with weight data
 * @param weight: Current stable weight
 */
void scale_process_rfid(float weight)
{
 80021e4:	b5b0      	push	{r4, r5, r7, lr}
 80021e6:	b08a      	sub	sp, #40	@ 0x28
 80021e8:	af04      	add	r7, sp, #16
 80021ea:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t CardUID[5];

    if (TM_MFRC522_Check(CardUID) == MI_OK) {
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fad8 	bl	80027a8 <TM_MFRC522_Check>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d153      	bne.n	80022a6 <scale_process_rfid+0xc2>
        // Card detected - turn on green LED
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);   // Green LED ON
 80021fe:	2201      	movs	r2, #1
 8002200:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002204:	4830      	ldr	r0, [pc, #192]	@ (80022c8 <scale_process_rfid+0xe4>)
 8002206:	f001 f995 	bl	8003534 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET); // Red LED OFF
 800220a:	2200      	movs	r2, #0
 800220c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002210:	482d      	ldr	r0, [pc, #180]	@ (80022c8 <scale_process_rfid+0xe4>)
 8002212:	f001 f98f 	bl	8003534 <HAL_GPIO_WritePin>

        CardData* current_card = find_or_register_card(CardUID);
 8002216:	f107 0308 	add.w	r3, r7, #8
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fc9a 	bl	8001b54 <find_or_register_card>
 8002220:	6178      	str	r0, [r7, #20]
		if (current_card == NULL) {
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d04b      	beq.n	80022c0 <scale_process_rfid+0xdc>
			// Lỗi: database đầy, không xử lý tiếp
			return;
		}

		push_weight_to_history(&current_card->weight_data, weight);
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	3308      	adds	r3, #8
 800222c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fced 	bl	8001c10 <push_weight_to_history>

		if (are_all_weights_stable(&current_card->weight_data)) {
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3308      	adds	r3, #8
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fd16 	bl	8001c6c <are_all_weights_stable>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01b      	beq.n	800227e <scale_process_rfid+0x9a>
			float stable_weight = current_card->weight_data.history[0]; // Lấy giá trị ổn định
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	613b      	str	r3, [r7, #16]

			// Chỉ lưu nếu giá trị ổn định mới khác với giá trị đã lưu
			// (tránh ghi vào thẻ liên tục không cần thiết)
			if (fabsf(stable_weight - current_card->weight_data.saved_weight) > 0.001f) {
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002252:	ed97 7a04 	vldr	s14, [r7, #16]
 8002256:	ee77 7a67 	vsub.f32	s15, s14, s15
 800225a:	eef0 7ae7 	vabs.f32	s15, s15
 800225e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80022cc <scale_process_rfid+0xe8>
 8002262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226a:	dd08      	ble.n	800227e <scale_process_rfid+0x9a>
				// Thực hiện lưu giá trị cân nặng vào thẻ RFID
				save_weight_to_rfid_card(current_card->uid, stable_weight);
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	ed97 0a04 	vldr	s0, [r7, #16]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fe0c 	bl	8001e90 <save_weight_to_rfid_card>

				// Cập nhật giá trị đã lưu trong RAM
				current_card->weight_data.saved_weight = stable_weight;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	639a      	str	r2, [r3, #56]	@ 0x38

        // Send combined data
//        scale_send_uart_data("RFID: %02X%02X%02X%02X%02X | Weight: %.3f kg\r\n",
//                           CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], weight);
		scale_send_uart_data("Card: %02X..%02X | Weight: %.3f kg | History Cnt: %d\r\n",
		                           CardUID[0], CardUID[4], weight, current_card->weight_data.count);
 800227e:	7a3b      	ldrb	r3, [r7, #8]
		scale_send_uart_data("Card: %02X..%02X | Weight: %.3f kg | History Cnt: %d\r\n",
 8002280:	461c      	mov	r4, r3
		                           CardUID[0], CardUID[4], weight, current_card->weight_data.count);
 8002282:	7b3b      	ldrb	r3, [r7, #12]
		scale_send_uart_data("Card: %02X..%02X | Weight: %.3f kg | History Cnt: %d\r\n",
 8002284:	461d      	mov	r5, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe f96e 	bl	8000568 <__aeabi_f2d>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	6979      	ldr	r1, [r7, #20]
 8002292:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8002294:	9102      	str	r1, [sp, #8]
 8002296:	e9cd 2300 	strd	r2, r3, [sp]
 800229a:	462a      	mov	r2, r5
 800229c:	4621      	mov	r1, r4
 800229e:	480c      	ldr	r0, [pc, #48]	@ (80022d0 <scale_process_rfid+0xec>)
 80022a0:	f000 f818 	bl	80022d4 <scale_send_uart_data>
 80022a4:	e00d      	b.n	80022c2 <scale_process_rfid+0xde>
    } else {
        // No card detected - turn on red LED
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);   // Red LED ON
 80022a6:	2201      	movs	r2, #1
 80022a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022ac:	4806      	ldr	r0, [pc, #24]	@ (80022c8 <scale_process_rfid+0xe4>)
 80022ae:	f001 f941 	bl	8003534 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET); // Green LED OFF
 80022b2:	2200      	movs	r2, #0
 80022b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022b8:	4803      	ldr	r0, [pc, #12]	@ (80022c8 <scale_process_rfid+0xe4>)
 80022ba:	f001 f93b 	bl	8003534 <HAL_GPIO_WritePin>
 80022be:	e000      	b.n	80022c2 <scale_process_rfid+0xde>
			return;
 80022c0:	bf00      	nop
    }
}
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bdb0      	pop	{r4, r5, r7, pc}
 80022c8:	40021800 	.word	0x40021800
 80022cc:	3a83126f 	.word	0x3a83126f
 80022d0:	0800ac18 	.word	0x0800ac18

080022d4 <scale_send_uart_data>:
 * @brief Send formatted data via UART
 * @param format: Printf-style format string
 * @param ...: Variable arguments
 */
void scale_send_uart_data(const char* format, ...)
{
 80022d4:	b40f      	push	{r0, r1, r2, r3}
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	603b      	str	r3, [r7, #0]

    int len = vsnprintf(uart_buffer, sizeof(uart_buffer), format, args);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	2180      	movs	r1, #128	@ 0x80
 80022e8:	480c      	ldr	r0, [pc, #48]	@ (800231c <scale_send_uart_data+0x48>)
 80022ea:	f004 ff39 	bl	8007160 <vsniprintf>
 80022ee:	6078      	str	r0, [r7, #4]

    va_end(args);

    if (len > 0 && len < sizeof(uart_buffer)) {
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	dd0a      	ble.n	800230c <scale_send_uart_data+0x38>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80022fa:	d807      	bhi.n	800230c <scale_send_uart_data+0x38>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, len, 1000);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002304:	4905      	ldr	r1, [pc, #20]	@ (800231c <scale_send_uart_data+0x48>)
 8002306:	4806      	ldr	r0, [pc, #24]	@ (8002320 <scale_send_uart_data+0x4c>)
 8002308:	f002 ff54 	bl	80051b4 <HAL_UART_Transmit>
    }
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002316:	b004      	add	sp, #16
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	2000032c 	.word	0x2000032c
 8002320:	200002a8 	.word	0x200002a8

08002324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002328:	b672      	cpsid	i
}
 800232a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <Error_Handler+0x8>

08002330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	4b10      	ldr	r3, [pc, #64]	@ (800237c <HAL_MspInit+0x4c>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233e:	4a0f      	ldr	r2, [pc, #60]	@ (800237c <HAL_MspInit+0x4c>)
 8002340:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002344:	6453      	str	r3, [r2, #68]	@ 0x44
 8002346:	4b0d      	ldr	r3, [pc, #52]	@ (800237c <HAL_MspInit+0x4c>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	603b      	str	r3, [r7, #0]
 8002356:	4b09      	ldr	r3, [pc, #36]	@ (800237c <HAL_MspInit+0x4c>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	4a08      	ldr	r2, [pc, #32]	@ (800237c <HAL_MspInit+0x4c>)
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002360:	6413      	str	r3, [r2, #64]	@ 0x40
 8002362:	4b06      	ldr	r3, [pc, #24]	@ (800237c <HAL_MspInit+0x4c>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800

08002380 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	@ 0x28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a19      	ldr	r2, [pc, #100]	@ (8002404 <HAL_SPI_MspInit+0x84>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d12b      	bne.n	80023fa <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	4b18      	ldr	r3, [pc, #96]	@ (8002408 <HAL_SPI_MspInit+0x88>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	4a17      	ldr	r2, [pc, #92]	@ (8002408 <HAL_SPI_MspInit+0x88>)
 80023ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023b2:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <HAL_SPI_MspInit+0x88>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b11      	ldr	r3, [pc, #68]	@ (8002408 <HAL_SPI_MspInit+0x88>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	4a10      	ldr	r2, [pc, #64]	@ (8002408 <HAL_SPI_MspInit+0x88>)
 80023c8:	f043 0310 	orr.w	r3, r3, #16
 80023cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002408 <HAL_SPI_MspInit+0x88>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80023da:	2364      	movs	r3, #100	@ 0x64
 80023dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	2302      	movs	r3, #2
 80023e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e6:	2303      	movs	r3, #3
 80023e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80023ea:	2305      	movs	r3, #5
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4619      	mov	r1, r3
 80023f4:	4805      	ldr	r0, [pc, #20]	@ (800240c <HAL_SPI_MspInit+0x8c>)
 80023f6:	f000 fed9 	bl	80031ac <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 80023fa:	bf00      	nop
 80023fc:	3728      	adds	r7, #40	@ 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40013400 	.word	0x40013400
 8002408:	40023800 	.word	0x40023800
 800240c:	40021000 	.word	0x40021000

08002410 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0e      	ldr	r2, [pc, #56]	@ (8002458 <HAL_TIM_Base_MspInit+0x48>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d115      	bne.n	800244e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <HAL_TIM_Base_MspInit+0x4c>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	4a0c      	ldr	r2, [pc, #48]	@ (800245c <HAL_TIM_Base_MspInit+0x4c>)
 800242c:	f043 0310 	orr.w	r3, r3, #16
 8002430:	6413      	str	r3, [r2, #64]	@ 0x40
 8002432:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <HAL_TIM_Base_MspInit+0x4c>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2100      	movs	r1, #0
 8002442:	2036      	movs	r0, #54	@ 0x36
 8002444:	f000 fde9 	bl	800301a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002448:	2036      	movs	r0, #54	@ 0x36
 800244a:	f000 fe02 	bl	8003052 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40001000 	.word	0x40001000
 800245c:	40023800 	.word	0x40023800

08002460 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	@ 0x28
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1d      	ldr	r2, [pc, #116]	@ (80024f4 <HAL_UART_MspInit+0x94>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d134      	bne.n	80024ec <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	4b1c      	ldr	r3, [pc, #112]	@ (80024f8 <HAL_UART_MspInit+0x98>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248a:	4a1b      	ldr	r2, [pc, #108]	@ (80024f8 <HAL_UART_MspInit+0x98>)
 800248c:	f043 0310 	orr.w	r3, r3, #16
 8002490:	6453      	str	r3, [r2, #68]	@ 0x44
 8002492:	4b19      	ldr	r3, [pc, #100]	@ (80024f8 <HAL_UART_MspInit+0x98>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <HAL_UART_MspInit+0x98>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	4a14      	ldr	r2, [pc, #80]	@ (80024f8 <HAL_UART_MspInit+0x98>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ae:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <HAL_UART_MspInit+0x98>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024ba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80024be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c8:	2303      	movs	r3, #3
 80024ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024cc:	2307      	movs	r3, #7
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	4619      	mov	r1, r3
 80024d6:	4809      	ldr	r0, [pc, #36]	@ (80024fc <HAL_UART_MspInit+0x9c>)
 80024d8:	f000 fe68 	bl	80031ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024dc:	2200      	movs	r2, #0
 80024de:	2100      	movs	r1, #0
 80024e0:	2025      	movs	r0, #37	@ 0x25
 80024e2:	f000 fd9a 	bl	800301a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024e6:	2025      	movs	r0, #37	@ 0x25
 80024e8:	f000 fdb3 	bl	8003052 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80024ec:	bf00      	nop
 80024ee:	3728      	adds	r7, #40	@ 0x28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40011000 	.word	0x40011000
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40020000 	.word	0x40020000

08002500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002504:	bf00      	nop
 8002506:	e7fd      	b.n	8002504 <NMI_Handler+0x4>

08002508 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250c:	bf00      	nop
 800250e:	e7fd      	b.n	800250c <HardFault_Handler+0x4>

08002510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002514:	bf00      	nop
 8002516:	e7fd      	b.n	8002514 <MemManage_Handler+0x4>

08002518 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800251c:	bf00      	nop
 800251e:	e7fd      	b.n	800251c <BusFault_Handler+0x4>

08002520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002524:	bf00      	nop
 8002526:	e7fd      	b.n	8002524 <UsageFault_Handler+0x4>

08002528 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002556:	f000 fc41 	bl	8002ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002564:	4802      	ldr	r0, [pc, #8]	@ (8002570 <USART1_IRQHandler+0x10>)
 8002566:	f002 fed5 	bl	8005314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200002a8 	.word	0x200002a8

08002574 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002578:	4802      	ldr	r0, [pc, #8]	@ (8002584 <TIM6_DAC_IRQHandler+0x10>)
 800257a:	f002 fb7d 	bl	8004c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000260 	.word	0x20000260

08002588 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
extern void Run7SegDisplay();

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a04      	ldr	r2, [pc, #16]	@ (80025a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d101      	bne.n	800259e <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        Run7SegDisplay();  // Quét LED 7 thanh định kỳ
 800259a:	f7fe fd75 	bl	8001088 <Run7SegDisplay>
    }
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40001000 	.word	0x40001000

080025ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return 1;
 80025b0:	2301      	movs	r3, #1
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <_kill>:

int _kill(int pid, int sig)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025c6:	f004 fe3b 	bl	8007240 <__errno>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2216      	movs	r2, #22
 80025ce:	601a      	str	r2, [r3, #0]
  return -1;
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <_exit>:

void _exit (int status)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025e4:	f04f 31ff 	mov.w	r1, #4294967295
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ffe7 	bl	80025bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80025ee:	bf00      	nop
 80025f0:	e7fd      	b.n	80025ee <_exit+0x12>

080025f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	e00a      	b.n	800261a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002604:	f3af 8000 	nop.w
 8002608:	4601      	mov	r1, r0
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	60ba      	str	r2, [r7, #8]
 8002610:	b2ca      	uxtb	r2, r1
 8002612:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3301      	adds	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	429a      	cmp	r2, r3
 8002620:	dbf0      	blt.n	8002604 <_read+0x12>
  }

  return len;
 8002622:	687b      	ldr	r3, [r7, #4]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	e009      	b.n	8002652 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	60ba      	str	r2, [r7, #8]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3301      	adds	r3, #1
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	429a      	cmp	r2, r3
 8002658:	dbf1      	blt.n	800263e <_write+0x12>
  }
  return len;
 800265a:	687b      	ldr	r3, [r7, #4]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <_close>:

int _close(int file)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800266c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800268c:	605a      	str	r2, [r3, #4]
  return 0;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <_isatty>:

int _isatty(int file)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026a4:	2301      	movs	r3, #1
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b085      	sub	sp, #20
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d4:	4a14      	ldr	r2, [pc, #80]	@ (8002728 <_sbrk+0x5c>)
 80026d6:	4b15      	ldr	r3, [pc, #84]	@ (800272c <_sbrk+0x60>)
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e0:	4b13      	ldr	r3, [pc, #76]	@ (8002730 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e8:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <_sbrk+0x64>)
 80026ea:	4a12      	ldr	r2, [pc, #72]	@ (8002734 <_sbrk+0x68>)
 80026ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ee:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <_sbrk+0x64>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d207      	bcs.n	800270c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026fc:	f004 fda0 	bl	8007240 <__errno>
 8002700:	4603      	mov	r3, r0
 8002702:	220c      	movs	r2, #12
 8002704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	e009      	b.n	8002720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800270c:	4b08      	ldr	r3, [pc, #32]	@ (8002730 <_sbrk+0x64>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002712:	4b07      	ldr	r3, [pc, #28]	@ (8002730 <_sbrk+0x64>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	4a05      	ldr	r2, [pc, #20]	@ (8002730 <_sbrk+0x64>)
 800271c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800271e:	68fb      	ldr	r3, [r7, #12]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20030000 	.word	0x20030000
 800272c:	00000400 	.word	0x00000400
 8002730:	200008a8 	.word	0x200008a8
 8002734:	20000a00 	.word	0x20000a00

08002738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800273c:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <SystemInit+0x20>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002742:	4a05      	ldr	r2, [pc, #20]	@ (8002758 <SystemInit+0x20>)
 8002744:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002748:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <TM_MFRC522_Init>:
 */
#include "tm_stm32f4_mfrc522.h"

extern SPI_HandleTypeDef hspi4;

void TM_MFRC522_Init(void) {
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
	TM_MFRC522_InitPins();
 8002760:	f000 f83c 	bl	80027dc <TM_MFRC522_InitPins>
	//TM_SPI_Init(MFRC522_SPI, MFRC522_SPI_PINSPACK);

	TM_MFRC522_Reset();
 8002764:	f000 f921 	bl	80029aa <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8002768:	218d      	movs	r1, #141	@ 0x8d
 800276a:	202a      	movs	r0, #42	@ 0x2a
 800276c:	f000 f842 	bl	80027f4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8002770:	213e      	movs	r1, #62	@ 0x3e
 8002772:	202b      	movs	r0, #43	@ 0x2b
 8002774:	f000 f83e 	bl	80027f4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8002778:	211e      	movs	r1, #30
 800277a:	202d      	movs	r0, #45	@ 0x2d
 800277c:	f000 f83a 	bl	80027f4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8002780:	2100      	movs	r1, #0
 8002782:	202c      	movs	r0, #44	@ 0x2c
 8002784:	f000 f836 	bl	80027f4 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8002788:	2170      	movs	r1, #112	@ 0x70
 800278a:	2026      	movs	r0, #38	@ 0x26
 800278c:	f000 f832 	bl	80027f4 <TM_MFRC522_WriteRegister>
	
	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8002790:	2140      	movs	r1, #64	@ 0x40
 8002792:	2015      	movs	r0, #21
 8002794:	f000 f82e 	bl	80027f4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8002798:	213d      	movs	r1, #61	@ 0x3d
 800279a:	2011      	movs	r0, #17
 800279c:	f000 f82a 	bl	80027f4 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 80027a0:	f000 f8ee 	bl	8002980 <TM_MFRC522_AntennaOn>
}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type
	status = TM_MFRC522_Request(PICC_REQIDL, id);	
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	2026      	movs	r0, #38	@ 0x26
 80027b4:	f000 f901 	bl	80029ba <TM_MFRC522_Request>
 80027b8:	4603      	mov	r3, r0
 80027ba:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d104      	bne.n	80027cc <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);	
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f9ed 	bl	8002ba2 <TM_MFRC522_Anticoll>
 80027c8:	4603      	mov	r3, r0
 80027ca:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
 80027cc:	f000 fa6f 	bl	8002cae <TM_MFRC522_Halt>

	return status;
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <TM_MFRC522_InitPins>:
		}
	}
	return MI_OK;
}

void TM_MFRC522_InitPins(void) {
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	//CS pin
//	GPIO_InitStruct.GPIO_Pin = MFRC522_CS_PIN;
//	GPIO_Init(MFRC522_CS_PORT, &GPIO_InitStruct);

	MFRC522_CS_HIGH;
 80027e0:	2201      	movs	r2, #1
 80027e2:	2110      	movs	r1, #16
 80027e4:	4802      	ldr	r0, [pc, #8]	@ (80027f0 <TM_MFRC522_InitPins+0x14>)
 80027e6:	f000 fea5 	bl	8003534 <HAL_GPIO_WritePin>
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000

080027f4 <TM_MFRC522_WriteRegister>:

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	460a      	mov	r2, r1
 80027fe:	71fb      	strb	r3, [r7, #7]
 8002800:	4613      	mov	r3, r2
 8002802:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8002804:	2200      	movs	r2, #0
 8002806:	2110      	movs	r1, #16
 8002808:	481a      	ldr	r0, [pc, #104]	@ (8002874 <TM_MFRC522_WriteRegister+0x80>)
 800280a:	f000 fe93 	bl	8003534 <HAL_GPIO_WritePin>
	//Send address
	uint8_t buf = (addr << 1) & 0x7E;
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002818:	b2db      	uxtb	r3, r3
 800281a:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef ret = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 8002820:	f107 010e 	add.w	r1, r7, #14
 8002824:	230a      	movs	r3, #10
 8002826:	2201      	movs	r2, #1
 8002828:	4813      	ldr	r0, [pc, #76]	@ (8002878 <TM_MFRC522_WriteRegister+0x84>)
 800282a:	f001 fc0e 	bl	800404a <HAL_SPI_Transmit>
 800282e:	4603      	mov	r3, r0
 8002830:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8002832:	bf00      	nop
 8002834:	4810      	ldr	r0, [pc, #64]	@ (8002878 <TM_MFRC522_WriteRegister+0x84>)
 8002836:	f002 f80e 	bl	8004856 <HAL_SPI_GetState>
 800283a:	4603      	mov	r3, r0
 800283c:	73fb      	strb	r3, [r7, #15]
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d0f7      	beq.n	8002834 <TM_MFRC522_WriteRegister+0x40>
	//Send data	
	HAL_SPI_Transmit(&hspi4, &val, 1, 10);
 8002844:	1db9      	adds	r1, r7, #6
 8002846:	230a      	movs	r3, #10
 8002848:	2201      	movs	r2, #1
 800284a:	480b      	ldr	r0, [pc, #44]	@ (8002878 <TM_MFRC522_WriteRegister+0x84>)
 800284c:	f001 fbfd 	bl	800404a <HAL_SPI_Transmit>
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8002850:	bf00      	nop
 8002852:	4809      	ldr	r0, [pc, #36]	@ (8002878 <TM_MFRC522_WriteRegister+0x84>)
 8002854:	f001 ffff 	bl	8004856 <HAL_SPI_GetState>
 8002858:	4603      	mov	r3, r0
 800285a:	73fb      	strb	r3, [r7, #15]
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d0f7      	beq.n	8002852 <TM_MFRC522_WriteRegister+0x5e>
	//CS high
	MFRC522_CS_HIGH;
 8002862:	2201      	movs	r2, #1
 8002864:	2110      	movs	r1, #16
 8002866:	4803      	ldr	r0, [pc, #12]	@ (8002874 <TM_MFRC522_WriteRegister+0x80>)
 8002868:	f000 fe64 	bl	8003534 <HAL_GPIO_WritePin>
}
 800286c:	bf00      	nop
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000
 8002878:	20000208 	.word	0x20000208

0800287c <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8002886:	2200      	movs	r2, #0
 8002888:	2110      	movs	r1, #16
 800288a:	481f      	ldr	r0, [pc, #124]	@ (8002908 <TM_MFRC522_ReadRegister+0x8c>)
 800288c:	f000 fe52 	bl	8003534 <HAL_GPIO_WritePin>

	uint8_t buf = ((addr << 1) & 0x7E) | 0x80;
 8002890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	b25b      	sxtb	r3, r3
 8002898:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800289c:	b25b      	sxtb	r3, r3
 800289e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028a2:	b25b      	sxtb	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 80028ac:	f107 010d 	add.w	r1, r7, #13
 80028b0:	230a      	movs	r3, #10
 80028b2:	2201      	movs	r2, #1
 80028b4:	4815      	ldr	r0, [pc, #84]	@ (800290c <TM_MFRC522_ReadRegister+0x90>)
 80028b6:	f001 fbc8 	bl	800404a <HAL_SPI_Transmit>
 80028ba:	4603      	mov	r3, r0
 80028bc:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 80028be:	bf00      	nop
 80028c0:	4812      	ldr	r0, [pc, #72]	@ (800290c <TM_MFRC522_ReadRegister+0x90>)
 80028c2:	f001 ffc8 	bl	8004856 <HAL_SPI_GetState>
 80028c6:	4603      	mov	r3, r0
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d0f7      	beq.n	80028c0 <TM_MFRC522_ReadRegister+0x44>
	ret = HAL_SPI_Receive(&hspi4, &val, 1, 10);
 80028d0:	f107 010e 	add.w	r1, r7, #14
 80028d4:	230a      	movs	r3, #10
 80028d6:	2201      	movs	r2, #1
 80028d8:	480c      	ldr	r0, [pc, #48]	@ (800290c <TM_MFRC522_ReadRegister+0x90>)
 80028da:	f001 fcfa 	bl	80042d2 <HAL_SPI_Receive>
 80028de:	4603      	mov	r3, r0
 80028e0:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 80028e2:	bf00      	nop
 80028e4:	4809      	ldr	r0, [pc, #36]	@ (800290c <TM_MFRC522_ReadRegister+0x90>)
 80028e6:	f001 ffb6 	bl	8004856 <HAL_SPI_GetState>
 80028ea:	4603      	mov	r3, r0
 80028ec:	73fb      	strb	r3, [r7, #15]
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d0f7      	beq.n	80028e4 <TM_MFRC522_ReadRegister+0x68>
	//CS high
	MFRC522_CS_HIGH;
 80028f4:	2201      	movs	r2, #1
 80028f6:	2110      	movs	r1, #16
 80028f8:	4803      	ldr	r0, [pc, #12]	@ (8002908 <TM_MFRC522_ReadRegister+0x8c>)
 80028fa:	f000 fe1b 	bl	8003534 <HAL_GPIO_WritePin>

	return val;	
 80028fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000
 800290c:	20000208 	.word	0x20000208

08002910 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	460a      	mov	r2, r1
 800291a:	71fb      	strb	r3, [r7, #7]
 800291c:	4613      	mov	r3, r2
 800291e:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ffaa 	bl	800287c <TM_MFRC522_ReadRegister>
 8002928:	4603      	mov	r3, r0
 800292a:	461a      	mov	r2, r3
 800292c:	79bb      	ldrb	r3, [r7, #6]
 800292e:	4313      	orrs	r3, r2
 8002930:	b2da      	uxtb	r2, r3
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ff5c 	bl	80027f4 <TM_MFRC522_WriteRegister>
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	460a      	mov	r2, r1
 800294e:	71fb      	strb	r3, [r7, #7]
 8002950:	4613      	mov	r3, r2
 8002952:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff ff90 	bl	800287c <TM_MFRC522_ReadRegister>
 800295c:	4603      	mov	r3, r0
 800295e:	b25a      	sxtb	r2, r3
 8002960:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002964:	43db      	mvns	r3, r3
 8002966:	b25b      	sxtb	r3, r3
 8002968:	4013      	ands	r3, r2
 800296a:	b25b      	sxtb	r3, r3
 800296c:	b2da      	uxtb	r2, r3
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff ff3e 	bl	80027f4 <TM_MFRC522_WriteRegister>
} 
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8002986:	2014      	movs	r0, #20
 8002988:	f7ff ff78 	bl	800287c <TM_MFRC522_ReadRegister>
 800298c:	4603      	mov	r3, r0
 800298e:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d103      	bne.n	80029a2 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800299a:	2103      	movs	r1, #3
 800299c:	2014      	movs	r0, #20
 800299e:	f7ff ffb7 	bl	8002910 <TM_MFRC522_SetBitMask>
	}
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 80029aa:	b580      	push	{r7, lr}
 80029ac:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 80029ae:	210f      	movs	r1, #15
 80029b0:	2001      	movs	r0, #1
 80029b2:	f7ff ff1f 	bl	80027f4 <TM_MFRC522_WriteRegister>
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}

080029ba <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b086      	sub	sp, #24
 80029be:	af02      	add	r7, sp, #8
 80029c0:	4603      	mov	r3, r0
 80029c2:	6039      	str	r1, [r7, #0]
 80029c4:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;  
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 80029c6:	2107      	movs	r1, #7
 80029c8:	200d      	movs	r0, #13
 80029ca:	f7ff ff13 	bl	80027f4 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	79fa      	ldrb	r2, [r7, #7]
 80029d2:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80029d4:	f107 030c 	add.w	r3, r7, #12
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2201      	movs	r2, #1
 80029de:	6839      	ldr	r1, [r7, #0]
 80029e0:	200c      	movs	r0, #12
 80029e2:	f000 f80f 	bl	8002a04 <TM_MFRC522_ToCard>
 80029e6:	4603      	mov	r3, r0
 80029e8:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10)) {    
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d102      	bne.n	80029f6 <TM_MFRC522_Request+0x3c>
 80029f0:	89bb      	ldrh	r3, [r7, #12]
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d001      	beq.n	80029fa <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 80029f6:	2302      	movs	r3, #2
 80029f8:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	4603      	mov	r3, r0
 8002a10:	73fb      	strb	r3, [r7, #15]
 8002a12:	4613      	mov	r3, r2
 8002a14:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8002a16:	2302      	movs	r3, #2
 8002a18:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b0c      	cmp	r3, #12
 8002a26:	d006      	beq.n	8002a36 <TM_MFRC522_ToCard+0x32>
 8002a28:	2b0e      	cmp	r3, #14
 8002a2a:	d109      	bne.n	8002a40 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8002a2c:	2312      	movs	r3, #18
 8002a2e:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8002a30:	2310      	movs	r3, #16
 8002a32:	757b      	strb	r3, [r7, #21]
			break;
 8002a34:	e005      	b.n	8002a42 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8002a36:	2377      	movs	r3, #119	@ 0x77
 8002a38:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8002a3a:	2330      	movs	r3, #48	@ 0x30
 8002a3c:	757b      	strb	r3, [r7, #21]
			break;
 8002a3e:	e000      	b.n	8002a42 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8002a40:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8002a42:	7dbb      	ldrb	r3, [r7, #22]
 8002a44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	2002      	movs	r0, #2
 8002a4e:	f7ff fed1 	bl	80027f4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8002a52:	2180      	movs	r1, #128	@ 0x80
 8002a54:	2004      	movs	r0, #4
 8002a56:	f7ff ff75 	bl	8002944 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8002a5a:	2180      	movs	r1, #128	@ 0x80
 8002a5c:	200a      	movs	r0, #10
 8002a5e:	f7ff ff57 	bl	8002910 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8002a62:	2100      	movs	r1, #0
 8002a64:	2001      	movs	r0, #1
 8002a66:	f7ff fec5 	bl	80027f4 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {   
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	827b      	strh	r3, [r7, #18]
 8002a6e:	e00a      	b.n	8002a86 <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
 8002a70:	8a7b      	ldrh	r3, [r7, #18]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	4413      	add	r3, r2
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	2009      	movs	r0, #9
 8002a7c:	f7ff feba 	bl	80027f4 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {   
 8002a80:	8a7b      	ldrh	r3, [r7, #18]
 8002a82:	3301      	adds	r3, #1
 8002a84:	827b      	strh	r3, [r7, #18]
 8002a86:	7bbb      	ldrb	r3, [r7, #14]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	8a7a      	ldrh	r2, [r7, #18]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d3ef      	bcc.n	8002a70 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	4619      	mov	r1, r3
 8002a94:	2001      	movs	r0, #1
 8002a96:	f7ff fead 	bl	80027f4 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {    
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	2b0c      	cmp	r3, #12
 8002a9e:	d103      	bne.n	8002aa8 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
 8002aa0:	2180      	movs	r1, #128	@ 0x80
 8002aa2:	200d      	movs	r0, #13
 8002aa4:	f7ff ff34 	bl	8002910 <TM_MFRC522_SetBitMask>
	}   

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8002aa8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002aac:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8002aae:	2004      	movs	r0, #4
 8002ab0:	f7ff fee4 	bl	800287c <TM_MFRC522_ReadRegister>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	753b      	strb	r3, [r7, #20]
		i--;
 8002ab8:	8a7b      	ldrh	r3, [r7, #18]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002abe:	8a7b      	ldrh	r3, [r7, #18]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <TM_MFRC522_ToCard+0xd6>
 8002ac4:	7d3b      	ldrb	r3, [r7, #20]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d105      	bne.n	8002ada <TM_MFRC522_ToCard+0xd6>
 8002ace:	7d3a      	ldrb	r2, [r7, #20]
 8002ad0:	7d7b      	ldrb	r3, [r7, #21]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0e9      	beq.n	8002aae <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8002ada:	2180      	movs	r1, #128	@ 0x80
 8002adc:	200d      	movs	r0, #13
 8002ade:	f7ff ff31 	bl	8002944 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8002ae2:	8a7b      	ldrh	r3, [r7, #18]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d057      	beq.n	8002b98 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8002ae8:	2006      	movs	r0, #6
 8002aea:	f7ff fec7 	bl	800287c <TM_MFRC522_ReadRegister>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f003 031b 	and.w	r3, r3, #27
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d14d      	bne.n	8002b94 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {   
 8002afc:	7d3a      	ldrb	r2, [r7, #20]
 8002afe:	7dbb      	ldrb	r3, [r7, #22]
 8002b00:	4013      	ands	r3, r2
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;			
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d140      	bne.n	8002b98 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8002b16:	200a      	movs	r0, #10
 8002b18:	f7ff feb0 	bl	800287c <TM_MFRC522_ReadRegister>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8002b20:	200c      	movs	r0, #12
 8002b22:	f7ff feab 	bl	800287c <TM_MFRC522_ReadRegister>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	747b      	strb	r3, [r7, #17]
				if (lastBits) {   
 8002b2e:	7c7b      	ldrb	r3, [r7, #17]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00b      	beq.n	8002b4c <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;   
 8002b34:	7d3b      	ldrb	r3, [r7, #20]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	7c7b      	ldrb	r3, [r7, #17]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b48:	801a      	strh	r2, [r3, #0]
 8002b4a:	e005      	b.n	8002b58 <TM_MFRC522_ToCard+0x154>
				} else {   
					*backLen = n * 8;   
 8002b4c:	7d3b      	ldrb	r3, [r7, #20]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b56:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {   
 8002b58:	7d3b      	ldrb	r3, [r7, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <TM_MFRC522_ToCard+0x15e>
					n = 1;    
 8002b5e:	2301      	movs	r3, #1
 8002b60:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {   
 8002b62:	7d3b      	ldrb	r3, [r7, #20]
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d901      	bls.n	8002b6c <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;   
 8002b68:	2310      	movs	r3, #16
 8002b6a:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {   
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	827b      	strh	r3, [r7, #18]
 8002b70:	e00a      	b.n	8002b88 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
 8002b72:	8a7b      	ldrh	r3, [r7, #18]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	18d4      	adds	r4, r2, r3
 8002b78:	2009      	movs	r0, #9
 8002b7a:	f7ff fe7f 	bl	800287c <TM_MFRC522_ReadRegister>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {   
 8002b82:	8a7b      	ldrh	r3, [r7, #18]
 8002b84:	3301      	adds	r3, #1
 8002b86:	827b      	strh	r3, [r7, #18]
 8002b88:	7d3b      	ldrb	r3, [r7, #20]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	8a7a      	ldrh	r2, [r7, #18]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d3ef      	bcc.n	8002b72 <TM_MFRC522_ToCard+0x16e>
 8002b92:	e001      	b.n	8002b98 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {   
			status = MI_ERR;  
 8002b94:	2302      	movs	r3, #2
 8002b96:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8002b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd90      	pop	{r4, r7, pc}

08002ba2 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b086      	sub	sp, #24
 8002ba6:	af02      	add	r7, sp, #8
 8002ba8:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8002bae:	2100      	movs	r1, #0
 8002bb0:	200d      	movs	r0, #13
 8002bb2:	f7ff fe1f 	bl	80027f4 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2293      	movs	r2, #147	@ 0x93
 8002bba:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8002bc4:	f107 030a 	add.w	r3, r7, #10
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	200c      	movs	r0, #12
 8002bd2:	f7ff ff17 	bl	8002a04 <TM_MFRC522_ToCard>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d118      	bne.n	8002c12 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {   
 8002be0:	2300      	movs	r3, #0
 8002be2:	73bb      	strb	r3, [r7, #14]
 8002be4:	e009      	b.n	8002bfa <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8002be6:	7bbb      	ldrb	r3, [r7, #14]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	781a      	ldrb	r2, [r3, #0]
 8002bee:	7b7b      	ldrb	r3, [r7, #13]
 8002bf0:	4053      	eors	r3, r2
 8002bf2:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {   
 8002bf4:	7bbb      	ldrb	r3, [r7, #14]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	73bb      	strb	r3, [r7, #14]
 8002bfa:	7bbb      	ldrb	r3, [r7, #14]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d9f2      	bls.n	8002be6 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {   
 8002c00:	7bbb      	ldrb	r3, [r7, #14]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	4413      	add	r3, r2
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	7b7a      	ldrb	r2, [r7, #13]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d001      	beq.n	8002c12 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;    
 8002c0e:	2302      	movs	r3, #2
 8002c10:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
} 
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8002c1c:	b590      	push	{r4, r7, lr}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	460b      	mov	r3, r1
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);				//CRCIrq = 0
 8002c2a:	2104      	movs	r1, #4
 8002c2c:	2005      	movs	r0, #5
 8002c2e:	f7ff fe89 	bl	8002944 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8002c32:	2180      	movs	r1, #128	@ 0x80
 8002c34:	200a      	movs	r0, #10
 8002c36:	f7ff fe6b 	bl	8002910 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {   
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	75fb      	strb	r3, [r7, #23]
 8002c3e:	e00a      	b.n	8002c56 <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));   
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4413      	add	r3, r2
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	2009      	movs	r0, #9
 8002c4c:	f7ff fdd2 	bl	80027f4 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {   
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
 8002c52:	3301      	adds	r3, #1
 8002c54:	75fb      	strb	r3, [r7, #23]
 8002c56:	7dfa      	ldrb	r2, [r7, #23]
 8002c58:	7afb      	ldrb	r3, [r7, #11]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d3f0      	bcc.n	8002c40 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8002c5e:	2103      	movs	r1, #3
 8002c60:	2001      	movs	r0, #1
 8002c62:	f7ff fdc7 	bl	80027f4 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8002c66:	23ff      	movs	r3, #255	@ 0xff
 8002c68:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8002c6a:	2005      	movs	r0, #5
 8002c6c:	f7ff fe06 	bl	800287c <TM_MFRC522_ReadRegister>
 8002c70:	4603      	mov	r3, r0
 8002c72:	75bb      	strb	r3, [r7, #22]
		i--;
 8002c74:	7dfb      	ldrb	r3, [r7, #23]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d004      	beq.n	8002c8a <TM_MFRC522_CalculateCRC+0x6e>
 8002c80:	7dbb      	ldrb	r3, [r7, #22]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0ef      	beq.n	8002c6a <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8002c8a:	2022      	movs	r0, #34	@ 0x22
 8002c8c:	f7ff fdf6 	bl	800287c <TM_MFRC522_ReadRegister>
 8002c90:	4603      	mov	r3, r0
 8002c92:	461a      	mov	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	1c5c      	adds	r4, r3, #1
 8002c9c:	2021      	movs	r0, #33	@ 0x21
 8002c9e:	f7ff fded 	bl	800287c <TM_MFRC522_ReadRegister>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	7023      	strb	r3, [r4, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd90      	pop	{r4, r7, pc}

08002cae <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8002cb4:	2350      	movs	r3, #80	@ 0x50
 8002cb6:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8002cbc:	463b      	mov	r3, r7
 8002cbe:	1c9a      	adds	r2, r3, #2
 8002cc0:	463b      	mov	r3, r7
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ffa9 	bl	8002c1c <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8002cca:	463a      	mov	r2, r7
 8002ccc:	4639      	mov	r1, r7
 8002cce:	1dbb      	adds	r3, r7, #6
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	200c      	movs	r0, #12
 8002cd8:	f7ff fe94 	bl	8002a04 <TM_MFRC522_ToCard>
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <Reset_Handler>:
 8002ce4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d1c <LoopFillZerobss+0xe>
 8002ce8:	f7ff fd26 	bl	8002738 <SystemInit>
 8002cec:	480c      	ldr	r0, [pc, #48]	@ (8002d20 <LoopFillZerobss+0x12>)
 8002cee:	490d      	ldr	r1, [pc, #52]	@ (8002d24 <LoopFillZerobss+0x16>)
 8002cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8002d28 <LoopFillZerobss+0x1a>)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e002      	b.n	8002cfc <LoopCopyDataInit>

08002cf6 <CopyDataInit>:
 8002cf6:	58d4      	ldr	r4, [r2, r3]
 8002cf8:	50c4      	str	r4, [r0, r3]
 8002cfa:	3304      	adds	r3, #4

08002cfc <LoopCopyDataInit>:
 8002cfc:	18c4      	adds	r4, r0, r3
 8002cfe:	428c      	cmp	r4, r1
 8002d00:	d3f9      	bcc.n	8002cf6 <CopyDataInit>
 8002d02:	4a0a      	ldr	r2, [pc, #40]	@ (8002d2c <LoopFillZerobss+0x1e>)
 8002d04:	4c0a      	ldr	r4, [pc, #40]	@ (8002d30 <LoopFillZerobss+0x22>)
 8002d06:	2300      	movs	r3, #0
 8002d08:	e001      	b.n	8002d0e <LoopFillZerobss>

08002d0a <FillZerobss>:
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	3204      	adds	r2, #4

08002d0e <LoopFillZerobss>:
 8002d0e:	42a2      	cmp	r2, r4
 8002d10:	d3fb      	bcc.n	8002d0a <FillZerobss>
 8002d12:	f004 fa9b 	bl	800724c <__libc_init_array>
 8002d16:	f7fe fcf3 	bl	8001700 <main>
 8002d1a:	4770      	bx	lr
 8002d1c:	20030000 	.word	0x20030000
 8002d20:	20000000 	.word	0x20000000
 8002d24:	200001e0 	.word	0x200001e0
 8002d28:	0800b0ac 	.word	0x0800b0ac
 8002d2c:	200001e0 	.word	0x200001e0
 8002d30:	200009fc 	.word	0x200009fc

08002d34 <ADC_IRQHandler>:
 8002d34:	e7fe      	b.n	8002d34 <ADC_IRQHandler>
	...

08002d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <HAL_Init+0x40>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a0d      	ldr	r2, [pc, #52]	@ (8002d78 <HAL_Init+0x40>)
 8002d42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d48:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <HAL_Init+0x40>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d78 <HAL_Init+0x40>)
 8002d4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d54:	4b08      	ldr	r3, [pc, #32]	@ (8002d78 <HAL_Init+0x40>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a07      	ldr	r2, [pc, #28]	@ (8002d78 <HAL_Init+0x40>)
 8002d5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d60:	2003      	movs	r0, #3
 8002d62:	f000 f94f 	bl	8003004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d66:	200f      	movs	r0, #15
 8002d68:	f000 f808 	bl	8002d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d6c:	f7ff fae0 	bl	8002330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40023c00 	.word	0x40023c00

08002d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d84:	4b12      	ldr	r3, [pc, #72]	@ (8002dd0 <HAL_InitTick+0x54>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b12      	ldr	r3, [pc, #72]	@ (8002dd4 <HAL_InitTick+0x58>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 f967 	bl	800306e <HAL_SYSTICK_Config>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e00e      	b.n	8002dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b0f      	cmp	r3, #15
 8002dae:	d80a      	bhi.n	8002dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002db0:	2200      	movs	r2, #0
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	f04f 30ff 	mov.w	r0, #4294967295
 8002db8:	f000 f92f 	bl	800301a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dbc:	4a06      	ldr	r2, [pc, #24]	@ (8002dd8 <HAL_InitTick+0x5c>)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e000      	b.n	8002dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	2000000c 	.word	0x2000000c
 8002dd4:	20000014 	.word	0x20000014
 8002dd8:	20000010 	.word	0x20000010

08002ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de0:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <HAL_IncTick+0x20>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <HAL_IncTick+0x24>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4413      	add	r3, r2
 8002dec:	4a04      	ldr	r2, [pc, #16]	@ (8002e00 <HAL_IncTick+0x24>)
 8002dee:	6013      	str	r3, [r2, #0]
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000014 	.word	0x20000014
 8002e00:	200008ac 	.word	0x200008ac

08002e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return uwTick;
 8002e08:	4b03      	ldr	r3, [pc, #12]	@ (8002e18 <HAL_GetTick+0x14>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	200008ac 	.word	0x200008ac

08002e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7ff ffee 	bl	8002e04 <HAL_GetTick>
 8002e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d005      	beq.n	8002e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e36:	4b0a      	ldr	r3, [pc, #40]	@ (8002e60 <HAL_Delay+0x44>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e42:	bf00      	nop
 8002e44:	f7ff ffde 	bl	8002e04 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d8f7      	bhi.n	8002e44 <HAL_Delay+0x28>
  {
  }
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000014 	.word	0x20000014

08002e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e80:	4013      	ands	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e96:	4a04      	ldr	r2, [pc, #16]	@ (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	60d3      	str	r3, [r2, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb0:	4b04      	ldr	r3, [pc, #16]	@ (8002ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	f003 0307 	and.w	r3, r3, #7
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	db0b      	blt.n	8002ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	f003 021f 	and.w	r2, r3, #31
 8002ee0:	4907      	ldr	r1, [pc, #28]	@ (8002f00 <__NVIC_EnableIRQ+0x38>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	2001      	movs	r0, #1
 8002eea:	fa00 f202 	lsl.w	r2, r0, r2
 8002eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	e000e100 	.word	0xe000e100

08002f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	6039      	str	r1, [r7, #0]
 8002f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	db0a      	blt.n	8002f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	490c      	ldr	r1, [pc, #48]	@ (8002f50 <__NVIC_SetPriority+0x4c>)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	0112      	lsls	r2, r2, #4
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	440b      	add	r3, r1
 8002f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f2c:	e00a      	b.n	8002f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4908      	ldr	r1, [pc, #32]	@ (8002f54 <__NVIC_SetPriority+0x50>)
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	3b04      	subs	r3, #4
 8002f3c:	0112      	lsls	r2, r2, #4
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	440b      	add	r3, r1
 8002f42:	761a      	strb	r2, [r3, #24]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000e100 	.word	0xe000e100
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	@ 0x24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f1c3 0307 	rsb	r3, r3, #7
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	bf28      	it	cs
 8002f76:	2304      	movcs	r3, #4
 8002f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d902      	bls.n	8002f88 <NVIC_EncodePriority+0x30>
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3b03      	subs	r3, #3
 8002f86:	e000      	b.n	8002f8a <NVIC_EncodePriority+0x32>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43da      	mvns	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	43d9      	mvns	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	4313      	orrs	r3, r2
         );
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3724      	adds	r7, #36	@ 0x24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
	...

08002fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fd0:	d301      	bcc.n	8002fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e00f      	b.n	8002ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8003000 <SysTick_Config+0x40>)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fde:	210f      	movs	r1, #15
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe4:	f7ff ff8e 	bl	8002f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe8:	4b05      	ldr	r3, [pc, #20]	@ (8003000 <SysTick_Config+0x40>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fee:	4b04      	ldr	r3, [pc, #16]	@ (8003000 <SysTick_Config+0x40>)
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	e000e010 	.word	0xe000e010

08003004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff ff29 	bl	8002e64 <__NVIC_SetPriorityGrouping>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800301a:	b580      	push	{r7, lr}
 800301c:	b086      	sub	sp, #24
 800301e:	af00      	add	r7, sp, #0
 8003020:	4603      	mov	r3, r0
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800302c:	f7ff ff3e 	bl	8002eac <__NVIC_GetPriorityGrouping>
 8003030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	6978      	ldr	r0, [r7, #20]
 8003038:	f7ff ff8e 	bl	8002f58 <NVIC_EncodePriority>
 800303c:	4602      	mov	r2, r0
 800303e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff ff5d 	bl	8002f04 <__NVIC_SetPriority>
}
 800304a:	bf00      	nop
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	4603      	mov	r3, r0
 800305a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800305c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff ff31 	bl	8002ec8 <__NVIC_EnableIRQ>
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff ffa2 	bl	8002fc0 <SysTick_Config>
 800307c:	4603      	mov	r3, r0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003094:	f7ff feb6 	bl	8002e04 <HAL_GetTick>
 8003098:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d008      	beq.n	80030b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2280      	movs	r2, #128	@ 0x80
 80030aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e052      	b.n	800315e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0216 	bic.w	r2, r2, #22
 80030c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d103      	bne.n	80030e8 <HAL_DMA_Abort+0x62>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d007      	beq.n	80030f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0208 	bic.w	r2, r2, #8
 80030f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003108:	e013      	b.n	8003132 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800310a:	f7ff fe7b 	bl	8002e04 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b05      	cmp	r3, #5
 8003116:	d90c      	bls.n	8003132 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2203      	movs	r2, #3
 8003122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e015      	b.n	800315e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1e4      	bne.n	800310a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003144:	223f      	movs	r2, #63	@ 0x3f
 8003146:	409a      	lsls	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d004      	beq.n	8003184 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2280      	movs	r2, #128	@ 0x80
 800317e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e00c      	b.n	800319e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2205      	movs	r2, #5
 8003188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0201 	bic.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b089      	sub	sp, #36	@ 0x24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031be:	2300      	movs	r3, #0
 80031c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
 80031c6:	e177      	b.n	80034b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031c8:	2201      	movs	r2, #1
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4013      	ands	r3, r2
 80031da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	f040 8166 	bne.w	80034b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d005      	beq.n	80031fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d130      	bne.n	8003260 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	2203      	movs	r2, #3
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4013      	ands	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003234:	2201      	movs	r2, #1
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	f003 0201 	and.w	r2, r3, #1
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	2b03      	cmp	r3, #3
 800326a:	d017      	beq.n	800329c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	2203      	movs	r2, #3
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4013      	ands	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d123      	bne.n	80032f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	08da      	lsrs	r2, r3, #3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3208      	adds	r2, #8
 80032b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	220f      	movs	r2, #15
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	08da      	lsrs	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3208      	adds	r2, #8
 80032ea:	69b9      	ldr	r1, [r7, #24]
 80032ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	2203      	movs	r2, #3
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4013      	ands	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0203 	and.w	r2, r3, #3
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 80c0 	beq.w	80034b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	4b66      	ldr	r3, [pc, #408]	@ (80034d0 <HAL_GPIO_Init+0x324>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333a:	4a65      	ldr	r2, [pc, #404]	@ (80034d0 <HAL_GPIO_Init+0x324>)
 800333c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003340:	6453      	str	r3, [r2, #68]	@ 0x44
 8003342:	4b63      	ldr	r3, [pc, #396]	@ (80034d0 <HAL_GPIO_Init+0x324>)
 8003344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003346:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800334e:	4a61      	ldr	r2, [pc, #388]	@ (80034d4 <HAL_GPIO_Init+0x328>)
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	089b      	lsrs	r3, r3, #2
 8003354:	3302      	adds	r3, #2
 8003356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	220f      	movs	r2, #15
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a58      	ldr	r2, [pc, #352]	@ (80034d8 <HAL_GPIO_Init+0x32c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d037      	beq.n	80033ea <HAL_GPIO_Init+0x23e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a57      	ldr	r2, [pc, #348]	@ (80034dc <HAL_GPIO_Init+0x330>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d031      	beq.n	80033e6 <HAL_GPIO_Init+0x23a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a56      	ldr	r2, [pc, #344]	@ (80034e0 <HAL_GPIO_Init+0x334>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d02b      	beq.n	80033e2 <HAL_GPIO_Init+0x236>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a55      	ldr	r2, [pc, #340]	@ (80034e4 <HAL_GPIO_Init+0x338>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d025      	beq.n	80033de <HAL_GPIO_Init+0x232>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a54      	ldr	r2, [pc, #336]	@ (80034e8 <HAL_GPIO_Init+0x33c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d01f      	beq.n	80033da <HAL_GPIO_Init+0x22e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a53      	ldr	r2, [pc, #332]	@ (80034ec <HAL_GPIO_Init+0x340>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d019      	beq.n	80033d6 <HAL_GPIO_Init+0x22a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a52      	ldr	r2, [pc, #328]	@ (80034f0 <HAL_GPIO_Init+0x344>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_GPIO_Init+0x226>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a51      	ldr	r2, [pc, #324]	@ (80034f4 <HAL_GPIO_Init+0x348>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00d      	beq.n	80033ce <HAL_GPIO_Init+0x222>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a50      	ldr	r2, [pc, #320]	@ (80034f8 <HAL_GPIO_Init+0x34c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d007      	beq.n	80033ca <HAL_GPIO_Init+0x21e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a4f      	ldr	r2, [pc, #316]	@ (80034fc <HAL_GPIO_Init+0x350>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d101      	bne.n	80033c6 <HAL_GPIO_Init+0x21a>
 80033c2:	2309      	movs	r3, #9
 80033c4:	e012      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033c6:	230a      	movs	r3, #10
 80033c8:	e010      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033ca:	2308      	movs	r3, #8
 80033cc:	e00e      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033ce:	2307      	movs	r3, #7
 80033d0:	e00c      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033d2:	2306      	movs	r3, #6
 80033d4:	e00a      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033d6:	2305      	movs	r3, #5
 80033d8:	e008      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033da:	2304      	movs	r3, #4
 80033dc:	e006      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033de:	2303      	movs	r3, #3
 80033e0:	e004      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e002      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033ea:	2300      	movs	r3, #0
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	f002 0203 	and.w	r2, r2, #3
 80033f2:	0092      	lsls	r2, r2, #2
 80033f4:	4093      	lsls	r3, r2
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033fc:	4935      	ldr	r1, [pc, #212]	@ (80034d4 <HAL_GPIO_Init+0x328>)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	089b      	lsrs	r3, r3, #2
 8003402:	3302      	adds	r3, #2
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800340a:	4b3d      	ldr	r3, [pc, #244]	@ (8003500 <HAL_GPIO_Init+0x354>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800342e:	4a34      	ldr	r2, [pc, #208]	@ (8003500 <HAL_GPIO_Init+0x354>)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003434:	4b32      	ldr	r3, [pc, #200]	@ (8003500 <HAL_GPIO_Init+0x354>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003458:	4a29      	ldr	r2, [pc, #164]	@ (8003500 <HAL_GPIO_Init+0x354>)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800345e:	4b28      	ldr	r3, [pc, #160]	@ (8003500 <HAL_GPIO_Init+0x354>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003482:	4a1f      	ldr	r2, [pc, #124]	@ (8003500 <HAL_GPIO_Init+0x354>)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003488:	4b1d      	ldr	r3, [pc, #116]	@ (8003500 <HAL_GPIO_Init+0x354>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034ac:	4a14      	ldr	r2, [pc, #80]	@ (8003500 <HAL_GPIO_Init+0x354>)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3301      	adds	r3, #1
 80034b6:	61fb      	str	r3, [r7, #28]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	2b0f      	cmp	r3, #15
 80034bc:	f67f ae84 	bls.w	80031c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	3724      	adds	r7, #36	@ 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40013800 	.word	0x40013800
 80034d8:	40020000 	.word	0x40020000
 80034dc:	40020400 	.word	0x40020400
 80034e0:	40020800 	.word	0x40020800
 80034e4:	40020c00 	.word	0x40020c00
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40021400 	.word	0x40021400
 80034f0:	40021800 	.word	0x40021800
 80034f4:	40021c00 	.word	0x40021c00
 80034f8:	40022000 	.word	0x40022000
 80034fc:	40022400 	.word	0x40022400
 8003500:	40013c00 	.word	0x40013c00

08003504 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	887b      	ldrh	r3, [r7, #2]
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
 8003520:	e001      	b.n	8003526 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003526:	7bfb      	ldrb	r3, [r7, #15]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
 8003540:	4613      	mov	r3, r2
 8003542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003544:	787b      	ldrb	r3, [r7, #1]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003550:	e003      	b.n	800355a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003552:	887b      	ldrh	r3, [r7, #2]
 8003554:	041a      	lsls	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	619a      	str	r2, [r3, #24]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
	...

08003568 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	4b20      	ldr	r3, [pc, #128]	@ (80035f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	4a1f      	ldr	r2, [pc, #124]	@ (80035f8 <HAL_PWREx_EnableOverDrive+0x90>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003580:	6413      	str	r3, [r2, #64]	@ 0x40
 8003582:	4b1d      	ldr	r3, [pc, #116]	@ (80035f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800358e:	4b1b      	ldr	r3, [pc, #108]	@ (80035fc <HAL_PWREx_EnableOverDrive+0x94>)
 8003590:	2201      	movs	r2, #1
 8003592:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003594:	f7ff fc36 	bl	8002e04 <HAL_GetTick>
 8003598:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800359a:	e009      	b.n	80035b0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800359c:	f7ff fc32 	bl	8002e04 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035aa:	d901      	bls.n	80035b0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e01f      	b.n	80035f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035b0:	4b13      	ldr	r3, [pc, #76]	@ (8003600 <HAL_PWREx_EnableOverDrive+0x98>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035bc:	d1ee      	bne.n	800359c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035be:	4b11      	ldr	r3, [pc, #68]	@ (8003604 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035c4:	f7ff fc1e 	bl	8002e04 <HAL_GetTick>
 80035c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035ca:	e009      	b.n	80035e0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035cc:	f7ff fc1a 	bl	8002e04 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035da:	d901      	bls.n	80035e0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e007      	b.n	80035f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035e0:	4b07      	ldr	r3, [pc, #28]	@ (8003600 <HAL_PWREx_EnableOverDrive+0x98>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035ec:	d1ee      	bne.n	80035cc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40023800 	.word	0x40023800
 80035fc:	420e0040 	.word	0x420e0040
 8003600:	40007000 	.word	0x40007000
 8003604:	420e0044 	.word	0x420e0044

08003608 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e267      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d075      	beq.n	8003712 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003626:	4b88      	ldr	r3, [pc, #544]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	2b04      	cmp	r3, #4
 8003630:	d00c      	beq.n	800364c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003632:	4b85      	ldr	r3, [pc, #532]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800363a:	2b08      	cmp	r3, #8
 800363c:	d112      	bne.n	8003664 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800363e:	4b82      	ldr	r3, [pc, #520]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003646:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800364a:	d10b      	bne.n	8003664 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	4b7e      	ldr	r3, [pc, #504]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d05b      	beq.n	8003710 <HAL_RCC_OscConfig+0x108>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d157      	bne.n	8003710 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e242      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800366c:	d106      	bne.n	800367c <HAL_RCC_OscConfig+0x74>
 800366e:	4b76      	ldr	r3, [pc, #472]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a75      	ldr	r2, [pc, #468]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	e01d      	b.n	80036b8 <HAL_RCC_OscConfig+0xb0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003684:	d10c      	bne.n	80036a0 <HAL_RCC_OscConfig+0x98>
 8003686:	4b70      	ldr	r3, [pc, #448]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a6f      	ldr	r2, [pc, #444]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800368c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	4b6d      	ldr	r3, [pc, #436]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a6c      	ldr	r2, [pc, #432]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e00b      	b.n	80036b8 <HAL_RCC_OscConfig+0xb0>
 80036a0:	4b69      	ldr	r3, [pc, #420]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a68      	ldr	r2, [pc, #416]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80036a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	4b66      	ldr	r3, [pc, #408]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a65      	ldr	r2, [pc, #404]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80036b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d013      	beq.n	80036e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7ff fba0 	bl	8002e04 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c8:	f7ff fb9c 	bl	8002e04 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	@ 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e207      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036da:	4b5b      	ldr	r3, [pc, #364]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0xc0>
 80036e6:	e014      	b.n	8003712 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e8:	f7ff fb8c 	bl	8002e04 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f0:	f7ff fb88 	bl	8002e04 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	@ 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e1f3      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003702:	4b51      	ldr	r3, [pc, #324]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0xe8>
 800370e:	e000      	b.n	8003712 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d063      	beq.n	80037e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800371e:	4b4a      	ldr	r3, [pc, #296]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00b      	beq.n	8003742 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800372a:	4b47      	ldr	r3, [pc, #284]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003732:	2b08      	cmp	r3, #8
 8003734:	d11c      	bne.n	8003770 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003736:	4b44      	ldr	r3, [pc, #272]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d116      	bne.n	8003770 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003742:	4b41      	ldr	r3, [pc, #260]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d005      	beq.n	800375a <HAL_RCC_OscConfig+0x152>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d001      	beq.n	800375a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e1c7      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375a:	4b3b      	ldr	r3, [pc, #236]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4937      	ldr	r1, [pc, #220]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376e:	e03a      	b.n	80037e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d020      	beq.n	80037ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003778:	4b34      	ldr	r3, [pc, #208]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377e:	f7ff fb41 	bl	8002e04 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003786:	f7ff fb3d 	bl	8002e04 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e1a8      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003798:	4b2b      	ldr	r3, [pc, #172]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a4:	4b28      	ldr	r3, [pc, #160]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4925      	ldr	r1, [pc, #148]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	600b      	str	r3, [r1, #0]
 80037b8:	e015      	b.n	80037e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ba:	4b24      	ldr	r3, [pc, #144]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7ff fb20 	bl	8002e04 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c8:	f7ff fb1c 	bl	8002e04 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e187      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037da:	4b1b      	ldr	r3, [pc, #108]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d036      	beq.n	8003860 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d016      	beq.n	8003828 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037fa:	4b15      	ldr	r3, [pc, #84]	@ (8003850 <HAL_RCC_OscConfig+0x248>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7ff fb00 	bl	8002e04 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003808:	f7ff fafc 	bl	8002e04 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e167      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381a:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800381c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0x200>
 8003826:	e01b      	b.n	8003860 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003828:	4b09      	ldr	r3, [pc, #36]	@ (8003850 <HAL_RCC_OscConfig+0x248>)
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382e:	f7ff fae9 	bl	8002e04 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003834:	e00e      	b.n	8003854 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003836:	f7ff fae5 	bl	8002e04 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d907      	bls.n	8003854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e150      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
 8003848:	40023800 	.word	0x40023800
 800384c:	42470000 	.word	0x42470000
 8003850:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003854:	4b88      	ldr	r3, [pc, #544]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1ea      	bne.n	8003836 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8097 	beq.w	800399c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003872:	4b81      	ldr	r3, [pc, #516]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10f      	bne.n	800389e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	4b7d      	ldr	r3, [pc, #500]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003886:	4a7c      	ldr	r2, [pc, #496]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800388c:	6413      	str	r3, [r2, #64]	@ 0x40
 800388e:	4b7a      	ldr	r3, [pc, #488]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003896:	60bb      	str	r3, [r7, #8]
 8003898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800389a:	2301      	movs	r3, #1
 800389c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389e:	4b77      	ldr	r3, [pc, #476]	@ (8003a7c <HAL_RCC_OscConfig+0x474>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d118      	bne.n	80038dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038aa:	4b74      	ldr	r3, [pc, #464]	@ (8003a7c <HAL_RCC_OscConfig+0x474>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a73      	ldr	r2, [pc, #460]	@ (8003a7c <HAL_RCC_OscConfig+0x474>)
 80038b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b6:	f7ff faa5 	bl	8002e04 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038be:	f7ff faa1 	bl	8002e04 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e10c      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d0:	4b6a      	ldr	r3, [pc, #424]	@ (8003a7c <HAL_RCC_OscConfig+0x474>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d106      	bne.n	80038f2 <HAL_RCC_OscConfig+0x2ea>
 80038e4:	4b64      	ldr	r3, [pc, #400]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e8:	4a63      	ldr	r2, [pc, #396]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80038f0:	e01c      	b.n	800392c <HAL_RCC_OscConfig+0x324>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b05      	cmp	r3, #5
 80038f8:	d10c      	bne.n	8003914 <HAL_RCC_OscConfig+0x30c>
 80038fa:	4b5f      	ldr	r3, [pc, #380]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fe:	4a5e      	ldr	r2, [pc, #376]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003900:	f043 0304 	orr.w	r3, r3, #4
 8003904:	6713      	str	r3, [r2, #112]	@ 0x70
 8003906:	4b5c      	ldr	r3, [pc, #368]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390a:	4a5b      	ldr	r2, [pc, #364]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	6713      	str	r3, [r2, #112]	@ 0x70
 8003912:	e00b      	b.n	800392c <HAL_RCC_OscConfig+0x324>
 8003914:	4b58      	ldr	r3, [pc, #352]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003918:	4a57      	ldr	r2, [pc, #348]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003920:	4b55      	ldr	r3, [pc, #340]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003924:	4a54      	ldr	r2, [pc, #336]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003926:	f023 0304 	bic.w	r3, r3, #4
 800392a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d015      	beq.n	8003960 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003934:	f7ff fa66 	bl	8002e04 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800393a:	e00a      	b.n	8003952 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393c:	f7ff fa62 	bl	8002e04 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e0cb      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003952:	4b49      	ldr	r3, [pc, #292]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0ee      	beq.n	800393c <HAL_RCC_OscConfig+0x334>
 800395e:	e014      	b.n	800398a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003960:	f7ff fa50 	bl	8002e04 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003966:	e00a      	b.n	800397e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003968:	f7ff fa4c 	bl	8002e04 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e0b5      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1ee      	bne.n	8003968 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d105      	bne.n	800399c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003990:	4b39      	ldr	r3, [pc, #228]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003994:	4a38      	ldr	r2, [pc, #224]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800399a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80a1 	beq.w	8003ae8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039a6:	4b34      	ldr	r3, [pc, #208]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d05c      	beq.n	8003a6c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d141      	bne.n	8003a3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ba:	4b31      	ldr	r3, [pc, #196]	@ (8003a80 <HAL_RCC_OscConfig+0x478>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7ff fa20 	bl	8002e04 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c8:	f7ff fa1c 	bl	8002e04 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e087      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039da:	4b27      	ldr	r3, [pc, #156]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69da      	ldr	r2, [r3, #28]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	019b      	lsls	r3, r3, #6
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	085b      	lsrs	r3, r3, #1
 80039fe:	3b01      	subs	r3, #1
 8003a00:	041b      	lsls	r3, r3, #16
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a08:	061b      	lsls	r3, r3, #24
 8003a0a:	491b      	ldr	r1, [pc, #108]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a10:	4b1b      	ldr	r3, [pc, #108]	@ (8003a80 <HAL_RCC_OscConfig+0x478>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a16:	f7ff f9f5 	bl	8002e04 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1e:	f7ff f9f1 	bl	8002e04 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e05c      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a30:	4b11      	ldr	r3, [pc, #68]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x416>
 8003a3c:	e054      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3e:	4b10      	ldr	r3, [pc, #64]	@ (8003a80 <HAL_RCC_OscConfig+0x478>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7ff f9de 	bl	8002e04 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4c:	f7ff f9da 	bl	8002e04 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e045      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5e:	4b06      	ldr	r3, [pc, #24]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x444>
 8003a6a:	e03d      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d107      	bne.n	8003a84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e038      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	40007000 	.word	0x40007000
 8003a80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a84:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <HAL_RCC_OscConfig+0x4ec>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d028      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d121      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d11a      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003aba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d111      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aca:	085b      	lsrs	r3, r3, #1
 8003acc:	3b01      	subs	r3, #1
 8003ace:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d107      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ade:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800

08003af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0cc      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b0c:	4b68      	ldr	r3, [pc, #416]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d90c      	bls.n	8003b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	4b65      	ldr	r3, [pc, #404]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b22:	4b63      	ldr	r3, [pc, #396]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0b8      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d020      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b4c:	4b59      	ldr	r3, [pc, #356]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	4a58      	ldr	r2, [pc, #352]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b64:	4b53      	ldr	r3, [pc, #332]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4a52      	ldr	r2, [pc, #328]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b70:	4b50      	ldr	r3, [pc, #320]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	494d      	ldr	r1, [pc, #308]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d044      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d107      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b96:	4b47      	ldr	r3, [pc, #284]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d119      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e07f      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d107      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e06f      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e067      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bd6:	4b37      	ldr	r3, [pc, #220]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f023 0203 	bic.w	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	4934      	ldr	r1, [pc, #208]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003be8:	f7ff f90c 	bl	8002e04 <HAL_GetTick>
 8003bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bee:	e00a      	b.n	8003c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf0:	f7ff f908 	bl	8002e04 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e04f      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c06:	4b2b      	ldr	r3, [pc, #172]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 020c 	and.w	r2, r3, #12
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d1eb      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c18:	4b25      	ldr	r3, [pc, #148]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d20c      	bcs.n	8003c40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	4b22      	ldr	r3, [pc, #136]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2e:	4b20      	ldr	r3, [pc, #128]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e032      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c4c:	4b19      	ldr	r3, [pc, #100]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	4916      	ldr	r1, [pc, #88]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c6a:	4b12      	ldr	r3, [pc, #72]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	490e      	ldr	r1, [pc, #56]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c7e:	f000 f821 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8003c82:	4602      	mov	r2, r0
 8003c84:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	091b      	lsrs	r3, r3, #4
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	490a      	ldr	r1, [pc, #40]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c90:	5ccb      	ldrb	r3, [r1, r3]
 8003c92:	fa22 f303 	lsr.w	r3, r2, r3
 8003c96:	4a09      	ldr	r2, [pc, #36]	@ (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c9a:	4b09      	ldr	r3, [pc, #36]	@ (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff f86c 	bl	8002d7c <HAL_InitTick>

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40023c00 	.word	0x40023c00
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	0800ac5c 	.word	0x0800ac5c
 8003cbc:	2000000c 	.word	0x2000000c
 8003cc0:	20000010 	.word	0x20000010

08003cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc8:	b094      	sub	sp, #80	@ 0x50
 8003cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cdc:	4b79      	ldr	r3, [pc, #484]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 030c 	and.w	r3, r3, #12
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d00d      	beq.n	8003d04 <HAL_RCC_GetSysClockFreq+0x40>
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	f200 80e1 	bhi.w	8003eb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d003      	beq.n	8003cfe <HAL_RCC_GetSysClockFreq+0x3a>
 8003cf6:	e0db      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cf8:	4b73      	ldr	r3, [pc, #460]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cfc:	e0db      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cfe:	4b73      	ldr	r3, [pc, #460]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x208>)
 8003d00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d02:	e0d8      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d04:	4b6f      	ldr	r3, [pc, #444]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d063      	beq.n	8003de2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	099b      	lsrs	r3, r3, #6
 8003d20:	2200      	movs	r2, #0
 8003d22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d2e:	2300      	movs	r3, #0
 8003d30:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d36:	4622      	mov	r2, r4
 8003d38:	462b      	mov	r3, r5
 8003d3a:	f04f 0000 	mov.w	r0, #0
 8003d3e:	f04f 0100 	mov.w	r1, #0
 8003d42:	0159      	lsls	r1, r3, #5
 8003d44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d48:	0150      	lsls	r0, r2, #5
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4621      	mov	r1, r4
 8003d50:	1a51      	subs	r1, r2, r1
 8003d52:	6139      	str	r1, [r7, #16]
 8003d54:	4629      	mov	r1, r5
 8003d56:	eb63 0301 	sbc.w	r3, r3, r1
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d68:	4659      	mov	r1, fp
 8003d6a:	018b      	lsls	r3, r1, #6
 8003d6c:	4651      	mov	r1, sl
 8003d6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d72:	4651      	mov	r1, sl
 8003d74:	018a      	lsls	r2, r1, #6
 8003d76:	4651      	mov	r1, sl
 8003d78:	ebb2 0801 	subs.w	r8, r2, r1
 8003d7c:	4659      	mov	r1, fp
 8003d7e:	eb63 0901 	sbc.w	r9, r3, r1
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d96:	4690      	mov	r8, r2
 8003d98:	4699      	mov	r9, r3
 8003d9a:	4623      	mov	r3, r4
 8003d9c:	eb18 0303 	adds.w	r3, r8, r3
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	462b      	mov	r3, r5
 8003da4:	eb49 0303 	adc.w	r3, r9, r3
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003db6:	4629      	mov	r1, r5
 8003db8:	024b      	lsls	r3, r1, #9
 8003dba:	4621      	mov	r1, r4
 8003dbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	024a      	lsls	r2, r1, #9
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dca:	2200      	movs	r2, #0
 8003dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003dd4:	f7fc ff68 	bl	8000ca8 <__aeabi_uldivmod>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4613      	mov	r3, r2
 8003dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003de0:	e058      	b.n	8003e94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de2:	4b38      	ldr	r3, [pc, #224]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	099b      	lsrs	r3, r3, #6
 8003de8:	2200      	movs	r2, #0
 8003dea:	4618      	mov	r0, r3
 8003dec:	4611      	mov	r1, r2
 8003dee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003df2:	623b      	str	r3, [r7, #32]
 8003df4:	2300      	movs	r3, #0
 8003df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003df8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dfc:	4642      	mov	r2, r8
 8003dfe:	464b      	mov	r3, r9
 8003e00:	f04f 0000 	mov.w	r0, #0
 8003e04:	f04f 0100 	mov.w	r1, #0
 8003e08:	0159      	lsls	r1, r3, #5
 8003e0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e0e:	0150      	lsls	r0, r2, #5
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4641      	mov	r1, r8
 8003e16:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e34:	ebb2 040a 	subs.w	r4, r2, sl
 8003e38:	eb63 050b 	sbc.w	r5, r3, fp
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	00eb      	lsls	r3, r5, #3
 8003e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e4a:	00e2      	lsls	r2, r4, #3
 8003e4c:	4614      	mov	r4, r2
 8003e4e:	461d      	mov	r5, r3
 8003e50:	4643      	mov	r3, r8
 8003e52:	18e3      	adds	r3, r4, r3
 8003e54:	603b      	str	r3, [r7, #0]
 8003e56:	464b      	mov	r3, r9
 8003e58:	eb45 0303 	adc.w	r3, r5, r3
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	028b      	lsls	r3, r1, #10
 8003e6e:	4621      	mov	r1, r4
 8003e70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e74:	4621      	mov	r1, r4
 8003e76:	028a      	lsls	r2, r1, #10
 8003e78:	4610      	mov	r0, r2
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e7e:	2200      	movs	r2, #0
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	61fa      	str	r2, [r7, #28]
 8003e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e88:	f7fc ff0e 	bl	8000ca8 <__aeabi_uldivmod>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4613      	mov	r3, r2
 8003e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003ea4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eae:	e002      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eb0:	4b05      	ldr	r3, [pc, #20]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3750      	adds	r7, #80	@ 0x50
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	00f42400 	.word	0x00f42400
 8003ecc:	007a1200 	.word	0x007a1200

08003ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed4:	4b03      	ldr	r3, [pc, #12]	@ (8003ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	2000000c 	.word	0x2000000c

08003ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eec:	f7ff fff0 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b05      	ldr	r3, [pc, #20]	@ (8003f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	0a9b      	lsrs	r3, r3, #10
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	4903      	ldr	r1, [pc, #12]	@ (8003f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	0800ac6c 	.word	0x0800ac6c

08003f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f14:	f7ff ffdc 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b05      	ldr	r3, [pc, #20]	@ (8003f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	0b5b      	lsrs	r3, r3, #13
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	4903      	ldr	r1, [pc, #12]	@ (8003f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f26:	5ccb      	ldrb	r3, [r1, r3]
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40023800 	.word	0x40023800
 8003f34:	0800ac6c 	.word	0x0800ac6c

08003f38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e07b      	b.n	8004042 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d108      	bne.n	8003f64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f5a:	d009      	beq.n	8003f70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	61da      	str	r2, [r3, #28]
 8003f62:	e005      	b.n	8003f70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fe f9f8 	bl	8002380 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fa6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff4:	ea42 0103 	orr.w	r1, r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	f003 0104 	and.w	r1, r3, #4
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004016:	f003 0210 	and.w	r2, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004030:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b088      	sub	sp, #32
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	4613      	mov	r3, r2
 8004058:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800405a:	f7fe fed3 	bl	8002e04 <HAL_GetTick>
 800405e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004060:	88fb      	ldrh	r3, [r7, #6]
 8004062:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	d001      	beq.n	8004074 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004070:	2302      	movs	r3, #2
 8004072:	e12a      	b.n	80042ca <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <HAL_SPI_Transmit+0x36>
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e122      	b.n	80042ca <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_SPI_Transmit+0x48>
 800408e:	2302      	movs	r3, #2
 8004090:	e11b      	b.n	80042ca <HAL_SPI_Transmit+0x280>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2203      	movs	r2, #3
 800409e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	88fa      	ldrh	r2, [r7, #6]
 80040b2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	88fa      	ldrh	r2, [r7, #6]
 80040b8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040e0:	d10f      	bne.n	8004102 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004100:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410c:	2b40      	cmp	r3, #64	@ 0x40
 800410e:	d007      	beq.n	8004120 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800411e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004128:	d152      	bne.n	80041d0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_SPI_Transmit+0xee>
 8004132:	8b7b      	ldrh	r3, [r7, #26]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d145      	bne.n	80041c4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413c:	881a      	ldrh	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004148:	1c9a      	adds	r2, r3, #2
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800415c:	e032      	b.n	80041c4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b02      	cmp	r3, #2
 800416a:	d112      	bne.n	8004192 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004170:	881a      	ldrh	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417c:	1c9a      	adds	r2, r3, #2
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004190:	e018      	b.n	80041c4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004192:	f7fe fe37 	bl	8002e04 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d803      	bhi.n	80041aa <HAL_SPI_Transmit+0x160>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	d102      	bne.n	80041b0 <HAL_SPI_Transmit+0x166>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d109      	bne.n	80041c4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e082      	b.n	80042ca <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1c7      	bne.n	800415e <HAL_SPI_Transmit+0x114>
 80041ce:	e053      	b.n	8004278 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <HAL_SPI_Transmit+0x194>
 80041d8:	8b7b      	ldrh	r3, [r7, #26]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d147      	bne.n	800426e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	330c      	adds	r3, #12
 80041e8:	7812      	ldrb	r2, [r2, #0]
 80041ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004204:	e033      	b.n	800426e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b02      	cmp	r3, #2
 8004212:	d113      	bne.n	800423c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	330c      	adds	r3, #12
 800421e:	7812      	ldrb	r2, [r2, #0]
 8004220:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	86da      	strh	r2, [r3, #54]	@ 0x36
 800423a:	e018      	b.n	800426e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800423c:	f7fe fde2 	bl	8002e04 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d803      	bhi.n	8004254 <HAL_SPI_Transmit+0x20a>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d102      	bne.n	800425a <HAL_SPI_Transmit+0x210>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d109      	bne.n	800426e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e02d      	b.n	80042ca <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1c6      	bne.n	8004206 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	6839      	ldr	r1, [r7, #0]
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 fbe7 	bl	8004a50 <SPI_EndRxTxTransaction>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10a      	bne.n	80042ac <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80042c8:	2300      	movs	r3, #0
  }
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b088      	sub	sp, #32
 80042d6:	af02      	add	r7, sp, #8
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	603b      	str	r3, [r7, #0]
 80042de:	4613      	mov	r3, r2
 80042e0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d001      	beq.n	80042f2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80042ee:	2302      	movs	r3, #2
 80042f0:	e104      	b.n	80044fc <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <HAL_SPI_Receive+0x2c>
 80042f8:	88fb      	ldrh	r3, [r7, #6]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e0fc      	b.n	80044fc <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800430a:	d112      	bne.n	8004332 <HAL_SPI_Receive+0x60>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10e      	bne.n	8004332 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2204      	movs	r2, #4
 8004318:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800431c:	88fa      	ldrh	r2, [r7, #6]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	4613      	mov	r3, r2
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f8eb 	bl	8004504 <HAL_SPI_TransmitReceive>
 800432e:	4603      	mov	r3, r0
 8004330:	e0e4      	b.n	80044fc <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004332:	f7fe fd67 	bl	8002e04 <HAL_GetTick>
 8004336:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_SPI_Receive+0x74>
 8004342:	2302      	movs	r3, #2
 8004344:	e0da      	b.n	80044fc <HAL_SPI_Receive+0x22a>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2204      	movs	r2, #4
 8004352:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	88fa      	ldrh	r2, [r7, #6]
 8004366:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	88fa      	ldrh	r2, [r7, #6]
 800436c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004394:	d10f      	bne.n	80043b6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80043b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c0:	2b40      	cmp	r3, #64	@ 0x40
 80043c2:	d007      	beq.n	80043d4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d170      	bne.n	80044be <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80043dc:	e035      	b.n	800444a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d115      	bne.n	8004418 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f103 020c 	add.w	r2, r3, #12
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f8:	7812      	ldrb	r2, [r2, #0]
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004416:	e018      	b.n	800444a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004418:	f7fe fcf4 	bl	8002e04 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d803      	bhi.n	8004430 <HAL_SPI_Receive+0x15e>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442e:	d102      	bne.n	8004436 <HAL_SPI_Receive+0x164>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d109      	bne.n	800444a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e058      	b.n	80044fc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1c4      	bne.n	80043de <HAL_SPI_Receive+0x10c>
 8004454:	e038      	b.n	80044c8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b01      	cmp	r3, #1
 8004462:	d113      	bne.n	800448c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446e:	b292      	uxth	r2, r2
 8004470:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004476:	1c9a      	adds	r2, r3, #2
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800448a:	e018      	b.n	80044be <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800448c:	f7fe fcba 	bl	8002e04 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d803      	bhi.n	80044a4 <HAL_SPI_Receive+0x1d2>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a2:	d102      	bne.n	80044aa <HAL_SPI_Receive+0x1d8>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e01e      	b.n	80044fc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1c6      	bne.n	8004456 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	6839      	ldr	r1, [r7, #0]
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 fa59 	bl	8004984 <SPI_EndRxTransaction>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80044fa:	2300      	movs	r3, #0
  }
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08a      	sub	sp, #40	@ 0x28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004512:	2301      	movs	r3, #1
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004516:	f7fe fc75 	bl	8002e04 <HAL_GetTick>
 800451a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004522:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800452a:	887b      	ldrh	r3, [r7, #2]
 800452c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800452e:	7ffb      	ldrb	r3, [r7, #31]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d00c      	beq.n	800454e <HAL_SPI_TransmitReceive+0x4a>
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800453a:	d106      	bne.n	800454a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <HAL_SPI_TransmitReceive+0x46>
 8004544:	7ffb      	ldrb	r3, [r7, #31]
 8004546:	2b04      	cmp	r3, #4
 8004548:	d001      	beq.n	800454e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800454a:	2302      	movs	r3, #2
 800454c:	e17f      	b.n	800484e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_SPI_TransmitReceive+0x5c>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_SPI_TransmitReceive+0x5c>
 800455a:	887b      	ldrh	r3, [r7, #2]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e174      	b.n	800484e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_SPI_TransmitReceive+0x6e>
 800456e:	2302      	movs	r3, #2
 8004570:	e16d      	b.n	800484e <HAL_SPI_TransmitReceive+0x34a>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b04      	cmp	r3, #4
 8004584:	d003      	beq.n	800458e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2205      	movs	r2, #5
 800458a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	887a      	ldrh	r2, [r7, #2]
 800459e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	887a      	ldrh	r2, [r7, #2]
 80045a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	887a      	ldrh	r2, [r7, #2]
 80045b0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	887a      	ldrh	r2, [r7, #2]
 80045b6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ce:	2b40      	cmp	r3, #64	@ 0x40
 80045d0:	d007      	beq.n	80045e2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ea:	d17e      	bne.n	80046ea <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_SPI_TransmitReceive+0xf6>
 80045f4:	8afb      	ldrh	r3, [r7, #22]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d16c      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fe:	881a      	ldrh	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460a:	1c9a      	adds	r2, r3, #2
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800461e:	e059      	b.n	80046d4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b02      	cmp	r3, #2
 800462c:	d11b      	bne.n	8004666 <HAL_SPI_TransmitReceive+0x162>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d016      	beq.n	8004666 <HAL_SPI_TransmitReceive+0x162>
 8004638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463a:	2b01      	cmp	r3, #1
 800463c:	d113      	bne.n	8004666 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004642:	881a      	ldrh	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464e:	1c9a      	adds	r2, r3, #2
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d119      	bne.n	80046a8 <HAL_SPI_TransmitReceive+0x1a4>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d014      	beq.n	80046a8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004688:	b292      	uxth	r2, r2
 800468a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004690:	1c9a      	adds	r2, r3, #2
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046a4:	2301      	movs	r3, #1
 80046a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046a8:	f7fe fbac 	bl	8002e04 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d80d      	bhi.n	80046d4 <HAL_SPI_TransmitReceive+0x1d0>
 80046b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046be:	d009      	beq.n	80046d4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e0bc      	b.n	800484e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046d8:	b29b      	uxth	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1a0      	bne.n	8004620 <HAL_SPI_TransmitReceive+0x11c>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d19b      	bne.n	8004620 <HAL_SPI_TransmitReceive+0x11c>
 80046e8:	e082      	b.n	80047f0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <HAL_SPI_TransmitReceive+0x1f4>
 80046f2:	8afb      	ldrh	r3, [r7, #22]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d171      	bne.n	80047dc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	7812      	ldrb	r2, [r2, #0]
 8004704:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800471e:	e05d      	b.n	80047dc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b02      	cmp	r3, #2
 800472c:	d11c      	bne.n	8004768 <HAL_SPI_TransmitReceive+0x264>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004732:	b29b      	uxth	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d017      	beq.n	8004768 <HAL_SPI_TransmitReceive+0x264>
 8004738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473a:	2b01      	cmp	r3, #1
 800473c:	d114      	bne.n	8004768 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	330c      	adds	r3, #12
 8004748:	7812      	ldrb	r2, [r2, #0]
 800474a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b01      	cmp	r3, #1
 8004774:	d119      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x2a6>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d014      	beq.n	80047aa <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047a6:	2301      	movs	r3, #1
 80047a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047aa:	f7fe fb2b 	bl	8002e04 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d803      	bhi.n	80047c2 <HAL_SPI_TransmitReceive+0x2be>
 80047ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c0:	d102      	bne.n	80047c8 <HAL_SPI_TransmitReceive+0x2c4>
 80047c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d109      	bne.n	80047dc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e038      	b.n	800484e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d19c      	bne.n	8004720 <HAL_SPI_TransmitReceive+0x21c>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d197      	bne.n	8004720 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047f0:	6a3a      	ldr	r2, [r7, #32]
 80047f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f92b 	bl	8004a50 <SPI_EndRxTxTransaction>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e01d      	b.n	800484e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10a      	bne.n	8004830 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800481a:	2300      	movs	r3, #0
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800484c:	2300      	movs	r3, #0
  }
}
 800484e:	4618      	mov	r0, r3
 8004850:	3728      	adds	r7, #40	@ 0x28
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004864:	b2db      	uxtb	r3, r3
}
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	603b      	str	r3, [r7, #0]
 8004880:	4613      	mov	r3, r2
 8004882:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004884:	f7fe fabe 	bl	8002e04 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488c:	1a9b      	subs	r3, r3, r2
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	4413      	add	r3, r2
 8004892:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004894:	f7fe fab6 	bl	8002e04 <HAL_GetTick>
 8004898:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800489a:	4b39      	ldr	r3, [pc, #228]	@ (8004980 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	015b      	lsls	r3, r3, #5
 80048a0:	0d1b      	lsrs	r3, r3, #20
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	fb02 f303 	mul.w	r3, r2, r3
 80048a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048aa:	e055      	b.n	8004958 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d051      	beq.n	8004958 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048b4:	f7fe faa6 	bl	8002e04 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d902      	bls.n	80048ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d13d      	bne.n	8004946 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80048d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048e2:	d111      	bne.n	8004908 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048ec:	d004      	beq.n	80048f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f6:	d107      	bne.n	8004908 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004906:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004910:	d10f      	bne.n	8004932 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004930:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e018      	b.n	8004978 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d102      	bne.n	8004952 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	61fb      	str	r3, [r7, #28]
 8004950:	e002      	b.n	8004958 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	3b01      	subs	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	4013      	ands	r3, r2
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	429a      	cmp	r2, r3
 8004966:	bf0c      	ite	eq
 8004968:	2301      	moveq	r3, #1
 800496a:	2300      	movne	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	461a      	mov	r2, r3
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	429a      	cmp	r2, r3
 8004974:	d19a      	bne.n	80048ac <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3720      	adds	r7, #32
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	2000000c 	.word	0x2000000c

08004984 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af02      	add	r7, sp, #8
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004998:	d111      	bne.n	80049be <SPI_EndRxTransaction+0x3a>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049a2:	d004      	beq.n	80049ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ac:	d107      	bne.n	80049be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049c6:	d12a      	bne.n	8004a1e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049d0:	d012      	beq.n	80049f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2200      	movs	r2, #0
 80049da:	2180      	movs	r1, #128	@ 0x80
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f7ff ff49 	bl	8004874 <SPI_WaitFlagStateUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d02d      	beq.n	8004a44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ec:	f043 0220 	orr.w	r2, r3, #32
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e026      	b.n	8004a46 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2200      	movs	r2, #0
 8004a00:	2101      	movs	r1, #1
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f7ff ff36 	bl	8004874 <SPI_WaitFlagStateUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d01a      	beq.n	8004a44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a12:	f043 0220 	orr.w	r2, r3, #32
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e013      	b.n	8004a46 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2200      	movs	r2, #0
 8004a26:	2101      	movs	r1, #1
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f7ff ff23 	bl	8004874 <SPI_WaitFlagStateUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a38:	f043 0220 	orr.w	r2, r3, #32
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e000      	b.n	8004a46 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b088      	sub	sp, #32
 8004a54:	af02      	add	r7, sp, #8
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2201      	movs	r2, #1
 8004a64:	2102      	movs	r1, #2
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f7ff ff04 	bl	8004874 <SPI_WaitFlagStateUntilTimeout>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d007      	beq.n	8004a82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a76:	f043 0220 	orr.w	r2, r3, #32
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e032      	b.n	8004ae8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a82:	4b1b      	ldr	r3, [pc, #108]	@ (8004af0 <SPI_EndRxTxTransaction+0xa0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1b      	ldr	r2, [pc, #108]	@ (8004af4 <SPI_EndRxTxTransaction+0xa4>)
 8004a88:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8c:	0d5b      	lsrs	r3, r3, #21
 8004a8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004a92:	fb02 f303 	mul.w	r3, r2, r3
 8004a96:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004aa0:	d112      	bne.n	8004ac8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2180      	movs	r1, #128	@ 0x80
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f7ff fee1 	bl	8004874 <SPI_WaitFlagStateUntilTimeout>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d016      	beq.n	8004ae6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004abc:	f043 0220 	orr.w	r2, r3, #32
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e00f      	b.n	8004ae8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ade:	2b80      	cmp	r3, #128	@ 0x80
 8004ae0:	d0f2      	beq.n	8004ac8 <SPI_EndRxTxTransaction+0x78>
 8004ae2:	e000      	b.n	8004ae6 <SPI_EndRxTxTransaction+0x96>
        break;
 8004ae4:	bf00      	nop
  }

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	2000000c 	.word	0x2000000c
 8004af4:	165e9f81 	.word	0x165e9f81

08004af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e041      	b.n	8004b8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fd fc76 	bl	8002410 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3304      	adds	r3, #4
 8004b34:	4619      	mov	r1, r3
 8004b36:	4610      	mov	r0, r2
 8004b38:	f000 f9b6 	bl	8004ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d001      	beq.n	8004bb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e04e      	b.n	8004c4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a23      	ldr	r2, [pc, #140]	@ (8004c5c <HAL_TIM_Base_Start_IT+0xc4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d022      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0x80>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bda:	d01d      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0x80>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1f      	ldr	r2, [pc, #124]	@ (8004c60 <HAL_TIM_Base_Start_IT+0xc8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d018      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0x80>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1e      	ldr	r2, [pc, #120]	@ (8004c64 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d013      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0x80>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c68 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00e      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0x80>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a1b      	ldr	r2, [pc, #108]	@ (8004c6c <HAL_TIM_Base_Start_IT+0xd4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d009      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0x80>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a19      	ldr	r2, [pc, #100]	@ (8004c70 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d004      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0x80>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a18      	ldr	r2, [pc, #96]	@ (8004c74 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d111      	bne.n	8004c3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b06      	cmp	r3, #6
 8004c28:	d010      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0201 	orr.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3a:	e007      	b.n	8004c4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	40000400 	.word	0x40000400
 8004c64:	40000800 	.word	0x40000800
 8004c68:	40000c00 	.word	0x40000c00
 8004c6c:	40010400 	.word	0x40010400
 8004c70:	40014000 	.word	0x40014000
 8004c74:	40001800 	.word	0x40001800

08004c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d020      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01b      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f06f 0202 	mvn.w	r2, #2
 8004cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f8d2 	bl	8004e6c <HAL_TIM_IC_CaptureCallback>
 8004cc8:	e005      	b.n	8004cd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f8c4 	bl	8004e58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f8d5 	bl	8004e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d020      	beq.n	8004d28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d01b      	beq.n	8004d28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0204 	mvn.w	r2, #4
 8004cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f8ac 	bl	8004e6c <HAL_TIM_IC_CaptureCallback>
 8004d14:	e005      	b.n	8004d22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f89e 	bl	8004e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f8af 	bl	8004e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d020      	beq.n	8004d74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01b      	beq.n	8004d74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0208 	mvn.w	r2, #8
 8004d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2204      	movs	r2, #4
 8004d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f886 	bl	8004e6c <HAL_TIM_IC_CaptureCallback>
 8004d60:	e005      	b.n	8004d6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f878 	bl	8004e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f889 	bl	8004e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d020      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01b      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0210 	mvn.w	r2, #16
 8004d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2208      	movs	r2, #8
 8004d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f860 	bl	8004e6c <HAL_TIM_IC_CaptureCallback>
 8004dac:	e005      	b.n	8004dba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f852 	bl	8004e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f863 	bl	8004e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00c      	beq.n	8004de4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d007      	beq.n	8004de4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0201 	mvn.w	r2, #1
 8004ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fd fbd2 	bl	8002588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00c      	beq.n	8004e08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d007      	beq.n	8004e08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f97c 	bl	8005100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00c      	beq.n	8004e2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f834 	bl	8004e94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00c      	beq.n	8004e50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0220 	mvn.w	r2, #32
 8004e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f94e 	bl	80050ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e50:	bf00      	nop
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a43      	ldr	r2, [pc, #268]	@ (8004fc8 <TIM_Base_SetConfig+0x120>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d013      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec6:	d00f      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a40      	ldr	r2, [pc, #256]	@ (8004fcc <TIM_Base_SetConfig+0x124>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00b      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a3f      	ldr	r2, [pc, #252]	@ (8004fd0 <TIM_Base_SetConfig+0x128>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d007      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a3e      	ldr	r2, [pc, #248]	@ (8004fd4 <TIM_Base_SetConfig+0x12c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d003      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a3d      	ldr	r2, [pc, #244]	@ (8004fd8 <TIM_Base_SetConfig+0x130>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d108      	bne.n	8004efa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a32      	ldr	r2, [pc, #200]	@ (8004fc8 <TIM_Base_SetConfig+0x120>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d02b      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f08:	d027      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a2f      	ldr	r2, [pc, #188]	@ (8004fcc <TIM_Base_SetConfig+0x124>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d023      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a2e      	ldr	r2, [pc, #184]	@ (8004fd0 <TIM_Base_SetConfig+0x128>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d01f      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a2d      	ldr	r2, [pc, #180]	@ (8004fd4 <TIM_Base_SetConfig+0x12c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01b      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a2c      	ldr	r2, [pc, #176]	@ (8004fd8 <TIM_Base_SetConfig+0x130>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d017      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2b      	ldr	r2, [pc, #172]	@ (8004fdc <TIM_Base_SetConfig+0x134>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d013      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe0 <TIM_Base_SetConfig+0x138>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00f      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a29      	ldr	r2, [pc, #164]	@ (8004fe4 <TIM_Base_SetConfig+0x13c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00b      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a28      	ldr	r2, [pc, #160]	@ (8004fe8 <TIM_Base_SetConfig+0x140>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d007      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a27      	ldr	r2, [pc, #156]	@ (8004fec <TIM_Base_SetConfig+0x144>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d003      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a26      	ldr	r2, [pc, #152]	@ (8004ff0 <TIM_Base_SetConfig+0x148>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d108      	bne.n	8004f6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8004fc8 <TIM_Base_SetConfig+0x120>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d003      	beq.n	8004f9a <TIM_Base_SetConfig+0xf2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a10      	ldr	r2, [pc, #64]	@ (8004fd8 <TIM_Base_SetConfig+0x130>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d103      	bne.n	8004fa2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f043 0204 	orr.w	r2, r3, #4
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	601a      	str	r2, [r3, #0]
}
 8004fba:	bf00      	nop
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40010000 	.word	0x40010000
 8004fcc:	40000400 	.word	0x40000400
 8004fd0:	40000800 	.word	0x40000800
 8004fd4:	40000c00 	.word	0x40000c00
 8004fd8:	40010400 	.word	0x40010400
 8004fdc:	40014000 	.word	0x40014000
 8004fe0:	40014400 	.word	0x40014400
 8004fe4:	40014800 	.word	0x40014800
 8004fe8:	40001800 	.word	0x40001800
 8004fec:	40001c00 	.word	0x40001c00
 8004ff0:	40002000 	.word	0x40002000

08004ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005008:	2302      	movs	r3, #2
 800500a:	e05a      	b.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005032:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a21      	ldr	r2, [pc, #132]	@ (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d022      	beq.n	8005096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005058:	d01d      	beq.n	8005096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1d      	ldr	r2, [pc, #116]	@ (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d018      	beq.n	8005096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1b      	ldr	r2, [pc, #108]	@ (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d013      	beq.n	8005096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a1a      	ldr	r2, [pc, #104]	@ (80050dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00e      	beq.n	8005096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a18      	ldr	r2, [pc, #96]	@ (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d009      	beq.n	8005096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a17      	ldr	r2, [pc, #92]	@ (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d004      	beq.n	8005096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a15      	ldr	r2, [pc, #84]	@ (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d10c      	bne.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800509c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40010000 	.word	0x40010000
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800
 80050dc:	40000c00 	.word	0x40000c00
 80050e0:	40010400 	.word	0x40010400
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40001800 	.word	0x40001800

080050ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e042      	b.n	80051ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fd f990 	bl	8002460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2224      	movs	r2, #36	@ 0x24
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005156:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fdd3 	bl	8005d04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800516c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695a      	ldr	r2, [r3, #20]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800517c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800518c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08a      	sub	sp, #40	@ 0x28
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	4613      	mov	r3, r2
 80051c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	d175      	bne.n	80052c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <HAL_UART_Transmit+0x2c>
 80051da:	88fb      	ldrh	r3, [r7, #6]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e06e      	b.n	80052c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2221      	movs	r2, #33	@ 0x21
 80051ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051f2:	f7fd fe07 	bl	8002e04 <HAL_GetTick>
 80051f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	88fa      	ldrh	r2, [r7, #6]
 80051fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	88fa      	ldrh	r2, [r7, #6]
 8005202:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800520c:	d108      	bne.n	8005220 <HAL_UART_Transmit+0x6c>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d104      	bne.n	8005220 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	e003      	b.n	8005228 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005224:	2300      	movs	r3, #0
 8005226:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005228:	e02e      	b.n	8005288 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2200      	movs	r2, #0
 8005232:	2180      	movs	r1, #128	@ 0x80
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 fb37 	bl	80058a8 <UART_WaitOnFlagUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d005      	beq.n	800524c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e03a      	b.n	80052c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10b      	bne.n	800526a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005260:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	3302      	adds	r3, #2
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	e007      	b.n	800527a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	781a      	ldrb	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	3301      	adds	r3, #1
 8005278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1cb      	bne.n	800522a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2200      	movs	r2, #0
 800529a:	2140      	movs	r1, #64	@ 0x40
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 fb03 	bl	80058a8 <UART_WaitOnFlagUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e006      	b.n	80052c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	e000      	b.n	80052c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80052c0:	2302      	movs	r3, #2
  }
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3720      	adds	r7, #32
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	4613      	mov	r3, r2
 80052d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	d112      	bne.n	800530a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <HAL_UART_Receive_IT+0x26>
 80052ea:	88fb      	ldrh	r3, [r7, #6]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e00b      	b.n	800530c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	461a      	mov	r2, r3
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 fb2a 	bl	800595a <UART_Start_Receive_IT>
 8005306:	4603      	mov	r3, r0
 8005308:	e000      	b.n	800530c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800530a:	2302      	movs	r3, #2
  }
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b0ba      	sub	sp, #232	@ 0xe8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800533a:	2300      	movs	r3, #0
 800533c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005340:	2300      	movs	r3, #0
 8005342:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10f      	bne.n	800537a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800535a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b00      	cmp	r3, #0
 8005364:	d009      	beq.n	800537a <HAL_UART_IRQHandler+0x66>
 8005366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fc07 	bl	8005b86 <UART_Receive_IT>
      return;
 8005378:	e273      	b.n	8005862 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800537a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 80de 	beq.w	8005540 <HAL_UART_IRQHandler+0x22c>
 8005384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d106      	bne.n	800539e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005394:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 80d1 	beq.w	8005540 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800539e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00b      	beq.n	80053c2 <HAL_UART_IRQHandler+0xae>
 80053aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d005      	beq.n	80053c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ba:	f043 0201 	orr.w	r2, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00b      	beq.n	80053e6 <HAL_UART_IRQHandler+0xd2>
 80053ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d005      	beq.n	80053e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053de:	f043 0202 	orr.w	r2, r3, #2
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00b      	beq.n	800540a <HAL_UART_IRQHandler+0xf6>
 80053f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d005      	beq.n	800540a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005402:	f043 0204 	orr.w	r2, r3, #4
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800540a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d011      	beq.n	800543a <HAL_UART_IRQHandler+0x126>
 8005416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b00      	cmp	r3, #0
 8005420:	d105      	bne.n	800542e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005432:	f043 0208 	orr.w	r2, r3, #8
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 820a 	beq.w	8005858 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005448:	f003 0320 	and.w	r3, r3, #32
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <HAL_UART_IRQHandler+0x14e>
 8005450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fb92 	bl	8005b86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800546c:	2b40      	cmp	r3, #64	@ 0x40
 800546e:	bf0c      	ite	eq
 8005470:	2301      	moveq	r3, #1
 8005472:	2300      	movne	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	2b00      	cmp	r3, #0
 8005484:	d103      	bne.n	800548e <HAL_UART_IRQHandler+0x17a>
 8005486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800548a:	2b00      	cmp	r3, #0
 800548c:	d04f      	beq.n	800552e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fa9d 	bl	80059ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800549e:	2b40      	cmp	r3, #64	@ 0x40
 80054a0:	d141      	bne.n	8005526 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3314      	adds	r3, #20
 80054a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80054b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3314      	adds	r3, #20
 80054ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80054ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80054d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80054da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1d9      	bne.n	80054a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d013      	beq.n	800551e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054fa:	4a8a      	ldr	r2, [pc, #552]	@ (8005724 <HAL_UART_IRQHandler+0x410>)
 80054fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005502:	4618      	mov	r0, r3
 8005504:	f7fd fe2f 	bl	8003166 <HAL_DMA_Abort_IT>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d016      	beq.n	800553c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005518:	4610      	mov	r0, r2
 800551a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800551c:	e00e      	b.n	800553c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f9ac 	bl	800587c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005524:	e00a      	b.n	800553c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f9a8 	bl	800587c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800552c:	e006      	b.n	800553c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f9a4 	bl	800587c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800553a:	e18d      	b.n	8005858 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553c:	bf00      	nop
    return;
 800553e:	e18b      	b.n	8005858 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005544:	2b01      	cmp	r3, #1
 8005546:	f040 8167 	bne.w	8005818 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800554a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 8160 	beq.w	8005818 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800555c:	f003 0310 	and.w	r3, r3, #16
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 8159 	beq.w	8005818 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005566:	2300      	movs	r3, #0
 8005568:	60bb      	str	r3, [r7, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60bb      	str	r3, [r7, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	60bb      	str	r3, [r7, #8]
 800557a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005586:	2b40      	cmp	r3, #64	@ 0x40
 8005588:	f040 80ce 	bne.w	8005728 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005598:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 80a9 	beq.w	80056f4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055aa:	429a      	cmp	r2, r3
 80055ac:	f080 80a2 	bcs.w	80056f4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055c2:	f000 8088 	beq.w	80056d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	330c      	adds	r3, #12
 80055cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	330c      	adds	r3, #12
 80055ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80055f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800560a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1d9      	bne.n	80055c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3314      	adds	r3, #20
 8005618:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005622:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005624:	f023 0301 	bic.w	r3, r3, #1
 8005628:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3314      	adds	r3, #20
 8005632:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005636:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800563a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800563e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005648:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e1      	bne.n	8005612 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3314      	adds	r3, #20
 8005654:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800565e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005664:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3314      	adds	r3, #20
 800566e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005672:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005674:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005678:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800567a:	e841 2300 	strex	r3, r2, [r1]
 800567e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005680:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1e3      	bne.n	800564e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	330c      	adds	r3, #12
 800569a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800569e:	e853 3f00 	ldrex	r3, [r3]
 80056a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056a6:	f023 0310 	bic.w	r3, r3, #16
 80056aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	330c      	adds	r3, #12
 80056b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80056b8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80056ba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056c0:	e841 2300 	strex	r3, r2, [r1]
 80056c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e3      	bne.n	8005694 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7fd fcd8 	bl	8003086 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2202      	movs	r2, #2
 80056da:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f8cf 	bl	8005890 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80056f2:	e0b3      	b.n	800585c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056fc:	429a      	cmp	r2, r3
 80056fe:	f040 80ad 	bne.w	800585c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800570c:	f040 80a6 	bne.w	800585c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800571a:	4619      	mov	r1, r3
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f8b7 	bl	8005890 <HAL_UARTEx_RxEventCallback>
      return;
 8005722:	e09b      	b.n	800585c <HAL_UART_IRQHandler+0x548>
 8005724:	08005a95 	.word	0x08005a95
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005730:	b29b      	uxth	r3, r3
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 808e 	beq.w	8005860 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005744:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8089 	beq.w	8005860 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	330c      	adds	r3, #12
 8005754:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005758:	e853 3f00 	ldrex	r3, [r3]
 800575c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800575e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005760:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005764:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	330c      	adds	r3, #12
 800576e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005772:	647a      	str	r2, [r7, #68]	@ 0x44
 8005774:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005778:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e3      	bne.n	800574e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3314      	adds	r3, #20
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	623b      	str	r3, [r7, #32]
   return(result);
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	f023 0301 	bic.w	r3, r3, #1
 800579c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3314      	adds	r3, #20
 80057a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80057ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e3      	bne.n	8005786 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	330c      	adds	r3, #12
 80057d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	60fb      	str	r3, [r7, #12]
   return(result);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0310 	bic.w	r3, r3, #16
 80057e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	330c      	adds	r3, #12
 80057ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80057f0:	61fa      	str	r2, [r7, #28]
 80057f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	69b9      	ldr	r1, [r7, #24]
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	617b      	str	r3, [r7, #20]
   return(result);
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e3      	bne.n	80057cc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800580a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800580e:	4619      	mov	r1, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f83d 	bl	8005890 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005816:	e023      	b.n	8005860 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800581c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005820:	2b00      	cmp	r3, #0
 8005822:	d009      	beq.n	8005838 <HAL_UART_IRQHandler+0x524>
 8005824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f940 	bl	8005ab6 <UART_Transmit_IT>
    return;
 8005836:	e014      	b.n	8005862 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800583c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00e      	beq.n	8005862 <HAL_UART_IRQHandler+0x54e>
 8005844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800584c:	2b00      	cmp	r3, #0
 800584e:	d008      	beq.n	8005862 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f980 	bl	8005b56 <UART_EndTransmit_IT>
    return;
 8005856:	e004      	b.n	8005862 <HAL_UART_IRQHandler+0x54e>
    return;
 8005858:	bf00      	nop
 800585a:	e002      	b.n	8005862 <HAL_UART_IRQHandler+0x54e>
      return;
 800585c:	bf00      	nop
 800585e:	e000      	b.n	8005862 <HAL_UART_IRQHandler+0x54e>
      return;
 8005860:	bf00      	nop
  }
}
 8005862:	37e8      	adds	r7, #232	@ 0xe8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	4613      	mov	r3, r2
 80058b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b8:	e03b      	b.n	8005932 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c0:	d037      	beq.n	8005932 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c2:	f7fd fa9f 	bl	8002e04 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	6a3a      	ldr	r2, [r7, #32]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d302      	bcc.n	80058d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e03a      	b.n	8005952 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d023      	beq.n	8005932 <UART_WaitOnFlagUntilTimeout+0x8a>
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b80      	cmp	r3, #128	@ 0x80
 80058ee:	d020      	beq.n	8005932 <UART_WaitOnFlagUntilTimeout+0x8a>
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b40      	cmp	r3, #64	@ 0x40
 80058f4:	d01d      	beq.n	8005932 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b08      	cmp	r3, #8
 8005902:	d116      	bne.n	8005932 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 f857 	bl	80059ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2208      	movs	r2, #8
 8005924:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e00f      	b.n	8005952 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4013      	ands	r3, r2
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	429a      	cmp	r2, r3
 8005940:	bf0c      	ite	eq
 8005942:	2301      	moveq	r3, #1
 8005944:	2300      	movne	r3, #0
 8005946:	b2db      	uxtb	r3, r3
 8005948:	461a      	mov	r2, r3
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	429a      	cmp	r2, r3
 800594e:	d0b4      	beq.n	80058ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800595a:	b480      	push	{r7}
 800595c:	b085      	sub	sp, #20
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	4613      	mov	r3, r2
 8005966:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	88fa      	ldrh	r2, [r7, #6]
 8005972:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	88fa      	ldrh	r2, [r7, #6]
 8005978:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2222      	movs	r2, #34	@ 0x22
 8005984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d007      	beq.n	80059a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800599e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695a      	ldr	r2, [r3, #20]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0201 	orr.w	r2, r2, #1
 80059ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0220 	orr.w	r2, r2, #32
 80059be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b095      	sub	sp, #84	@ 0x54
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	330c      	adds	r3, #12
 80059dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e0:	e853 3f00 	ldrex	r3, [r3]
 80059e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	330c      	adds	r3, #12
 80059f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80059f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059fe:	e841 2300 	strex	r3, r2, [r1]
 8005a02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1e5      	bne.n	80059d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3314      	adds	r3, #20
 8005a10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	f023 0301 	bic.w	r3, r3, #1
 8005a20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3314      	adds	r3, #20
 8005a28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e5      	bne.n	8005a0a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d119      	bne.n	8005a7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	330c      	adds	r3, #12
 8005a4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f023 0310 	bic.w	r3, r3, #16
 8005a5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	330c      	adds	r3, #12
 8005a64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a66:	61ba      	str	r2, [r7, #24]
 8005a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	6979      	ldr	r1, [r7, #20]
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	613b      	str	r3, [r7, #16]
   return(result);
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e5      	bne.n	8005a46 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a88:	bf00      	nop
 8005a8a:	3754      	adds	r7, #84	@ 0x54
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f7ff fee7 	bl	800587c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aae:	bf00      	nop
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b085      	sub	sp, #20
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b21      	cmp	r3, #33	@ 0x21
 8005ac8:	d13e      	bne.n	8005b48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ad2:	d114      	bne.n	8005afe <UART_Transmit_IT+0x48>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d110      	bne.n	8005afe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005af0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	1c9a      	adds	r2, r3, #2
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	621a      	str	r2, [r3, #32]
 8005afc:	e008      	b.n	8005b10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	1c59      	adds	r1, r3, #1
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6211      	str	r1, [r2, #32]
 8005b08:	781a      	ldrb	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10f      	bne.n	8005b44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	e000      	b.n	8005b4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b48:	2302      	movs	r3, #2
  }
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b082      	sub	sp, #8
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff fe76 	bl	8005868 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b08c      	sub	sp, #48	@ 0x30
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b22      	cmp	r3, #34	@ 0x22
 8005ba0:	f040 80aa 	bne.w	8005cf8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bac:	d115      	bne.n	8005bda <UART_Receive_IT+0x54>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d111      	bne.n	8005bda <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd2:	1c9a      	adds	r2, r3, #2
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005bd8:	e024      	b.n	8005c24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be8:	d007      	beq.n	8005bfa <UART_Receive_IT+0x74>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <UART_Receive_IT+0x82>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d106      	bne.n	8005c08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	e008      	b.n	8005c1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	4619      	mov	r1, r3
 8005c32:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d15d      	bne.n	8005cf4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0220 	bic.w	r2, r2, #32
 8005c46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	695a      	ldr	r2, [r3, #20]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0201 	bic.w	r2, r2, #1
 8005c66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d135      	bne.n	8005cea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	330c      	adds	r3, #12
 8005c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	613b      	str	r3, [r7, #16]
   return(result);
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f023 0310 	bic.w	r3, r3, #16
 8005c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	330c      	adds	r3, #12
 8005ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca4:	623a      	str	r2, [r7, #32]
 8005ca6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	69f9      	ldr	r1, [r7, #28]
 8005caa:	6a3a      	ldr	r2, [r7, #32]
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e5      	bne.n	8005c84 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0310 	and.w	r3, r3, #16
 8005cc2:	2b10      	cmp	r3, #16
 8005cc4:	d10a      	bne.n	8005cdc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7ff fdd4 	bl	8005890 <HAL_UARTEx_RxEventCallback>
 8005ce8:	e002      	b.n	8005cf0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7fc f88a 	bl	8001e04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e002      	b.n	8005cfa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	e000      	b.n	8005cfa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005cf8:	2302      	movs	r3, #2
  }
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3730      	adds	r7, #48	@ 0x30
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d08:	b0c0      	sub	sp, #256	@ 0x100
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d20:	68d9      	ldr	r1, [r3, #12]
 8005d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	ea40 0301 	orr.w	r3, r0, r1
 8005d2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d5c:	f021 010c 	bic.w	r1, r1, #12
 8005d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d6a:	430b      	orrs	r3, r1
 8005d6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d7e:	6999      	ldr	r1, [r3, #24]
 8005d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	ea40 0301 	orr.w	r3, r0, r1
 8005d8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	4b8f      	ldr	r3, [pc, #572]	@ (8005fd0 <UART_SetConfig+0x2cc>)
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d005      	beq.n	8005da4 <UART_SetConfig+0xa0>
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4b8d      	ldr	r3, [pc, #564]	@ (8005fd4 <UART_SetConfig+0x2d0>)
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d104      	bne.n	8005dae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005da4:	f7fe f8b4 	bl	8003f10 <HAL_RCC_GetPCLK2Freq>
 8005da8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005dac:	e003      	b.n	8005db6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dae:	f7fe f89b 	bl	8003ee8 <HAL_RCC_GetPCLK1Freq>
 8005db2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dc0:	f040 810c 	bne.w	8005fdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005dce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005dd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	462b      	mov	r3, r5
 8005dda:	1891      	adds	r1, r2, r2
 8005ddc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005dde:	415b      	adcs	r3, r3
 8005de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005de2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005de6:	4621      	mov	r1, r4
 8005de8:	eb12 0801 	adds.w	r8, r2, r1
 8005dec:	4629      	mov	r1, r5
 8005dee:	eb43 0901 	adc.w	r9, r3, r1
 8005df2:	f04f 0200 	mov.w	r2, #0
 8005df6:	f04f 0300 	mov.w	r3, #0
 8005dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e06:	4690      	mov	r8, r2
 8005e08:	4699      	mov	r9, r3
 8005e0a:	4623      	mov	r3, r4
 8005e0c:	eb18 0303 	adds.w	r3, r8, r3
 8005e10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e14:	462b      	mov	r3, r5
 8005e16:	eb49 0303 	adc.w	r3, r9, r3
 8005e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e32:	460b      	mov	r3, r1
 8005e34:	18db      	adds	r3, r3, r3
 8005e36:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e38:	4613      	mov	r3, r2
 8005e3a:	eb42 0303 	adc.w	r3, r2, r3
 8005e3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e48:	f7fa ff2e 	bl	8000ca8 <__aeabi_uldivmod>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4b61      	ldr	r3, [pc, #388]	@ (8005fd8 <UART_SetConfig+0x2d4>)
 8005e52:	fba3 2302 	umull	r2, r3, r3, r2
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	011c      	lsls	r4, r3, #4
 8005e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005e6c:	4642      	mov	r2, r8
 8005e6e:	464b      	mov	r3, r9
 8005e70:	1891      	adds	r1, r2, r2
 8005e72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e74:	415b      	adcs	r3, r3
 8005e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e7c:	4641      	mov	r1, r8
 8005e7e:	eb12 0a01 	adds.w	sl, r2, r1
 8005e82:	4649      	mov	r1, r9
 8005e84:	eb43 0b01 	adc.w	fp, r3, r1
 8005e88:	f04f 0200 	mov.w	r2, #0
 8005e8c:	f04f 0300 	mov.w	r3, #0
 8005e90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e9c:	4692      	mov	sl, r2
 8005e9e:	469b      	mov	fp, r3
 8005ea0:	4643      	mov	r3, r8
 8005ea2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005eaa:	464b      	mov	r3, r9
 8005eac:	eb4b 0303 	adc.w	r3, fp, r3
 8005eb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ec0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ec4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	18db      	adds	r3, r3, r3
 8005ecc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ece:	4613      	mov	r3, r2
 8005ed0:	eb42 0303 	adc.w	r3, r2, r3
 8005ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ed6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005eda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ede:	f7fa fee3 	bl	8000ca8 <__aeabi_uldivmod>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8005fd8 <UART_SetConfig+0x2d4>)
 8005eea:	fba3 2301 	umull	r2, r3, r3, r1
 8005eee:	095b      	lsrs	r3, r3, #5
 8005ef0:	2264      	movs	r2, #100	@ 0x64
 8005ef2:	fb02 f303 	mul.w	r3, r2, r3
 8005ef6:	1acb      	subs	r3, r1, r3
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005efe:	4b36      	ldr	r3, [pc, #216]	@ (8005fd8 <UART_SetConfig+0x2d4>)
 8005f00:	fba3 2302 	umull	r2, r3, r3, r2
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f0c:	441c      	add	r4, r3
 8005f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f20:	4642      	mov	r2, r8
 8005f22:	464b      	mov	r3, r9
 8005f24:	1891      	adds	r1, r2, r2
 8005f26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f28:	415b      	adcs	r3, r3
 8005f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f30:	4641      	mov	r1, r8
 8005f32:	1851      	adds	r1, r2, r1
 8005f34:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f36:	4649      	mov	r1, r9
 8005f38:	414b      	adcs	r3, r1
 8005f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f3c:	f04f 0200 	mov.w	r2, #0
 8005f40:	f04f 0300 	mov.w	r3, #0
 8005f44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f48:	4659      	mov	r1, fp
 8005f4a:	00cb      	lsls	r3, r1, #3
 8005f4c:	4651      	mov	r1, sl
 8005f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f52:	4651      	mov	r1, sl
 8005f54:	00ca      	lsls	r2, r1, #3
 8005f56:	4610      	mov	r0, r2
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	189b      	adds	r3, r3, r2
 8005f60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f64:	464b      	mov	r3, r9
 8005f66:	460a      	mov	r2, r1
 8005f68:	eb42 0303 	adc.w	r3, r2, r3
 8005f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005f80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f84:	460b      	mov	r3, r1
 8005f86:	18db      	adds	r3, r3, r3
 8005f88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	eb42 0303 	adc.w	r3, r2, r3
 8005f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005f9a:	f7fa fe85 	bl	8000ca8 <__aeabi_uldivmod>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd8 <UART_SetConfig+0x2d4>)
 8005fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa8:	095b      	lsrs	r3, r3, #5
 8005faa:	2164      	movs	r1, #100	@ 0x64
 8005fac:	fb01 f303 	mul.w	r3, r1, r3
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	3332      	adds	r3, #50	@ 0x32
 8005fb6:	4a08      	ldr	r2, [pc, #32]	@ (8005fd8 <UART_SetConfig+0x2d4>)
 8005fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbc:	095b      	lsrs	r3, r3, #5
 8005fbe:	f003 0207 	and.w	r2, r3, #7
 8005fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4422      	add	r2, r4
 8005fca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fcc:	e106      	b.n	80061dc <UART_SetConfig+0x4d8>
 8005fce:	bf00      	nop
 8005fd0:	40011000 	.word	0x40011000
 8005fd4:	40011400 	.word	0x40011400
 8005fd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005fe6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005fea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005fee:	4642      	mov	r2, r8
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	1891      	adds	r1, r2, r2
 8005ff4:	6239      	str	r1, [r7, #32]
 8005ff6:	415b      	adcs	r3, r3
 8005ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ffa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ffe:	4641      	mov	r1, r8
 8006000:	1854      	adds	r4, r2, r1
 8006002:	4649      	mov	r1, r9
 8006004:	eb43 0501 	adc.w	r5, r3, r1
 8006008:	f04f 0200 	mov.w	r2, #0
 800600c:	f04f 0300 	mov.w	r3, #0
 8006010:	00eb      	lsls	r3, r5, #3
 8006012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006016:	00e2      	lsls	r2, r4, #3
 8006018:	4614      	mov	r4, r2
 800601a:	461d      	mov	r5, r3
 800601c:	4643      	mov	r3, r8
 800601e:	18e3      	adds	r3, r4, r3
 8006020:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006024:	464b      	mov	r3, r9
 8006026:	eb45 0303 	adc.w	r3, r5, r3
 800602a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800602e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800603a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800603e:	f04f 0200 	mov.w	r2, #0
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800604a:	4629      	mov	r1, r5
 800604c:	008b      	lsls	r3, r1, #2
 800604e:	4621      	mov	r1, r4
 8006050:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006054:	4621      	mov	r1, r4
 8006056:	008a      	lsls	r2, r1, #2
 8006058:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800605c:	f7fa fe24 	bl	8000ca8 <__aeabi_uldivmod>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4b60      	ldr	r3, [pc, #384]	@ (80061e8 <UART_SetConfig+0x4e4>)
 8006066:	fba3 2302 	umull	r2, r3, r3, r2
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	011c      	lsls	r4, r3, #4
 800606e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006072:	2200      	movs	r2, #0
 8006074:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006078:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800607c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006080:	4642      	mov	r2, r8
 8006082:	464b      	mov	r3, r9
 8006084:	1891      	adds	r1, r2, r2
 8006086:	61b9      	str	r1, [r7, #24]
 8006088:	415b      	adcs	r3, r3
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006090:	4641      	mov	r1, r8
 8006092:	1851      	adds	r1, r2, r1
 8006094:	6139      	str	r1, [r7, #16]
 8006096:	4649      	mov	r1, r9
 8006098:	414b      	adcs	r3, r1
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	f04f 0200 	mov.w	r2, #0
 80060a0:	f04f 0300 	mov.w	r3, #0
 80060a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060a8:	4659      	mov	r1, fp
 80060aa:	00cb      	lsls	r3, r1, #3
 80060ac:	4651      	mov	r1, sl
 80060ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060b2:	4651      	mov	r1, sl
 80060b4:	00ca      	lsls	r2, r1, #3
 80060b6:	4610      	mov	r0, r2
 80060b8:	4619      	mov	r1, r3
 80060ba:	4603      	mov	r3, r0
 80060bc:	4642      	mov	r2, r8
 80060be:	189b      	adds	r3, r3, r2
 80060c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060c4:	464b      	mov	r3, r9
 80060c6:	460a      	mov	r2, r1
 80060c8:	eb42 0303 	adc.w	r3, r2, r3
 80060cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80060da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80060e8:	4649      	mov	r1, r9
 80060ea:	008b      	lsls	r3, r1, #2
 80060ec:	4641      	mov	r1, r8
 80060ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060f2:	4641      	mov	r1, r8
 80060f4:	008a      	lsls	r2, r1, #2
 80060f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80060fa:	f7fa fdd5 	bl	8000ca8 <__aeabi_uldivmod>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4611      	mov	r1, r2
 8006104:	4b38      	ldr	r3, [pc, #224]	@ (80061e8 <UART_SetConfig+0x4e4>)
 8006106:	fba3 2301 	umull	r2, r3, r3, r1
 800610a:	095b      	lsrs	r3, r3, #5
 800610c:	2264      	movs	r2, #100	@ 0x64
 800610e:	fb02 f303 	mul.w	r3, r2, r3
 8006112:	1acb      	subs	r3, r1, r3
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	3332      	adds	r3, #50	@ 0x32
 8006118:	4a33      	ldr	r2, [pc, #204]	@ (80061e8 <UART_SetConfig+0x4e4>)
 800611a:	fba2 2303 	umull	r2, r3, r2, r3
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006124:	441c      	add	r4, r3
 8006126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800612a:	2200      	movs	r2, #0
 800612c:	673b      	str	r3, [r7, #112]	@ 0x70
 800612e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006130:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006134:	4642      	mov	r2, r8
 8006136:	464b      	mov	r3, r9
 8006138:	1891      	adds	r1, r2, r2
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	415b      	adcs	r3, r3
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006144:	4641      	mov	r1, r8
 8006146:	1851      	adds	r1, r2, r1
 8006148:	6039      	str	r1, [r7, #0]
 800614a:	4649      	mov	r1, r9
 800614c:	414b      	adcs	r3, r1
 800614e:	607b      	str	r3, [r7, #4]
 8006150:	f04f 0200 	mov.w	r2, #0
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800615c:	4659      	mov	r1, fp
 800615e:	00cb      	lsls	r3, r1, #3
 8006160:	4651      	mov	r1, sl
 8006162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006166:	4651      	mov	r1, sl
 8006168:	00ca      	lsls	r2, r1, #3
 800616a:	4610      	mov	r0, r2
 800616c:	4619      	mov	r1, r3
 800616e:	4603      	mov	r3, r0
 8006170:	4642      	mov	r2, r8
 8006172:	189b      	adds	r3, r3, r2
 8006174:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006176:	464b      	mov	r3, r9
 8006178:	460a      	mov	r2, r1
 800617a:	eb42 0303 	adc.w	r3, r2, r3
 800617e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	663b      	str	r3, [r7, #96]	@ 0x60
 800618a:	667a      	str	r2, [r7, #100]	@ 0x64
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006198:	4649      	mov	r1, r9
 800619a:	008b      	lsls	r3, r1, #2
 800619c:	4641      	mov	r1, r8
 800619e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061a2:	4641      	mov	r1, r8
 80061a4:	008a      	lsls	r2, r1, #2
 80061a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80061aa:	f7fa fd7d 	bl	8000ca8 <__aeabi_uldivmod>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	4b0d      	ldr	r3, [pc, #52]	@ (80061e8 <UART_SetConfig+0x4e4>)
 80061b4:	fba3 1302 	umull	r1, r3, r3, r2
 80061b8:	095b      	lsrs	r3, r3, #5
 80061ba:	2164      	movs	r1, #100	@ 0x64
 80061bc:	fb01 f303 	mul.w	r3, r1, r3
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	3332      	adds	r3, #50	@ 0x32
 80061c6:	4a08      	ldr	r2, [pc, #32]	@ (80061e8 <UART_SetConfig+0x4e4>)
 80061c8:	fba2 2303 	umull	r2, r3, r2, r3
 80061cc:	095b      	lsrs	r3, r3, #5
 80061ce:	f003 020f 	and.w	r2, r3, #15
 80061d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4422      	add	r2, r4
 80061da:	609a      	str	r2, [r3, #8]
}
 80061dc:	bf00      	nop
 80061de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80061e2:	46bd      	mov	sp, r7
 80061e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061e8:	51eb851f 	.word	0x51eb851f

080061ec <__cvt>:
 80061ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061f0:	ec57 6b10 	vmov	r6, r7, d0
 80061f4:	2f00      	cmp	r7, #0
 80061f6:	460c      	mov	r4, r1
 80061f8:	4619      	mov	r1, r3
 80061fa:	463b      	mov	r3, r7
 80061fc:	bfbb      	ittet	lt
 80061fe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006202:	461f      	movlt	r7, r3
 8006204:	2300      	movge	r3, #0
 8006206:	232d      	movlt	r3, #45	@ 0x2d
 8006208:	700b      	strb	r3, [r1, #0]
 800620a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800620c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006210:	4691      	mov	r9, r2
 8006212:	f023 0820 	bic.w	r8, r3, #32
 8006216:	bfbc      	itt	lt
 8006218:	4632      	movlt	r2, r6
 800621a:	4616      	movlt	r6, r2
 800621c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006220:	d005      	beq.n	800622e <__cvt+0x42>
 8006222:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006226:	d100      	bne.n	800622a <__cvt+0x3e>
 8006228:	3401      	adds	r4, #1
 800622a:	2102      	movs	r1, #2
 800622c:	e000      	b.n	8006230 <__cvt+0x44>
 800622e:	2103      	movs	r1, #3
 8006230:	ab03      	add	r3, sp, #12
 8006232:	9301      	str	r3, [sp, #4]
 8006234:	ab02      	add	r3, sp, #8
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	ec47 6b10 	vmov	d0, r6, r7
 800623c:	4653      	mov	r3, sl
 800623e:	4622      	mov	r2, r4
 8006240:	f001 f8ca 	bl	80073d8 <_dtoa_r>
 8006244:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006248:	4605      	mov	r5, r0
 800624a:	d119      	bne.n	8006280 <__cvt+0x94>
 800624c:	f019 0f01 	tst.w	r9, #1
 8006250:	d00e      	beq.n	8006270 <__cvt+0x84>
 8006252:	eb00 0904 	add.w	r9, r0, r4
 8006256:	2200      	movs	r2, #0
 8006258:	2300      	movs	r3, #0
 800625a:	4630      	mov	r0, r6
 800625c:	4639      	mov	r1, r7
 800625e:	f7fa fc43 	bl	8000ae8 <__aeabi_dcmpeq>
 8006262:	b108      	cbz	r0, 8006268 <__cvt+0x7c>
 8006264:	f8cd 900c 	str.w	r9, [sp, #12]
 8006268:	2230      	movs	r2, #48	@ 0x30
 800626a:	9b03      	ldr	r3, [sp, #12]
 800626c:	454b      	cmp	r3, r9
 800626e:	d31e      	bcc.n	80062ae <__cvt+0xc2>
 8006270:	9b03      	ldr	r3, [sp, #12]
 8006272:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006274:	1b5b      	subs	r3, r3, r5
 8006276:	4628      	mov	r0, r5
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	b004      	add	sp, #16
 800627c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006280:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006284:	eb00 0904 	add.w	r9, r0, r4
 8006288:	d1e5      	bne.n	8006256 <__cvt+0x6a>
 800628a:	7803      	ldrb	r3, [r0, #0]
 800628c:	2b30      	cmp	r3, #48	@ 0x30
 800628e:	d10a      	bne.n	80062a6 <__cvt+0xba>
 8006290:	2200      	movs	r2, #0
 8006292:	2300      	movs	r3, #0
 8006294:	4630      	mov	r0, r6
 8006296:	4639      	mov	r1, r7
 8006298:	f7fa fc26 	bl	8000ae8 <__aeabi_dcmpeq>
 800629c:	b918      	cbnz	r0, 80062a6 <__cvt+0xba>
 800629e:	f1c4 0401 	rsb	r4, r4, #1
 80062a2:	f8ca 4000 	str.w	r4, [sl]
 80062a6:	f8da 3000 	ldr.w	r3, [sl]
 80062aa:	4499      	add	r9, r3
 80062ac:	e7d3      	b.n	8006256 <__cvt+0x6a>
 80062ae:	1c59      	adds	r1, r3, #1
 80062b0:	9103      	str	r1, [sp, #12]
 80062b2:	701a      	strb	r2, [r3, #0]
 80062b4:	e7d9      	b.n	800626a <__cvt+0x7e>

080062b6 <__exponent>:
 80062b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062b8:	2900      	cmp	r1, #0
 80062ba:	bfba      	itte	lt
 80062bc:	4249      	neglt	r1, r1
 80062be:	232d      	movlt	r3, #45	@ 0x2d
 80062c0:	232b      	movge	r3, #43	@ 0x2b
 80062c2:	2909      	cmp	r1, #9
 80062c4:	7002      	strb	r2, [r0, #0]
 80062c6:	7043      	strb	r3, [r0, #1]
 80062c8:	dd29      	ble.n	800631e <__exponent+0x68>
 80062ca:	f10d 0307 	add.w	r3, sp, #7
 80062ce:	461d      	mov	r5, r3
 80062d0:	270a      	movs	r7, #10
 80062d2:	461a      	mov	r2, r3
 80062d4:	fbb1 f6f7 	udiv	r6, r1, r7
 80062d8:	fb07 1416 	mls	r4, r7, r6, r1
 80062dc:	3430      	adds	r4, #48	@ 0x30
 80062de:	f802 4c01 	strb.w	r4, [r2, #-1]
 80062e2:	460c      	mov	r4, r1
 80062e4:	2c63      	cmp	r4, #99	@ 0x63
 80062e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80062ea:	4631      	mov	r1, r6
 80062ec:	dcf1      	bgt.n	80062d2 <__exponent+0x1c>
 80062ee:	3130      	adds	r1, #48	@ 0x30
 80062f0:	1e94      	subs	r4, r2, #2
 80062f2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80062f6:	1c41      	adds	r1, r0, #1
 80062f8:	4623      	mov	r3, r4
 80062fa:	42ab      	cmp	r3, r5
 80062fc:	d30a      	bcc.n	8006314 <__exponent+0x5e>
 80062fe:	f10d 0309 	add.w	r3, sp, #9
 8006302:	1a9b      	subs	r3, r3, r2
 8006304:	42ac      	cmp	r4, r5
 8006306:	bf88      	it	hi
 8006308:	2300      	movhi	r3, #0
 800630a:	3302      	adds	r3, #2
 800630c:	4403      	add	r3, r0
 800630e:	1a18      	subs	r0, r3, r0
 8006310:	b003      	add	sp, #12
 8006312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006314:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006318:	f801 6f01 	strb.w	r6, [r1, #1]!
 800631c:	e7ed      	b.n	80062fa <__exponent+0x44>
 800631e:	2330      	movs	r3, #48	@ 0x30
 8006320:	3130      	adds	r1, #48	@ 0x30
 8006322:	7083      	strb	r3, [r0, #2]
 8006324:	70c1      	strb	r1, [r0, #3]
 8006326:	1d03      	adds	r3, r0, #4
 8006328:	e7f1      	b.n	800630e <__exponent+0x58>
	...

0800632c <_printf_float>:
 800632c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006330:	b08d      	sub	sp, #52	@ 0x34
 8006332:	460c      	mov	r4, r1
 8006334:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006338:	4616      	mov	r6, r2
 800633a:	461f      	mov	r7, r3
 800633c:	4605      	mov	r5, r0
 800633e:	f000 ff35 	bl	80071ac <_localeconv_r>
 8006342:	6803      	ldr	r3, [r0, #0]
 8006344:	9304      	str	r3, [sp, #16]
 8006346:	4618      	mov	r0, r3
 8006348:	f7f9 ffa2 	bl	8000290 <strlen>
 800634c:	2300      	movs	r3, #0
 800634e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006350:	f8d8 3000 	ldr.w	r3, [r8]
 8006354:	9005      	str	r0, [sp, #20]
 8006356:	3307      	adds	r3, #7
 8006358:	f023 0307 	bic.w	r3, r3, #7
 800635c:	f103 0208 	add.w	r2, r3, #8
 8006360:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006364:	f8d4 b000 	ldr.w	fp, [r4]
 8006368:	f8c8 2000 	str.w	r2, [r8]
 800636c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006370:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006374:	9307      	str	r3, [sp, #28]
 8006376:	f8cd 8018 	str.w	r8, [sp, #24]
 800637a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800637e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006382:	4b9c      	ldr	r3, [pc, #624]	@ (80065f4 <_printf_float+0x2c8>)
 8006384:	f04f 32ff 	mov.w	r2, #4294967295
 8006388:	f7fa fbe0 	bl	8000b4c <__aeabi_dcmpun>
 800638c:	bb70      	cbnz	r0, 80063ec <_printf_float+0xc0>
 800638e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006392:	4b98      	ldr	r3, [pc, #608]	@ (80065f4 <_printf_float+0x2c8>)
 8006394:	f04f 32ff 	mov.w	r2, #4294967295
 8006398:	f7fa fbba 	bl	8000b10 <__aeabi_dcmple>
 800639c:	bb30      	cbnz	r0, 80063ec <_printf_float+0xc0>
 800639e:	2200      	movs	r2, #0
 80063a0:	2300      	movs	r3, #0
 80063a2:	4640      	mov	r0, r8
 80063a4:	4649      	mov	r1, r9
 80063a6:	f7fa fba9 	bl	8000afc <__aeabi_dcmplt>
 80063aa:	b110      	cbz	r0, 80063b2 <_printf_float+0x86>
 80063ac:	232d      	movs	r3, #45	@ 0x2d
 80063ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063b2:	4a91      	ldr	r2, [pc, #580]	@ (80065f8 <_printf_float+0x2cc>)
 80063b4:	4b91      	ldr	r3, [pc, #580]	@ (80065fc <_printf_float+0x2d0>)
 80063b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80063ba:	bf8c      	ite	hi
 80063bc:	4690      	movhi	r8, r2
 80063be:	4698      	movls	r8, r3
 80063c0:	2303      	movs	r3, #3
 80063c2:	6123      	str	r3, [r4, #16]
 80063c4:	f02b 0304 	bic.w	r3, fp, #4
 80063c8:	6023      	str	r3, [r4, #0]
 80063ca:	f04f 0900 	mov.w	r9, #0
 80063ce:	9700      	str	r7, [sp, #0]
 80063d0:	4633      	mov	r3, r6
 80063d2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80063d4:	4621      	mov	r1, r4
 80063d6:	4628      	mov	r0, r5
 80063d8:	f000 f9d2 	bl	8006780 <_printf_common>
 80063dc:	3001      	adds	r0, #1
 80063de:	f040 808d 	bne.w	80064fc <_printf_float+0x1d0>
 80063e2:	f04f 30ff 	mov.w	r0, #4294967295
 80063e6:	b00d      	add	sp, #52	@ 0x34
 80063e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ec:	4642      	mov	r2, r8
 80063ee:	464b      	mov	r3, r9
 80063f0:	4640      	mov	r0, r8
 80063f2:	4649      	mov	r1, r9
 80063f4:	f7fa fbaa 	bl	8000b4c <__aeabi_dcmpun>
 80063f8:	b140      	cbz	r0, 800640c <_printf_float+0xe0>
 80063fa:	464b      	mov	r3, r9
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	bfbc      	itt	lt
 8006400:	232d      	movlt	r3, #45	@ 0x2d
 8006402:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006406:	4a7e      	ldr	r2, [pc, #504]	@ (8006600 <_printf_float+0x2d4>)
 8006408:	4b7e      	ldr	r3, [pc, #504]	@ (8006604 <_printf_float+0x2d8>)
 800640a:	e7d4      	b.n	80063b6 <_printf_float+0x8a>
 800640c:	6863      	ldr	r3, [r4, #4]
 800640e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006412:	9206      	str	r2, [sp, #24]
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	d13b      	bne.n	8006490 <_printf_float+0x164>
 8006418:	2306      	movs	r3, #6
 800641a:	6063      	str	r3, [r4, #4]
 800641c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006420:	2300      	movs	r3, #0
 8006422:	6022      	str	r2, [r4, #0]
 8006424:	9303      	str	r3, [sp, #12]
 8006426:	ab0a      	add	r3, sp, #40	@ 0x28
 8006428:	e9cd a301 	strd	sl, r3, [sp, #4]
 800642c:	ab09      	add	r3, sp, #36	@ 0x24
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	6861      	ldr	r1, [r4, #4]
 8006432:	ec49 8b10 	vmov	d0, r8, r9
 8006436:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800643a:	4628      	mov	r0, r5
 800643c:	f7ff fed6 	bl	80061ec <__cvt>
 8006440:	9b06      	ldr	r3, [sp, #24]
 8006442:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006444:	2b47      	cmp	r3, #71	@ 0x47
 8006446:	4680      	mov	r8, r0
 8006448:	d129      	bne.n	800649e <_printf_float+0x172>
 800644a:	1cc8      	adds	r0, r1, #3
 800644c:	db02      	blt.n	8006454 <_printf_float+0x128>
 800644e:	6863      	ldr	r3, [r4, #4]
 8006450:	4299      	cmp	r1, r3
 8006452:	dd41      	ble.n	80064d8 <_printf_float+0x1ac>
 8006454:	f1aa 0a02 	sub.w	sl, sl, #2
 8006458:	fa5f fa8a 	uxtb.w	sl, sl
 800645c:	3901      	subs	r1, #1
 800645e:	4652      	mov	r2, sl
 8006460:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006464:	9109      	str	r1, [sp, #36]	@ 0x24
 8006466:	f7ff ff26 	bl	80062b6 <__exponent>
 800646a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800646c:	1813      	adds	r3, r2, r0
 800646e:	2a01      	cmp	r2, #1
 8006470:	4681      	mov	r9, r0
 8006472:	6123      	str	r3, [r4, #16]
 8006474:	dc02      	bgt.n	800647c <_printf_float+0x150>
 8006476:	6822      	ldr	r2, [r4, #0]
 8006478:	07d2      	lsls	r2, r2, #31
 800647a:	d501      	bpl.n	8006480 <_printf_float+0x154>
 800647c:	3301      	adds	r3, #1
 800647e:	6123      	str	r3, [r4, #16]
 8006480:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0a2      	beq.n	80063ce <_printf_float+0xa2>
 8006488:	232d      	movs	r3, #45	@ 0x2d
 800648a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800648e:	e79e      	b.n	80063ce <_printf_float+0xa2>
 8006490:	9a06      	ldr	r2, [sp, #24]
 8006492:	2a47      	cmp	r2, #71	@ 0x47
 8006494:	d1c2      	bne.n	800641c <_printf_float+0xf0>
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1c0      	bne.n	800641c <_printf_float+0xf0>
 800649a:	2301      	movs	r3, #1
 800649c:	e7bd      	b.n	800641a <_printf_float+0xee>
 800649e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064a2:	d9db      	bls.n	800645c <_printf_float+0x130>
 80064a4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80064a8:	d118      	bne.n	80064dc <_printf_float+0x1b0>
 80064aa:	2900      	cmp	r1, #0
 80064ac:	6863      	ldr	r3, [r4, #4]
 80064ae:	dd0b      	ble.n	80064c8 <_printf_float+0x19c>
 80064b0:	6121      	str	r1, [r4, #16]
 80064b2:	b913      	cbnz	r3, 80064ba <_printf_float+0x18e>
 80064b4:	6822      	ldr	r2, [r4, #0]
 80064b6:	07d0      	lsls	r0, r2, #31
 80064b8:	d502      	bpl.n	80064c0 <_printf_float+0x194>
 80064ba:	3301      	adds	r3, #1
 80064bc:	440b      	add	r3, r1
 80064be:	6123      	str	r3, [r4, #16]
 80064c0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80064c2:	f04f 0900 	mov.w	r9, #0
 80064c6:	e7db      	b.n	8006480 <_printf_float+0x154>
 80064c8:	b913      	cbnz	r3, 80064d0 <_printf_float+0x1a4>
 80064ca:	6822      	ldr	r2, [r4, #0]
 80064cc:	07d2      	lsls	r2, r2, #31
 80064ce:	d501      	bpl.n	80064d4 <_printf_float+0x1a8>
 80064d0:	3302      	adds	r3, #2
 80064d2:	e7f4      	b.n	80064be <_printf_float+0x192>
 80064d4:	2301      	movs	r3, #1
 80064d6:	e7f2      	b.n	80064be <_printf_float+0x192>
 80064d8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80064dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064de:	4299      	cmp	r1, r3
 80064e0:	db05      	blt.n	80064ee <_printf_float+0x1c2>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	6121      	str	r1, [r4, #16]
 80064e6:	07d8      	lsls	r0, r3, #31
 80064e8:	d5ea      	bpl.n	80064c0 <_printf_float+0x194>
 80064ea:	1c4b      	adds	r3, r1, #1
 80064ec:	e7e7      	b.n	80064be <_printf_float+0x192>
 80064ee:	2900      	cmp	r1, #0
 80064f0:	bfd4      	ite	le
 80064f2:	f1c1 0202 	rsble	r2, r1, #2
 80064f6:	2201      	movgt	r2, #1
 80064f8:	4413      	add	r3, r2
 80064fa:	e7e0      	b.n	80064be <_printf_float+0x192>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	055a      	lsls	r2, r3, #21
 8006500:	d407      	bmi.n	8006512 <_printf_float+0x1e6>
 8006502:	6923      	ldr	r3, [r4, #16]
 8006504:	4642      	mov	r2, r8
 8006506:	4631      	mov	r1, r6
 8006508:	4628      	mov	r0, r5
 800650a:	47b8      	blx	r7
 800650c:	3001      	adds	r0, #1
 800650e:	d12b      	bne.n	8006568 <_printf_float+0x23c>
 8006510:	e767      	b.n	80063e2 <_printf_float+0xb6>
 8006512:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006516:	f240 80dd 	bls.w	80066d4 <_printf_float+0x3a8>
 800651a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800651e:	2200      	movs	r2, #0
 8006520:	2300      	movs	r3, #0
 8006522:	f7fa fae1 	bl	8000ae8 <__aeabi_dcmpeq>
 8006526:	2800      	cmp	r0, #0
 8006528:	d033      	beq.n	8006592 <_printf_float+0x266>
 800652a:	4a37      	ldr	r2, [pc, #220]	@ (8006608 <_printf_float+0x2dc>)
 800652c:	2301      	movs	r3, #1
 800652e:	4631      	mov	r1, r6
 8006530:	4628      	mov	r0, r5
 8006532:	47b8      	blx	r7
 8006534:	3001      	adds	r0, #1
 8006536:	f43f af54 	beq.w	80063e2 <_printf_float+0xb6>
 800653a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800653e:	4543      	cmp	r3, r8
 8006540:	db02      	blt.n	8006548 <_printf_float+0x21c>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	07d8      	lsls	r0, r3, #31
 8006546:	d50f      	bpl.n	8006568 <_printf_float+0x23c>
 8006548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800654c:	4631      	mov	r1, r6
 800654e:	4628      	mov	r0, r5
 8006550:	47b8      	blx	r7
 8006552:	3001      	adds	r0, #1
 8006554:	f43f af45 	beq.w	80063e2 <_printf_float+0xb6>
 8006558:	f04f 0900 	mov.w	r9, #0
 800655c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006560:	f104 0a1a 	add.w	sl, r4, #26
 8006564:	45c8      	cmp	r8, r9
 8006566:	dc09      	bgt.n	800657c <_printf_float+0x250>
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	079b      	lsls	r3, r3, #30
 800656c:	f100 8103 	bmi.w	8006776 <_printf_float+0x44a>
 8006570:	68e0      	ldr	r0, [r4, #12]
 8006572:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006574:	4298      	cmp	r0, r3
 8006576:	bfb8      	it	lt
 8006578:	4618      	movlt	r0, r3
 800657a:	e734      	b.n	80063e6 <_printf_float+0xba>
 800657c:	2301      	movs	r3, #1
 800657e:	4652      	mov	r2, sl
 8006580:	4631      	mov	r1, r6
 8006582:	4628      	mov	r0, r5
 8006584:	47b8      	blx	r7
 8006586:	3001      	adds	r0, #1
 8006588:	f43f af2b 	beq.w	80063e2 <_printf_float+0xb6>
 800658c:	f109 0901 	add.w	r9, r9, #1
 8006590:	e7e8      	b.n	8006564 <_printf_float+0x238>
 8006592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006594:	2b00      	cmp	r3, #0
 8006596:	dc39      	bgt.n	800660c <_printf_float+0x2e0>
 8006598:	4a1b      	ldr	r2, [pc, #108]	@ (8006608 <_printf_float+0x2dc>)
 800659a:	2301      	movs	r3, #1
 800659c:	4631      	mov	r1, r6
 800659e:	4628      	mov	r0, r5
 80065a0:	47b8      	blx	r7
 80065a2:	3001      	adds	r0, #1
 80065a4:	f43f af1d 	beq.w	80063e2 <_printf_float+0xb6>
 80065a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80065ac:	ea59 0303 	orrs.w	r3, r9, r3
 80065b0:	d102      	bne.n	80065b8 <_printf_float+0x28c>
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	07d9      	lsls	r1, r3, #31
 80065b6:	d5d7      	bpl.n	8006568 <_printf_float+0x23c>
 80065b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065bc:	4631      	mov	r1, r6
 80065be:	4628      	mov	r0, r5
 80065c0:	47b8      	blx	r7
 80065c2:	3001      	adds	r0, #1
 80065c4:	f43f af0d 	beq.w	80063e2 <_printf_float+0xb6>
 80065c8:	f04f 0a00 	mov.w	sl, #0
 80065cc:	f104 0b1a 	add.w	fp, r4, #26
 80065d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065d2:	425b      	negs	r3, r3
 80065d4:	4553      	cmp	r3, sl
 80065d6:	dc01      	bgt.n	80065dc <_printf_float+0x2b0>
 80065d8:	464b      	mov	r3, r9
 80065da:	e793      	b.n	8006504 <_printf_float+0x1d8>
 80065dc:	2301      	movs	r3, #1
 80065de:	465a      	mov	r2, fp
 80065e0:	4631      	mov	r1, r6
 80065e2:	4628      	mov	r0, r5
 80065e4:	47b8      	blx	r7
 80065e6:	3001      	adds	r0, #1
 80065e8:	f43f aefb 	beq.w	80063e2 <_printf_float+0xb6>
 80065ec:	f10a 0a01 	add.w	sl, sl, #1
 80065f0:	e7ee      	b.n	80065d0 <_printf_float+0x2a4>
 80065f2:	bf00      	nop
 80065f4:	7fefffff 	.word	0x7fefffff
 80065f8:	0800ac78 	.word	0x0800ac78
 80065fc:	0800ac74 	.word	0x0800ac74
 8006600:	0800ac80 	.word	0x0800ac80
 8006604:	0800ac7c 	.word	0x0800ac7c
 8006608:	0800ac84 	.word	0x0800ac84
 800660c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800660e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006612:	4553      	cmp	r3, sl
 8006614:	bfa8      	it	ge
 8006616:	4653      	movge	r3, sl
 8006618:	2b00      	cmp	r3, #0
 800661a:	4699      	mov	r9, r3
 800661c:	dc36      	bgt.n	800668c <_printf_float+0x360>
 800661e:	f04f 0b00 	mov.w	fp, #0
 8006622:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006626:	f104 021a 	add.w	r2, r4, #26
 800662a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800662c:	9306      	str	r3, [sp, #24]
 800662e:	eba3 0309 	sub.w	r3, r3, r9
 8006632:	455b      	cmp	r3, fp
 8006634:	dc31      	bgt.n	800669a <_printf_float+0x36e>
 8006636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006638:	459a      	cmp	sl, r3
 800663a:	dc3a      	bgt.n	80066b2 <_printf_float+0x386>
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	07da      	lsls	r2, r3, #31
 8006640:	d437      	bmi.n	80066b2 <_printf_float+0x386>
 8006642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006644:	ebaa 0903 	sub.w	r9, sl, r3
 8006648:	9b06      	ldr	r3, [sp, #24]
 800664a:	ebaa 0303 	sub.w	r3, sl, r3
 800664e:	4599      	cmp	r9, r3
 8006650:	bfa8      	it	ge
 8006652:	4699      	movge	r9, r3
 8006654:	f1b9 0f00 	cmp.w	r9, #0
 8006658:	dc33      	bgt.n	80066c2 <_printf_float+0x396>
 800665a:	f04f 0800 	mov.w	r8, #0
 800665e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006662:	f104 0b1a 	add.w	fp, r4, #26
 8006666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006668:	ebaa 0303 	sub.w	r3, sl, r3
 800666c:	eba3 0309 	sub.w	r3, r3, r9
 8006670:	4543      	cmp	r3, r8
 8006672:	f77f af79 	ble.w	8006568 <_printf_float+0x23c>
 8006676:	2301      	movs	r3, #1
 8006678:	465a      	mov	r2, fp
 800667a:	4631      	mov	r1, r6
 800667c:	4628      	mov	r0, r5
 800667e:	47b8      	blx	r7
 8006680:	3001      	adds	r0, #1
 8006682:	f43f aeae 	beq.w	80063e2 <_printf_float+0xb6>
 8006686:	f108 0801 	add.w	r8, r8, #1
 800668a:	e7ec      	b.n	8006666 <_printf_float+0x33a>
 800668c:	4642      	mov	r2, r8
 800668e:	4631      	mov	r1, r6
 8006690:	4628      	mov	r0, r5
 8006692:	47b8      	blx	r7
 8006694:	3001      	adds	r0, #1
 8006696:	d1c2      	bne.n	800661e <_printf_float+0x2f2>
 8006698:	e6a3      	b.n	80063e2 <_printf_float+0xb6>
 800669a:	2301      	movs	r3, #1
 800669c:	4631      	mov	r1, r6
 800669e:	4628      	mov	r0, r5
 80066a0:	9206      	str	r2, [sp, #24]
 80066a2:	47b8      	blx	r7
 80066a4:	3001      	adds	r0, #1
 80066a6:	f43f ae9c 	beq.w	80063e2 <_printf_float+0xb6>
 80066aa:	9a06      	ldr	r2, [sp, #24]
 80066ac:	f10b 0b01 	add.w	fp, fp, #1
 80066b0:	e7bb      	b.n	800662a <_printf_float+0x2fe>
 80066b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066b6:	4631      	mov	r1, r6
 80066b8:	4628      	mov	r0, r5
 80066ba:	47b8      	blx	r7
 80066bc:	3001      	adds	r0, #1
 80066be:	d1c0      	bne.n	8006642 <_printf_float+0x316>
 80066c0:	e68f      	b.n	80063e2 <_printf_float+0xb6>
 80066c2:	9a06      	ldr	r2, [sp, #24]
 80066c4:	464b      	mov	r3, r9
 80066c6:	4442      	add	r2, r8
 80066c8:	4631      	mov	r1, r6
 80066ca:	4628      	mov	r0, r5
 80066cc:	47b8      	blx	r7
 80066ce:	3001      	adds	r0, #1
 80066d0:	d1c3      	bne.n	800665a <_printf_float+0x32e>
 80066d2:	e686      	b.n	80063e2 <_printf_float+0xb6>
 80066d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80066d8:	f1ba 0f01 	cmp.w	sl, #1
 80066dc:	dc01      	bgt.n	80066e2 <_printf_float+0x3b6>
 80066de:	07db      	lsls	r3, r3, #31
 80066e0:	d536      	bpl.n	8006750 <_printf_float+0x424>
 80066e2:	2301      	movs	r3, #1
 80066e4:	4642      	mov	r2, r8
 80066e6:	4631      	mov	r1, r6
 80066e8:	4628      	mov	r0, r5
 80066ea:	47b8      	blx	r7
 80066ec:	3001      	adds	r0, #1
 80066ee:	f43f ae78 	beq.w	80063e2 <_printf_float+0xb6>
 80066f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066f6:	4631      	mov	r1, r6
 80066f8:	4628      	mov	r0, r5
 80066fa:	47b8      	blx	r7
 80066fc:	3001      	adds	r0, #1
 80066fe:	f43f ae70 	beq.w	80063e2 <_printf_float+0xb6>
 8006702:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006706:	2200      	movs	r2, #0
 8006708:	2300      	movs	r3, #0
 800670a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800670e:	f7fa f9eb 	bl	8000ae8 <__aeabi_dcmpeq>
 8006712:	b9c0      	cbnz	r0, 8006746 <_printf_float+0x41a>
 8006714:	4653      	mov	r3, sl
 8006716:	f108 0201 	add.w	r2, r8, #1
 800671a:	4631      	mov	r1, r6
 800671c:	4628      	mov	r0, r5
 800671e:	47b8      	blx	r7
 8006720:	3001      	adds	r0, #1
 8006722:	d10c      	bne.n	800673e <_printf_float+0x412>
 8006724:	e65d      	b.n	80063e2 <_printf_float+0xb6>
 8006726:	2301      	movs	r3, #1
 8006728:	465a      	mov	r2, fp
 800672a:	4631      	mov	r1, r6
 800672c:	4628      	mov	r0, r5
 800672e:	47b8      	blx	r7
 8006730:	3001      	adds	r0, #1
 8006732:	f43f ae56 	beq.w	80063e2 <_printf_float+0xb6>
 8006736:	f108 0801 	add.w	r8, r8, #1
 800673a:	45d0      	cmp	r8, sl
 800673c:	dbf3      	blt.n	8006726 <_printf_float+0x3fa>
 800673e:	464b      	mov	r3, r9
 8006740:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006744:	e6df      	b.n	8006506 <_printf_float+0x1da>
 8006746:	f04f 0800 	mov.w	r8, #0
 800674a:	f104 0b1a 	add.w	fp, r4, #26
 800674e:	e7f4      	b.n	800673a <_printf_float+0x40e>
 8006750:	2301      	movs	r3, #1
 8006752:	4642      	mov	r2, r8
 8006754:	e7e1      	b.n	800671a <_printf_float+0x3ee>
 8006756:	2301      	movs	r3, #1
 8006758:	464a      	mov	r2, r9
 800675a:	4631      	mov	r1, r6
 800675c:	4628      	mov	r0, r5
 800675e:	47b8      	blx	r7
 8006760:	3001      	adds	r0, #1
 8006762:	f43f ae3e 	beq.w	80063e2 <_printf_float+0xb6>
 8006766:	f108 0801 	add.w	r8, r8, #1
 800676a:	68e3      	ldr	r3, [r4, #12]
 800676c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800676e:	1a5b      	subs	r3, r3, r1
 8006770:	4543      	cmp	r3, r8
 8006772:	dcf0      	bgt.n	8006756 <_printf_float+0x42a>
 8006774:	e6fc      	b.n	8006570 <_printf_float+0x244>
 8006776:	f04f 0800 	mov.w	r8, #0
 800677a:	f104 0919 	add.w	r9, r4, #25
 800677e:	e7f4      	b.n	800676a <_printf_float+0x43e>

08006780 <_printf_common>:
 8006780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006784:	4616      	mov	r6, r2
 8006786:	4698      	mov	r8, r3
 8006788:	688a      	ldr	r2, [r1, #8]
 800678a:	690b      	ldr	r3, [r1, #16]
 800678c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006790:	4293      	cmp	r3, r2
 8006792:	bfb8      	it	lt
 8006794:	4613      	movlt	r3, r2
 8006796:	6033      	str	r3, [r6, #0]
 8006798:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800679c:	4607      	mov	r7, r0
 800679e:	460c      	mov	r4, r1
 80067a0:	b10a      	cbz	r2, 80067a6 <_printf_common+0x26>
 80067a2:	3301      	adds	r3, #1
 80067a4:	6033      	str	r3, [r6, #0]
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	0699      	lsls	r1, r3, #26
 80067aa:	bf42      	ittt	mi
 80067ac:	6833      	ldrmi	r3, [r6, #0]
 80067ae:	3302      	addmi	r3, #2
 80067b0:	6033      	strmi	r3, [r6, #0]
 80067b2:	6825      	ldr	r5, [r4, #0]
 80067b4:	f015 0506 	ands.w	r5, r5, #6
 80067b8:	d106      	bne.n	80067c8 <_printf_common+0x48>
 80067ba:	f104 0a19 	add.w	sl, r4, #25
 80067be:	68e3      	ldr	r3, [r4, #12]
 80067c0:	6832      	ldr	r2, [r6, #0]
 80067c2:	1a9b      	subs	r3, r3, r2
 80067c4:	42ab      	cmp	r3, r5
 80067c6:	dc26      	bgt.n	8006816 <_printf_common+0x96>
 80067c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067cc:	6822      	ldr	r2, [r4, #0]
 80067ce:	3b00      	subs	r3, #0
 80067d0:	bf18      	it	ne
 80067d2:	2301      	movne	r3, #1
 80067d4:	0692      	lsls	r2, r2, #26
 80067d6:	d42b      	bmi.n	8006830 <_printf_common+0xb0>
 80067d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067dc:	4641      	mov	r1, r8
 80067de:	4638      	mov	r0, r7
 80067e0:	47c8      	blx	r9
 80067e2:	3001      	adds	r0, #1
 80067e4:	d01e      	beq.n	8006824 <_printf_common+0xa4>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	6922      	ldr	r2, [r4, #16]
 80067ea:	f003 0306 	and.w	r3, r3, #6
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	bf02      	ittt	eq
 80067f2:	68e5      	ldreq	r5, [r4, #12]
 80067f4:	6833      	ldreq	r3, [r6, #0]
 80067f6:	1aed      	subeq	r5, r5, r3
 80067f8:	68a3      	ldr	r3, [r4, #8]
 80067fa:	bf0c      	ite	eq
 80067fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006800:	2500      	movne	r5, #0
 8006802:	4293      	cmp	r3, r2
 8006804:	bfc4      	itt	gt
 8006806:	1a9b      	subgt	r3, r3, r2
 8006808:	18ed      	addgt	r5, r5, r3
 800680a:	2600      	movs	r6, #0
 800680c:	341a      	adds	r4, #26
 800680e:	42b5      	cmp	r5, r6
 8006810:	d11a      	bne.n	8006848 <_printf_common+0xc8>
 8006812:	2000      	movs	r0, #0
 8006814:	e008      	b.n	8006828 <_printf_common+0xa8>
 8006816:	2301      	movs	r3, #1
 8006818:	4652      	mov	r2, sl
 800681a:	4641      	mov	r1, r8
 800681c:	4638      	mov	r0, r7
 800681e:	47c8      	blx	r9
 8006820:	3001      	adds	r0, #1
 8006822:	d103      	bne.n	800682c <_printf_common+0xac>
 8006824:	f04f 30ff 	mov.w	r0, #4294967295
 8006828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800682c:	3501      	adds	r5, #1
 800682e:	e7c6      	b.n	80067be <_printf_common+0x3e>
 8006830:	18e1      	adds	r1, r4, r3
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	2030      	movs	r0, #48	@ 0x30
 8006836:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800683a:	4422      	add	r2, r4
 800683c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006840:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006844:	3302      	adds	r3, #2
 8006846:	e7c7      	b.n	80067d8 <_printf_common+0x58>
 8006848:	2301      	movs	r3, #1
 800684a:	4622      	mov	r2, r4
 800684c:	4641      	mov	r1, r8
 800684e:	4638      	mov	r0, r7
 8006850:	47c8      	blx	r9
 8006852:	3001      	adds	r0, #1
 8006854:	d0e6      	beq.n	8006824 <_printf_common+0xa4>
 8006856:	3601      	adds	r6, #1
 8006858:	e7d9      	b.n	800680e <_printf_common+0x8e>
	...

0800685c <_printf_i>:
 800685c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006860:	7e0f      	ldrb	r7, [r1, #24]
 8006862:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006864:	2f78      	cmp	r7, #120	@ 0x78
 8006866:	4691      	mov	r9, r2
 8006868:	4680      	mov	r8, r0
 800686a:	460c      	mov	r4, r1
 800686c:	469a      	mov	sl, r3
 800686e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006872:	d807      	bhi.n	8006884 <_printf_i+0x28>
 8006874:	2f62      	cmp	r7, #98	@ 0x62
 8006876:	d80a      	bhi.n	800688e <_printf_i+0x32>
 8006878:	2f00      	cmp	r7, #0
 800687a:	f000 80d1 	beq.w	8006a20 <_printf_i+0x1c4>
 800687e:	2f58      	cmp	r7, #88	@ 0x58
 8006880:	f000 80b8 	beq.w	80069f4 <_printf_i+0x198>
 8006884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006888:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800688c:	e03a      	b.n	8006904 <_printf_i+0xa8>
 800688e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006892:	2b15      	cmp	r3, #21
 8006894:	d8f6      	bhi.n	8006884 <_printf_i+0x28>
 8006896:	a101      	add	r1, pc, #4	@ (adr r1, 800689c <_printf_i+0x40>)
 8006898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800689c:	080068f5 	.word	0x080068f5
 80068a0:	08006909 	.word	0x08006909
 80068a4:	08006885 	.word	0x08006885
 80068a8:	08006885 	.word	0x08006885
 80068ac:	08006885 	.word	0x08006885
 80068b0:	08006885 	.word	0x08006885
 80068b4:	08006909 	.word	0x08006909
 80068b8:	08006885 	.word	0x08006885
 80068bc:	08006885 	.word	0x08006885
 80068c0:	08006885 	.word	0x08006885
 80068c4:	08006885 	.word	0x08006885
 80068c8:	08006a07 	.word	0x08006a07
 80068cc:	08006933 	.word	0x08006933
 80068d0:	080069c1 	.word	0x080069c1
 80068d4:	08006885 	.word	0x08006885
 80068d8:	08006885 	.word	0x08006885
 80068dc:	08006a29 	.word	0x08006a29
 80068e0:	08006885 	.word	0x08006885
 80068e4:	08006933 	.word	0x08006933
 80068e8:	08006885 	.word	0x08006885
 80068ec:	08006885 	.word	0x08006885
 80068f0:	080069c9 	.word	0x080069c9
 80068f4:	6833      	ldr	r3, [r6, #0]
 80068f6:	1d1a      	adds	r2, r3, #4
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6032      	str	r2, [r6, #0]
 80068fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006900:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006904:	2301      	movs	r3, #1
 8006906:	e09c      	b.n	8006a42 <_printf_i+0x1e6>
 8006908:	6833      	ldr	r3, [r6, #0]
 800690a:	6820      	ldr	r0, [r4, #0]
 800690c:	1d19      	adds	r1, r3, #4
 800690e:	6031      	str	r1, [r6, #0]
 8006910:	0606      	lsls	r6, r0, #24
 8006912:	d501      	bpl.n	8006918 <_printf_i+0xbc>
 8006914:	681d      	ldr	r5, [r3, #0]
 8006916:	e003      	b.n	8006920 <_printf_i+0xc4>
 8006918:	0645      	lsls	r5, r0, #25
 800691a:	d5fb      	bpl.n	8006914 <_printf_i+0xb8>
 800691c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006920:	2d00      	cmp	r5, #0
 8006922:	da03      	bge.n	800692c <_printf_i+0xd0>
 8006924:	232d      	movs	r3, #45	@ 0x2d
 8006926:	426d      	negs	r5, r5
 8006928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800692c:	4858      	ldr	r0, [pc, #352]	@ (8006a90 <_printf_i+0x234>)
 800692e:	230a      	movs	r3, #10
 8006930:	e011      	b.n	8006956 <_printf_i+0xfa>
 8006932:	6821      	ldr	r1, [r4, #0]
 8006934:	6833      	ldr	r3, [r6, #0]
 8006936:	0608      	lsls	r0, r1, #24
 8006938:	f853 5b04 	ldr.w	r5, [r3], #4
 800693c:	d402      	bmi.n	8006944 <_printf_i+0xe8>
 800693e:	0649      	lsls	r1, r1, #25
 8006940:	bf48      	it	mi
 8006942:	b2ad      	uxthmi	r5, r5
 8006944:	2f6f      	cmp	r7, #111	@ 0x6f
 8006946:	4852      	ldr	r0, [pc, #328]	@ (8006a90 <_printf_i+0x234>)
 8006948:	6033      	str	r3, [r6, #0]
 800694a:	bf14      	ite	ne
 800694c:	230a      	movne	r3, #10
 800694e:	2308      	moveq	r3, #8
 8006950:	2100      	movs	r1, #0
 8006952:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006956:	6866      	ldr	r6, [r4, #4]
 8006958:	60a6      	str	r6, [r4, #8]
 800695a:	2e00      	cmp	r6, #0
 800695c:	db05      	blt.n	800696a <_printf_i+0x10e>
 800695e:	6821      	ldr	r1, [r4, #0]
 8006960:	432e      	orrs	r6, r5
 8006962:	f021 0104 	bic.w	r1, r1, #4
 8006966:	6021      	str	r1, [r4, #0]
 8006968:	d04b      	beq.n	8006a02 <_printf_i+0x1a6>
 800696a:	4616      	mov	r6, r2
 800696c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006970:	fb03 5711 	mls	r7, r3, r1, r5
 8006974:	5dc7      	ldrb	r7, [r0, r7]
 8006976:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800697a:	462f      	mov	r7, r5
 800697c:	42bb      	cmp	r3, r7
 800697e:	460d      	mov	r5, r1
 8006980:	d9f4      	bls.n	800696c <_printf_i+0x110>
 8006982:	2b08      	cmp	r3, #8
 8006984:	d10b      	bne.n	800699e <_printf_i+0x142>
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	07df      	lsls	r7, r3, #31
 800698a:	d508      	bpl.n	800699e <_printf_i+0x142>
 800698c:	6923      	ldr	r3, [r4, #16]
 800698e:	6861      	ldr	r1, [r4, #4]
 8006990:	4299      	cmp	r1, r3
 8006992:	bfde      	ittt	le
 8006994:	2330      	movle	r3, #48	@ 0x30
 8006996:	f806 3c01 	strble.w	r3, [r6, #-1]
 800699a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800699e:	1b92      	subs	r2, r2, r6
 80069a0:	6122      	str	r2, [r4, #16]
 80069a2:	f8cd a000 	str.w	sl, [sp]
 80069a6:	464b      	mov	r3, r9
 80069a8:	aa03      	add	r2, sp, #12
 80069aa:	4621      	mov	r1, r4
 80069ac:	4640      	mov	r0, r8
 80069ae:	f7ff fee7 	bl	8006780 <_printf_common>
 80069b2:	3001      	adds	r0, #1
 80069b4:	d14a      	bne.n	8006a4c <_printf_i+0x1f0>
 80069b6:	f04f 30ff 	mov.w	r0, #4294967295
 80069ba:	b004      	add	sp, #16
 80069bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	f043 0320 	orr.w	r3, r3, #32
 80069c6:	6023      	str	r3, [r4, #0]
 80069c8:	4832      	ldr	r0, [pc, #200]	@ (8006a94 <_printf_i+0x238>)
 80069ca:	2778      	movs	r7, #120	@ 0x78
 80069cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	6831      	ldr	r1, [r6, #0]
 80069d4:	061f      	lsls	r7, r3, #24
 80069d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80069da:	d402      	bmi.n	80069e2 <_printf_i+0x186>
 80069dc:	065f      	lsls	r7, r3, #25
 80069de:	bf48      	it	mi
 80069e0:	b2ad      	uxthmi	r5, r5
 80069e2:	6031      	str	r1, [r6, #0]
 80069e4:	07d9      	lsls	r1, r3, #31
 80069e6:	bf44      	itt	mi
 80069e8:	f043 0320 	orrmi.w	r3, r3, #32
 80069ec:	6023      	strmi	r3, [r4, #0]
 80069ee:	b11d      	cbz	r5, 80069f8 <_printf_i+0x19c>
 80069f0:	2310      	movs	r3, #16
 80069f2:	e7ad      	b.n	8006950 <_printf_i+0xf4>
 80069f4:	4826      	ldr	r0, [pc, #152]	@ (8006a90 <_printf_i+0x234>)
 80069f6:	e7e9      	b.n	80069cc <_printf_i+0x170>
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	f023 0320 	bic.w	r3, r3, #32
 80069fe:	6023      	str	r3, [r4, #0]
 8006a00:	e7f6      	b.n	80069f0 <_printf_i+0x194>
 8006a02:	4616      	mov	r6, r2
 8006a04:	e7bd      	b.n	8006982 <_printf_i+0x126>
 8006a06:	6833      	ldr	r3, [r6, #0]
 8006a08:	6825      	ldr	r5, [r4, #0]
 8006a0a:	6961      	ldr	r1, [r4, #20]
 8006a0c:	1d18      	adds	r0, r3, #4
 8006a0e:	6030      	str	r0, [r6, #0]
 8006a10:	062e      	lsls	r6, r5, #24
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	d501      	bpl.n	8006a1a <_printf_i+0x1be>
 8006a16:	6019      	str	r1, [r3, #0]
 8006a18:	e002      	b.n	8006a20 <_printf_i+0x1c4>
 8006a1a:	0668      	lsls	r0, r5, #25
 8006a1c:	d5fb      	bpl.n	8006a16 <_printf_i+0x1ba>
 8006a1e:	8019      	strh	r1, [r3, #0]
 8006a20:	2300      	movs	r3, #0
 8006a22:	6123      	str	r3, [r4, #16]
 8006a24:	4616      	mov	r6, r2
 8006a26:	e7bc      	b.n	80069a2 <_printf_i+0x146>
 8006a28:	6833      	ldr	r3, [r6, #0]
 8006a2a:	1d1a      	adds	r2, r3, #4
 8006a2c:	6032      	str	r2, [r6, #0]
 8006a2e:	681e      	ldr	r6, [r3, #0]
 8006a30:	6862      	ldr	r2, [r4, #4]
 8006a32:	2100      	movs	r1, #0
 8006a34:	4630      	mov	r0, r6
 8006a36:	f7f9 fbdb 	bl	80001f0 <memchr>
 8006a3a:	b108      	cbz	r0, 8006a40 <_printf_i+0x1e4>
 8006a3c:	1b80      	subs	r0, r0, r6
 8006a3e:	6060      	str	r0, [r4, #4]
 8006a40:	6863      	ldr	r3, [r4, #4]
 8006a42:	6123      	str	r3, [r4, #16]
 8006a44:	2300      	movs	r3, #0
 8006a46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a4a:	e7aa      	b.n	80069a2 <_printf_i+0x146>
 8006a4c:	6923      	ldr	r3, [r4, #16]
 8006a4e:	4632      	mov	r2, r6
 8006a50:	4649      	mov	r1, r9
 8006a52:	4640      	mov	r0, r8
 8006a54:	47d0      	blx	sl
 8006a56:	3001      	adds	r0, #1
 8006a58:	d0ad      	beq.n	80069b6 <_printf_i+0x15a>
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	079b      	lsls	r3, r3, #30
 8006a5e:	d413      	bmi.n	8006a88 <_printf_i+0x22c>
 8006a60:	68e0      	ldr	r0, [r4, #12]
 8006a62:	9b03      	ldr	r3, [sp, #12]
 8006a64:	4298      	cmp	r0, r3
 8006a66:	bfb8      	it	lt
 8006a68:	4618      	movlt	r0, r3
 8006a6a:	e7a6      	b.n	80069ba <_printf_i+0x15e>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	4632      	mov	r2, r6
 8006a70:	4649      	mov	r1, r9
 8006a72:	4640      	mov	r0, r8
 8006a74:	47d0      	blx	sl
 8006a76:	3001      	adds	r0, #1
 8006a78:	d09d      	beq.n	80069b6 <_printf_i+0x15a>
 8006a7a:	3501      	adds	r5, #1
 8006a7c:	68e3      	ldr	r3, [r4, #12]
 8006a7e:	9903      	ldr	r1, [sp, #12]
 8006a80:	1a5b      	subs	r3, r3, r1
 8006a82:	42ab      	cmp	r3, r5
 8006a84:	dcf2      	bgt.n	8006a6c <_printf_i+0x210>
 8006a86:	e7eb      	b.n	8006a60 <_printf_i+0x204>
 8006a88:	2500      	movs	r5, #0
 8006a8a:	f104 0619 	add.w	r6, r4, #25
 8006a8e:	e7f5      	b.n	8006a7c <_printf_i+0x220>
 8006a90:	0800ac86 	.word	0x0800ac86
 8006a94:	0800ac97 	.word	0x0800ac97

08006a98 <_scanf_float>:
 8006a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9c:	b087      	sub	sp, #28
 8006a9e:	4691      	mov	r9, r2
 8006aa0:	9303      	str	r3, [sp, #12]
 8006aa2:	688b      	ldr	r3, [r1, #8]
 8006aa4:	1e5a      	subs	r2, r3, #1
 8006aa6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006aaa:	bf81      	itttt	hi
 8006aac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006ab0:	eb03 0b05 	addhi.w	fp, r3, r5
 8006ab4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006ab8:	608b      	strhi	r3, [r1, #8]
 8006aba:	680b      	ldr	r3, [r1, #0]
 8006abc:	460a      	mov	r2, r1
 8006abe:	f04f 0500 	mov.w	r5, #0
 8006ac2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006ac6:	f842 3b1c 	str.w	r3, [r2], #28
 8006aca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ace:	4680      	mov	r8, r0
 8006ad0:	460c      	mov	r4, r1
 8006ad2:	bf98      	it	ls
 8006ad4:	f04f 0b00 	movls.w	fp, #0
 8006ad8:	9201      	str	r2, [sp, #4]
 8006ada:	4616      	mov	r6, r2
 8006adc:	46aa      	mov	sl, r5
 8006ade:	462f      	mov	r7, r5
 8006ae0:	9502      	str	r5, [sp, #8]
 8006ae2:	68a2      	ldr	r2, [r4, #8]
 8006ae4:	b15a      	cbz	r2, 8006afe <_scanf_float+0x66>
 8006ae6:	f8d9 3000 	ldr.w	r3, [r9]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b4e      	cmp	r3, #78	@ 0x4e
 8006aee:	d863      	bhi.n	8006bb8 <_scanf_float+0x120>
 8006af0:	2b40      	cmp	r3, #64	@ 0x40
 8006af2:	d83b      	bhi.n	8006b6c <_scanf_float+0xd4>
 8006af4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006af8:	b2c8      	uxtb	r0, r1
 8006afa:	280e      	cmp	r0, #14
 8006afc:	d939      	bls.n	8006b72 <_scanf_float+0xda>
 8006afe:	b11f      	cbz	r7, 8006b08 <_scanf_float+0x70>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b06:	6023      	str	r3, [r4, #0]
 8006b08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b0c:	f1ba 0f01 	cmp.w	sl, #1
 8006b10:	f200 8114 	bhi.w	8006d3c <_scanf_float+0x2a4>
 8006b14:	9b01      	ldr	r3, [sp, #4]
 8006b16:	429e      	cmp	r6, r3
 8006b18:	f200 8105 	bhi.w	8006d26 <_scanf_float+0x28e>
 8006b1c:	2001      	movs	r0, #1
 8006b1e:	b007      	add	sp, #28
 8006b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b24:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006b28:	2a0d      	cmp	r2, #13
 8006b2a:	d8e8      	bhi.n	8006afe <_scanf_float+0x66>
 8006b2c:	a101      	add	r1, pc, #4	@ (adr r1, 8006b34 <_scanf_float+0x9c>)
 8006b2e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006c7d 	.word	0x08006c7d
 8006b38:	08006aff 	.word	0x08006aff
 8006b3c:	08006aff 	.word	0x08006aff
 8006b40:	08006aff 	.word	0x08006aff
 8006b44:	08006cd9 	.word	0x08006cd9
 8006b48:	08006cb3 	.word	0x08006cb3
 8006b4c:	08006aff 	.word	0x08006aff
 8006b50:	08006aff 	.word	0x08006aff
 8006b54:	08006c8b 	.word	0x08006c8b
 8006b58:	08006aff 	.word	0x08006aff
 8006b5c:	08006aff 	.word	0x08006aff
 8006b60:	08006aff 	.word	0x08006aff
 8006b64:	08006aff 	.word	0x08006aff
 8006b68:	08006c47 	.word	0x08006c47
 8006b6c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006b70:	e7da      	b.n	8006b28 <_scanf_float+0x90>
 8006b72:	290e      	cmp	r1, #14
 8006b74:	d8c3      	bhi.n	8006afe <_scanf_float+0x66>
 8006b76:	a001      	add	r0, pc, #4	@ (adr r0, 8006b7c <_scanf_float+0xe4>)
 8006b78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b7c:	08006c37 	.word	0x08006c37
 8006b80:	08006aff 	.word	0x08006aff
 8006b84:	08006c37 	.word	0x08006c37
 8006b88:	08006cc7 	.word	0x08006cc7
 8006b8c:	08006aff 	.word	0x08006aff
 8006b90:	08006bd9 	.word	0x08006bd9
 8006b94:	08006c1d 	.word	0x08006c1d
 8006b98:	08006c1d 	.word	0x08006c1d
 8006b9c:	08006c1d 	.word	0x08006c1d
 8006ba0:	08006c1d 	.word	0x08006c1d
 8006ba4:	08006c1d 	.word	0x08006c1d
 8006ba8:	08006c1d 	.word	0x08006c1d
 8006bac:	08006c1d 	.word	0x08006c1d
 8006bb0:	08006c1d 	.word	0x08006c1d
 8006bb4:	08006c1d 	.word	0x08006c1d
 8006bb8:	2b6e      	cmp	r3, #110	@ 0x6e
 8006bba:	d809      	bhi.n	8006bd0 <_scanf_float+0x138>
 8006bbc:	2b60      	cmp	r3, #96	@ 0x60
 8006bbe:	d8b1      	bhi.n	8006b24 <_scanf_float+0x8c>
 8006bc0:	2b54      	cmp	r3, #84	@ 0x54
 8006bc2:	d07b      	beq.n	8006cbc <_scanf_float+0x224>
 8006bc4:	2b59      	cmp	r3, #89	@ 0x59
 8006bc6:	d19a      	bne.n	8006afe <_scanf_float+0x66>
 8006bc8:	2d07      	cmp	r5, #7
 8006bca:	d198      	bne.n	8006afe <_scanf_float+0x66>
 8006bcc:	2508      	movs	r5, #8
 8006bce:	e02f      	b.n	8006c30 <_scanf_float+0x198>
 8006bd0:	2b74      	cmp	r3, #116	@ 0x74
 8006bd2:	d073      	beq.n	8006cbc <_scanf_float+0x224>
 8006bd4:	2b79      	cmp	r3, #121	@ 0x79
 8006bd6:	e7f6      	b.n	8006bc6 <_scanf_float+0x12e>
 8006bd8:	6821      	ldr	r1, [r4, #0]
 8006bda:	05c8      	lsls	r0, r1, #23
 8006bdc:	d51e      	bpl.n	8006c1c <_scanf_float+0x184>
 8006bde:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006be2:	6021      	str	r1, [r4, #0]
 8006be4:	3701      	adds	r7, #1
 8006be6:	f1bb 0f00 	cmp.w	fp, #0
 8006bea:	d003      	beq.n	8006bf4 <_scanf_float+0x15c>
 8006bec:	3201      	adds	r2, #1
 8006bee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bf2:	60a2      	str	r2, [r4, #8]
 8006bf4:	68a3      	ldr	r3, [r4, #8]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	60a3      	str	r3, [r4, #8]
 8006bfa:	6923      	ldr	r3, [r4, #16]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	6123      	str	r3, [r4, #16]
 8006c00:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f8c9 3004 	str.w	r3, [r9, #4]
 8006c0c:	f340 8082 	ble.w	8006d14 <_scanf_float+0x27c>
 8006c10:	f8d9 3000 	ldr.w	r3, [r9]
 8006c14:	3301      	adds	r3, #1
 8006c16:	f8c9 3000 	str.w	r3, [r9]
 8006c1a:	e762      	b.n	8006ae2 <_scanf_float+0x4a>
 8006c1c:	eb1a 0105 	adds.w	r1, sl, r5
 8006c20:	f47f af6d 	bne.w	8006afe <_scanf_float+0x66>
 8006c24:	6822      	ldr	r2, [r4, #0]
 8006c26:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006c2a:	6022      	str	r2, [r4, #0]
 8006c2c:	460d      	mov	r5, r1
 8006c2e:	468a      	mov	sl, r1
 8006c30:	f806 3b01 	strb.w	r3, [r6], #1
 8006c34:	e7de      	b.n	8006bf4 <_scanf_float+0x15c>
 8006c36:	6822      	ldr	r2, [r4, #0]
 8006c38:	0610      	lsls	r0, r2, #24
 8006c3a:	f57f af60 	bpl.w	8006afe <_scanf_float+0x66>
 8006c3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c42:	6022      	str	r2, [r4, #0]
 8006c44:	e7f4      	b.n	8006c30 <_scanf_float+0x198>
 8006c46:	f1ba 0f00 	cmp.w	sl, #0
 8006c4a:	d10c      	bne.n	8006c66 <_scanf_float+0x1ce>
 8006c4c:	b977      	cbnz	r7, 8006c6c <_scanf_float+0x1d4>
 8006c4e:	6822      	ldr	r2, [r4, #0]
 8006c50:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006c54:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006c58:	d108      	bne.n	8006c6c <_scanf_float+0x1d4>
 8006c5a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006c5e:	6022      	str	r2, [r4, #0]
 8006c60:	f04f 0a01 	mov.w	sl, #1
 8006c64:	e7e4      	b.n	8006c30 <_scanf_float+0x198>
 8006c66:	f1ba 0f02 	cmp.w	sl, #2
 8006c6a:	d050      	beq.n	8006d0e <_scanf_float+0x276>
 8006c6c:	2d01      	cmp	r5, #1
 8006c6e:	d002      	beq.n	8006c76 <_scanf_float+0x1de>
 8006c70:	2d04      	cmp	r5, #4
 8006c72:	f47f af44 	bne.w	8006afe <_scanf_float+0x66>
 8006c76:	3501      	adds	r5, #1
 8006c78:	b2ed      	uxtb	r5, r5
 8006c7a:	e7d9      	b.n	8006c30 <_scanf_float+0x198>
 8006c7c:	f1ba 0f01 	cmp.w	sl, #1
 8006c80:	f47f af3d 	bne.w	8006afe <_scanf_float+0x66>
 8006c84:	f04f 0a02 	mov.w	sl, #2
 8006c88:	e7d2      	b.n	8006c30 <_scanf_float+0x198>
 8006c8a:	b975      	cbnz	r5, 8006caa <_scanf_float+0x212>
 8006c8c:	2f00      	cmp	r7, #0
 8006c8e:	f47f af37 	bne.w	8006b00 <_scanf_float+0x68>
 8006c92:	6822      	ldr	r2, [r4, #0]
 8006c94:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006c98:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006c9c:	f040 8103 	bne.w	8006ea6 <_scanf_float+0x40e>
 8006ca0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006ca4:	6022      	str	r2, [r4, #0]
 8006ca6:	2501      	movs	r5, #1
 8006ca8:	e7c2      	b.n	8006c30 <_scanf_float+0x198>
 8006caa:	2d03      	cmp	r5, #3
 8006cac:	d0e3      	beq.n	8006c76 <_scanf_float+0x1de>
 8006cae:	2d05      	cmp	r5, #5
 8006cb0:	e7df      	b.n	8006c72 <_scanf_float+0x1da>
 8006cb2:	2d02      	cmp	r5, #2
 8006cb4:	f47f af23 	bne.w	8006afe <_scanf_float+0x66>
 8006cb8:	2503      	movs	r5, #3
 8006cba:	e7b9      	b.n	8006c30 <_scanf_float+0x198>
 8006cbc:	2d06      	cmp	r5, #6
 8006cbe:	f47f af1e 	bne.w	8006afe <_scanf_float+0x66>
 8006cc2:	2507      	movs	r5, #7
 8006cc4:	e7b4      	b.n	8006c30 <_scanf_float+0x198>
 8006cc6:	6822      	ldr	r2, [r4, #0]
 8006cc8:	0591      	lsls	r1, r2, #22
 8006cca:	f57f af18 	bpl.w	8006afe <_scanf_float+0x66>
 8006cce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006cd2:	6022      	str	r2, [r4, #0]
 8006cd4:	9702      	str	r7, [sp, #8]
 8006cd6:	e7ab      	b.n	8006c30 <_scanf_float+0x198>
 8006cd8:	6822      	ldr	r2, [r4, #0]
 8006cda:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006cde:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006ce2:	d005      	beq.n	8006cf0 <_scanf_float+0x258>
 8006ce4:	0550      	lsls	r0, r2, #21
 8006ce6:	f57f af0a 	bpl.w	8006afe <_scanf_float+0x66>
 8006cea:	2f00      	cmp	r7, #0
 8006cec:	f000 80db 	beq.w	8006ea6 <_scanf_float+0x40e>
 8006cf0:	0591      	lsls	r1, r2, #22
 8006cf2:	bf58      	it	pl
 8006cf4:	9902      	ldrpl	r1, [sp, #8]
 8006cf6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006cfa:	bf58      	it	pl
 8006cfc:	1a79      	subpl	r1, r7, r1
 8006cfe:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006d02:	bf58      	it	pl
 8006d04:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006d08:	6022      	str	r2, [r4, #0]
 8006d0a:	2700      	movs	r7, #0
 8006d0c:	e790      	b.n	8006c30 <_scanf_float+0x198>
 8006d0e:	f04f 0a03 	mov.w	sl, #3
 8006d12:	e78d      	b.n	8006c30 <_scanf_float+0x198>
 8006d14:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006d18:	4649      	mov	r1, r9
 8006d1a:	4640      	mov	r0, r8
 8006d1c:	4798      	blx	r3
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	f43f aedf 	beq.w	8006ae2 <_scanf_float+0x4a>
 8006d24:	e6eb      	b.n	8006afe <_scanf_float+0x66>
 8006d26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d2e:	464a      	mov	r2, r9
 8006d30:	4640      	mov	r0, r8
 8006d32:	4798      	blx	r3
 8006d34:	6923      	ldr	r3, [r4, #16]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	6123      	str	r3, [r4, #16]
 8006d3a:	e6eb      	b.n	8006b14 <_scanf_float+0x7c>
 8006d3c:	1e6b      	subs	r3, r5, #1
 8006d3e:	2b06      	cmp	r3, #6
 8006d40:	d824      	bhi.n	8006d8c <_scanf_float+0x2f4>
 8006d42:	2d02      	cmp	r5, #2
 8006d44:	d836      	bhi.n	8006db4 <_scanf_float+0x31c>
 8006d46:	9b01      	ldr	r3, [sp, #4]
 8006d48:	429e      	cmp	r6, r3
 8006d4a:	f67f aee7 	bls.w	8006b1c <_scanf_float+0x84>
 8006d4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d56:	464a      	mov	r2, r9
 8006d58:	4640      	mov	r0, r8
 8006d5a:	4798      	blx	r3
 8006d5c:	6923      	ldr	r3, [r4, #16]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	6123      	str	r3, [r4, #16]
 8006d62:	e7f0      	b.n	8006d46 <_scanf_float+0x2ae>
 8006d64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d68:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006d6c:	464a      	mov	r2, r9
 8006d6e:	4640      	mov	r0, r8
 8006d70:	4798      	blx	r3
 8006d72:	6923      	ldr	r3, [r4, #16]
 8006d74:	3b01      	subs	r3, #1
 8006d76:	6123      	str	r3, [r4, #16]
 8006d78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d7c:	fa5f fa8a 	uxtb.w	sl, sl
 8006d80:	f1ba 0f02 	cmp.w	sl, #2
 8006d84:	d1ee      	bne.n	8006d64 <_scanf_float+0x2cc>
 8006d86:	3d03      	subs	r5, #3
 8006d88:	b2ed      	uxtb	r5, r5
 8006d8a:	1b76      	subs	r6, r6, r5
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	05da      	lsls	r2, r3, #23
 8006d90:	d530      	bpl.n	8006df4 <_scanf_float+0x35c>
 8006d92:	055b      	lsls	r3, r3, #21
 8006d94:	d511      	bpl.n	8006dba <_scanf_float+0x322>
 8006d96:	9b01      	ldr	r3, [sp, #4]
 8006d98:	429e      	cmp	r6, r3
 8006d9a:	f67f aebf 	bls.w	8006b1c <_scanf_float+0x84>
 8006d9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006da2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006da6:	464a      	mov	r2, r9
 8006da8:	4640      	mov	r0, r8
 8006daa:	4798      	blx	r3
 8006dac:	6923      	ldr	r3, [r4, #16]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	6123      	str	r3, [r4, #16]
 8006db2:	e7f0      	b.n	8006d96 <_scanf_float+0x2fe>
 8006db4:	46aa      	mov	sl, r5
 8006db6:	46b3      	mov	fp, r6
 8006db8:	e7de      	b.n	8006d78 <_scanf_float+0x2e0>
 8006dba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006dbe:	6923      	ldr	r3, [r4, #16]
 8006dc0:	2965      	cmp	r1, #101	@ 0x65
 8006dc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006dc6:	f106 35ff 	add.w	r5, r6, #4294967295
 8006dca:	6123      	str	r3, [r4, #16]
 8006dcc:	d00c      	beq.n	8006de8 <_scanf_float+0x350>
 8006dce:	2945      	cmp	r1, #69	@ 0x45
 8006dd0:	d00a      	beq.n	8006de8 <_scanf_float+0x350>
 8006dd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006dd6:	464a      	mov	r2, r9
 8006dd8:	4640      	mov	r0, r8
 8006dda:	4798      	blx	r3
 8006ddc:	6923      	ldr	r3, [r4, #16]
 8006dde:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	1eb5      	subs	r5, r6, #2
 8006de6:	6123      	str	r3, [r4, #16]
 8006de8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006dec:	464a      	mov	r2, r9
 8006dee:	4640      	mov	r0, r8
 8006df0:	4798      	blx	r3
 8006df2:	462e      	mov	r6, r5
 8006df4:	6822      	ldr	r2, [r4, #0]
 8006df6:	f012 0210 	ands.w	r2, r2, #16
 8006dfa:	d001      	beq.n	8006e00 <_scanf_float+0x368>
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	e68e      	b.n	8006b1e <_scanf_float+0x86>
 8006e00:	7032      	strb	r2, [r6, #0]
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e0c:	d125      	bne.n	8006e5a <_scanf_float+0x3c2>
 8006e0e:	9b02      	ldr	r3, [sp, #8]
 8006e10:	429f      	cmp	r7, r3
 8006e12:	d00a      	beq.n	8006e2a <_scanf_float+0x392>
 8006e14:	1bda      	subs	r2, r3, r7
 8006e16:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006e1a:	429e      	cmp	r6, r3
 8006e1c:	bf28      	it	cs
 8006e1e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006e22:	4922      	ldr	r1, [pc, #136]	@ (8006eac <_scanf_float+0x414>)
 8006e24:	4630      	mov	r0, r6
 8006e26:	f000 f907 	bl	8007038 <siprintf>
 8006e2a:	9901      	ldr	r1, [sp, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	4640      	mov	r0, r8
 8006e30:	f002 fc4e 	bl	80096d0 <_strtod_r>
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	6821      	ldr	r1, [r4, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f011 0f02 	tst.w	r1, #2
 8006e3e:	ec57 6b10 	vmov	r6, r7, d0
 8006e42:	f103 0204 	add.w	r2, r3, #4
 8006e46:	d015      	beq.n	8006e74 <_scanf_float+0x3dc>
 8006e48:	9903      	ldr	r1, [sp, #12]
 8006e4a:	600a      	str	r2, [r1, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	e9c3 6700 	strd	r6, r7, [r3]
 8006e52:	68e3      	ldr	r3, [r4, #12]
 8006e54:	3301      	adds	r3, #1
 8006e56:	60e3      	str	r3, [r4, #12]
 8006e58:	e7d0      	b.n	8006dfc <_scanf_float+0x364>
 8006e5a:	9b04      	ldr	r3, [sp, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d0e4      	beq.n	8006e2a <_scanf_float+0x392>
 8006e60:	9905      	ldr	r1, [sp, #20]
 8006e62:	230a      	movs	r3, #10
 8006e64:	3101      	adds	r1, #1
 8006e66:	4640      	mov	r0, r8
 8006e68:	f002 fcb2 	bl	80097d0 <_strtol_r>
 8006e6c:	9b04      	ldr	r3, [sp, #16]
 8006e6e:	9e05      	ldr	r6, [sp, #20]
 8006e70:	1ac2      	subs	r2, r0, r3
 8006e72:	e7d0      	b.n	8006e16 <_scanf_float+0x37e>
 8006e74:	f011 0f04 	tst.w	r1, #4
 8006e78:	9903      	ldr	r1, [sp, #12]
 8006e7a:	600a      	str	r2, [r1, #0]
 8006e7c:	d1e6      	bne.n	8006e4c <_scanf_float+0x3b4>
 8006e7e:	681d      	ldr	r5, [r3, #0]
 8006e80:	4632      	mov	r2, r6
 8006e82:	463b      	mov	r3, r7
 8006e84:	4630      	mov	r0, r6
 8006e86:	4639      	mov	r1, r7
 8006e88:	f7f9 fe60 	bl	8000b4c <__aeabi_dcmpun>
 8006e8c:	b128      	cbz	r0, 8006e9a <_scanf_float+0x402>
 8006e8e:	4808      	ldr	r0, [pc, #32]	@ (8006eb0 <_scanf_float+0x418>)
 8006e90:	f000 fa12 	bl	80072b8 <nanf>
 8006e94:	ed85 0a00 	vstr	s0, [r5]
 8006e98:	e7db      	b.n	8006e52 <_scanf_float+0x3ba>
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	f7f9 feb3 	bl	8000c08 <__aeabi_d2f>
 8006ea2:	6028      	str	r0, [r5, #0]
 8006ea4:	e7d5      	b.n	8006e52 <_scanf_float+0x3ba>
 8006ea6:	2700      	movs	r7, #0
 8006ea8:	e62e      	b.n	8006b08 <_scanf_float+0x70>
 8006eaa:	bf00      	nop
 8006eac:	0800aca8 	.word	0x0800aca8
 8006eb0:	0800ade9 	.word	0x0800ade9

08006eb4 <std>:
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	b510      	push	{r4, lr}
 8006eb8:	4604      	mov	r4, r0
 8006eba:	e9c0 3300 	strd	r3, r3, [r0]
 8006ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ec2:	6083      	str	r3, [r0, #8]
 8006ec4:	8181      	strh	r1, [r0, #12]
 8006ec6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ec8:	81c2      	strh	r2, [r0, #14]
 8006eca:	6183      	str	r3, [r0, #24]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	2208      	movs	r2, #8
 8006ed0:	305c      	adds	r0, #92	@ 0x5c
 8006ed2:	f000 f963 	bl	800719c <memset>
 8006ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8006f0c <std+0x58>)
 8006ed8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006eda:	4b0d      	ldr	r3, [pc, #52]	@ (8006f10 <std+0x5c>)
 8006edc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ede:	4b0d      	ldr	r3, [pc, #52]	@ (8006f14 <std+0x60>)
 8006ee0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8006f18 <std+0x64>)
 8006ee4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8006f1c <std+0x68>)
 8006ee8:	6224      	str	r4, [r4, #32]
 8006eea:	429c      	cmp	r4, r3
 8006eec:	d006      	beq.n	8006efc <std+0x48>
 8006eee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ef2:	4294      	cmp	r4, r2
 8006ef4:	d002      	beq.n	8006efc <std+0x48>
 8006ef6:	33d0      	adds	r3, #208	@ 0xd0
 8006ef8:	429c      	cmp	r4, r3
 8006efa:	d105      	bne.n	8006f08 <std+0x54>
 8006efc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f04:	f000 b9c6 	b.w	8007294 <__retarget_lock_init_recursive>
 8006f08:	bd10      	pop	{r4, pc}
 8006f0a:	bf00      	nop
 8006f0c:	0800707d 	.word	0x0800707d
 8006f10:	0800709f 	.word	0x0800709f
 8006f14:	080070d7 	.word	0x080070d7
 8006f18:	080070fb 	.word	0x080070fb
 8006f1c:	200008b0 	.word	0x200008b0

08006f20 <stdio_exit_handler>:
 8006f20:	4a02      	ldr	r2, [pc, #8]	@ (8006f2c <stdio_exit_handler+0xc>)
 8006f22:	4903      	ldr	r1, [pc, #12]	@ (8006f30 <stdio_exit_handler+0x10>)
 8006f24:	4803      	ldr	r0, [pc, #12]	@ (8006f34 <stdio_exit_handler+0x14>)
 8006f26:	f000 b869 	b.w	8006ffc <_fwalk_sglue>
 8006f2a:	bf00      	nop
 8006f2c:	20000018 	.word	0x20000018
 8006f30:	08009b8d 	.word	0x08009b8d
 8006f34:	20000028 	.word	0x20000028

08006f38 <cleanup_stdio>:
 8006f38:	6841      	ldr	r1, [r0, #4]
 8006f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f6c <cleanup_stdio+0x34>)
 8006f3c:	4299      	cmp	r1, r3
 8006f3e:	b510      	push	{r4, lr}
 8006f40:	4604      	mov	r4, r0
 8006f42:	d001      	beq.n	8006f48 <cleanup_stdio+0x10>
 8006f44:	f002 fe22 	bl	8009b8c <_fflush_r>
 8006f48:	68a1      	ldr	r1, [r4, #8]
 8006f4a:	4b09      	ldr	r3, [pc, #36]	@ (8006f70 <cleanup_stdio+0x38>)
 8006f4c:	4299      	cmp	r1, r3
 8006f4e:	d002      	beq.n	8006f56 <cleanup_stdio+0x1e>
 8006f50:	4620      	mov	r0, r4
 8006f52:	f002 fe1b 	bl	8009b8c <_fflush_r>
 8006f56:	68e1      	ldr	r1, [r4, #12]
 8006f58:	4b06      	ldr	r3, [pc, #24]	@ (8006f74 <cleanup_stdio+0x3c>)
 8006f5a:	4299      	cmp	r1, r3
 8006f5c:	d004      	beq.n	8006f68 <cleanup_stdio+0x30>
 8006f5e:	4620      	mov	r0, r4
 8006f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f64:	f002 be12 	b.w	8009b8c <_fflush_r>
 8006f68:	bd10      	pop	{r4, pc}
 8006f6a:	bf00      	nop
 8006f6c:	200008b0 	.word	0x200008b0
 8006f70:	20000918 	.word	0x20000918
 8006f74:	20000980 	.word	0x20000980

08006f78 <global_stdio_init.part.0>:
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa8 <global_stdio_init.part.0+0x30>)
 8006f7c:	4c0b      	ldr	r4, [pc, #44]	@ (8006fac <global_stdio_init.part.0+0x34>)
 8006f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8006fb0 <global_stdio_init.part.0+0x38>)
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	4620      	mov	r0, r4
 8006f84:	2200      	movs	r2, #0
 8006f86:	2104      	movs	r1, #4
 8006f88:	f7ff ff94 	bl	8006eb4 <std>
 8006f8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f90:	2201      	movs	r2, #1
 8006f92:	2109      	movs	r1, #9
 8006f94:	f7ff ff8e 	bl	8006eb4 <std>
 8006f98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa2:	2112      	movs	r1, #18
 8006fa4:	f7ff bf86 	b.w	8006eb4 <std>
 8006fa8:	200009e8 	.word	0x200009e8
 8006fac:	200008b0 	.word	0x200008b0
 8006fb0:	08006f21 	.word	0x08006f21

08006fb4 <__sfp_lock_acquire>:
 8006fb4:	4801      	ldr	r0, [pc, #4]	@ (8006fbc <__sfp_lock_acquire+0x8>)
 8006fb6:	f000 b96e 	b.w	8007296 <__retarget_lock_acquire_recursive>
 8006fba:	bf00      	nop
 8006fbc:	200009f1 	.word	0x200009f1

08006fc0 <__sfp_lock_release>:
 8006fc0:	4801      	ldr	r0, [pc, #4]	@ (8006fc8 <__sfp_lock_release+0x8>)
 8006fc2:	f000 b969 	b.w	8007298 <__retarget_lock_release_recursive>
 8006fc6:	bf00      	nop
 8006fc8:	200009f1 	.word	0x200009f1

08006fcc <__sinit>:
 8006fcc:	b510      	push	{r4, lr}
 8006fce:	4604      	mov	r4, r0
 8006fd0:	f7ff fff0 	bl	8006fb4 <__sfp_lock_acquire>
 8006fd4:	6a23      	ldr	r3, [r4, #32]
 8006fd6:	b11b      	cbz	r3, 8006fe0 <__sinit+0x14>
 8006fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fdc:	f7ff bff0 	b.w	8006fc0 <__sfp_lock_release>
 8006fe0:	4b04      	ldr	r3, [pc, #16]	@ (8006ff4 <__sinit+0x28>)
 8006fe2:	6223      	str	r3, [r4, #32]
 8006fe4:	4b04      	ldr	r3, [pc, #16]	@ (8006ff8 <__sinit+0x2c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1f5      	bne.n	8006fd8 <__sinit+0xc>
 8006fec:	f7ff ffc4 	bl	8006f78 <global_stdio_init.part.0>
 8006ff0:	e7f2      	b.n	8006fd8 <__sinit+0xc>
 8006ff2:	bf00      	nop
 8006ff4:	08006f39 	.word	0x08006f39
 8006ff8:	200009e8 	.word	0x200009e8

08006ffc <_fwalk_sglue>:
 8006ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007000:	4607      	mov	r7, r0
 8007002:	4688      	mov	r8, r1
 8007004:	4614      	mov	r4, r2
 8007006:	2600      	movs	r6, #0
 8007008:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800700c:	f1b9 0901 	subs.w	r9, r9, #1
 8007010:	d505      	bpl.n	800701e <_fwalk_sglue+0x22>
 8007012:	6824      	ldr	r4, [r4, #0]
 8007014:	2c00      	cmp	r4, #0
 8007016:	d1f7      	bne.n	8007008 <_fwalk_sglue+0xc>
 8007018:	4630      	mov	r0, r6
 800701a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800701e:	89ab      	ldrh	r3, [r5, #12]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d907      	bls.n	8007034 <_fwalk_sglue+0x38>
 8007024:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007028:	3301      	adds	r3, #1
 800702a:	d003      	beq.n	8007034 <_fwalk_sglue+0x38>
 800702c:	4629      	mov	r1, r5
 800702e:	4638      	mov	r0, r7
 8007030:	47c0      	blx	r8
 8007032:	4306      	orrs	r6, r0
 8007034:	3568      	adds	r5, #104	@ 0x68
 8007036:	e7e9      	b.n	800700c <_fwalk_sglue+0x10>

08007038 <siprintf>:
 8007038:	b40e      	push	{r1, r2, r3}
 800703a:	b510      	push	{r4, lr}
 800703c:	b09d      	sub	sp, #116	@ 0x74
 800703e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007040:	9002      	str	r0, [sp, #8]
 8007042:	9006      	str	r0, [sp, #24]
 8007044:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007048:	480a      	ldr	r0, [pc, #40]	@ (8007074 <siprintf+0x3c>)
 800704a:	9107      	str	r1, [sp, #28]
 800704c:	9104      	str	r1, [sp, #16]
 800704e:	490a      	ldr	r1, [pc, #40]	@ (8007078 <siprintf+0x40>)
 8007050:	f853 2b04 	ldr.w	r2, [r3], #4
 8007054:	9105      	str	r1, [sp, #20]
 8007056:	2400      	movs	r4, #0
 8007058:	a902      	add	r1, sp, #8
 800705a:	6800      	ldr	r0, [r0, #0]
 800705c:	9301      	str	r3, [sp, #4]
 800705e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007060:	f002 fc14 	bl	800988c <_svfiprintf_r>
 8007064:	9b02      	ldr	r3, [sp, #8]
 8007066:	701c      	strb	r4, [r3, #0]
 8007068:	b01d      	add	sp, #116	@ 0x74
 800706a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800706e:	b003      	add	sp, #12
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20000024 	.word	0x20000024
 8007078:	ffff0208 	.word	0xffff0208

0800707c <__sread>:
 800707c:	b510      	push	{r4, lr}
 800707e:	460c      	mov	r4, r1
 8007080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007084:	f000 f8b8 	bl	80071f8 <_read_r>
 8007088:	2800      	cmp	r0, #0
 800708a:	bfab      	itete	ge
 800708c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800708e:	89a3      	ldrhlt	r3, [r4, #12]
 8007090:	181b      	addge	r3, r3, r0
 8007092:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007096:	bfac      	ite	ge
 8007098:	6563      	strge	r3, [r4, #84]	@ 0x54
 800709a:	81a3      	strhlt	r3, [r4, #12]
 800709c:	bd10      	pop	{r4, pc}

0800709e <__swrite>:
 800709e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a2:	461f      	mov	r7, r3
 80070a4:	898b      	ldrh	r3, [r1, #12]
 80070a6:	05db      	lsls	r3, r3, #23
 80070a8:	4605      	mov	r5, r0
 80070aa:	460c      	mov	r4, r1
 80070ac:	4616      	mov	r6, r2
 80070ae:	d505      	bpl.n	80070bc <__swrite+0x1e>
 80070b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b4:	2302      	movs	r3, #2
 80070b6:	2200      	movs	r2, #0
 80070b8:	f000 f88c 	bl	80071d4 <_lseek_r>
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070c6:	81a3      	strh	r3, [r4, #12]
 80070c8:	4632      	mov	r2, r6
 80070ca:	463b      	mov	r3, r7
 80070cc:	4628      	mov	r0, r5
 80070ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070d2:	f000 b8a3 	b.w	800721c <_write_r>

080070d6 <__sseek>:
 80070d6:	b510      	push	{r4, lr}
 80070d8:	460c      	mov	r4, r1
 80070da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070de:	f000 f879 	bl	80071d4 <_lseek_r>
 80070e2:	1c43      	adds	r3, r0, #1
 80070e4:	89a3      	ldrh	r3, [r4, #12]
 80070e6:	bf15      	itete	ne
 80070e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070f2:	81a3      	strheq	r3, [r4, #12]
 80070f4:	bf18      	it	ne
 80070f6:	81a3      	strhne	r3, [r4, #12]
 80070f8:	bd10      	pop	{r4, pc}

080070fa <__sclose>:
 80070fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070fe:	f000 b859 	b.w	80071b4 <_close_r>

08007102 <_vsniprintf_r>:
 8007102:	b530      	push	{r4, r5, lr}
 8007104:	4614      	mov	r4, r2
 8007106:	2c00      	cmp	r4, #0
 8007108:	b09b      	sub	sp, #108	@ 0x6c
 800710a:	4605      	mov	r5, r0
 800710c:	461a      	mov	r2, r3
 800710e:	da05      	bge.n	800711c <_vsniprintf_r+0x1a>
 8007110:	238b      	movs	r3, #139	@ 0x8b
 8007112:	6003      	str	r3, [r0, #0]
 8007114:	f04f 30ff 	mov.w	r0, #4294967295
 8007118:	b01b      	add	sp, #108	@ 0x6c
 800711a:	bd30      	pop	{r4, r5, pc}
 800711c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007120:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007124:	f04f 0300 	mov.w	r3, #0
 8007128:	9319      	str	r3, [sp, #100]	@ 0x64
 800712a:	bf14      	ite	ne
 800712c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007130:	4623      	moveq	r3, r4
 8007132:	9302      	str	r3, [sp, #8]
 8007134:	9305      	str	r3, [sp, #20]
 8007136:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800713a:	9100      	str	r1, [sp, #0]
 800713c:	9104      	str	r1, [sp, #16]
 800713e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007142:	4669      	mov	r1, sp
 8007144:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007146:	f002 fba1 	bl	800988c <_svfiprintf_r>
 800714a:	1c43      	adds	r3, r0, #1
 800714c:	bfbc      	itt	lt
 800714e:	238b      	movlt	r3, #139	@ 0x8b
 8007150:	602b      	strlt	r3, [r5, #0]
 8007152:	2c00      	cmp	r4, #0
 8007154:	d0e0      	beq.n	8007118 <_vsniprintf_r+0x16>
 8007156:	9b00      	ldr	r3, [sp, #0]
 8007158:	2200      	movs	r2, #0
 800715a:	701a      	strb	r2, [r3, #0]
 800715c:	e7dc      	b.n	8007118 <_vsniprintf_r+0x16>
	...

08007160 <vsniprintf>:
 8007160:	b507      	push	{r0, r1, r2, lr}
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	4613      	mov	r3, r2
 8007166:	460a      	mov	r2, r1
 8007168:	4601      	mov	r1, r0
 800716a:	4803      	ldr	r0, [pc, #12]	@ (8007178 <vsniprintf+0x18>)
 800716c:	6800      	ldr	r0, [r0, #0]
 800716e:	f7ff ffc8 	bl	8007102 <_vsniprintf_r>
 8007172:	b003      	add	sp, #12
 8007174:	f85d fb04 	ldr.w	pc, [sp], #4
 8007178:	20000024 	.word	0x20000024

0800717c <memcmp>:
 800717c:	b510      	push	{r4, lr}
 800717e:	3901      	subs	r1, #1
 8007180:	4402      	add	r2, r0
 8007182:	4290      	cmp	r0, r2
 8007184:	d101      	bne.n	800718a <memcmp+0xe>
 8007186:	2000      	movs	r0, #0
 8007188:	e005      	b.n	8007196 <memcmp+0x1a>
 800718a:	7803      	ldrb	r3, [r0, #0]
 800718c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007190:	42a3      	cmp	r3, r4
 8007192:	d001      	beq.n	8007198 <memcmp+0x1c>
 8007194:	1b18      	subs	r0, r3, r4
 8007196:	bd10      	pop	{r4, pc}
 8007198:	3001      	adds	r0, #1
 800719a:	e7f2      	b.n	8007182 <memcmp+0x6>

0800719c <memset>:
 800719c:	4402      	add	r2, r0
 800719e:	4603      	mov	r3, r0
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d100      	bne.n	80071a6 <memset+0xa>
 80071a4:	4770      	bx	lr
 80071a6:	f803 1b01 	strb.w	r1, [r3], #1
 80071aa:	e7f9      	b.n	80071a0 <memset+0x4>

080071ac <_localeconv_r>:
 80071ac:	4800      	ldr	r0, [pc, #0]	@ (80071b0 <_localeconv_r+0x4>)
 80071ae:	4770      	bx	lr
 80071b0:	20000164 	.word	0x20000164

080071b4 <_close_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4d06      	ldr	r5, [pc, #24]	@ (80071d0 <_close_r+0x1c>)
 80071b8:	2300      	movs	r3, #0
 80071ba:	4604      	mov	r4, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	602b      	str	r3, [r5, #0]
 80071c0:	f7fb fa50 	bl	8002664 <_close>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	d102      	bne.n	80071ce <_close_r+0x1a>
 80071c8:	682b      	ldr	r3, [r5, #0]
 80071ca:	b103      	cbz	r3, 80071ce <_close_r+0x1a>
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	200009ec 	.word	0x200009ec

080071d4 <_lseek_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4d07      	ldr	r5, [pc, #28]	@ (80071f4 <_lseek_r+0x20>)
 80071d8:	4604      	mov	r4, r0
 80071da:	4608      	mov	r0, r1
 80071dc:	4611      	mov	r1, r2
 80071de:	2200      	movs	r2, #0
 80071e0:	602a      	str	r2, [r5, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	f7fb fa65 	bl	80026b2 <_lseek>
 80071e8:	1c43      	adds	r3, r0, #1
 80071ea:	d102      	bne.n	80071f2 <_lseek_r+0x1e>
 80071ec:	682b      	ldr	r3, [r5, #0]
 80071ee:	b103      	cbz	r3, 80071f2 <_lseek_r+0x1e>
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	bd38      	pop	{r3, r4, r5, pc}
 80071f4:	200009ec 	.word	0x200009ec

080071f8 <_read_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4d07      	ldr	r5, [pc, #28]	@ (8007218 <_read_r+0x20>)
 80071fc:	4604      	mov	r4, r0
 80071fe:	4608      	mov	r0, r1
 8007200:	4611      	mov	r1, r2
 8007202:	2200      	movs	r2, #0
 8007204:	602a      	str	r2, [r5, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	f7fb f9f3 	bl	80025f2 <_read>
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d102      	bne.n	8007216 <_read_r+0x1e>
 8007210:	682b      	ldr	r3, [r5, #0]
 8007212:	b103      	cbz	r3, 8007216 <_read_r+0x1e>
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	200009ec 	.word	0x200009ec

0800721c <_write_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	4d07      	ldr	r5, [pc, #28]	@ (800723c <_write_r+0x20>)
 8007220:	4604      	mov	r4, r0
 8007222:	4608      	mov	r0, r1
 8007224:	4611      	mov	r1, r2
 8007226:	2200      	movs	r2, #0
 8007228:	602a      	str	r2, [r5, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	f7fb f9fe 	bl	800262c <_write>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d102      	bne.n	800723a <_write_r+0x1e>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	b103      	cbz	r3, 800723a <_write_r+0x1e>
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	200009ec 	.word	0x200009ec

08007240 <__errno>:
 8007240:	4b01      	ldr	r3, [pc, #4]	@ (8007248 <__errno+0x8>)
 8007242:	6818      	ldr	r0, [r3, #0]
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	20000024 	.word	0x20000024

0800724c <__libc_init_array>:
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	4d0d      	ldr	r5, [pc, #52]	@ (8007284 <__libc_init_array+0x38>)
 8007250:	4c0d      	ldr	r4, [pc, #52]	@ (8007288 <__libc_init_array+0x3c>)
 8007252:	1b64      	subs	r4, r4, r5
 8007254:	10a4      	asrs	r4, r4, #2
 8007256:	2600      	movs	r6, #0
 8007258:	42a6      	cmp	r6, r4
 800725a:	d109      	bne.n	8007270 <__libc_init_array+0x24>
 800725c:	4d0b      	ldr	r5, [pc, #44]	@ (800728c <__libc_init_array+0x40>)
 800725e:	4c0c      	ldr	r4, [pc, #48]	@ (8007290 <__libc_init_array+0x44>)
 8007260:	f003 fb78 	bl	800a954 <_init>
 8007264:	1b64      	subs	r4, r4, r5
 8007266:	10a4      	asrs	r4, r4, #2
 8007268:	2600      	movs	r6, #0
 800726a:	42a6      	cmp	r6, r4
 800726c:	d105      	bne.n	800727a <__libc_init_array+0x2e>
 800726e:	bd70      	pop	{r4, r5, r6, pc}
 8007270:	f855 3b04 	ldr.w	r3, [r5], #4
 8007274:	4798      	blx	r3
 8007276:	3601      	adds	r6, #1
 8007278:	e7ee      	b.n	8007258 <__libc_init_array+0xc>
 800727a:	f855 3b04 	ldr.w	r3, [r5], #4
 800727e:	4798      	blx	r3
 8007280:	3601      	adds	r6, #1
 8007282:	e7f2      	b.n	800726a <__libc_init_array+0x1e>
 8007284:	0800b0a4 	.word	0x0800b0a4
 8007288:	0800b0a4 	.word	0x0800b0a4
 800728c:	0800b0a4 	.word	0x0800b0a4
 8007290:	0800b0a8 	.word	0x0800b0a8

08007294 <__retarget_lock_init_recursive>:
 8007294:	4770      	bx	lr

08007296 <__retarget_lock_acquire_recursive>:
 8007296:	4770      	bx	lr

08007298 <__retarget_lock_release_recursive>:
 8007298:	4770      	bx	lr

0800729a <memcpy>:
 800729a:	440a      	add	r2, r1
 800729c:	4291      	cmp	r1, r2
 800729e:	f100 33ff 	add.w	r3, r0, #4294967295
 80072a2:	d100      	bne.n	80072a6 <memcpy+0xc>
 80072a4:	4770      	bx	lr
 80072a6:	b510      	push	{r4, lr}
 80072a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072b0:	4291      	cmp	r1, r2
 80072b2:	d1f9      	bne.n	80072a8 <memcpy+0xe>
 80072b4:	bd10      	pop	{r4, pc}
	...

080072b8 <nanf>:
 80072b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80072c0 <nanf+0x8>
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	7fc00000 	.word	0x7fc00000

080072c4 <quorem>:
 80072c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c8:	6903      	ldr	r3, [r0, #16]
 80072ca:	690c      	ldr	r4, [r1, #16]
 80072cc:	42a3      	cmp	r3, r4
 80072ce:	4607      	mov	r7, r0
 80072d0:	db7e      	blt.n	80073d0 <quorem+0x10c>
 80072d2:	3c01      	subs	r4, #1
 80072d4:	f101 0814 	add.w	r8, r1, #20
 80072d8:	00a3      	lsls	r3, r4, #2
 80072da:	f100 0514 	add.w	r5, r0, #20
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072e4:	9301      	str	r3, [sp, #4]
 80072e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072ee:	3301      	adds	r3, #1
 80072f0:	429a      	cmp	r2, r3
 80072f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072f6:	fbb2 f6f3 	udiv	r6, r2, r3
 80072fa:	d32e      	bcc.n	800735a <quorem+0x96>
 80072fc:	f04f 0a00 	mov.w	sl, #0
 8007300:	46c4      	mov	ip, r8
 8007302:	46ae      	mov	lr, r5
 8007304:	46d3      	mov	fp, sl
 8007306:	f85c 3b04 	ldr.w	r3, [ip], #4
 800730a:	b298      	uxth	r0, r3
 800730c:	fb06 a000 	mla	r0, r6, r0, sl
 8007310:	0c02      	lsrs	r2, r0, #16
 8007312:	0c1b      	lsrs	r3, r3, #16
 8007314:	fb06 2303 	mla	r3, r6, r3, r2
 8007318:	f8de 2000 	ldr.w	r2, [lr]
 800731c:	b280      	uxth	r0, r0
 800731e:	b292      	uxth	r2, r2
 8007320:	1a12      	subs	r2, r2, r0
 8007322:	445a      	add	r2, fp
 8007324:	f8de 0000 	ldr.w	r0, [lr]
 8007328:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800732c:	b29b      	uxth	r3, r3
 800732e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007332:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007336:	b292      	uxth	r2, r2
 8007338:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800733c:	45e1      	cmp	r9, ip
 800733e:	f84e 2b04 	str.w	r2, [lr], #4
 8007342:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007346:	d2de      	bcs.n	8007306 <quorem+0x42>
 8007348:	9b00      	ldr	r3, [sp, #0]
 800734a:	58eb      	ldr	r3, [r5, r3]
 800734c:	b92b      	cbnz	r3, 800735a <quorem+0x96>
 800734e:	9b01      	ldr	r3, [sp, #4]
 8007350:	3b04      	subs	r3, #4
 8007352:	429d      	cmp	r5, r3
 8007354:	461a      	mov	r2, r3
 8007356:	d32f      	bcc.n	80073b8 <quorem+0xf4>
 8007358:	613c      	str	r4, [r7, #16]
 800735a:	4638      	mov	r0, r7
 800735c:	f001 f9c8 	bl	80086f0 <__mcmp>
 8007360:	2800      	cmp	r0, #0
 8007362:	db25      	blt.n	80073b0 <quorem+0xec>
 8007364:	4629      	mov	r1, r5
 8007366:	2000      	movs	r0, #0
 8007368:	f858 2b04 	ldr.w	r2, [r8], #4
 800736c:	f8d1 c000 	ldr.w	ip, [r1]
 8007370:	fa1f fe82 	uxth.w	lr, r2
 8007374:	fa1f f38c 	uxth.w	r3, ip
 8007378:	eba3 030e 	sub.w	r3, r3, lr
 800737c:	4403      	add	r3, r0
 800737e:	0c12      	lsrs	r2, r2, #16
 8007380:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007384:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007388:	b29b      	uxth	r3, r3
 800738a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800738e:	45c1      	cmp	r9, r8
 8007390:	f841 3b04 	str.w	r3, [r1], #4
 8007394:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007398:	d2e6      	bcs.n	8007368 <quorem+0xa4>
 800739a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800739e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073a2:	b922      	cbnz	r2, 80073ae <quorem+0xea>
 80073a4:	3b04      	subs	r3, #4
 80073a6:	429d      	cmp	r5, r3
 80073a8:	461a      	mov	r2, r3
 80073aa:	d30b      	bcc.n	80073c4 <quorem+0x100>
 80073ac:	613c      	str	r4, [r7, #16]
 80073ae:	3601      	adds	r6, #1
 80073b0:	4630      	mov	r0, r6
 80073b2:	b003      	add	sp, #12
 80073b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b8:	6812      	ldr	r2, [r2, #0]
 80073ba:	3b04      	subs	r3, #4
 80073bc:	2a00      	cmp	r2, #0
 80073be:	d1cb      	bne.n	8007358 <quorem+0x94>
 80073c0:	3c01      	subs	r4, #1
 80073c2:	e7c6      	b.n	8007352 <quorem+0x8e>
 80073c4:	6812      	ldr	r2, [r2, #0]
 80073c6:	3b04      	subs	r3, #4
 80073c8:	2a00      	cmp	r2, #0
 80073ca:	d1ef      	bne.n	80073ac <quorem+0xe8>
 80073cc:	3c01      	subs	r4, #1
 80073ce:	e7ea      	b.n	80073a6 <quorem+0xe2>
 80073d0:	2000      	movs	r0, #0
 80073d2:	e7ee      	b.n	80073b2 <quorem+0xee>
 80073d4:	0000      	movs	r0, r0
	...

080073d8 <_dtoa_r>:
 80073d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073dc:	69c7      	ldr	r7, [r0, #28]
 80073de:	b097      	sub	sp, #92	@ 0x5c
 80073e0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80073e4:	ec55 4b10 	vmov	r4, r5, d0
 80073e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80073ea:	9107      	str	r1, [sp, #28]
 80073ec:	4681      	mov	r9, r0
 80073ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80073f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80073f2:	b97f      	cbnz	r7, 8007414 <_dtoa_r+0x3c>
 80073f4:	2010      	movs	r0, #16
 80073f6:	f000 fe09 	bl	800800c <malloc>
 80073fa:	4602      	mov	r2, r0
 80073fc:	f8c9 001c 	str.w	r0, [r9, #28]
 8007400:	b920      	cbnz	r0, 800740c <_dtoa_r+0x34>
 8007402:	4ba9      	ldr	r3, [pc, #676]	@ (80076a8 <_dtoa_r+0x2d0>)
 8007404:	21ef      	movs	r1, #239	@ 0xef
 8007406:	48a9      	ldr	r0, [pc, #676]	@ (80076ac <_dtoa_r+0x2d4>)
 8007408:	f002 fc2e 	bl	8009c68 <__assert_func>
 800740c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007410:	6007      	str	r7, [r0, #0]
 8007412:	60c7      	str	r7, [r0, #12]
 8007414:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007418:	6819      	ldr	r1, [r3, #0]
 800741a:	b159      	cbz	r1, 8007434 <_dtoa_r+0x5c>
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	604a      	str	r2, [r1, #4]
 8007420:	2301      	movs	r3, #1
 8007422:	4093      	lsls	r3, r2
 8007424:	608b      	str	r3, [r1, #8]
 8007426:	4648      	mov	r0, r9
 8007428:	f000 fee6 	bl	80081f8 <_Bfree>
 800742c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007430:	2200      	movs	r2, #0
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	1e2b      	subs	r3, r5, #0
 8007436:	bfb9      	ittee	lt
 8007438:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800743c:	9305      	strlt	r3, [sp, #20]
 800743e:	2300      	movge	r3, #0
 8007440:	6033      	strge	r3, [r6, #0]
 8007442:	9f05      	ldr	r7, [sp, #20]
 8007444:	4b9a      	ldr	r3, [pc, #616]	@ (80076b0 <_dtoa_r+0x2d8>)
 8007446:	bfbc      	itt	lt
 8007448:	2201      	movlt	r2, #1
 800744a:	6032      	strlt	r2, [r6, #0]
 800744c:	43bb      	bics	r3, r7
 800744e:	d112      	bne.n	8007476 <_dtoa_r+0x9e>
 8007450:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007452:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007456:	6013      	str	r3, [r2, #0]
 8007458:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800745c:	4323      	orrs	r3, r4
 800745e:	f000 855a 	beq.w	8007f16 <_dtoa_r+0xb3e>
 8007462:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007464:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80076c4 <_dtoa_r+0x2ec>
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 855c 	beq.w	8007f26 <_dtoa_r+0xb4e>
 800746e:	f10a 0303 	add.w	r3, sl, #3
 8007472:	f000 bd56 	b.w	8007f22 <_dtoa_r+0xb4a>
 8007476:	ed9d 7b04 	vldr	d7, [sp, #16]
 800747a:	2200      	movs	r2, #0
 800747c:	ec51 0b17 	vmov	r0, r1, d7
 8007480:	2300      	movs	r3, #0
 8007482:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007486:	f7f9 fb2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800748a:	4680      	mov	r8, r0
 800748c:	b158      	cbz	r0, 80074a6 <_dtoa_r+0xce>
 800748e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007490:	2301      	movs	r3, #1
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007496:	b113      	cbz	r3, 800749e <_dtoa_r+0xc6>
 8007498:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800749a:	4b86      	ldr	r3, [pc, #536]	@ (80076b4 <_dtoa_r+0x2dc>)
 800749c:	6013      	str	r3, [r2, #0]
 800749e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80076c8 <_dtoa_r+0x2f0>
 80074a2:	f000 bd40 	b.w	8007f26 <_dtoa_r+0xb4e>
 80074a6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80074aa:	aa14      	add	r2, sp, #80	@ 0x50
 80074ac:	a915      	add	r1, sp, #84	@ 0x54
 80074ae:	4648      	mov	r0, r9
 80074b0:	f001 fa3e 	bl	8008930 <__d2b>
 80074b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80074b8:	9002      	str	r0, [sp, #8]
 80074ba:	2e00      	cmp	r6, #0
 80074bc:	d078      	beq.n	80075b0 <_dtoa_r+0x1d8>
 80074be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074c0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80074c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80074cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80074d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80074d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80074d8:	4619      	mov	r1, r3
 80074da:	2200      	movs	r2, #0
 80074dc:	4b76      	ldr	r3, [pc, #472]	@ (80076b8 <_dtoa_r+0x2e0>)
 80074de:	f7f8 fee3 	bl	80002a8 <__aeabi_dsub>
 80074e2:	a36b      	add	r3, pc, #428	@ (adr r3, 8007690 <_dtoa_r+0x2b8>)
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	f7f9 f896 	bl	8000618 <__aeabi_dmul>
 80074ec:	a36a      	add	r3, pc, #424	@ (adr r3, 8007698 <_dtoa_r+0x2c0>)
 80074ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f2:	f7f8 fedb 	bl	80002ac <__adddf3>
 80074f6:	4604      	mov	r4, r0
 80074f8:	4630      	mov	r0, r6
 80074fa:	460d      	mov	r5, r1
 80074fc:	f7f9 f822 	bl	8000544 <__aeabi_i2d>
 8007500:	a367      	add	r3, pc, #412	@ (adr r3, 80076a0 <_dtoa_r+0x2c8>)
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	f7f9 f887 	bl	8000618 <__aeabi_dmul>
 800750a:	4602      	mov	r2, r0
 800750c:	460b      	mov	r3, r1
 800750e:	4620      	mov	r0, r4
 8007510:	4629      	mov	r1, r5
 8007512:	f7f8 fecb 	bl	80002ac <__adddf3>
 8007516:	4604      	mov	r4, r0
 8007518:	460d      	mov	r5, r1
 800751a:	f7f9 fb2d 	bl	8000b78 <__aeabi_d2iz>
 800751e:	2200      	movs	r2, #0
 8007520:	4607      	mov	r7, r0
 8007522:	2300      	movs	r3, #0
 8007524:	4620      	mov	r0, r4
 8007526:	4629      	mov	r1, r5
 8007528:	f7f9 fae8 	bl	8000afc <__aeabi_dcmplt>
 800752c:	b140      	cbz	r0, 8007540 <_dtoa_r+0x168>
 800752e:	4638      	mov	r0, r7
 8007530:	f7f9 f808 	bl	8000544 <__aeabi_i2d>
 8007534:	4622      	mov	r2, r4
 8007536:	462b      	mov	r3, r5
 8007538:	f7f9 fad6 	bl	8000ae8 <__aeabi_dcmpeq>
 800753c:	b900      	cbnz	r0, 8007540 <_dtoa_r+0x168>
 800753e:	3f01      	subs	r7, #1
 8007540:	2f16      	cmp	r7, #22
 8007542:	d852      	bhi.n	80075ea <_dtoa_r+0x212>
 8007544:	4b5d      	ldr	r3, [pc, #372]	@ (80076bc <_dtoa_r+0x2e4>)
 8007546:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007552:	f7f9 fad3 	bl	8000afc <__aeabi_dcmplt>
 8007556:	2800      	cmp	r0, #0
 8007558:	d049      	beq.n	80075ee <_dtoa_r+0x216>
 800755a:	3f01      	subs	r7, #1
 800755c:	2300      	movs	r3, #0
 800755e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007560:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007562:	1b9b      	subs	r3, r3, r6
 8007564:	1e5a      	subs	r2, r3, #1
 8007566:	bf45      	ittet	mi
 8007568:	f1c3 0301 	rsbmi	r3, r3, #1
 800756c:	9300      	strmi	r3, [sp, #0]
 800756e:	2300      	movpl	r3, #0
 8007570:	2300      	movmi	r3, #0
 8007572:	9206      	str	r2, [sp, #24]
 8007574:	bf54      	ite	pl
 8007576:	9300      	strpl	r3, [sp, #0]
 8007578:	9306      	strmi	r3, [sp, #24]
 800757a:	2f00      	cmp	r7, #0
 800757c:	db39      	blt.n	80075f2 <_dtoa_r+0x21a>
 800757e:	9b06      	ldr	r3, [sp, #24]
 8007580:	970d      	str	r7, [sp, #52]	@ 0x34
 8007582:	443b      	add	r3, r7
 8007584:	9306      	str	r3, [sp, #24]
 8007586:	2300      	movs	r3, #0
 8007588:	9308      	str	r3, [sp, #32]
 800758a:	9b07      	ldr	r3, [sp, #28]
 800758c:	2b09      	cmp	r3, #9
 800758e:	d863      	bhi.n	8007658 <_dtoa_r+0x280>
 8007590:	2b05      	cmp	r3, #5
 8007592:	bfc4      	itt	gt
 8007594:	3b04      	subgt	r3, #4
 8007596:	9307      	strgt	r3, [sp, #28]
 8007598:	9b07      	ldr	r3, [sp, #28]
 800759a:	f1a3 0302 	sub.w	r3, r3, #2
 800759e:	bfcc      	ite	gt
 80075a0:	2400      	movgt	r4, #0
 80075a2:	2401      	movle	r4, #1
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	d863      	bhi.n	8007670 <_dtoa_r+0x298>
 80075a8:	e8df f003 	tbb	[pc, r3]
 80075ac:	2b375452 	.word	0x2b375452
 80075b0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80075b4:	441e      	add	r6, r3
 80075b6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80075ba:	2b20      	cmp	r3, #32
 80075bc:	bfc1      	itttt	gt
 80075be:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80075c2:	409f      	lslgt	r7, r3
 80075c4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80075c8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80075cc:	bfd6      	itet	le
 80075ce:	f1c3 0320 	rsble	r3, r3, #32
 80075d2:	ea47 0003 	orrgt.w	r0, r7, r3
 80075d6:	fa04 f003 	lslle.w	r0, r4, r3
 80075da:	f7f8 ffa3 	bl	8000524 <__aeabi_ui2d>
 80075de:	2201      	movs	r2, #1
 80075e0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80075e4:	3e01      	subs	r6, #1
 80075e6:	9212      	str	r2, [sp, #72]	@ 0x48
 80075e8:	e776      	b.n	80074d8 <_dtoa_r+0x100>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e7b7      	b.n	800755e <_dtoa_r+0x186>
 80075ee:	9010      	str	r0, [sp, #64]	@ 0x40
 80075f0:	e7b6      	b.n	8007560 <_dtoa_r+0x188>
 80075f2:	9b00      	ldr	r3, [sp, #0]
 80075f4:	1bdb      	subs	r3, r3, r7
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	427b      	negs	r3, r7
 80075fa:	9308      	str	r3, [sp, #32]
 80075fc:	2300      	movs	r3, #0
 80075fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8007600:	e7c3      	b.n	800758a <_dtoa_r+0x1b2>
 8007602:	2301      	movs	r3, #1
 8007604:	9309      	str	r3, [sp, #36]	@ 0x24
 8007606:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007608:	eb07 0b03 	add.w	fp, r7, r3
 800760c:	f10b 0301 	add.w	r3, fp, #1
 8007610:	2b01      	cmp	r3, #1
 8007612:	9303      	str	r3, [sp, #12]
 8007614:	bfb8      	it	lt
 8007616:	2301      	movlt	r3, #1
 8007618:	e006      	b.n	8007628 <_dtoa_r+0x250>
 800761a:	2301      	movs	r3, #1
 800761c:	9309      	str	r3, [sp, #36]	@ 0x24
 800761e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007620:	2b00      	cmp	r3, #0
 8007622:	dd28      	ble.n	8007676 <_dtoa_r+0x29e>
 8007624:	469b      	mov	fp, r3
 8007626:	9303      	str	r3, [sp, #12]
 8007628:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800762c:	2100      	movs	r1, #0
 800762e:	2204      	movs	r2, #4
 8007630:	f102 0514 	add.w	r5, r2, #20
 8007634:	429d      	cmp	r5, r3
 8007636:	d926      	bls.n	8007686 <_dtoa_r+0x2ae>
 8007638:	6041      	str	r1, [r0, #4]
 800763a:	4648      	mov	r0, r9
 800763c:	f000 fd9c 	bl	8008178 <_Balloc>
 8007640:	4682      	mov	sl, r0
 8007642:	2800      	cmp	r0, #0
 8007644:	d142      	bne.n	80076cc <_dtoa_r+0x2f4>
 8007646:	4b1e      	ldr	r3, [pc, #120]	@ (80076c0 <_dtoa_r+0x2e8>)
 8007648:	4602      	mov	r2, r0
 800764a:	f240 11af 	movw	r1, #431	@ 0x1af
 800764e:	e6da      	b.n	8007406 <_dtoa_r+0x2e>
 8007650:	2300      	movs	r3, #0
 8007652:	e7e3      	b.n	800761c <_dtoa_r+0x244>
 8007654:	2300      	movs	r3, #0
 8007656:	e7d5      	b.n	8007604 <_dtoa_r+0x22c>
 8007658:	2401      	movs	r4, #1
 800765a:	2300      	movs	r3, #0
 800765c:	9307      	str	r3, [sp, #28]
 800765e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007660:	f04f 3bff 	mov.w	fp, #4294967295
 8007664:	2200      	movs	r2, #0
 8007666:	f8cd b00c 	str.w	fp, [sp, #12]
 800766a:	2312      	movs	r3, #18
 800766c:	920c      	str	r2, [sp, #48]	@ 0x30
 800766e:	e7db      	b.n	8007628 <_dtoa_r+0x250>
 8007670:	2301      	movs	r3, #1
 8007672:	9309      	str	r3, [sp, #36]	@ 0x24
 8007674:	e7f4      	b.n	8007660 <_dtoa_r+0x288>
 8007676:	f04f 0b01 	mov.w	fp, #1
 800767a:	f8cd b00c 	str.w	fp, [sp, #12]
 800767e:	465b      	mov	r3, fp
 8007680:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007684:	e7d0      	b.n	8007628 <_dtoa_r+0x250>
 8007686:	3101      	adds	r1, #1
 8007688:	0052      	lsls	r2, r2, #1
 800768a:	e7d1      	b.n	8007630 <_dtoa_r+0x258>
 800768c:	f3af 8000 	nop.w
 8007690:	636f4361 	.word	0x636f4361
 8007694:	3fd287a7 	.word	0x3fd287a7
 8007698:	8b60c8b3 	.word	0x8b60c8b3
 800769c:	3fc68a28 	.word	0x3fc68a28
 80076a0:	509f79fb 	.word	0x509f79fb
 80076a4:	3fd34413 	.word	0x3fd34413
 80076a8:	0800acba 	.word	0x0800acba
 80076ac:	0800acd1 	.word	0x0800acd1
 80076b0:	7ff00000 	.word	0x7ff00000
 80076b4:	0800ac85 	.word	0x0800ac85
 80076b8:	3ff80000 	.word	0x3ff80000
 80076bc:	0800ae80 	.word	0x0800ae80
 80076c0:	0800ad29 	.word	0x0800ad29
 80076c4:	0800acb6 	.word	0x0800acb6
 80076c8:	0800ac84 	.word	0x0800ac84
 80076cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80076d0:	6018      	str	r0, [r3, #0]
 80076d2:	9b03      	ldr	r3, [sp, #12]
 80076d4:	2b0e      	cmp	r3, #14
 80076d6:	f200 80a1 	bhi.w	800781c <_dtoa_r+0x444>
 80076da:	2c00      	cmp	r4, #0
 80076dc:	f000 809e 	beq.w	800781c <_dtoa_r+0x444>
 80076e0:	2f00      	cmp	r7, #0
 80076e2:	dd33      	ble.n	800774c <_dtoa_r+0x374>
 80076e4:	4b9c      	ldr	r3, [pc, #624]	@ (8007958 <_dtoa_r+0x580>)
 80076e6:	f007 020f 	and.w	r2, r7, #15
 80076ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076ee:	ed93 7b00 	vldr	d7, [r3]
 80076f2:	05f8      	lsls	r0, r7, #23
 80076f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80076f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80076fc:	d516      	bpl.n	800772c <_dtoa_r+0x354>
 80076fe:	4b97      	ldr	r3, [pc, #604]	@ (800795c <_dtoa_r+0x584>)
 8007700:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007704:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007708:	f7f9 f8b0 	bl	800086c <__aeabi_ddiv>
 800770c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007710:	f004 040f 	and.w	r4, r4, #15
 8007714:	2603      	movs	r6, #3
 8007716:	4d91      	ldr	r5, [pc, #580]	@ (800795c <_dtoa_r+0x584>)
 8007718:	b954      	cbnz	r4, 8007730 <_dtoa_r+0x358>
 800771a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800771e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007722:	f7f9 f8a3 	bl	800086c <__aeabi_ddiv>
 8007726:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800772a:	e028      	b.n	800777e <_dtoa_r+0x3a6>
 800772c:	2602      	movs	r6, #2
 800772e:	e7f2      	b.n	8007716 <_dtoa_r+0x33e>
 8007730:	07e1      	lsls	r1, r4, #31
 8007732:	d508      	bpl.n	8007746 <_dtoa_r+0x36e>
 8007734:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007738:	e9d5 2300 	ldrd	r2, r3, [r5]
 800773c:	f7f8 ff6c 	bl	8000618 <__aeabi_dmul>
 8007740:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007744:	3601      	adds	r6, #1
 8007746:	1064      	asrs	r4, r4, #1
 8007748:	3508      	adds	r5, #8
 800774a:	e7e5      	b.n	8007718 <_dtoa_r+0x340>
 800774c:	f000 80af 	beq.w	80078ae <_dtoa_r+0x4d6>
 8007750:	427c      	negs	r4, r7
 8007752:	4b81      	ldr	r3, [pc, #516]	@ (8007958 <_dtoa_r+0x580>)
 8007754:	4d81      	ldr	r5, [pc, #516]	@ (800795c <_dtoa_r+0x584>)
 8007756:	f004 020f 	and.w	r2, r4, #15
 800775a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007762:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007766:	f7f8 ff57 	bl	8000618 <__aeabi_dmul>
 800776a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800776e:	1124      	asrs	r4, r4, #4
 8007770:	2300      	movs	r3, #0
 8007772:	2602      	movs	r6, #2
 8007774:	2c00      	cmp	r4, #0
 8007776:	f040 808f 	bne.w	8007898 <_dtoa_r+0x4c0>
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1d3      	bne.n	8007726 <_dtoa_r+0x34e>
 800777e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007780:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 8094 	beq.w	80078b2 <_dtoa_r+0x4da>
 800778a:	4b75      	ldr	r3, [pc, #468]	@ (8007960 <_dtoa_r+0x588>)
 800778c:	2200      	movs	r2, #0
 800778e:	4620      	mov	r0, r4
 8007790:	4629      	mov	r1, r5
 8007792:	f7f9 f9b3 	bl	8000afc <__aeabi_dcmplt>
 8007796:	2800      	cmp	r0, #0
 8007798:	f000 808b 	beq.w	80078b2 <_dtoa_r+0x4da>
 800779c:	9b03      	ldr	r3, [sp, #12]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 8087 	beq.w	80078b2 <_dtoa_r+0x4da>
 80077a4:	f1bb 0f00 	cmp.w	fp, #0
 80077a8:	dd34      	ble.n	8007814 <_dtoa_r+0x43c>
 80077aa:	4620      	mov	r0, r4
 80077ac:	4b6d      	ldr	r3, [pc, #436]	@ (8007964 <_dtoa_r+0x58c>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	4629      	mov	r1, r5
 80077b2:	f7f8 ff31 	bl	8000618 <__aeabi_dmul>
 80077b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077ba:	f107 38ff 	add.w	r8, r7, #4294967295
 80077be:	3601      	adds	r6, #1
 80077c0:	465c      	mov	r4, fp
 80077c2:	4630      	mov	r0, r6
 80077c4:	f7f8 febe 	bl	8000544 <__aeabi_i2d>
 80077c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077cc:	f7f8 ff24 	bl	8000618 <__aeabi_dmul>
 80077d0:	4b65      	ldr	r3, [pc, #404]	@ (8007968 <_dtoa_r+0x590>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	f7f8 fd6a 	bl	80002ac <__adddf3>
 80077d8:	4605      	mov	r5, r0
 80077da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80077de:	2c00      	cmp	r4, #0
 80077e0:	d16a      	bne.n	80078b8 <_dtoa_r+0x4e0>
 80077e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077e6:	4b61      	ldr	r3, [pc, #388]	@ (800796c <_dtoa_r+0x594>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	f7f8 fd5d 	bl	80002a8 <__aeabi_dsub>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077f6:	462a      	mov	r2, r5
 80077f8:	4633      	mov	r3, r6
 80077fa:	f7f9 f99d 	bl	8000b38 <__aeabi_dcmpgt>
 80077fe:	2800      	cmp	r0, #0
 8007800:	f040 8298 	bne.w	8007d34 <_dtoa_r+0x95c>
 8007804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007808:	462a      	mov	r2, r5
 800780a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800780e:	f7f9 f975 	bl	8000afc <__aeabi_dcmplt>
 8007812:	bb38      	cbnz	r0, 8007864 <_dtoa_r+0x48c>
 8007814:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007818:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800781c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800781e:	2b00      	cmp	r3, #0
 8007820:	f2c0 8157 	blt.w	8007ad2 <_dtoa_r+0x6fa>
 8007824:	2f0e      	cmp	r7, #14
 8007826:	f300 8154 	bgt.w	8007ad2 <_dtoa_r+0x6fa>
 800782a:	4b4b      	ldr	r3, [pc, #300]	@ (8007958 <_dtoa_r+0x580>)
 800782c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007830:	ed93 7b00 	vldr	d7, [r3]
 8007834:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007836:	2b00      	cmp	r3, #0
 8007838:	ed8d 7b00 	vstr	d7, [sp]
 800783c:	f280 80e5 	bge.w	8007a0a <_dtoa_r+0x632>
 8007840:	9b03      	ldr	r3, [sp, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	f300 80e1 	bgt.w	8007a0a <_dtoa_r+0x632>
 8007848:	d10c      	bne.n	8007864 <_dtoa_r+0x48c>
 800784a:	4b48      	ldr	r3, [pc, #288]	@ (800796c <_dtoa_r+0x594>)
 800784c:	2200      	movs	r2, #0
 800784e:	ec51 0b17 	vmov	r0, r1, d7
 8007852:	f7f8 fee1 	bl	8000618 <__aeabi_dmul>
 8007856:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800785a:	f7f9 f963 	bl	8000b24 <__aeabi_dcmpge>
 800785e:	2800      	cmp	r0, #0
 8007860:	f000 8266 	beq.w	8007d30 <_dtoa_r+0x958>
 8007864:	2400      	movs	r4, #0
 8007866:	4625      	mov	r5, r4
 8007868:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800786a:	4656      	mov	r6, sl
 800786c:	ea6f 0803 	mvn.w	r8, r3
 8007870:	2700      	movs	r7, #0
 8007872:	4621      	mov	r1, r4
 8007874:	4648      	mov	r0, r9
 8007876:	f000 fcbf 	bl	80081f8 <_Bfree>
 800787a:	2d00      	cmp	r5, #0
 800787c:	f000 80bd 	beq.w	80079fa <_dtoa_r+0x622>
 8007880:	b12f      	cbz	r7, 800788e <_dtoa_r+0x4b6>
 8007882:	42af      	cmp	r7, r5
 8007884:	d003      	beq.n	800788e <_dtoa_r+0x4b6>
 8007886:	4639      	mov	r1, r7
 8007888:	4648      	mov	r0, r9
 800788a:	f000 fcb5 	bl	80081f8 <_Bfree>
 800788e:	4629      	mov	r1, r5
 8007890:	4648      	mov	r0, r9
 8007892:	f000 fcb1 	bl	80081f8 <_Bfree>
 8007896:	e0b0      	b.n	80079fa <_dtoa_r+0x622>
 8007898:	07e2      	lsls	r2, r4, #31
 800789a:	d505      	bpl.n	80078a8 <_dtoa_r+0x4d0>
 800789c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078a0:	f7f8 feba 	bl	8000618 <__aeabi_dmul>
 80078a4:	3601      	adds	r6, #1
 80078a6:	2301      	movs	r3, #1
 80078a8:	1064      	asrs	r4, r4, #1
 80078aa:	3508      	adds	r5, #8
 80078ac:	e762      	b.n	8007774 <_dtoa_r+0x39c>
 80078ae:	2602      	movs	r6, #2
 80078b0:	e765      	b.n	800777e <_dtoa_r+0x3a6>
 80078b2:	9c03      	ldr	r4, [sp, #12]
 80078b4:	46b8      	mov	r8, r7
 80078b6:	e784      	b.n	80077c2 <_dtoa_r+0x3ea>
 80078b8:	4b27      	ldr	r3, [pc, #156]	@ (8007958 <_dtoa_r+0x580>)
 80078ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078c4:	4454      	add	r4, sl
 80078c6:	2900      	cmp	r1, #0
 80078c8:	d054      	beq.n	8007974 <_dtoa_r+0x59c>
 80078ca:	4929      	ldr	r1, [pc, #164]	@ (8007970 <_dtoa_r+0x598>)
 80078cc:	2000      	movs	r0, #0
 80078ce:	f7f8 ffcd 	bl	800086c <__aeabi_ddiv>
 80078d2:	4633      	mov	r3, r6
 80078d4:	462a      	mov	r2, r5
 80078d6:	f7f8 fce7 	bl	80002a8 <__aeabi_dsub>
 80078da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80078de:	4656      	mov	r6, sl
 80078e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078e4:	f7f9 f948 	bl	8000b78 <__aeabi_d2iz>
 80078e8:	4605      	mov	r5, r0
 80078ea:	f7f8 fe2b 	bl	8000544 <__aeabi_i2d>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078f6:	f7f8 fcd7 	bl	80002a8 <__aeabi_dsub>
 80078fa:	3530      	adds	r5, #48	@ 0x30
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007904:	f806 5b01 	strb.w	r5, [r6], #1
 8007908:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800790c:	f7f9 f8f6 	bl	8000afc <__aeabi_dcmplt>
 8007910:	2800      	cmp	r0, #0
 8007912:	d172      	bne.n	80079fa <_dtoa_r+0x622>
 8007914:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007918:	4911      	ldr	r1, [pc, #68]	@ (8007960 <_dtoa_r+0x588>)
 800791a:	2000      	movs	r0, #0
 800791c:	f7f8 fcc4 	bl	80002a8 <__aeabi_dsub>
 8007920:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007924:	f7f9 f8ea 	bl	8000afc <__aeabi_dcmplt>
 8007928:	2800      	cmp	r0, #0
 800792a:	f040 80b4 	bne.w	8007a96 <_dtoa_r+0x6be>
 800792e:	42a6      	cmp	r6, r4
 8007930:	f43f af70 	beq.w	8007814 <_dtoa_r+0x43c>
 8007934:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007938:	4b0a      	ldr	r3, [pc, #40]	@ (8007964 <_dtoa_r+0x58c>)
 800793a:	2200      	movs	r2, #0
 800793c:	f7f8 fe6c 	bl	8000618 <__aeabi_dmul>
 8007940:	4b08      	ldr	r3, [pc, #32]	@ (8007964 <_dtoa_r+0x58c>)
 8007942:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007946:	2200      	movs	r2, #0
 8007948:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800794c:	f7f8 fe64 	bl	8000618 <__aeabi_dmul>
 8007950:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007954:	e7c4      	b.n	80078e0 <_dtoa_r+0x508>
 8007956:	bf00      	nop
 8007958:	0800ae80 	.word	0x0800ae80
 800795c:	0800ae58 	.word	0x0800ae58
 8007960:	3ff00000 	.word	0x3ff00000
 8007964:	40240000 	.word	0x40240000
 8007968:	401c0000 	.word	0x401c0000
 800796c:	40140000 	.word	0x40140000
 8007970:	3fe00000 	.word	0x3fe00000
 8007974:	4631      	mov	r1, r6
 8007976:	4628      	mov	r0, r5
 8007978:	f7f8 fe4e 	bl	8000618 <__aeabi_dmul>
 800797c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007980:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007982:	4656      	mov	r6, sl
 8007984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007988:	f7f9 f8f6 	bl	8000b78 <__aeabi_d2iz>
 800798c:	4605      	mov	r5, r0
 800798e:	f7f8 fdd9 	bl	8000544 <__aeabi_i2d>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800799a:	f7f8 fc85 	bl	80002a8 <__aeabi_dsub>
 800799e:	3530      	adds	r5, #48	@ 0x30
 80079a0:	f806 5b01 	strb.w	r5, [r6], #1
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	42a6      	cmp	r6, r4
 80079aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	d124      	bne.n	80079fe <_dtoa_r+0x626>
 80079b4:	4baf      	ldr	r3, [pc, #700]	@ (8007c74 <_dtoa_r+0x89c>)
 80079b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80079ba:	f7f8 fc77 	bl	80002ac <__adddf3>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079c6:	f7f9 f8b7 	bl	8000b38 <__aeabi_dcmpgt>
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d163      	bne.n	8007a96 <_dtoa_r+0x6be>
 80079ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80079d2:	49a8      	ldr	r1, [pc, #672]	@ (8007c74 <_dtoa_r+0x89c>)
 80079d4:	2000      	movs	r0, #0
 80079d6:	f7f8 fc67 	bl	80002a8 <__aeabi_dsub>
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
 80079de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079e2:	f7f9 f88b 	bl	8000afc <__aeabi_dcmplt>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	f43f af14 	beq.w	8007814 <_dtoa_r+0x43c>
 80079ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80079ee:	1e73      	subs	r3, r6, #1
 80079f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80079f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80079f6:	2b30      	cmp	r3, #48	@ 0x30
 80079f8:	d0f8      	beq.n	80079ec <_dtoa_r+0x614>
 80079fa:	4647      	mov	r7, r8
 80079fc:	e03b      	b.n	8007a76 <_dtoa_r+0x69e>
 80079fe:	4b9e      	ldr	r3, [pc, #632]	@ (8007c78 <_dtoa_r+0x8a0>)
 8007a00:	f7f8 fe0a 	bl	8000618 <__aeabi_dmul>
 8007a04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a08:	e7bc      	b.n	8007984 <_dtoa_r+0x5ac>
 8007a0a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007a0e:	4656      	mov	r6, sl
 8007a10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a14:	4620      	mov	r0, r4
 8007a16:	4629      	mov	r1, r5
 8007a18:	f7f8 ff28 	bl	800086c <__aeabi_ddiv>
 8007a1c:	f7f9 f8ac 	bl	8000b78 <__aeabi_d2iz>
 8007a20:	4680      	mov	r8, r0
 8007a22:	f7f8 fd8f 	bl	8000544 <__aeabi_i2d>
 8007a26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a2a:	f7f8 fdf5 	bl	8000618 <__aeabi_dmul>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	4620      	mov	r0, r4
 8007a34:	4629      	mov	r1, r5
 8007a36:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007a3a:	f7f8 fc35 	bl	80002a8 <__aeabi_dsub>
 8007a3e:	f806 4b01 	strb.w	r4, [r6], #1
 8007a42:	9d03      	ldr	r5, [sp, #12]
 8007a44:	eba6 040a 	sub.w	r4, r6, sl
 8007a48:	42a5      	cmp	r5, r4
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	d133      	bne.n	8007ab8 <_dtoa_r+0x6e0>
 8007a50:	f7f8 fc2c 	bl	80002ac <__adddf3>
 8007a54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a58:	4604      	mov	r4, r0
 8007a5a:	460d      	mov	r5, r1
 8007a5c:	f7f9 f86c 	bl	8000b38 <__aeabi_dcmpgt>
 8007a60:	b9c0      	cbnz	r0, 8007a94 <_dtoa_r+0x6bc>
 8007a62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a66:	4620      	mov	r0, r4
 8007a68:	4629      	mov	r1, r5
 8007a6a:	f7f9 f83d 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a6e:	b110      	cbz	r0, 8007a76 <_dtoa_r+0x69e>
 8007a70:	f018 0f01 	tst.w	r8, #1
 8007a74:	d10e      	bne.n	8007a94 <_dtoa_r+0x6bc>
 8007a76:	9902      	ldr	r1, [sp, #8]
 8007a78:	4648      	mov	r0, r9
 8007a7a:	f000 fbbd 	bl	80081f8 <_Bfree>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	7033      	strb	r3, [r6, #0]
 8007a82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007a84:	3701      	adds	r7, #1
 8007a86:	601f      	str	r7, [r3, #0]
 8007a88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 824b 	beq.w	8007f26 <_dtoa_r+0xb4e>
 8007a90:	601e      	str	r6, [r3, #0]
 8007a92:	e248      	b.n	8007f26 <_dtoa_r+0xb4e>
 8007a94:	46b8      	mov	r8, r7
 8007a96:	4633      	mov	r3, r6
 8007a98:	461e      	mov	r6, r3
 8007a9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a9e:	2a39      	cmp	r2, #57	@ 0x39
 8007aa0:	d106      	bne.n	8007ab0 <_dtoa_r+0x6d8>
 8007aa2:	459a      	cmp	sl, r3
 8007aa4:	d1f8      	bne.n	8007a98 <_dtoa_r+0x6c0>
 8007aa6:	2230      	movs	r2, #48	@ 0x30
 8007aa8:	f108 0801 	add.w	r8, r8, #1
 8007aac:	f88a 2000 	strb.w	r2, [sl]
 8007ab0:	781a      	ldrb	r2, [r3, #0]
 8007ab2:	3201      	adds	r2, #1
 8007ab4:	701a      	strb	r2, [r3, #0]
 8007ab6:	e7a0      	b.n	80079fa <_dtoa_r+0x622>
 8007ab8:	4b6f      	ldr	r3, [pc, #444]	@ (8007c78 <_dtoa_r+0x8a0>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	f7f8 fdac 	bl	8000618 <__aeabi_dmul>
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	460d      	mov	r5, r1
 8007ac8:	f7f9 f80e 	bl	8000ae8 <__aeabi_dcmpeq>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d09f      	beq.n	8007a10 <_dtoa_r+0x638>
 8007ad0:	e7d1      	b.n	8007a76 <_dtoa_r+0x69e>
 8007ad2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ad4:	2a00      	cmp	r2, #0
 8007ad6:	f000 80ea 	beq.w	8007cae <_dtoa_r+0x8d6>
 8007ada:	9a07      	ldr	r2, [sp, #28]
 8007adc:	2a01      	cmp	r2, #1
 8007ade:	f300 80cd 	bgt.w	8007c7c <_dtoa_r+0x8a4>
 8007ae2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007ae4:	2a00      	cmp	r2, #0
 8007ae6:	f000 80c1 	beq.w	8007c6c <_dtoa_r+0x894>
 8007aea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007aee:	9c08      	ldr	r4, [sp, #32]
 8007af0:	9e00      	ldr	r6, [sp, #0]
 8007af2:	9a00      	ldr	r2, [sp, #0]
 8007af4:	441a      	add	r2, r3
 8007af6:	9200      	str	r2, [sp, #0]
 8007af8:	9a06      	ldr	r2, [sp, #24]
 8007afa:	2101      	movs	r1, #1
 8007afc:	441a      	add	r2, r3
 8007afe:	4648      	mov	r0, r9
 8007b00:	9206      	str	r2, [sp, #24]
 8007b02:	f000 fc77 	bl	80083f4 <__i2b>
 8007b06:	4605      	mov	r5, r0
 8007b08:	b166      	cbz	r6, 8007b24 <_dtoa_r+0x74c>
 8007b0a:	9b06      	ldr	r3, [sp, #24]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	dd09      	ble.n	8007b24 <_dtoa_r+0x74c>
 8007b10:	42b3      	cmp	r3, r6
 8007b12:	9a00      	ldr	r2, [sp, #0]
 8007b14:	bfa8      	it	ge
 8007b16:	4633      	movge	r3, r6
 8007b18:	1ad2      	subs	r2, r2, r3
 8007b1a:	9200      	str	r2, [sp, #0]
 8007b1c:	9a06      	ldr	r2, [sp, #24]
 8007b1e:	1af6      	subs	r6, r6, r3
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	9306      	str	r3, [sp, #24]
 8007b24:	9b08      	ldr	r3, [sp, #32]
 8007b26:	b30b      	cbz	r3, 8007b6c <_dtoa_r+0x794>
 8007b28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f000 80c6 	beq.w	8007cbc <_dtoa_r+0x8e4>
 8007b30:	2c00      	cmp	r4, #0
 8007b32:	f000 80c0 	beq.w	8007cb6 <_dtoa_r+0x8de>
 8007b36:	4629      	mov	r1, r5
 8007b38:	4622      	mov	r2, r4
 8007b3a:	4648      	mov	r0, r9
 8007b3c:	f000 fd12 	bl	8008564 <__pow5mult>
 8007b40:	9a02      	ldr	r2, [sp, #8]
 8007b42:	4601      	mov	r1, r0
 8007b44:	4605      	mov	r5, r0
 8007b46:	4648      	mov	r0, r9
 8007b48:	f000 fc6a 	bl	8008420 <__multiply>
 8007b4c:	9902      	ldr	r1, [sp, #8]
 8007b4e:	4680      	mov	r8, r0
 8007b50:	4648      	mov	r0, r9
 8007b52:	f000 fb51 	bl	80081f8 <_Bfree>
 8007b56:	9b08      	ldr	r3, [sp, #32]
 8007b58:	1b1b      	subs	r3, r3, r4
 8007b5a:	9308      	str	r3, [sp, #32]
 8007b5c:	f000 80b1 	beq.w	8007cc2 <_dtoa_r+0x8ea>
 8007b60:	9a08      	ldr	r2, [sp, #32]
 8007b62:	4641      	mov	r1, r8
 8007b64:	4648      	mov	r0, r9
 8007b66:	f000 fcfd 	bl	8008564 <__pow5mult>
 8007b6a:	9002      	str	r0, [sp, #8]
 8007b6c:	2101      	movs	r1, #1
 8007b6e:	4648      	mov	r0, r9
 8007b70:	f000 fc40 	bl	80083f4 <__i2b>
 8007b74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b76:	4604      	mov	r4, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 81d8 	beq.w	8007f2e <_dtoa_r+0xb56>
 8007b7e:	461a      	mov	r2, r3
 8007b80:	4601      	mov	r1, r0
 8007b82:	4648      	mov	r0, r9
 8007b84:	f000 fcee 	bl	8008564 <__pow5mult>
 8007b88:	9b07      	ldr	r3, [sp, #28]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	f300 809f 	bgt.w	8007cd0 <_dtoa_r+0x8f8>
 8007b92:	9b04      	ldr	r3, [sp, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f040 8097 	bne.w	8007cc8 <_dtoa_r+0x8f0>
 8007b9a:	9b05      	ldr	r3, [sp, #20]
 8007b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f040 8093 	bne.w	8007ccc <_dtoa_r+0x8f4>
 8007ba6:	9b05      	ldr	r3, [sp, #20]
 8007ba8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007bac:	0d1b      	lsrs	r3, r3, #20
 8007bae:	051b      	lsls	r3, r3, #20
 8007bb0:	b133      	cbz	r3, 8007bc0 <_dtoa_r+0x7e8>
 8007bb2:	9b00      	ldr	r3, [sp, #0]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	9b06      	ldr	r3, [sp, #24]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	9306      	str	r3, [sp, #24]
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	9308      	str	r3, [sp, #32]
 8007bc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 81b8 	beq.w	8007f3a <_dtoa_r+0xb62>
 8007bca:	6923      	ldr	r3, [r4, #16]
 8007bcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007bd0:	6918      	ldr	r0, [r3, #16]
 8007bd2:	f000 fbc3 	bl	800835c <__hi0bits>
 8007bd6:	f1c0 0020 	rsb	r0, r0, #32
 8007bda:	9b06      	ldr	r3, [sp, #24]
 8007bdc:	4418      	add	r0, r3
 8007bde:	f010 001f 	ands.w	r0, r0, #31
 8007be2:	f000 8082 	beq.w	8007cea <_dtoa_r+0x912>
 8007be6:	f1c0 0320 	rsb	r3, r0, #32
 8007bea:	2b04      	cmp	r3, #4
 8007bec:	dd73      	ble.n	8007cd6 <_dtoa_r+0x8fe>
 8007bee:	9b00      	ldr	r3, [sp, #0]
 8007bf0:	f1c0 001c 	rsb	r0, r0, #28
 8007bf4:	4403      	add	r3, r0
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	9b06      	ldr	r3, [sp, #24]
 8007bfa:	4403      	add	r3, r0
 8007bfc:	4406      	add	r6, r0
 8007bfe:	9306      	str	r3, [sp, #24]
 8007c00:	9b00      	ldr	r3, [sp, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	dd05      	ble.n	8007c12 <_dtoa_r+0x83a>
 8007c06:	9902      	ldr	r1, [sp, #8]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	4648      	mov	r0, r9
 8007c0c:	f000 fd04 	bl	8008618 <__lshift>
 8007c10:	9002      	str	r0, [sp, #8]
 8007c12:	9b06      	ldr	r3, [sp, #24]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	dd05      	ble.n	8007c24 <_dtoa_r+0x84c>
 8007c18:	4621      	mov	r1, r4
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	4648      	mov	r0, r9
 8007c1e:	f000 fcfb 	bl	8008618 <__lshift>
 8007c22:	4604      	mov	r4, r0
 8007c24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d061      	beq.n	8007cee <_dtoa_r+0x916>
 8007c2a:	9802      	ldr	r0, [sp, #8]
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	f000 fd5f 	bl	80086f0 <__mcmp>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	da5b      	bge.n	8007cee <_dtoa_r+0x916>
 8007c36:	2300      	movs	r3, #0
 8007c38:	9902      	ldr	r1, [sp, #8]
 8007c3a:	220a      	movs	r2, #10
 8007c3c:	4648      	mov	r0, r9
 8007c3e:	f000 fafd 	bl	800823c <__multadd>
 8007c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c44:	9002      	str	r0, [sp, #8]
 8007c46:	f107 38ff 	add.w	r8, r7, #4294967295
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 8177 	beq.w	8007f3e <_dtoa_r+0xb66>
 8007c50:	4629      	mov	r1, r5
 8007c52:	2300      	movs	r3, #0
 8007c54:	220a      	movs	r2, #10
 8007c56:	4648      	mov	r0, r9
 8007c58:	f000 faf0 	bl	800823c <__multadd>
 8007c5c:	f1bb 0f00 	cmp.w	fp, #0
 8007c60:	4605      	mov	r5, r0
 8007c62:	dc6f      	bgt.n	8007d44 <_dtoa_r+0x96c>
 8007c64:	9b07      	ldr	r3, [sp, #28]
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	dc49      	bgt.n	8007cfe <_dtoa_r+0x926>
 8007c6a:	e06b      	b.n	8007d44 <_dtoa_r+0x96c>
 8007c6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007c72:	e73c      	b.n	8007aee <_dtoa_r+0x716>
 8007c74:	3fe00000 	.word	0x3fe00000
 8007c78:	40240000 	.word	0x40240000
 8007c7c:	9b03      	ldr	r3, [sp, #12]
 8007c7e:	1e5c      	subs	r4, r3, #1
 8007c80:	9b08      	ldr	r3, [sp, #32]
 8007c82:	42a3      	cmp	r3, r4
 8007c84:	db09      	blt.n	8007c9a <_dtoa_r+0x8c2>
 8007c86:	1b1c      	subs	r4, r3, r4
 8007c88:	9b03      	ldr	r3, [sp, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f6bf af30 	bge.w	8007af0 <_dtoa_r+0x718>
 8007c90:	9b00      	ldr	r3, [sp, #0]
 8007c92:	9a03      	ldr	r2, [sp, #12]
 8007c94:	1a9e      	subs	r6, r3, r2
 8007c96:	2300      	movs	r3, #0
 8007c98:	e72b      	b.n	8007af2 <_dtoa_r+0x71a>
 8007c9a:	9b08      	ldr	r3, [sp, #32]
 8007c9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007c9e:	9408      	str	r4, [sp, #32]
 8007ca0:	1ae3      	subs	r3, r4, r3
 8007ca2:	441a      	add	r2, r3
 8007ca4:	9e00      	ldr	r6, [sp, #0]
 8007ca6:	9b03      	ldr	r3, [sp, #12]
 8007ca8:	920d      	str	r2, [sp, #52]	@ 0x34
 8007caa:	2400      	movs	r4, #0
 8007cac:	e721      	b.n	8007af2 <_dtoa_r+0x71a>
 8007cae:	9c08      	ldr	r4, [sp, #32]
 8007cb0:	9e00      	ldr	r6, [sp, #0]
 8007cb2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007cb4:	e728      	b.n	8007b08 <_dtoa_r+0x730>
 8007cb6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007cba:	e751      	b.n	8007b60 <_dtoa_r+0x788>
 8007cbc:	9a08      	ldr	r2, [sp, #32]
 8007cbe:	9902      	ldr	r1, [sp, #8]
 8007cc0:	e750      	b.n	8007b64 <_dtoa_r+0x78c>
 8007cc2:	f8cd 8008 	str.w	r8, [sp, #8]
 8007cc6:	e751      	b.n	8007b6c <_dtoa_r+0x794>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	e779      	b.n	8007bc0 <_dtoa_r+0x7e8>
 8007ccc:	9b04      	ldr	r3, [sp, #16]
 8007cce:	e777      	b.n	8007bc0 <_dtoa_r+0x7e8>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	9308      	str	r3, [sp, #32]
 8007cd4:	e779      	b.n	8007bca <_dtoa_r+0x7f2>
 8007cd6:	d093      	beq.n	8007c00 <_dtoa_r+0x828>
 8007cd8:	9a00      	ldr	r2, [sp, #0]
 8007cda:	331c      	adds	r3, #28
 8007cdc:	441a      	add	r2, r3
 8007cde:	9200      	str	r2, [sp, #0]
 8007ce0:	9a06      	ldr	r2, [sp, #24]
 8007ce2:	441a      	add	r2, r3
 8007ce4:	441e      	add	r6, r3
 8007ce6:	9206      	str	r2, [sp, #24]
 8007ce8:	e78a      	b.n	8007c00 <_dtoa_r+0x828>
 8007cea:	4603      	mov	r3, r0
 8007cec:	e7f4      	b.n	8007cd8 <_dtoa_r+0x900>
 8007cee:	9b03      	ldr	r3, [sp, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	46b8      	mov	r8, r7
 8007cf4:	dc20      	bgt.n	8007d38 <_dtoa_r+0x960>
 8007cf6:	469b      	mov	fp, r3
 8007cf8:	9b07      	ldr	r3, [sp, #28]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	dd1e      	ble.n	8007d3c <_dtoa_r+0x964>
 8007cfe:	f1bb 0f00 	cmp.w	fp, #0
 8007d02:	f47f adb1 	bne.w	8007868 <_dtoa_r+0x490>
 8007d06:	4621      	mov	r1, r4
 8007d08:	465b      	mov	r3, fp
 8007d0a:	2205      	movs	r2, #5
 8007d0c:	4648      	mov	r0, r9
 8007d0e:	f000 fa95 	bl	800823c <__multadd>
 8007d12:	4601      	mov	r1, r0
 8007d14:	4604      	mov	r4, r0
 8007d16:	9802      	ldr	r0, [sp, #8]
 8007d18:	f000 fcea 	bl	80086f0 <__mcmp>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	f77f ada3 	ble.w	8007868 <_dtoa_r+0x490>
 8007d22:	4656      	mov	r6, sl
 8007d24:	2331      	movs	r3, #49	@ 0x31
 8007d26:	f806 3b01 	strb.w	r3, [r6], #1
 8007d2a:	f108 0801 	add.w	r8, r8, #1
 8007d2e:	e59f      	b.n	8007870 <_dtoa_r+0x498>
 8007d30:	9c03      	ldr	r4, [sp, #12]
 8007d32:	46b8      	mov	r8, r7
 8007d34:	4625      	mov	r5, r4
 8007d36:	e7f4      	b.n	8007d22 <_dtoa_r+0x94a>
 8007d38:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 8101 	beq.w	8007f46 <_dtoa_r+0xb6e>
 8007d44:	2e00      	cmp	r6, #0
 8007d46:	dd05      	ble.n	8007d54 <_dtoa_r+0x97c>
 8007d48:	4629      	mov	r1, r5
 8007d4a:	4632      	mov	r2, r6
 8007d4c:	4648      	mov	r0, r9
 8007d4e:	f000 fc63 	bl	8008618 <__lshift>
 8007d52:	4605      	mov	r5, r0
 8007d54:	9b08      	ldr	r3, [sp, #32]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d05c      	beq.n	8007e14 <_dtoa_r+0xa3c>
 8007d5a:	6869      	ldr	r1, [r5, #4]
 8007d5c:	4648      	mov	r0, r9
 8007d5e:	f000 fa0b 	bl	8008178 <_Balloc>
 8007d62:	4606      	mov	r6, r0
 8007d64:	b928      	cbnz	r0, 8007d72 <_dtoa_r+0x99a>
 8007d66:	4b82      	ldr	r3, [pc, #520]	@ (8007f70 <_dtoa_r+0xb98>)
 8007d68:	4602      	mov	r2, r0
 8007d6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007d6e:	f7ff bb4a 	b.w	8007406 <_dtoa_r+0x2e>
 8007d72:	692a      	ldr	r2, [r5, #16]
 8007d74:	3202      	adds	r2, #2
 8007d76:	0092      	lsls	r2, r2, #2
 8007d78:	f105 010c 	add.w	r1, r5, #12
 8007d7c:	300c      	adds	r0, #12
 8007d7e:	f7ff fa8c 	bl	800729a <memcpy>
 8007d82:	2201      	movs	r2, #1
 8007d84:	4631      	mov	r1, r6
 8007d86:	4648      	mov	r0, r9
 8007d88:	f000 fc46 	bl	8008618 <__lshift>
 8007d8c:	f10a 0301 	add.w	r3, sl, #1
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	eb0a 030b 	add.w	r3, sl, fp
 8007d96:	9308      	str	r3, [sp, #32]
 8007d98:	9b04      	ldr	r3, [sp, #16]
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	462f      	mov	r7, r5
 8007da0:	9306      	str	r3, [sp, #24]
 8007da2:	4605      	mov	r5, r0
 8007da4:	9b00      	ldr	r3, [sp, #0]
 8007da6:	9802      	ldr	r0, [sp, #8]
 8007da8:	4621      	mov	r1, r4
 8007daa:	f103 3bff 	add.w	fp, r3, #4294967295
 8007dae:	f7ff fa89 	bl	80072c4 <quorem>
 8007db2:	4603      	mov	r3, r0
 8007db4:	3330      	adds	r3, #48	@ 0x30
 8007db6:	9003      	str	r0, [sp, #12]
 8007db8:	4639      	mov	r1, r7
 8007dba:	9802      	ldr	r0, [sp, #8]
 8007dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dbe:	f000 fc97 	bl	80086f0 <__mcmp>
 8007dc2:	462a      	mov	r2, r5
 8007dc4:	9004      	str	r0, [sp, #16]
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	4648      	mov	r0, r9
 8007dca:	f000 fcad 	bl	8008728 <__mdiff>
 8007dce:	68c2      	ldr	r2, [r0, #12]
 8007dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dd2:	4606      	mov	r6, r0
 8007dd4:	bb02      	cbnz	r2, 8007e18 <_dtoa_r+0xa40>
 8007dd6:	4601      	mov	r1, r0
 8007dd8:	9802      	ldr	r0, [sp, #8]
 8007dda:	f000 fc89 	bl	80086f0 <__mcmp>
 8007dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007de0:	4602      	mov	r2, r0
 8007de2:	4631      	mov	r1, r6
 8007de4:	4648      	mov	r0, r9
 8007de6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007de8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dea:	f000 fa05 	bl	80081f8 <_Bfree>
 8007dee:	9b07      	ldr	r3, [sp, #28]
 8007df0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007df2:	9e00      	ldr	r6, [sp, #0]
 8007df4:	ea42 0103 	orr.w	r1, r2, r3
 8007df8:	9b06      	ldr	r3, [sp, #24]
 8007dfa:	4319      	orrs	r1, r3
 8007dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dfe:	d10d      	bne.n	8007e1c <_dtoa_r+0xa44>
 8007e00:	2b39      	cmp	r3, #57	@ 0x39
 8007e02:	d027      	beq.n	8007e54 <_dtoa_r+0xa7c>
 8007e04:	9a04      	ldr	r2, [sp, #16]
 8007e06:	2a00      	cmp	r2, #0
 8007e08:	dd01      	ble.n	8007e0e <_dtoa_r+0xa36>
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	3331      	adds	r3, #49	@ 0x31
 8007e0e:	f88b 3000 	strb.w	r3, [fp]
 8007e12:	e52e      	b.n	8007872 <_dtoa_r+0x49a>
 8007e14:	4628      	mov	r0, r5
 8007e16:	e7b9      	b.n	8007d8c <_dtoa_r+0x9b4>
 8007e18:	2201      	movs	r2, #1
 8007e1a:	e7e2      	b.n	8007de2 <_dtoa_r+0xa0a>
 8007e1c:	9904      	ldr	r1, [sp, #16]
 8007e1e:	2900      	cmp	r1, #0
 8007e20:	db04      	blt.n	8007e2c <_dtoa_r+0xa54>
 8007e22:	9807      	ldr	r0, [sp, #28]
 8007e24:	4301      	orrs	r1, r0
 8007e26:	9806      	ldr	r0, [sp, #24]
 8007e28:	4301      	orrs	r1, r0
 8007e2a:	d120      	bne.n	8007e6e <_dtoa_r+0xa96>
 8007e2c:	2a00      	cmp	r2, #0
 8007e2e:	ddee      	ble.n	8007e0e <_dtoa_r+0xa36>
 8007e30:	9902      	ldr	r1, [sp, #8]
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	2201      	movs	r2, #1
 8007e36:	4648      	mov	r0, r9
 8007e38:	f000 fbee 	bl	8008618 <__lshift>
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	9002      	str	r0, [sp, #8]
 8007e40:	f000 fc56 	bl	80086f0 <__mcmp>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	9b00      	ldr	r3, [sp, #0]
 8007e48:	dc02      	bgt.n	8007e50 <_dtoa_r+0xa78>
 8007e4a:	d1e0      	bne.n	8007e0e <_dtoa_r+0xa36>
 8007e4c:	07da      	lsls	r2, r3, #31
 8007e4e:	d5de      	bpl.n	8007e0e <_dtoa_r+0xa36>
 8007e50:	2b39      	cmp	r3, #57	@ 0x39
 8007e52:	d1da      	bne.n	8007e0a <_dtoa_r+0xa32>
 8007e54:	2339      	movs	r3, #57	@ 0x39
 8007e56:	f88b 3000 	strb.w	r3, [fp]
 8007e5a:	4633      	mov	r3, r6
 8007e5c:	461e      	mov	r6, r3
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007e64:	2a39      	cmp	r2, #57	@ 0x39
 8007e66:	d04e      	beq.n	8007f06 <_dtoa_r+0xb2e>
 8007e68:	3201      	adds	r2, #1
 8007e6a:	701a      	strb	r2, [r3, #0]
 8007e6c:	e501      	b.n	8007872 <_dtoa_r+0x49a>
 8007e6e:	2a00      	cmp	r2, #0
 8007e70:	dd03      	ble.n	8007e7a <_dtoa_r+0xaa2>
 8007e72:	2b39      	cmp	r3, #57	@ 0x39
 8007e74:	d0ee      	beq.n	8007e54 <_dtoa_r+0xa7c>
 8007e76:	3301      	adds	r3, #1
 8007e78:	e7c9      	b.n	8007e0e <_dtoa_r+0xa36>
 8007e7a:	9a00      	ldr	r2, [sp, #0]
 8007e7c:	9908      	ldr	r1, [sp, #32]
 8007e7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007e82:	428a      	cmp	r2, r1
 8007e84:	d028      	beq.n	8007ed8 <_dtoa_r+0xb00>
 8007e86:	9902      	ldr	r1, [sp, #8]
 8007e88:	2300      	movs	r3, #0
 8007e8a:	220a      	movs	r2, #10
 8007e8c:	4648      	mov	r0, r9
 8007e8e:	f000 f9d5 	bl	800823c <__multadd>
 8007e92:	42af      	cmp	r7, r5
 8007e94:	9002      	str	r0, [sp, #8]
 8007e96:	f04f 0300 	mov.w	r3, #0
 8007e9a:	f04f 020a 	mov.w	r2, #10
 8007e9e:	4639      	mov	r1, r7
 8007ea0:	4648      	mov	r0, r9
 8007ea2:	d107      	bne.n	8007eb4 <_dtoa_r+0xadc>
 8007ea4:	f000 f9ca 	bl	800823c <__multadd>
 8007ea8:	4607      	mov	r7, r0
 8007eaa:	4605      	mov	r5, r0
 8007eac:	9b00      	ldr	r3, [sp, #0]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	e777      	b.n	8007da4 <_dtoa_r+0x9cc>
 8007eb4:	f000 f9c2 	bl	800823c <__multadd>
 8007eb8:	4629      	mov	r1, r5
 8007eba:	4607      	mov	r7, r0
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	220a      	movs	r2, #10
 8007ec0:	4648      	mov	r0, r9
 8007ec2:	f000 f9bb 	bl	800823c <__multadd>
 8007ec6:	4605      	mov	r5, r0
 8007ec8:	e7f0      	b.n	8007eac <_dtoa_r+0xad4>
 8007eca:	f1bb 0f00 	cmp.w	fp, #0
 8007ece:	bfcc      	ite	gt
 8007ed0:	465e      	movgt	r6, fp
 8007ed2:	2601      	movle	r6, #1
 8007ed4:	4456      	add	r6, sl
 8007ed6:	2700      	movs	r7, #0
 8007ed8:	9902      	ldr	r1, [sp, #8]
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	2201      	movs	r2, #1
 8007ede:	4648      	mov	r0, r9
 8007ee0:	f000 fb9a 	bl	8008618 <__lshift>
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	9002      	str	r0, [sp, #8]
 8007ee8:	f000 fc02 	bl	80086f0 <__mcmp>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	dcb4      	bgt.n	8007e5a <_dtoa_r+0xa82>
 8007ef0:	d102      	bne.n	8007ef8 <_dtoa_r+0xb20>
 8007ef2:	9b00      	ldr	r3, [sp, #0]
 8007ef4:	07db      	lsls	r3, r3, #31
 8007ef6:	d4b0      	bmi.n	8007e5a <_dtoa_r+0xa82>
 8007ef8:	4633      	mov	r3, r6
 8007efa:	461e      	mov	r6, r3
 8007efc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f00:	2a30      	cmp	r2, #48	@ 0x30
 8007f02:	d0fa      	beq.n	8007efa <_dtoa_r+0xb22>
 8007f04:	e4b5      	b.n	8007872 <_dtoa_r+0x49a>
 8007f06:	459a      	cmp	sl, r3
 8007f08:	d1a8      	bne.n	8007e5c <_dtoa_r+0xa84>
 8007f0a:	2331      	movs	r3, #49	@ 0x31
 8007f0c:	f108 0801 	add.w	r8, r8, #1
 8007f10:	f88a 3000 	strb.w	r3, [sl]
 8007f14:	e4ad      	b.n	8007872 <_dtoa_r+0x49a>
 8007f16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f18:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007f74 <_dtoa_r+0xb9c>
 8007f1c:	b11b      	cbz	r3, 8007f26 <_dtoa_r+0xb4e>
 8007f1e:	f10a 0308 	add.w	r3, sl, #8
 8007f22:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	4650      	mov	r0, sl
 8007f28:	b017      	add	sp, #92	@ 0x5c
 8007f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2e:	9b07      	ldr	r3, [sp, #28]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	f77f ae2e 	ble.w	8007b92 <_dtoa_r+0x7ba>
 8007f36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f38:	9308      	str	r3, [sp, #32]
 8007f3a:	2001      	movs	r0, #1
 8007f3c:	e64d      	b.n	8007bda <_dtoa_r+0x802>
 8007f3e:	f1bb 0f00 	cmp.w	fp, #0
 8007f42:	f77f aed9 	ble.w	8007cf8 <_dtoa_r+0x920>
 8007f46:	4656      	mov	r6, sl
 8007f48:	9802      	ldr	r0, [sp, #8]
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	f7ff f9ba 	bl	80072c4 <quorem>
 8007f50:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007f54:	f806 3b01 	strb.w	r3, [r6], #1
 8007f58:	eba6 020a 	sub.w	r2, r6, sl
 8007f5c:	4593      	cmp	fp, r2
 8007f5e:	ddb4      	ble.n	8007eca <_dtoa_r+0xaf2>
 8007f60:	9902      	ldr	r1, [sp, #8]
 8007f62:	2300      	movs	r3, #0
 8007f64:	220a      	movs	r2, #10
 8007f66:	4648      	mov	r0, r9
 8007f68:	f000 f968 	bl	800823c <__multadd>
 8007f6c:	9002      	str	r0, [sp, #8]
 8007f6e:	e7eb      	b.n	8007f48 <_dtoa_r+0xb70>
 8007f70:	0800ad29 	.word	0x0800ad29
 8007f74:	0800acad 	.word	0x0800acad

08007f78 <_free_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	2900      	cmp	r1, #0
 8007f7e:	d041      	beq.n	8008004 <_free_r+0x8c>
 8007f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f84:	1f0c      	subs	r4, r1, #4
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	bfb8      	it	lt
 8007f8a:	18e4      	addlt	r4, r4, r3
 8007f8c:	f000 f8e8 	bl	8008160 <__malloc_lock>
 8007f90:	4a1d      	ldr	r2, [pc, #116]	@ (8008008 <_free_r+0x90>)
 8007f92:	6813      	ldr	r3, [r2, #0]
 8007f94:	b933      	cbnz	r3, 8007fa4 <_free_r+0x2c>
 8007f96:	6063      	str	r3, [r4, #4]
 8007f98:	6014      	str	r4, [r2, #0]
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fa0:	f000 b8e4 	b.w	800816c <__malloc_unlock>
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	d908      	bls.n	8007fba <_free_r+0x42>
 8007fa8:	6820      	ldr	r0, [r4, #0]
 8007faa:	1821      	adds	r1, r4, r0
 8007fac:	428b      	cmp	r3, r1
 8007fae:	bf01      	itttt	eq
 8007fb0:	6819      	ldreq	r1, [r3, #0]
 8007fb2:	685b      	ldreq	r3, [r3, #4]
 8007fb4:	1809      	addeq	r1, r1, r0
 8007fb6:	6021      	streq	r1, [r4, #0]
 8007fb8:	e7ed      	b.n	8007f96 <_free_r+0x1e>
 8007fba:	461a      	mov	r2, r3
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	b10b      	cbz	r3, 8007fc4 <_free_r+0x4c>
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	d9fa      	bls.n	8007fba <_free_r+0x42>
 8007fc4:	6811      	ldr	r1, [r2, #0]
 8007fc6:	1850      	adds	r0, r2, r1
 8007fc8:	42a0      	cmp	r0, r4
 8007fca:	d10b      	bne.n	8007fe4 <_free_r+0x6c>
 8007fcc:	6820      	ldr	r0, [r4, #0]
 8007fce:	4401      	add	r1, r0
 8007fd0:	1850      	adds	r0, r2, r1
 8007fd2:	4283      	cmp	r3, r0
 8007fd4:	6011      	str	r1, [r2, #0]
 8007fd6:	d1e0      	bne.n	8007f9a <_free_r+0x22>
 8007fd8:	6818      	ldr	r0, [r3, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	6053      	str	r3, [r2, #4]
 8007fde:	4408      	add	r0, r1
 8007fe0:	6010      	str	r0, [r2, #0]
 8007fe2:	e7da      	b.n	8007f9a <_free_r+0x22>
 8007fe4:	d902      	bls.n	8007fec <_free_r+0x74>
 8007fe6:	230c      	movs	r3, #12
 8007fe8:	602b      	str	r3, [r5, #0]
 8007fea:	e7d6      	b.n	8007f9a <_free_r+0x22>
 8007fec:	6820      	ldr	r0, [r4, #0]
 8007fee:	1821      	adds	r1, r4, r0
 8007ff0:	428b      	cmp	r3, r1
 8007ff2:	bf04      	itt	eq
 8007ff4:	6819      	ldreq	r1, [r3, #0]
 8007ff6:	685b      	ldreq	r3, [r3, #4]
 8007ff8:	6063      	str	r3, [r4, #4]
 8007ffa:	bf04      	itt	eq
 8007ffc:	1809      	addeq	r1, r1, r0
 8007ffe:	6021      	streq	r1, [r4, #0]
 8008000:	6054      	str	r4, [r2, #4]
 8008002:	e7ca      	b.n	8007f9a <_free_r+0x22>
 8008004:	bd38      	pop	{r3, r4, r5, pc}
 8008006:	bf00      	nop
 8008008:	200009f8 	.word	0x200009f8

0800800c <malloc>:
 800800c:	4b02      	ldr	r3, [pc, #8]	@ (8008018 <malloc+0xc>)
 800800e:	4601      	mov	r1, r0
 8008010:	6818      	ldr	r0, [r3, #0]
 8008012:	f000 b825 	b.w	8008060 <_malloc_r>
 8008016:	bf00      	nop
 8008018:	20000024 	.word	0x20000024

0800801c <sbrk_aligned>:
 800801c:	b570      	push	{r4, r5, r6, lr}
 800801e:	4e0f      	ldr	r6, [pc, #60]	@ (800805c <sbrk_aligned+0x40>)
 8008020:	460c      	mov	r4, r1
 8008022:	6831      	ldr	r1, [r6, #0]
 8008024:	4605      	mov	r5, r0
 8008026:	b911      	cbnz	r1, 800802e <sbrk_aligned+0x12>
 8008028:	f001 fe04 	bl	8009c34 <_sbrk_r>
 800802c:	6030      	str	r0, [r6, #0]
 800802e:	4621      	mov	r1, r4
 8008030:	4628      	mov	r0, r5
 8008032:	f001 fdff 	bl	8009c34 <_sbrk_r>
 8008036:	1c43      	adds	r3, r0, #1
 8008038:	d103      	bne.n	8008042 <sbrk_aligned+0x26>
 800803a:	f04f 34ff 	mov.w	r4, #4294967295
 800803e:	4620      	mov	r0, r4
 8008040:	bd70      	pop	{r4, r5, r6, pc}
 8008042:	1cc4      	adds	r4, r0, #3
 8008044:	f024 0403 	bic.w	r4, r4, #3
 8008048:	42a0      	cmp	r0, r4
 800804a:	d0f8      	beq.n	800803e <sbrk_aligned+0x22>
 800804c:	1a21      	subs	r1, r4, r0
 800804e:	4628      	mov	r0, r5
 8008050:	f001 fdf0 	bl	8009c34 <_sbrk_r>
 8008054:	3001      	adds	r0, #1
 8008056:	d1f2      	bne.n	800803e <sbrk_aligned+0x22>
 8008058:	e7ef      	b.n	800803a <sbrk_aligned+0x1e>
 800805a:	bf00      	nop
 800805c:	200009f4 	.word	0x200009f4

08008060 <_malloc_r>:
 8008060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008064:	1ccd      	adds	r5, r1, #3
 8008066:	f025 0503 	bic.w	r5, r5, #3
 800806a:	3508      	adds	r5, #8
 800806c:	2d0c      	cmp	r5, #12
 800806e:	bf38      	it	cc
 8008070:	250c      	movcc	r5, #12
 8008072:	2d00      	cmp	r5, #0
 8008074:	4606      	mov	r6, r0
 8008076:	db01      	blt.n	800807c <_malloc_r+0x1c>
 8008078:	42a9      	cmp	r1, r5
 800807a:	d904      	bls.n	8008086 <_malloc_r+0x26>
 800807c:	230c      	movs	r3, #12
 800807e:	6033      	str	r3, [r6, #0]
 8008080:	2000      	movs	r0, #0
 8008082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008086:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800815c <_malloc_r+0xfc>
 800808a:	f000 f869 	bl	8008160 <__malloc_lock>
 800808e:	f8d8 3000 	ldr.w	r3, [r8]
 8008092:	461c      	mov	r4, r3
 8008094:	bb44      	cbnz	r4, 80080e8 <_malloc_r+0x88>
 8008096:	4629      	mov	r1, r5
 8008098:	4630      	mov	r0, r6
 800809a:	f7ff ffbf 	bl	800801c <sbrk_aligned>
 800809e:	1c43      	adds	r3, r0, #1
 80080a0:	4604      	mov	r4, r0
 80080a2:	d158      	bne.n	8008156 <_malloc_r+0xf6>
 80080a4:	f8d8 4000 	ldr.w	r4, [r8]
 80080a8:	4627      	mov	r7, r4
 80080aa:	2f00      	cmp	r7, #0
 80080ac:	d143      	bne.n	8008136 <_malloc_r+0xd6>
 80080ae:	2c00      	cmp	r4, #0
 80080b0:	d04b      	beq.n	800814a <_malloc_r+0xea>
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	4639      	mov	r1, r7
 80080b6:	4630      	mov	r0, r6
 80080b8:	eb04 0903 	add.w	r9, r4, r3
 80080bc:	f001 fdba 	bl	8009c34 <_sbrk_r>
 80080c0:	4581      	cmp	r9, r0
 80080c2:	d142      	bne.n	800814a <_malloc_r+0xea>
 80080c4:	6821      	ldr	r1, [r4, #0]
 80080c6:	1a6d      	subs	r5, r5, r1
 80080c8:	4629      	mov	r1, r5
 80080ca:	4630      	mov	r0, r6
 80080cc:	f7ff ffa6 	bl	800801c <sbrk_aligned>
 80080d0:	3001      	adds	r0, #1
 80080d2:	d03a      	beq.n	800814a <_malloc_r+0xea>
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	442b      	add	r3, r5
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	f8d8 3000 	ldr.w	r3, [r8]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	bb62      	cbnz	r2, 800813c <_malloc_r+0xdc>
 80080e2:	f8c8 7000 	str.w	r7, [r8]
 80080e6:	e00f      	b.n	8008108 <_malloc_r+0xa8>
 80080e8:	6822      	ldr	r2, [r4, #0]
 80080ea:	1b52      	subs	r2, r2, r5
 80080ec:	d420      	bmi.n	8008130 <_malloc_r+0xd0>
 80080ee:	2a0b      	cmp	r2, #11
 80080f0:	d917      	bls.n	8008122 <_malloc_r+0xc2>
 80080f2:	1961      	adds	r1, r4, r5
 80080f4:	42a3      	cmp	r3, r4
 80080f6:	6025      	str	r5, [r4, #0]
 80080f8:	bf18      	it	ne
 80080fa:	6059      	strne	r1, [r3, #4]
 80080fc:	6863      	ldr	r3, [r4, #4]
 80080fe:	bf08      	it	eq
 8008100:	f8c8 1000 	streq.w	r1, [r8]
 8008104:	5162      	str	r2, [r4, r5]
 8008106:	604b      	str	r3, [r1, #4]
 8008108:	4630      	mov	r0, r6
 800810a:	f000 f82f 	bl	800816c <__malloc_unlock>
 800810e:	f104 000b 	add.w	r0, r4, #11
 8008112:	1d23      	adds	r3, r4, #4
 8008114:	f020 0007 	bic.w	r0, r0, #7
 8008118:	1ac2      	subs	r2, r0, r3
 800811a:	bf1c      	itt	ne
 800811c:	1a1b      	subne	r3, r3, r0
 800811e:	50a3      	strne	r3, [r4, r2]
 8008120:	e7af      	b.n	8008082 <_malloc_r+0x22>
 8008122:	6862      	ldr	r2, [r4, #4]
 8008124:	42a3      	cmp	r3, r4
 8008126:	bf0c      	ite	eq
 8008128:	f8c8 2000 	streq.w	r2, [r8]
 800812c:	605a      	strne	r2, [r3, #4]
 800812e:	e7eb      	b.n	8008108 <_malloc_r+0xa8>
 8008130:	4623      	mov	r3, r4
 8008132:	6864      	ldr	r4, [r4, #4]
 8008134:	e7ae      	b.n	8008094 <_malloc_r+0x34>
 8008136:	463c      	mov	r4, r7
 8008138:	687f      	ldr	r7, [r7, #4]
 800813a:	e7b6      	b.n	80080aa <_malloc_r+0x4a>
 800813c:	461a      	mov	r2, r3
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	42a3      	cmp	r3, r4
 8008142:	d1fb      	bne.n	800813c <_malloc_r+0xdc>
 8008144:	2300      	movs	r3, #0
 8008146:	6053      	str	r3, [r2, #4]
 8008148:	e7de      	b.n	8008108 <_malloc_r+0xa8>
 800814a:	230c      	movs	r3, #12
 800814c:	6033      	str	r3, [r6, #0]
 800814e:	4630      	mov	r0, r6
 8008150:	f000 f80c 	bl	800816c <__malloc_unlock>
 8008154:	e794      	b.n	8008080 <_malloc_r+0x20>
 8008156:	6005      	str	r5, [r0, #0]
 8008158:	e7d6      	b.n	8008108 <_malloc_r+0xa8>
 800815a:	bf00      	nop
 800815c:	200009f8 	.word	0x200009f8

08008160 <__malloc_lock>:
 8008160:	4801      	ldr	r0, [pc, #4]	@ (8008168 <__malloc_lock+0x8>)
 8008162:	f7ff b898 	b.w	8007296 <__retarget_lock_acquire_recursive>
 8008166:	bf00      	nop
 8008168:	200009f0 	.word	0x200009f0

0800816c <__malloc_unlock>:
 800816c:	4801      	ldr	r0, [pc, #4]	@ (8008174 <__malloc_unlock+0x8>)
 800816e:	f7ff b893 	b.w	8007298 <__retarget_lock_release_recursive>
 8008172:	bf00      	nop
 8008174:	200009f0 	.word	0x200009f0

08008178 <_Balloc>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	69c6      	ldr	r6, [r0, #28]
 800817c:	4604      	mov	r4, r0
 800817e:	460d      	mov	r5, r1
 8008180:	b976      	cbnz	r6, 80081a0 <_Balloc+0x28>
 8008182:	2010      	movs	r0, #16
 8008184:	f7ff ff42 	bl	800800c <malloc>
 8008188:	4602      	mov	r2, r0
 800818a:	61e0      	str	r0, [r4, #28]
 800818c:	b920      	cbnz	r0, 8008198 <_Balloc+0x20>
 800818e:	4b18      	ldr	r3, [pc, #96]	@ (80081f0 <_Balloc+0x78>)
 8008190:	4818      	ldr	r0, [pc, #96]	@ (80081f4 <_Balloc+0x7c>)
 8008192:	216b      	movs	r1, #107	@ 0x6b
 8008194:	f001 fd68 	bl	8009c68 <__assert_func>
 8008198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800819c:	6006      	str	r6, [r0, #0]
 800819e:	60c6      	str	r6, [r0, #12]
 80081a0:	69e6      	ldr	r6, [r4, #28]
 80081a2:	68f3      	ldr	r3, [r6, #12]
 80081a4:	b183      	cbz	r3, 80081c8 <_Balloc+0x50>
 80081a6:	69e3      	ldr	r3, [r4, #28]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081ae:	b9b8      	cbnz	r0, 80081e0 <_Balloc+0x68>
 80081b0:	2101      	movs	r1, #1
 80081b2:	fa01 f605 	lsl.w	r6, r1, r5
 80081b6:	1d72      	adds	r2, r6, #5
 80081b8:	0092      	lsls	r2, r2, #2
 80081ba:	4620      	mov	r0, r4
 80081bc:	f001 fd72 	bl	8009ca4 <_calloc_r>
 80081c0:	b160      	cbz	r0, 80081dc <_Balloc+0x64>
 80081c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081c6:	e00e      	b.n	80081e6 <_Balloc+0x6e>
 80081c8:	2221      	movs	r2, #33	@ 0x21
 80081ca:	2104      	movs	r1, #4
 80081cc:	4620      	mov	r0, r4
 80081ce:	f001 fd69 	bl	8009ca4 <_calloc_r>
 80081d2:	69e3      	ldr	r3, [r4, #28]
 80081d4:	60f0      	str	r0, [r6, #12]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e4      	bne.n	80081a6 <_Balloc+0x2e>
 80081dc:	2000      	movs	r0, #0
 80081de:	bd70      	pop	{r4, r5, r6, pc}
 80081e0:	6802      	ldr	r2, [r0, #0]
 80081e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081e6:	2300      	movs	r3, #0
 80081e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081ec:	e7f7      	b.n	80081de <_Balloc+0x66>
 80081ee:	bf00      	nop
 80081f0:	0800acba 	.word	0x0800acba
 80081f4:	0800ad3a 	.word	0x0800ad3a

080081f8 <_Bfree>:
 80081f8:	b570      	push	{r4, r5, r6, lr}
 80081fa:	69c6      	ldr	r6, [r0, #28]
 80081fc:	4605      	mov	r5, r0
 80081fe:	460c      	mov	r4, r1
 8008200:	b976      	cbnz	r6, 8008220 <_Bfree+0x28>
 8008202:	2010      	movs	r0, #16
 8008204:	f7ff ff02 	bl	800800c <malloc>
 8008208:	4602      	mov	r2, r0
 800820a:	61e8      	str	r0, [r5, #28]
 800820c:	b920      	cbnz	r0, 8008218 <_Bfree+0x20>
 800820e:	4b09      	ldr	r3, [pc, #36]	@ (8008234 <_Bfree+0x3c>)
 8008210:	4809      	ldr	r0, [pc, #36]	@ (8008238 <_Bfree+0x40>)
 8008212:	218f      	movs	r1, #143	@ 0x8f
 8008214:	f001 fd28 	bl	8009c68 <__assert_func>
 8008218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800821c:	6006      	str	r6, [r0, #0]
 800821e:	60c6      	str	r6, [r0, #12]
 8008220:	b13c      	cbz	r4, 8008232 <_Bfree+0x3a>
 8008222:	69eb      	ldr	r3, [r5, #28]
 8008224:	6862      	ldr	r2, [r4, #4]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800822c:	6021      	str	r1, [r4, #0]
 800822e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008232:	bd70      	pop	{r4, r5, r6, pc}
 8008234:	0800acba 	.word	0x0800acba
 8008238:	0800ad3a 	.word	0x0800ad3a

0800823c <__multadd>:
 800823c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008240:	690d      	ldr	r5, [r1, #16]
 8008242:	4607      	mov	r7, r0
 8008244:	460c      	mov	r4, r1
 8008246:	461e      	mov	r6, r3
 8008248:	f101 0c14 	add.w	ip, r1, #20
 800824c:	2000      	movs	r0, #0
 800824e:	f8dc 3000 	ldr.w	r3, [ip]
 8008252:	b299      	uxth	r1, r3
 8008254:	fb02 6101 	mla	r1, r2, r1, r6
 8008258:	0c1e      	lsrs	r6, r3, #16
 800825a:	0c0b      	lsrs	r3, r1, #16
 800825c:	fb02 3306 	mla	r3, r2, r6, r3
 8008260:	b289      	uxth	r1, r1
 8008262:	3001      	adds	r0, #1
 8008264:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008268:	4285      	cmp	r5, r0
 800826a:	f84c 1b04 	str.w	r1, [ip], #4
 800826e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008272:	dcec      	bgt.n	800824e <__multadd+0x12>
 8008274:	b30e      	cbz	r6, 80082ba <__multadd+0x7e>
 8008276:	68a3      	ldr	r3, [r4, #8]
 8008278:	42ab      	cmp	r3, r5
 800827a:	dc19      	bgt.n	80082b0 <__multadd+0x74>
 800827c:	6861      	ldr	r1, [r4, #4]
 800827e:	4638      	mov	r0, r7
 8008280:	3101      	adds	r1, #1
 8008282:	f7ff ff79 	bl	8008178 <_Balloc>
 8008286:	4680      	mov	r8, r0
 8008288:	b928      	cbnz	r0, 8008296 <__multadd+0x5a>
 800828a:	4602      	mov	r2, r0
 800828c:	4b0c      	ldr	r3, [pc, #48]	@ (80082c0 <__multadd+0x84>)
 800828e:	480d      	ldr	r0, [pc, #52]	@ (80082c4 <__multadd+0x88>)
 8008290:	21ba      	movs	r1, #186	@ 0xba
 8008292:	f001 fce9 	bl	8009c68 <__assert_func>
 8008296:	6922      	ldr	r2, [r4, #16]
 8008298:	3202      	adds	r2, #2
 800829a:	f104 010c 	add.w	r1, r4, #12
 800829e:	0092      	lsls	r2, r2, #2
 80082a0:	300c      	adds	r0, #12
 80082a2:	f7fe fffa 	bl	800729a <memcpy>
 80082a6:	4621      	mov	r1, r4
 80082a8:	4638      	mov	r0, r7
 80082aa:	f7ff ffa5 	bl	80081f8 <_Bfree>
 80082ae:	4644      	mov	r4, r8
 80082b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082b4:	3501      	adds	r5, #1
 80082b6:	615e      	str	r6, [r3, #20]
 80082b8:	6125      	str	r5, [r4, #16]
 80082ba:	4620      	mov	r0, r4
 80082bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082c0:	0800ad29 	.word	0x0800ad29
 80082c4:	0800ad3a 	.word	0x0800ad3a

080082c8 <__s2b>:
 80082c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082cc:	460c      	mov	r4, r1
 80082ce:	4615      	mov	r5, r2
 80082d0:	461f      	mov	r7, r3
 80082d2:	2209      	movs	r2, #9
 80082d4:	3308      	adds	r3, #8
 80082d6:	4606      	mov	r6, r0
 80082d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80082dc:	2100      	movs	r1, #0
 80082de:	2201      	movs	r2, #1
 80082e0:	429a      	cmp	r2, r3
 80082e2:	db09      	blt.n	80082f8 <__s2b+0x30>
 80082e4:	4630      	mov	r0, r6
 80082e6:	f7ff ff47 	bl	8008178 <_Balloc>
 80082ea:	b940      	cbnz	r0, 80082fe <__s2b+0x36>
 80082ec:	4602      	mov	r2, r0
 80082ee:	4b19      	ldr	r3, [pc, #100]	@ (8008354 <__s2b+0x8c>)
 80082f0:	4819      	ldr	r0, [pc, #100]	@ (8008358 <__s2b+0x90>)
 80082f2:	21d3      	movs	r1, #211	@ 0xd3
 80082f4:	f001 fcb8 	bl	8009c68 <__assert_func>
 80082f8:	0052      	lsls	r2, r2, #1
 80082fa:	3101      	adds	r1, #1
 80082fc:	e7f0      	b.n	80082e0 <__s2b+0x18>
 80082fe:	9b08      	ldr	r3, [sp, #32]
 8008300:	6143      	str	r3, [r0, #20]
 8008302:	2d09      	cmp	r5, #9
 8008304:	f04f 0301 	mov.w	r3, #1
 8008308:	6103      	str	r3, [r0, #16]
 800830a:	dd16      	ble.n	800833a <__s2b+0x72>
 800830c:	f104 0909 	add.w	r9, r4, #9
 8008310:	46c8      	mov	r8, r9
 8008312:	442c      	add	r4, r5
 8008314:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008318:	4601      	mov	r1, r0
 800831a:	3b30      	subs	r3, #48	@ 0x30
 800831c:	220a      	movs	r2, #10
 800831e:	4630      	mov	r0, r6
 8008320:	f7ff ff8c 	bl	800823c <__multadd>
 8008324:	45a0      	cmp	r8, r4
 8008326:	d1f5      	bne.n	8008314 <__s2b+0x4c>
 8008328:	f1a5 0408 	sub.w	r4, r5, #8
 800832c:	444c      	add	r4, r9
 800832e:	1b2d      	subs	r5, r5, r4
 8008330:	1963      	adds	r3, r4, r5
 8008332:	42bb      	cmp	r3, r7
 8008334:	db04      	blt.n	8008340 <__s2b+0x78>
 8008336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800833a:	340a      	adds	r4, #10
 800833c:	2509      	movs	r5, #9
 800833e:	e7f6      	b.n	800832e <__s2b+0x66>
 8008340:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008344:	4601      	mov	r1, r0
 8008346:	3b30      	subs	r3, #48	@ 0x30
 8008348:	220a      	movs	r2, #10
 800834a:	4630      	mov	r0, r6
 800834c:	f7ff ff76 	bl	800823c <__multadd>
 8008350:	e7ee      	b.n	8008330 <__s2b+0x68>
 8008352:	bf00      	nop
 8008354:	0800ad29 	.word	0x0800ad29
 8008358:	0800ad3a 	.word	0x0800ad3a

0800835c <__hi0bits>:
 800835c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008360:	4603      	mov	r3, r0
 8008362:	bf36      	itet	cc
 8008364:	0403      	lslcc	r3, r0, #16
 8008366:	2000      	movcs	r0, #0
 8008368:	2010      	movcc	r0, #16
 800836a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800836e:	bf3c      	itt	cc
 8008370:	021b      	lslcc	r3, r3, #8
 8008372:	3008      	addcc	r0, #8
 8008374:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008378:	bf3c      	itt	cc
 800837a:	011b      	lslcc	r3, r3, #4
 800837c:	3004      	addcc	r0, #4
 800837e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008382:	bf3c      	itt	cc
 8008384:	009b      	lslcc	r3, r3, #2
 8008386:	3002      	addcc	r0, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	db05      	blt.n	8008398 <__hi0bits+0x3c>
 800838c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008390:	f100 0001 	add.w	r0, r0, #1
 8008394:	bf08      	it	eq
 8008396:	2020      	moveq	r0, #32
 8008398:	4770      	bx	lr

0800839a <__lo0bits>:
 800839a:	6803      	ldr	r3, [r0, #0]
 800839c:	4602      	mov	r2, r0
 800839e:	f013 0007 	ands.w	r0, r3, #7
 80083a2:	d00b      	beq.n	80083bc <__lo0bits+0x22>
 80083a4:	07d9      	lsls	r1, r3, #31
 80083a6:	d421      	bmi.n	80083ec <__lo0bits+0x52>
 80083a8:	0798      	lsls	r0, r3, #30
 80083aa:	bf49      	itett	mi
 80083ac:	085b      	lsrmi	r3, r3, #1
 80083ae:	089b      	lsrpl	r3, r3, #2
 80083b0:	2001      	movmi	r0, #1
 80083b2:	6013      	strmi	r3, [r2, #0]
 80083b4:	bf5c      	itt	pl
 80083b6:	6013      	strpl	r3, [r2, #0]
 80083b8:	2002      	movpl	r0, #2
 80083ba:	4770      	bx	lr
 80083bc:	b299      	uxth	r1, r3
 80083be:	b909      	cbnz	r1, 80083c4 <__lo0bits+0x2a>
 80083c0:	0c1b      	lsrs	r3, r3, #16
 80083c2:	2010      	movs	r0, #16
 80083c4:	b2d9      	uxtb	r1, r3
 80083c6:	b909      	cbnz	r1, 80083cc <__lo0bits+0x32>
 80083c8:	3008      	adds	r0, #8
 80083ca:	0a1b      	lsrs	r3, r3, #8
 80083cc:	0719      	lsls	r1, r3, #28
 80083ce:	bf04      	itt	eq
 80083d0:	091b      	lsreq	r3, r3, #4
 80083d2:	3004      	addeq	r0, #4
 80083d4:	0799      	lsls	r1, r3, #30
 80083d6:	bf04      	itt	eq
 80083d8:	089b      	lsreq	r3, r3, #2
 80083da:	3002      	addeq	r0, #2
 80083dc:	07d9      	lsls	r1, r3, #31
 80083de:	d403      	bmi.n	80083e8 <__lo0bits+0x4e>
 80083e0:	085b      	lsrs	r3, r3, #1
 80083e2:	f100 0001 	add.w	r0, r0, #1
 80083e6:	d003      	beq.n	80083f0 <__lo0bits+0x56>
 80083e8:	6013      	str	r3, [r2, #0]
 80083ea:	4770      	bx	lr
 80083ec:	2000      	movs	r0, #0
 80083ee:	4770      	bx	lr
 80083f0:	2020      	movs	r0, #32
 80083f2:	4770      	bx	lr

080083f4 <__i2b>:
 80083f4:	b510      	push	{r4, lr}
 80083f6:	460c      	mov	r4, r1
 80083f8:	2101      	movs	r1, #1
 80083fa:	f7ff febd 	bl	8008178 <_Balloc>
 80083fe:	4602      	mov	r2, r0
 8008400:	b928      	cbnz	r0, 800840e <__i2b+0x1a>
 8008402:	4b05      	ldr	r3, [pc, #20]	@ (8008418 <__i2b+0x24>)
 8008404:	4805      	ldr	r0, [pc, #20]	@ (800841c <__i2b+0x28>)
 8008406:	f240 1145 	movw	r1, #325	@ 0x145
 800840a:	f001 fc2d 	bl	8009c68 <__assert_func>
 800840e:	2301      	movs	r3, #1
 8008410:	6144      	str	r4, [r0, #20]
 8008412:	6103      	str	r3, [r0, #16]
 8008414:	bd10      	pop	{r4, pc}
 8008416:	bf00      	nop
 8008418:	0800ad29 	.word	0x0800ad29
 800841c:	0800ad3a 	.word	0x0800ad3a

08008420 <__multiply>:
 8008420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008424:	4617      	mov	r7, r2
 8008426:	690a      	ldr	r2, [r1, #16]
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	429a      	cmp	r2, r3
 800842c:	bfa8      	it	ge
 800842e:	463b      	movge	r3, r7
 8008430:	4689      	mov	r9, r1
 8008432:	bfa4      	itt	ge
 8008434:	460f      	movge	r7, r1
 8008436:	4699      	movge	r9, r3
 8008438:	693d      	ldr	r5, [r7, #16]
 800843a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	6879      	ldr	r1, [r7, #4]
 8008442:	eb05 060a 	add.w	r6, r5, sl
 8008446:	42b3      	cmp	r3, r6
 8008448:	b085      	sub	sp, #20
 800844a:	bfb8      	it	lt
 800844c:	3101      	addlt	r1, #1
 800844e:	f7ff fe93 	bl	8008178 <_Balloc>
 8008452:	b930      	cbnz	r0, 8008462 <__multiply+0x42>
 8008454:	4602      	mov	r2, r0
 8008456:	4b41      	ldr	r3, [pc, #260]	@ (800855c <__multiply+0x13c>)
 8008458:	4841      	ldr	r0, [pc, #260]	@ (8008560 <__multiply+0x140>)
 800845a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800845e:	f001 fc03 	bl	8009c68 <__assert_func>
 8008462:	f100 0414 	add.w	r4, r0, #20
 8008466:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800846a:	4623      	mov	r3, r4
 800846c:	2200      	movs	r2, #0
 800846e:	4573      	cmp	r3, lr
 8008470:	d320      	bcc.n	80084b4 <__multiply+0x94>
 8008472:	f107 0814 	add.w	r8, r7, #20
 8008476:	f109 0114 	add.w	r1, r9, #20
 800847a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800847e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008482:	9302      	str	r3, [sp, #8]
 8008484:	1beb      	subs	r3, r5, r7
 8008486:	3b15      	subs	r3, #21
 8008488:	f023 0303 	bic.w	r3, r3, #3
 800848c:	3304      	adds	r3, #4
 800848e:	3715      	adds	r7, #21
 8008490:	42bd      	cmp	r5, r7
 8008492:	bf38      	it	cc
 8008494:	2304      	movcc	r3, #4
 8008496:	9301      	str	r3, [sp, #4]
 8008498:	9b02      	ldr	r3, [sp, #8]
 800849a:	9103      	str	r1, [sp, #12]
 800849c:	428b      	cmp	r3, r1
 800849e:	d80c      	bhi.n	80084ba <__multiply+0x9a>
 80084a0:	2e00      	cmp	r6, #0
 80084a2:	dd03      	ble.n	80084ac <__multiply+0x8c>
 80084a4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d055      	beq.n	8008558 <__multiply+0x138>
 80084ac:	6106      	str	r6, [r0, #16]
 80084ae:	b005      	add	sp, #20
 80084b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b4:	f843 2b04 	str.w	r2, [r3], #4
 80084b8:	e7d9      	b.n	800846e <__multiply+0x4e>
 80084ba:	f8b1 a000 	ldrh.w	sl, [r1]
 80084be:	f1ba 0f00 	cmp.w	sl, #0
 80084c2:	d01f      	beq.n	8008504 <__multiply+0xe4>
 80084c4:	46c4      	mov	ip, r8
 80084c6:	46a1      	mov	r9, r4
 80084c8:	2700      	movs	r7, #0
 80084ca:	f85c 2b04 	ldr.w	r2, [ip], #4
 80084ce:	f8d9 3000 	ldr.w	r3, [r9]
 80084d2:	fa1f fb82 	uxth.w	fp, r2
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80084dc:	443b      	add	r3, r7
 80084de:	f8d9 7000 	ldr.w	r7, [r9]
 80084e2:	0c12      	lsrs	r2, r2, #16
 80084e4:	0c3f      	lsrs	r7, r7, #16
 80084e6:	fb0a 7202 	mla	r2, sl, r2, r7
 80084ea:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084f4:	4565      	cmp	r5, ip
 80084f6:	f849 3b04 	str.w	r3, [r9], #4
 80084fa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80084fe:	d8e4      	bhi.n	80084ca <__multiply+0xaa>
 8008500:	9b01      	ldr	r3, [sp, #4]
 8008502:	50e7      	str	r7, [r4, r3]
 8008504:	9b03      	ldr	r3, [sp, #12]
 8008506:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800850a:	3104      	adds	r1, #4
 800850c:	f1b9 0f00 	cmp.w	r9, #0
 8008510:	d020      	beq.n	8008554 <__multiply+0x134>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	4647      	mov	r7, r8
 8008516:	46a4      	mov	ip, r4
 8008518:	f04f 0a00 	mov.w	sl, #0
 800851c:	f8b7 b000 	ldrh.w	fp, [r7]
 8008520:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008524:	fb09 220b 	mla	r2, r9, fp, r2
 8008528:	4452      	add	r2, sl
 800852a:	b29b      	uxth	r3, r3
 800852c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008530:	f84c 3b04 	str.w	r3, [ip], #4
 8008534:	f857 3b04 	ldr.w	r3, [r7], #4
 8008538:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800853c:	f8bc 3000 	ldrh.w	r3, [ip]
 8008540:	fb09 330a 	mla	r3, r9, sl, r3
 8008544:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008548:	42bd      	cmp	r5, r7
 800854a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800854e:	d8e5      	bhi.n	800851c <__multiply+0xfc>
 8008550:	9a01      	ldr	r2, [sp, #4]
 8008552:	50a3      	str	r3, [r4, r2]
 8008554:	3404      	adds	r4, #4
 8008556:	e79f      	b.n	8008498 <__multiply+0x78>
 8008558:	3e01      	subs	r6, #1
 800855a:	e7a1      	b.n	80084a0 <__multiply+0x80>
 800855c:	0800ad29 	.word	0x0800ad29
 8008560:	0800ad3a 	.word	0x0800ad3a

08008564 <__pow5mult>:
 8008564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008568:	4615      	mov	r5, r2
 800856a:	f012 0203 	ands.w	r2, r2, #3
 800856e:	4607      	mov	r7, r0
 8008570:	460e      	mov	r6, r1
 8008572:	d007      	beq.n	8008584 <__pow5mult+0x20>
 8008574:	4c25      	ldr	r4, [pc, #148]	@ (800860c <__pow5mult+0xa8>)
 8008576:	3a01      	subs	r2, #1
 8008578:	2300      	movs	r3, #0
 800857a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800857e:	f7ff fe5d 	bl	800823c <__multadd>
 8008582:	4606      	mov	r6, r0
 8008584:	10ad      	asrs	r5, r5, #2
 8008586:	d03d      	beq.n	8008604 <__pow5mult+0xa0>
 8008588:	69fc      	ldr	r4, [r7, #28]
 800858a:	b97c      	cbnz	r4, 80085ac <__pow5mult+0x48>
 800858c:	2010      	movs	r0, #16
 800858e:	f7ff fd3d 	bl	800800c <malloc>
 8008592:	4602      	mov	r2, r0
 8008594:	61f8      	str	r0, [r7, #28]
 8008596:	b928      	cbnz	r0, 80085a4 <__pow5mult+0x40>
 8008598:	4b1d      	ldr	r3, [pc, #116]	@ (8008610 <__pow5mult+0xac>)
 800859a:	481e      	ldr	r0, [pc, #120]	@ (8008614 <__pow5mult+0xb0>)
 800859c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80085a0:	f001 fb62 	bl	8009c68 <__assert_func>
 80085a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085a8:	6004      	str	r4, [r0, #0]
 80085aa:	60c4      	str	r4, [r0, #12]
 80085ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80085b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085b4:	b94c      	cbnz	r4, 80085ca <__pow5mult+0x66>
 80085b6:	f240 2171 	movw	r1, #625	@ 0x271
 80085ba:	4638      	mov	r0, r7
 80085bc:	f7ff ff1a 	bl	80083f4 <__i2b>
 80085c0:	2300      	movs	r3, #0
 80085c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80085c6:	4604      	mov	r4, r0
 80085c8:	6003      	str	r3, [r0, #0]
 80085ca:	f04f 0900 	mov.w	r9, #0
 80085ce:	07eb      	lsls	r3, r5, #31
 80085d0:	d50a      	bpl.n	80085e8 <__pow5mult+0x84>
 80085d2:	4631      	mov	r1, r6
 80085d4:	4622      	mov	r2, r4
 80085d6:	4638      	mov	r0, r7
 80085d8:	f7ff ff22 	bl	8008420 <__multiply>
 80085dc:	4631      	mov	r1, r6
 80085de:	4680      	mov	r8, r0
 80085e0:	4638      	mov	r0, r7
 80085e2:	f7ff fe09 	bl	80081f8 <_Bfree>
 80085e6:	4646      	mov	r6, r8
 80085e8:	106d      	asrs	r5, r5, #1
 80085ea:	d00b      	beq.n	8008604 <__pow5mult+0xa0>
 80085ec:	6820      	ldr	r0, [r4, #0]
 80085ee:	b938      	cbnz	r0, 8008600 <__pow5mult+0x9c>
 80085f0:	4622      	mov	r2, r4
 80085f2:	4621      	mov	r1, r4
 80085f4:	4638      	mov	r0, r7
 80085f6:	f7ff ff13 	bl	8008420 <__multiply>
 80085fa:	6020      	str	r0, [r4, #0]
 80085fc:	f8c0 9000 	str.w	r9, [r0]
 8008600:	4604      	mov	r4, r0
 8008602:	e7e4      	b.n	80085ce <__pow5mult+0x6a>
 8008604:	4630      	mov	r0, r6
 8008606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800860a:	bf00      	nop
 800860c:	0800ae4c 	.word	0x0800ae4c
 8008610:	0800acba 	.word	0x0800acba
 8008614:	0800ad3a 	.word	0x0800ad3a

08008618 <__lshift>:
 8008618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800861c:	460c      	mov	r4, r1
 800861e:	6849      	ldr	r1, [r1, #4]
 8008620:	6923      	ldr	r3, [r4, #16]
 8008622:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008626:	68a3      	ldr	r3, [r4, #8]
 8008628:	4607      	mov	r7, r0
 800862a:	4691      	mov	r9, r2
 800862c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008630:	f108 0601 	add.w	r6, r8, #1
 8008634:	42b3      	cmp	r3, r6
 8008636:	db0b      	blt.n	8008650 <__lshift+0x38>
 8008638:	4638      	mov	r0, r7
 800863a:	f7ff fd9d 	bl	8008178 <_Balloc>
 800863e:	4605      	mov	r5, r0
 8008640:	b948      	cbnz	r0, 8008656 <__lshift+0x3e>
 8008642:	4602      	mov	r2, r0
 8008644:	4b28      	ldr	r3, [pc, #160]	@ (80086e8 <__lshift+0xd0>)
 8008646:	4829      	ldr	r0, [pc, #164]	@ (80086ec <__lshift+0xd4>)
 8008648:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800864c:	f001 fb0c 	bl	8009c68 <__assert_func>
 8008650:	3101      	adds	r1, #1
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	e7ee      	b.n	8008634 <__lshift+0x1c>
 8008656:	2300      	movs	r3, #0
 8008658:	f100 0114 	add.w	r1, r0, #20
 800865c:	f100 0210 	add.w	r2, r0, #16
 8008660:	4618      	mov	r0, r3
 8008662:	4553      	cmp	r3, sl
 8008664:	db33      	blt.n	80086ce <__lshift+0xb6>
 8008666:	6920      	ldr	r0, [r4, #16]
 8008668:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800866c:	f104 0314 	add.w	r3, r4, #20
 8008670:	f019 091f 	ands.w	r9, r9, #31
 8008674:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008678:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800867c:	d02b      	beq.n	80086d6 <__lshift+0xbe>
 800867e:	f1c9 0e20 	rsb	lr, r9, #32
 8008682:	468a      	mov	sl, r1
 8008684:	2200      	movs	r2, #0
 8008686:	6818      	ldr	r0, [r3, #0]
 8008688:	fa00 f009 	lsl.w	r0, r0, r9
 800868c:	4310      	orrs	r0, r2
 800868e:	f84a 0b04 	str.w	r0, [sl], #4
 8008692:	f853 2b04 	ldr.w	r2, [r3], #4
 8008696:	459c      	cmp	ip, r3
 8008698:	fa22 f20e 	lsr.w	r2, r2, lr
 800869c:	d8f3      	bhi.n	8008686 <__lshift+0x6e>
 800869e:	ebac 0304 	sub.w	r3, ip, r4
 80086a2:	3b15      	subs	r3, #21
 80086a4:	f023 0303 	bic.w	r3, r3, #3
 80086a8:	3304      	adds	r3, #4
 80086aa:	f104 0015 	add.w	r0, r4, #21
 80086ae:	4560      	cmp	r0, ip
 80086b0:	bf88      	it	hi
 80086b2:	2304      	movhi	r3, #4
 80086b4:	50ca      	str	r2, [r1, r3]
 80086b6:	b10a      	cbz	r2, 80086bc <__lshift+0xa4>
 80086b8:	f108 0602 	add.w	r6, r8, #2
 80086bc:	3e01      	subs	r6, #1
 80086be:	4638      	mov	r0, r7
 80086c0:	612e      	str	r6, [r5, #16]
 80086c2:	4621      	mov	r1, r4
 80086c4:	f7ff fd98 	bl	80081f8 <_Bfree>
 80086c8:	4628      	mov	r0, r5
 80086ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80086d2:	3301      	adds	r3, #1
 80086d4:	e7c5      	b.n	8008662 <__lshift+0x4a>
 80086d6:	3904      	subs	r1, #4
 80086d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80086e0:	459c      	cmp	ip, r3
 80086e2:	d8f9      	bhi.n	80086d8 <__lshift+0xc0>
 80086e4:	e7ea      	b.n	80086bc <__lshift+0xa4>
 80086e6:	bf00      	nop
 80086e8:	0800ad29 	.word	0x0800ad29
 80086ec:	0800ad3a 	.word	0x0800ad3a

080086f0 <__mcmp>:
 80086f0:	690a      	ldr	r2, [r1, #16]
 80086f2:	4603      	mov	r3, r0
 80086f4:	6900      	ldr	r0, [r0, #16]
 80086f6:	1a80      	subs	r0, r0, r2
 80086f8:	b530      	push	{r4, r5, lr}
 80086fa:	d10e      	bne.n	800871a <__mcmp+0x2a>
 80086fc:	3314      	adds	r3, #20
 80086fe:	3114      	adds	r1, #20
 8008700:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008704:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008708:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800870c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008710:	4295      	cmp	r5, r2
 8008712:	d003      	beq.n	800871c <__mcmp+0x2c>
 8008714:	d205      	bcs.n	8008722 <__mcmp+0x32>
 8008716:	f04f 30ff 	mov.w	r0, #4294967295
 800871a:	bd30      	pop	{r4, r5, pc}
 800871c:	42a3      	cmp	r3, r4
 800871e:	d3f3      	bcc.n	8008708 <__mcmp+0x18>
 8008720:	e7fb      	b.n	800871a <__mcmp+0x2a>
 8008722:	2001      	movs	r0, #1
 8008724:	e7f9      	b.n	800871a <__mcmp+0x2a>
	...

08008728 <__mdiff>:
 8008728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	4689      	mov	r9, r1
 800872e:	4606      	mov	r6, r0
 8008730:	4611      	mov	r1, r2
 8008732:	4648      	mov	r0, r9
 8008734:	4614      	mov	r4, r2
 8008736:	f7ff ffdb 	bl	80086f0 <__mcmp>
 800873a:	1e05      	subs	r5, r0, #0
 800873c:	d112      	bne.n	8008764 <__mdiff+0x3c>
 800873e:	4629      	mov	r1, r5
 8008740:	4630      	mov	r0, r6
 8008742:	f7ff fd19 	bl	8008178 <_Balloc>
 8008746:	4602      	mov	r2, r0
 8008748:	b928      	cbnz	r0, 8008756 <__mdiff+0x2e>
 800874a:	4b3f      	ldr	r3, [pc, #252]	@ (8008848 <__mdiff+0x120>)
 800874c:	f240 2137 	movw	r1, #567	@ 0x237
 8008750:	483e      	ldr	r0, [pc, #248]	@ (800884c <__mdiff+0x124>)
 8008752:	f001 fa89 	bl	8009c68 <__assert_func>
 8008756:	2301      	movs	r3, #1
 8008758:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800875c:	4610      	mov	r0, r2
 800875e:	b003      	add	sp, #12
 8008760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008764:	bfbc      	itt	lt
 8008766:	464b      	movlt	r3, r9
 8008768:	46a1      	movlt	r9, r4
 800876a:	4630      	mov	r0, r6
 800876c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008770:	bfba      	itte	lt
 8008772:	461c      	movlt	r4, r3
 8008774:	2501      	movlt	r5, #1
 8008776:	2500      	movge	r5, #0
 8008778:	f7ff fcfe 	bl	8008178 <_Balloc>
 800877c:	4602      	mov	r2, r0
 800877e:	b918      	cbnz	r0, 8008788 <__mdiff+0x60>
 8008780:	4b31      	ldr	r3, [pc, #196]	@ (8008848 <__mdiff+0x120>)
 8008782:	f240 2145 	movw	r1, #581	@ 0x245
 8008786:	e7e3      	b.n	8008750 <__mdiff+0x28>
 8008788:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800878c:	6926      	ldr	r6, [r4, #16]
 800878e:	60c5      	str	r5, [r0, #12]
 8008790:	f109 0310 	add.w	r3, r9, #16
 8008794:	f109 0514 	add.w	r5, r9, #20
 8008798:	f104 0e14 	add.w	lr, r4, #20
 800879c:	f100 0b14 	add.w	fp, r0, #20
 80087a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80087a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80087a8:	9301      	str	r3, [sp, #4]
 80087aa:	46d9      	mov	r9, fp
 80087ac:	f04f 0c00 	mov.w	ip, #0
 80087b0:	9b01      	ldr	r3, [sp, #4]
 80087b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80087b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80087ba:	9301      	str	r3, [sp, #4]
 80087bc:	fa1f f38a 	uxth.w	r3, sl
 80087c0:	4619      	mov	r1, r3
 80087c2:	b283      	uxth	r3, r0
 80087c4:	1acb      	subs	r3, r1, r3
 80087c6:	0c00      	lsrs	r0, r0, #16
 80087c8:	4463      	add	r3, ip
 80087ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80087ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80087d8:	4576      	cmp	r6, lr
 80087da:	f849 3b04 	str.w	r3, [r9], #4
 80087de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80087e2:	d8e5      	bhi.n	80087b0 <__mdiff+0x88>
 80087e4:	1b33      	subs	r3, r6, r4
 80087e6:	3b15      	subs	r3, #21
 80087e8:	f023 0303 	bic.w	r3, r3, #3
 80087ec:	3415      	adds	r4, #21
 80087ee:	3304      	adds	r3, #4
 80087f0:	42a6      	cmp	r6, r4
 80087f2:	bf38      	it	cc
 80087f4:	2304      	movcc	r3, #4
 80087f6:	441d      	add	r5, r3
 80087f8:	445b      	add	r3, fp
 80087fa:	461e      	mov	r6, r3
 80087fc:	462c      	mov	r4, r5
 80087fe:	4544      	cmp	r4, r8
 8008800:	d30e      	bcc.n	8008820 <__mdiff+0xf8>
 8008802:	f108 0103 	add.w	r1, r8, #3
 8008806:	1b49      	subs	r1, r1, r5
 8008808:	f021 0103 	bic.w	r1, r1, #3
 800880c:	3d03      	subs	r5, #3
 800880e:	45a8      	cmp	r8, r5
 8008810:	bf38      	it	cc
 8008812:	2100      	movcc	r1, #0
 8008814:	440b      	add	r3, r1
 8008816:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800881a:	b191      	cbz	r1, 8008842 <__mdiff+0x11a>
 800881c:	6117      	str	r7, [r2, #16]
 800881e:	e79d      	b.n	800875c <__mdiff+0x34>
 8008820:	f854 1b04 	ldr.w	r1, [r4], #4
 8008824:	46e6      	mov	lr, ip
 8008826:	0c08      	lsrs	r0, r1, #16
 8008828:	fa1c fc81 	uxtah	ip, ip, r1
 800882c:	4471      	add	r1, lr
 800882e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008832:	b289      	uxth	r1, r1
 8008834:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008838:	f846 1b04 	str.w	r1, [r6], #4
 800883c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008840:	e7dd      	b.n	80087fe <__mdiff+0xd6>
 8008842:	3f01      	subs	r7, #1
 8008844:	e7e7      	b.n	8008816 <__mdiff+0xee>
 8008846:	bf00      	nop
 8008848:	0800ad29 	.word	0x0800ad29
 800884c:	0800ad3a 	.word	0x0800ad3a

08008850 <__ulp>:
 8008850:	b082      	sub	sp, #8
 8008852:	ed8d 0b00 	vstr	d0, [sp]
 8008856:	9a01      	ldr	r2, [sp, #4]
 8008858:	4b0f      	ldr	r3, [pc, #60]	@ (8008898 <__ulp+0x48>)
 800885a:	4013      	ands	r3, r2
 800885c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008860:	2b00      	cmp	r3, #0
 8008862:	dc08      	bgt.n	8008876 <__ulp+0x26>
 8008864:	425b      	negs	r3, r3
 8008866:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800886a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800886e:	da04      	bge.n	800887a <__ulp+0x2a>
 8008870:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008874:	4113      	asrs	r3, r2
 8008876:	2200      	movs	r2, #0
 8008878:	e008      	b.n	800888c <__ulp+0x3c>
 800887a:	f1a2 0314 	sub.w	r3, r2, #20
 800887e:	2b1e      	cmp	r3, #30
 8008880:	bfda      	itte	le
 8008882:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008886:	40da      	lsrle	r2, r3
 8008888:	2201      	movgt	r2, #1
 800888a:	2300      	movs	r3, #0
 800888c:	4619      	mov	r1, r3
 800888e:	4610      	mov	r0, r2
 8008890:	ec41 0b10 	vmov	d0, r0, r1
 8008894:	b002      	add	sp, #8
 8008896:	4770      	bx	lr
 8008898:	7ff00000 	.word	0x7ff00000

0800889c <__b2d>:
 800889c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a0:	6906      	ldr	r6, [r0, #16]
 80088a2:	f100 0814 	add.w	r8, r0, #20
 80088a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80088aa:	1f37      	subs	r7, r6, #4
 80088ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80088b0:	4610      	mov	r0, r2
 80088b2:	f7ff fd53 	bl	800835c <__hi0bits>
 80088b6:	f1c0 0320 	rsb	r3, r0, #32
 80088ba:	280a      	cmp	r0, #10
 80088bc:	600b      	str	r3, [r1, #0]
 80088be:	491b      	ldr	r1, [pc, #108]	@ (800892c <__b2d+0x90>)
 80088c0:	dc15      	bgt.n	80088ee <__b2d+0x52>
 80088c2:	f1c0 0c0b 	rsb	ip, r0, #11
 80088c6:	fa22 f30c 	lsr.w	r3, r2, ip
 80088ca:	45b8      	cmp	r8, r7
 80088cc:	ea43 0501 	orr.w	r5, r3, r1
 80088d0:	bf34      	ite	cc
 80088d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80088d6:	2300      	movcs	r3, #0
 80088d8:	3015      	adds	r0, #21
 80088da:	fa02 f000 	lsl.w	r0, r2, r0
 80088de:	fa23 f30c 	lsr.w	r3, r3, ip
 80088e2:	4303      	orrs	r3, r0
 80088e4:	461c      	mov	r4, r3
 80088e6:	ec45 4b10 	vmov	d0, r4, r5
 80088ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088ee:	45b8      	cmp	r8, r7
 80088f0:	bf3a      	itte	cc
 80088f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80088f6:	f1a6 0708 	subcc.w	r7, r6, #8
 80088fa:	2300      	movcs	r3, #0
 80088fc:	380b      	subs	r0, #11
 80088fe:	d012      	beq.n	8008926 <__b2d+0x8a>
 8008900:	f1c0 0120 	rsb	r1, r0, #32
 8008904:	fa23 f401 	lsr.w	r4, r3, r1
 8008908:	4082      	lsls	r2, r0
 800890a:	4322      	orrs	r2, r4
 800890c:	4547      	cmp	r7, r8
 800890e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008912:	bf8c      	ite	hi
 8008914:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008918:	2200      	movls	r2, #0
 800891a:	4083      	lsls	r3, r0
 800891c:	40ca      	lsrs	r2, r1
 800891e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008922:	4313      	orrs	r3, r2
 8008924:	e7de      	b.n	80088e4 <__b2d+0x48>
 8008926:	ea42 0501 	orr.w	r5, r2, r1
 800892a:	e7db      	b.n	80088e4 <__b2d+0x48>
 800892c:	3ff00000 	.word	0x3ff00000

08008930 <__d2b>:
 8008930:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008934:	460f      	mov	r7, r1
 8008936:	2101      	movs	r1, #1
 8008938:	ec59 8b10 	vmov	r8, r9, d0
 800893c:	4616      	mov	r6, r2
 800893e:	f7ff fc1b 	bl	8008178 <_Balloc>
 8008942:	4604      	mov	r4, r0
 8008944:	b930      	cbnz	r0, 8008954 <__d2b+0x24>
 8008946:	4602      	mov	r2, r0
 8008948:	4b23      	ldr	r3, [pc, #140]	@ (80089d8 <__d2b+0xa8>)
 800894a:	4824      	ldr	r0, [pc, #144]	@ (80089dc <__d2b+0xac>)
 800894c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008950:	f001 f98a 	bl	8009c68 <__assert_func>
 8008954:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008958:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800895c:	b10d      	cbz	r5, 8008962 <__d2b+0x32>
 800895e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008962:	9301      	str	r3, [sp, #4]
 8008964:	f1b8 0300 	subs.w	r3, r8, #0
 8008968:	d023      	beq.n	80089b2 <__d2b+0x82>
 800896a:	4668      	mov	r0, sp
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	f7ff fd14 	bl	800839a <__lo0bits>
 8008972:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008976:	b1d0      	cbz	r0, 80089ae <__d2b+0x7e>
 8008978:	f1c0 0320 	rsb	r3, r0, #32
 800897c:	fa02 f303 	lsl.w	r3, r2, r3
 8008980:	430b      	orrs	r3, r1
 8008982:	40c2      	lsrs	r2, r0
 8008984:	6163      	str	r3, [r4, #20]
 8008986:	9201      	str	r2, [sp, #4]
 8008988:	9b01      	ldr	r3, [sp, #4]
 800898a:	61a3      	str	r3, [r4, #24]
 800898c:	2b00      	cmp	r3, #0
 800898e:	bf0c      	ite	eq
 8008990:	2201      	moveq	r2, #1
 8008992:	2202      	movne	r2, #2
 8008994:	6122      	str	r2, [r4, #16]
 8008996:	b1a5      	cbz	r5, 80089c2 <__d2b+0x92>
 8008998:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800899c:	4405      	add	r5, r0
 800899e:	603d      	str	r5, [r7, #0]
 80089a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80089a4:	6030      	str	r0, [r6, #0]
 80089a6:	4620      	mov	r0, r4
 80089a8:	b003      	add	sp, #12
 80089aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089ae:	6161      	str	r1, [r4, #20]
 80089b0:	e7ea      	b.n	8008988 <__d2b+0x58>
 80089b2:	a801      	add	r0, sp, #4
 80089b4:	f7ff fcf1 	bl	800839a <__lo0bits>
 80089b8:	9b01      	ldr	r3, [sp, #4]
 80089ba:	6163      	str	r3, [r4, #20]
 80089bc:	3020      	adds	r0, #32
 80089be:	2201      	movs	r2, #1
 80089c0:	e7e8      	b.n	8008994 <__d2b+0x64>
 80089c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80089ca:	6038      	str	r0, [r7, #0]
 80089cc:	6918      	ldr	r0, [r3, #16]
 80089ce:	f7ff fcc5 	bl	800835c <__hi0bits>
 80089d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089d6:	e7e5      	b.n	80089a4 <__d2b+0x74>
 80089d8:	0800ad29 	.word	0x0800ad29
 80089dc:	0800ad3a 	.word	0x0800ad3a

080089e0 <__ratio>:
 80089e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e4:	b085      	sub	sp, #20
 80089e6:	e9cd 1000 	strd	r1, r0, [sp]
 80089ea:	a902      	add	r1, sp, #8
 80089ec:	f7ff ff56 	bl	800889c <__b2d>
 80089f0:	9800      	ldr	r0, [sp, #0]
 80089f2:	a903      	add	r1, sp, #12
 80089f4:	ec55 4b10 	vmov	r4, r5, d0
 80089f8:	f7ff ff50 	bl	800889c <__b2d>
 80089fc:	9b01      	ldr	r3, [sp, #4]
 80089fe:	6919      	ldr	r1, [r3, #16]
 8008a00:	9b00      	ldr	r3, [sp, #0]
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	1ac9      	subs	r1, r1, r3
 8008a06:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008a0a:	1a9b      	subs	r3, r3, r2
 8008a0c:	ec5b ab10 	vmov	sl, fp, d0
 8008a10:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	bfce      	itee	gt
 8008a18:	462a      	movgt	r2, r5
 8008a1a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008a1e:	465a      	movle	r2, fp
 8008a20:	462f      	mov	r7, r5
 8008a22:	46d9      	mov	r9, fp
 8008a24:	bfcc      	ite	gt
 8008a26:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008a2a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008a2e:	464b      	mov	r3, r9
 8008a30:	4652      	mov	r2, sl
 8008a32:	4620      	mov	r0, r4
 8008a34:	4639      	mov	r1, r7
 8008a36:	f7f7 ff19 	bl	800086c <__aeabi_ddiv>
 8008a3a:	ec41 0b10 	vmov	d0, r0, r1
 8008a3e:	b005      	add	sp, #20
 8008a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a44 <__copybits>:
 8008a44:	3901      	subs	r1, #1
 8008a46:	b570      	push	{r4, r5, r6, lr}
 8008a48:	1149      	asrs	r1, r1, #5
 8008a4a:	6914      	ldr	r4, [r2, #16]
 8008a4c:	3101      	adds	r1, #1
 8008a4e:	f102 0314 	add.w	r3, r2, #20
 8008a52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008a56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a5a:	1f05      	subs	r5, r0, #4
 8008a5c:	42a3      	cmp	r3, r4
 8008a5e:	d30c      	bcc.n	8008a7a <__copybits+0x36>
 8008a60:	1aa3      	subs	r3, r4, r2
 8008a62:	3b11      	subs	r3, #17
 8008a64:	f023 0303 	bic.w	r3, r3, #3
 8008a68:	3211      	adds	r2, #17
 8008a6a:	42a2      	cmp	r2, r4
 8008a6c:	bf88      	it	hi
 8008a6e:	2300      	movhi	r3, #0
 8008a70:	4418      	add	r0, r3
 8008a72:	2300      	movs	r3, #0
 8008a74:	4288      	cmp	r0, r1
 8008a76:	d305      	bcc.n	8008a84 <__copybits+0x40>
 8008a78:	bd70      	pop	{r4, r5, r6, pc}
 8008a7a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008a7e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008a82:	e7eb      	b.n	8008a5c <__copybits+0x18>
 8008a84:	f840 3b04 	str.w	r3, [r0], #4
 8008a88:	e7f4      	b.n	8008a74 <__copybits+0x30>

08008a8a <__any_on>:
 8008a8a:	f100 0214 	add.w	r2, r0, #20
 8008a8e:	6900      	ldr	r0, [r0, #16]
 8008a90:	114b      	asrs	r3, r1, #5
 8008a92:	4298      	cmp	r0, r3
 8008a94:	b510      	push	{r4, lr}
 8008a96:	db11      	blt.n	8008abc <__any_on+0x32>
 8008a98:	dd0a      	ble.n	8008ab0 <__any_on+0x26>
 8008a9a:	f011 011f 	ands.w	r1, r1, #31
 8008a9e:	d007      	beq.n	8008ab0 <__any_on+0x26>
 8008aa0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008aa4:	fa24 f001 	lsr.w	r0, r4, r1
 8008aa8:	fa00 f101 	lsl.w	r1, r0, r1
 8008aac:	428c      	cmp	r4, r1
 8008aae:	d10b      	bne.n	8008ac8 <__any_on+0x3e>
 8008ab0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d803      	bhi.n	8008ac0 <__any_on+0x36>
 8008ab8:	2000      	movs	r0, #0
 8008aba:	bd10      	pop	{r4, pc}
 8008abc:	4603      	mov	r3, r0
 8008abe:	e7f7      	b.n	8008ab0 <__any_on+0x26>
 8008ac0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ac4:	2900      	cmp	r1, #0
 8008ac6:	d0f5      	beq.n	8008ab4 <__any_on+0x2a>
 8008ac8:	2001      	movs	r0, #1
 8008aca:	e7f6      	b.n	8008aba <__any_on+0x30>

08008acc <sulp>:
 8008acc:	b570      	push	{r4, r5, r6, lr}
 8008ace:	4604      	mov	r4, r0
 8008ad0:	460d      	mov	r5, r1
 8008ad2:	ec45 4b10 	vmov	d0, r4, r5
 8008ad6:	4616      	mov	r6, r2
 8008ad8:	f7ff feba 	bl	8008850 <__ulp>
 8008adc:	ec51 0b10 	vmov	r0, r1, d0
 8008ae0:	b17e      	cbz	r6, 8008b02 <sulp+0x36>
 8008ae2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ae6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dd09      	ble.n	8008b02 <sulp+0x36>
 8008aee:	051b      	lsls	r3, r3, #20
 8008af0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008af4:	2400      	movs	r4, #0
 8008af6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008afa:	4622      	mov	r2, r4
 8008afc:	462b      	mov	r3, r5
 8008afe:	f7f7 fd8b 	bl	8000618 <__aeabi_dmul>
 8008b02:	ec41 0b10 	vmov	d0, r0, r1
 8008b06:	bd70      	pop	{r4, r5, r6, pc}

08008b08 <_strtod_l>:
 8008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	b09f      	sub	sp, #124	@ 0x7c
 8008b0e:	460c      	mov	r4, r1
 8008b10:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008b12:	2200      	movs	r2, #0
 8008b14:	921a      	str	r2, [sp, #104]	@ 0x68
 8008b16:	9005      	str	r0, [sp, #20]
 8008b18:	f04f 0a00 	mov.w	sl, #0
 8008b1c:	f04f 0b00 	mov.w	fp, #0
 8008b20:	460a      	mov	r2, r1
 8008b22:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b24:	7811      	ldrb	r1, [r2, #0]
 8008b26:	292b      	cmp	r1, #43	@ 0x2b
 8008b28:	d04a      	beq.n	8008bc0 <_strtod_l+0xb8>
 8008b2a:	d838      	bhi.n	8008b9e <_strtod_l+0x96>
 8008b2c:	290d      	cmp	r1, #13
 8008b2e:	d832      	bhi.n	8008b96 <_strtod_l+0x8e>
 8008b30:	2908      	cmp	r1, #8
 8008b32:	d832      	bhi.n	8008b9a <_strtod_l+0x92>
 8008b34:	2900      	cmp	r1, #0
 8008b36:	d03b      	beq.n	8008bb0 <_strtod_l+0xa8>
 8008b38:	2200      	movs	r2, #0
 8008b3a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b3c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008b3e:	782a      	ldrb	r2, [r5, #0]
 8008b40:	2a30      	cmp	r2, #48	@ 0x30
 8008b42:	f040 80b2 	bne.w	8008caa <_strtod_l+0x1a2>
 8008b46:	786a      	ldrb	r2, [r5, #1]
 8008b48:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008b4c:	2a58      	cmp	r2, #88	@ 0x58
 8008b4e:	d16e      	bne.n	8008c2e <_strtod_l+0x126>
 8008b50:	9302      	str	r3, [sp, #8]
 8008b52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	ab1a      	add	r3, sp, #104	@ 0x68
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	4a8f      	ldr	r2, [pc, #572]	@ (8008d98 <_strtod_l+0x290>)
 8008b5c:	9805      	ldr	r0, [sp, #20]
 8008b5e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008b60:	a919      	add	r1, sp, #100	@ 0x64
 8008b62:	f001 f91b 	bl	8009d9c <__gethex>
 8008b66:	f010 060f 	ands.w	r6, r0, #15
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	d005      	beq.n	8008b7a <_strtod_l+0x72>
 8008b6e:	2e06      	cmp	r6, #6
 8008b70:	d128      	bne.n	8008bc4 <_strtod_l+0xbc>
 8008b72:	3501      	adds	r5, #1
 8008b74:	2300      	movs	r3, #0
 8008b76:	9519      	str	r5, [sp, #100]	@ 0x64
 8008b78:	930e      	str	r3, [sp, #56]	@ 0x38
 8008b7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f040 858e 	bne.w	800969e <_strtod_l+0xb96>
 8008b82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b84:	b1cb      	cbz	r3, 8008bba <_strtod_l+0xb2>
 8008b86:	4652      	mov	r2, sl
 8008b88:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008b8c:	ec43 2b10 	vmov	d0, r2, r3
 8008b90:	b01f      	add	sp, #124	@ 0x7c
 8008b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b96:	2920      	cmp	r1, #32
 8008b98:	d1ce      	bne.n	8008b38 <_strtod_l+0x30>
 8008b9a:	3201      	adds	r2, #1
 8008b9c:	e7c1      	b.n	8008b22 <_strtod_l+0x1a>
 8008b9e:	292d      	cmp	r1, #45	@ 0x2d
 8008ba0:	d1ca      	bne.n	8008b38 <_strtod_l+0x30>
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	910e      	str	r1, [sp, #56]	@ 0x38
 8008ba6:	1c51      	adds	r1, r2, #1
 8008ba8:	9119      	str	r1, [sp, #100]	@ 0x64
 8008baa:	7852      	ldrb	r2, [r2, #1]
 8008bac:	2a00      	cmp	r2, #0
 8008bae:	d1c5      	bne.n	8008b3c <_strtod_l+0x34>
 8008bb0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008bb2:	9419      	str	r4, [sp, #100]	@ 0x64
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f040 8570 	bne.w	800969a <_strtod_l+0xb92>
 8008bba:	4652      	mov	r2, sl
 8008bbc:	465b      	mov	r3, fp
 8008bbe:	e7e5      	b.n	8008b8c <_strtod_l+0x84>
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	e7ef      	b.n	8008ba4 <_strtod_l+0x9c>
 8008bc4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008bc6:	b13a      	cbz	r2, 8008bd8 <_strtod_l+0xd0>
 8008bc8:	2135      	movs	r1, #53	@ 0x35
 8008bca:	a81c      	add	r0, sp, #112	@ 0x70
 8008bcc:	f7ff ff3a 	bl	8008a44 <__copybits>
 8008bd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bd2:	9805      	ldr	r0, [sp, #20]
 8008bd4:	f7ff fb10 	bl	80081f8 <_Bfree>
 8008bd8:	3e01      	subs	r6, #1
 8008bda:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008bdc:	2e04      	cmp	r6, #4
 8008bde:	d806      	bhi.n	8008bee <_strtod_l+0xe6>
 8008be0:	e8df f006 	tbb	[pc, r6]
 8008be4:	201d0314 	.word	0x201d0314
 8008be8:	14          	.byte	0x14
 8008be9:	00          	.byte	0x00
 8008bea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008bee:	05e1      	lsls	r1, r4, #23
 8008bf0:	bf48      	it	mi
 8008bf2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008bf6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008bfa:	0d1b      	lsrs	r3, r3, #20
 8008bfc:	051b      	lsls	r3, r3, #20
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1bb      	bne.n	8008b7a <_strtod_l+0x72>
 8008c02:	f7fe fb1d 	bl	8007240 <__errno>
 8008c06:	2322      	movs	r3, #34	@ 0x22
 8008c08:	6003      	str	r3, [r0, #0]
 8008c0a:	e7b6      	b.n	8008b7a <_strtod_l+0x72>
 8008c0c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008c10:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008c14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008c18:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008c1c:	e7e7      	b.n	8008bee <_strtod_l+0xe6>
 8008c1e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008da0 <_strtod_l+0x298>
 8008c22:	e7e4      	b.n	8008bee <_strtod_l+0xe6>
 8008c24:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008c28:	f04f 3aff 	mov.w	sl, #4294967295
 8008c2c:	e7df      	b.n	8008bee <_strtod_l+0xe6>
 8008c2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c30:	1c5a      	adds	r2, r3, #1
 8008c32:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c34:	785b      	ldrb	r3, [r3, #1]
 8008c36:	2b30      	cmp	r3, #48	@ 0x30
 8008c38:	d0f9      	beq.n	8008c2e <_strtod_l+0x126>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d09d      	beq.n	8008b7a <_strtod_l+0x72>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	2700      	movs	r7, #0
 8008c42:	9308      	str	r3, [sp, #32]
 8008c44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c46:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c48:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008c4a:	46b9      	mov	r9, r7
 8008c4c:	220a      	movs	r2, #10
 8008c4e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008c50:	7805      	ldrb	r5, [r0, #0]
 8008c52:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008c56:	b2d9      	uxtb	r1, r3
 8008c58:	2909      	cmp	r1, #9
 8008c5a:	d928      	bls.n	8008cae <_strtod_l+0x1a6>
 8008c5c:	494f      	ldr	r1, [pc, #316]	@ (8008d9c <_strtod_l+0x294>)
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f000 ffd6 	bl	8009c10 <strncmp>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d032      	beq.n	8008cce <_strtod_l+0x1c6>
 8008c68:	2000      	movs	r0, #0
 8008c6a:	462a      	mov	r2, r5
 8008c6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c6e:	464d      	mov	r5, r9
 8008c70:	4603      	mov	r3, r0
 8008c72:	2a65      	cmp	r2, #101	@ 0x65
 8008c74:	d001      	beq.n	8008c7a <_strtod_l+0x172>
 8008c76:	2a45      	cmp	r2, #69	@ 0x45
 8008c78:	d114      	bne.n	8008ca4 <_strtod_l+0x19c>
 8008c7a:	b91d      	cbnz	r5, 8008c84 <_strtod_l+0x17c>
 8008c7c:	9a08      	ldr	r2, [sp, #32]
 8008c7e:	4302      	orrs	r2, r0
 8008c80:	d096      	beq.n	8008bb0 <_strtod_l+0xa8>
 8008c82:	2500      	movs	r5, #0
 8008c84:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008c86:	1c62      	adds	r2, r4, #1
 8008c88:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c8a:	7862      	ldrb	r2, [r4, #1]
 8008c8c:	2a2b      	cmp	r2, #43	@ 0x2b
 8008c8e:	d07a      	beq.n	8008d86 <_strtod_l+0x27e>
 8008c90:	2a2d      	cmp	r2, #45	@ 0x2d
 8008c92:	d07e      	beq.n	8008d92 <_strtod_l+0x28a>
 8008c94:	f04f 0c00 	mov.w	ip, #0
 8008c98:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008c9c:	2909      	cmp	r1, #9
 8008c9e:	f240 8085 	bls.w	8008dac <_strtod_l+0x2a4>
 8008ca2:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ca4:	f04f 0800 	mov.w	r8, #0
 8008ca8:	e0a5      	b.n	8008df6 <_strtod_l+0x2ee>
 8008caa:	2300      	movs	r3, #0
 8008cac:	e7c8      	b.n	8008c40 <_strtod_l+0x138>
 8008cae:	f1b9 0f08 	cmp.w	r9, #8
 8008cb2:	bfd8      	it	le
 8008cb4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008cb6:	f100 0001 	add.w	r0, r0, #1
 8008cba:	bfda      	itte	le
 8008cbc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008cc0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008cc2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008cc6:	f109 0901 	add.w	r9, r9, #1
 8008cca:	9019      	str	r0, [sp, #100]	@ 0x64
 8008ccc:	e7bf      	b.n	8008c4e <_strtod_l+0x146>
 8008cce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cd4:	785a      	ldrb	r2, [r3, #1]
 8008cd6:	f1b9 0f00 	cmp.w	r9, #0
 8008cda:	d03b      	beq.n	8008d54 <_strtod_l+0x24c>
 8008cdc:	900a      	str	r0, [sp, #40]	@ 0x28
 8008cde:	464d      	mov	r5, r9
 8008ce0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008ce4:	2b09      	cmp	r3, #9
 8008ce6:	d912      	bls.n	8008d0e <_strtod_l+0x206>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e7c2      	b.n	8008c72 <_strtod_l+0x16a>
 8008cec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cf2:	785a      	ldrb	r2, [r3, #1]
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	2a30      	cmp	r2, #48	@ 0x30
 8008cf8:	d0f8      	beq.n	8008cec <_strtod_l+0x1e4>
 8008cfa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008cfe:	2b08      	cmp	r3, #8
 8008d00:	f200 84d2 	bhi.w	80096a8 <_strtod_l+0xba0>
 8008d04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d06:	900a      	str	r0, [sp, #40]	@ 0x28
 8008d08:	2000      	movs	r0, #0
 8008d0a:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	3a30      	subs	r2, #48	@ 0x30
 8008d10:	f100 0301 	add.w	r3, r0, #1
 8008d14:	d018      	beq.n	8008d48 <_strtod_l+0x240>
 8008d16:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d18:	4419      	add	r1, r3
 8008d1a:	910a      	str	r1, [sp, #40]	@ 0x28
 8008d1c:	462e      	mov	r6, r5
 8008d1e:	f04f 0e0a 	mov.w	lr, #10
 8008d22:	1c71      	adds	r1, r6, #1
 8008d24:	eba1 0c05 	sub.w	ip, r1, r5
 8008d28:	4563      	cmp	r3, ip
 8008d2a:	dc15      	bgt.n	8008d58 <_strtod_l+0x250>
 8008d2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008d30:	182b      	adds	r3, r5, r0
 8008d32:	2b08      	cmp	r3, #8
 8008d34:	f105 0501 	add.w	r5, r5, #1
 8008d38:	4405      	add	r5, r0
 8008d3a:	dc1a      	bgt.n	8008d72 <_strtod_l+0x26a>
 8008d3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d3e:	230a      	movs	r3, #10
 8008d40:	fb03 2301 	mla	r3, r3, r1, r2
 8008d44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d46:	2300      	movs	r3, #0
 8008d48:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d4a:	1c51      	adds	r1, r2, #1
 8008d4c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008d4e:	7852      	ldrb	r2, [r2, #1]
 8008d50:	4618      	mov	r0, r3
 8008d52:	e7c5      	b.n	8008ce0 <_strtod_l+0x1d8>
 8008d54:	4648      	mov	r0, r9
 8008d56:	e7ce      	b.n	8008cf6 <_strtod_l+0x1ee>
 8008d58:	2e08      	cmp	r6, #8
 8008d5a:	dc05      	bgt.n	8008d68 <_strtod_l+0x260>
 8008d5c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008d5e:	fb0e f606 	mul.w	r6, lr, r6
 8008d62:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008d64:	460e      	mov	r6, r1
 8008d66:	e7dc      	b.n	8008d22 <_strtod_l+0x21a>
 8008d68:	2910      	cmp	r1, #16
 8008d6a:	bfd8      	it	le
 8008d6c:	fb0e f707 	mulle.w	r7, lr, r7
 8008d70:	e7f8      	b.n	8008d64 <_strtod_l+0x25c>
 8008d72:	2b0f      	cmp	r3, #15
 8008d74:	bfdc      	itt	le
 8008d76:	230a      	movle	r3, #10
 8008d78:	fb03 2707 	mlale	r7, r3, r7, r2
 8008d7c:	e7e3      	b.n	8008d46 <_strtod_l+0x23e>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d82:	2301      	movs	r3, #1
 8008d84:	e77a      	b.n	8008c7c <_strtod_l+0x174>
 8008d86:	f04f 0c00 	mov.w	ip, #0
 8008d8a:	1ca2      	adds	r2, r4, #2
 8008d8c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d8e:	78a2      	ldrb	r2, [r4, #2]
 8008d90:	e782      	b.n	8008c98 <_strtod_l+0x190>
 8008d92:	f04f 0c01 	mov.w	ip, #1
 8008d96:	e7f8      	b.n	8008d8a <_strtod_l+0x282>
 8008d98:	0800af5c 	.word	0x0800af5c
 8008d9c:	0800ad93 	.word	0x0800ad93
 8008da0:	7ff00000 	.word	0x7ff00000
 8008da4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008da6:	1c51      	adds	r1, r2, #1
 8008da8:	9119      	str	r1, [sp, #100]	@ 0x64
 8008daa:	7852      	ldrb	r2, [r2, #1]
 8008dac:	2a30      	cmp	r2, #48	@ 0x30
 8008dae:	d0f9      	beq.n	8008da4 <_strtod_l+0x29c>
 8008db0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008db4:	2908      	cmp	r1, #8
 8008db6:	f63f af75 	bhi.w	8008ca4 <_strtod_l+0x19c>
 8008dba:	3a30      	subs	r2, #48	@ 0x30
 8008dbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008dc0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008dc2:	f04f 080a 	mov.w	r8, #10
 8008dc6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008dc8:	1c56      	adds	r6, r2, #1
 8008dca:	9619      	str	r6, [sp, #100]	@ 0x64
 8008dcc:	7852      	ldrb	r2, [r2, #1]
 8008dce:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008dd2:	f1be 0f09 	cmp.w	lr, #9
 8008dd6:	d939      	bls.n	8008e4c <_strtod_l+0x344>
 8008dd8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008dda:	1a76      	subs	r6, r6, r1
 8008ddc:	2e08      	cmp	r6, #8
 8008dde:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008de2:	dc03      	bgt.n	8008dec <_strtod_l+0x2e4>
 8008de4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008de6:	4588      	cmp	r8, r1
 8008de8:	bfa8      	it	ge
 8008dea:	4688      	movge	r8, r1
 8008dec:	f1bc 0f00 	cmp.w	ip, #0
 8008df0:	d001      	beq.n	8008df6 <_strtod_l+0x2ee>
 8008df2:	f1c8 0800 	rsb	r8, r8, #0
 8008df6:	2d00      	cmp	r5, #0
 8008df8:	d14e      	bne.n	8008e98 <_strtod_l+0x390>
 8008dfa:	9908      	ldr	r1, [sp, #32]
 8008dfc:	4308      	orrs	r0, r1
 8008dfe:	f47f aebc 	bne.w	8008b7a <_strtod_l+0x72>
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f47f aed4 	bne.w	8008bb0 <_strtod_l+0xa8>
 8008e08:	2a69      	cmp	r2, #105	@ 0x69
 8008e0a:	d028      	beq.n	8008e5e <_strtod_l+0x356>
 8008e0c:	dc25      	bgt.n	8008e5a <_strtod_l+0x352>
 8008e0e:	2a49      	cmp	r2, #73	@ 0x49
 8008e10:	d025      	beq.n	8008e5e <_strtod_l+0x356>
 8008e12:	2a4e      	cmp	r2, #78	@ 0x4e
 8008e14:	f47f aecc 	bne.w	8008bb0 <_strtod_l+0xa8>
 8008e18:	499a      	ldr	r1, [pc, #616]	@ (8009084 <_strtod_l+0x57c>)
 8008e1a:	a819      	add	r0, sp, #100	@ 0x64
 8008e1c:	f001 f9e0 	bl	800a1e0 <__match>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	f43f aec5 	beq.w	8008bb0 <_strtod_l+0xa8>
 8008e26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	2b28      	cmp	r3, #40	@ 0x28
 8008e2c:	d12e      	bne.n	8008e8c <_strtod_l+0x384>
 8008e2e:	4996      	ldr	r1, [pc, #600]	@ (8009088 <_strtod_l+0x580>)
 8008e30:	aa1c      	add	r2, sp, #112	@ 0x70
 8008e32:	a819      	add	r0, sp, #100	@ 0x64
 8008e34:	f001 f9e8 	bl	800a208 <__hexnan>
 8008e38:	2805      	cmp	r0, #5
 8008e3a:	d127      	bne.n	8008e8c <_strtod_l+0x384>
 8008e3c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008e3e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008e42:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008e46:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008e4a:	e696      	b.n	8008b7a <_strtod_l+0x72>
 8008e4c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e4e:	fb08 2101 	mla	r1, r8, r1, r2
 8008e52:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008e56:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e58:	e7b5      	b.n	8008dc6 <_strtod_l+0x2be>
 8008e5a:	2a6e      	cmp	r2, #110	@ 0x6e
 8008e5c:	e7da      	b.n	8008e14 <_strtod_l+0x30c>
 8008e5e:	498b      	ldr	r1, [pc, #556]	@ (800908c <_strtod_l+0x584>)
 8008e60:	a819      	add	r0, sp, #100	@ 0x64
 8008e62:	f001 f9bd 	bl	800a1e0 <__match>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	f43f aea2 	beq.w	8008bb0 <_strtod_l+0xa8>
 8008e6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e6e:	4988      	ldr	r1, [pc, #544]	@ (8009090 <_strtod_l+0x588>)
 8008e70:	3b01      	subs	r3, #1
 8008e72:	a819      	add	r0, sp, #100	@ 0x64
 8008e74:	9319      	str	r3, [sp, #100]	@ 0x64
 8008e76:	f001 f9b3 	bl	800a1e0 <__match>
 8008e7a:	b910      	cbnz	r0, 8008e82 <_strtod_l+0x37a>
 8008e7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e7e:	3301      	adds	r3, #1
 8008e80:	9319      	str	r3, [sp, #100]	@ 0x64
 8008e82:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80090a0 <_strtod_l+0x598>
 8008e86:	f04f 0a00 	mov.w	sl, #0
 8008e8a:	e676      	b.n	8008b7a <_strtod_l+0x72>
 8008e8c:	4881      	ldr	r0, [pc, #516]	@ (8009094 <_strtod_l+0x58c>)
 8008e8e:	f000 fee3 	bl	8009c58 <nan>
 8008e92:	ec5b ab10 	vmov	sl, fp, d0
 8008e96:	e670      	b.n	8008b7a <_strtod_l+0x72>
 8008e98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e9a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008e9c:	eba8 0303 	sub.w	r3, r8, r3
 8008ea0:	f1b9 0f00 	cmp.w	r9, #0
 8008ea4:	bf08      	it	eq
 8008ea6:	46a9      	moveq	r9, r5
 8008ea8:	2d10      	cmp	r5, #16
 8008eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eac:	462c      	mov	r4, r5
 8008eae:	bfa8      	it	ge
 8008eb0:	2410      	movge	r4, #16
 8008eb2:	f7f7 fb37 	bl	8000524 <__aeabi_ui2d>
 8008eb6:	2d09      	cmp	r5, #9
 8008eb8:	4682      	mov	sl, r0
 8008eba:	468b      	mov	fp, r1
 8008ebc:	dc13      	bgt.n	8008ee6 <_strtod_l+0x3de>
 8008ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f43f ae5a 	beq.w	8008b7a <_strtod_l+0x72>
 8008ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec8:	dd78      	ble.n	8008fbc <_strtod_l+0x4b4>
 8008eca:	2b16      	cmp	r3, #22
 8008ecc:	dc5f      	bgt.n	8008f8e <_strtod_l+0x486>
 8008ece:	4972      	ldr	r1, [pc, #456]	@ (8009098 <_strtod_l+0x590>)
 8008ed0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ed8:	4652      	mov	r2, sl
 8008eda:	465b      	mov	r3, fp
 8008edc:	f7f7 fb9c 	bl	8000618 <__aeabi_dmul>
 8008ee0:	4682      	mov	sl, r0
 8008ee2:	468b      	mov	fp, r1
 8008ee4:	e649      	b.n	8008b7a <_strtod_l+0x72>
 8008ee6:	4b6c      	ldr	r3, [pc, #432]	@ (8009098 <_strtod_l+0x590>)
 8008ee8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008eec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008ef0:	f7f7 fb92 	bl	8000618 <__aeabi_dmul>
 8008ef4:	4682      	mov	sl, r0
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	468b      	mov	fp, r1
 8008efa:	f7f7 fb13 	bl	8000524 <__aeabi_ui2d>
 8008efe:	4602      	mov	r2, r0
 8008f00:	460b      	mov	r3, r1
 8008f02:	4650      	mov	r0, sl
 8008f04:	4659      	mov	r1, fp
 8008f06:	f7f7 f9d1 	bl	80002ac <__adddf3>
 8008f0a:	2d0f      	cmp	r5, #15
 8008f0c:	4682      	mov	sl, r0
 8008f0e:	468b      	mov	fp, r1
 8008f10:	ddd5      	ble.n	8008ebe <_strtod_l+0x3b6>
 8008f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f14:	1b2c      	subs	r4, r5, r4
 8008f16:	441c      	add	r4, r3
 8008f18:	2c00      	cmp	r4, #0
 8008f1a:	f340 8093 	ble.w	8009044 <_strtod_l+0x53c>
 8008f1e:	f014 030f 	ands.w	r3, r4, #15
 8008f22:	d00a      	beq.n	8008f3a <_strtod_l+0x432>
 8008f24:	495c      	ldr	r1, [pc, #368]	@ (8009098 <_strtod_l+0x590>)
 8008f26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f2a:	4652      	mov	r2, sl
 8008f2c:	465b      	mov	r3, fp
 8008f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f32:	f7f7 fb71 	bl	8000618 <__aeabi_dmul>
 8008f36:	4682      	mov	sl, r0
 8008f38:	468b      	mov	fp, r1
 8008f3a:	f034 040f 	bics.w	r4, r4, #15
 8008f3e:	d073      	beq.n	8009028 <_strtod_l+0x520>
 8008f40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008f44:	dd49      	ble.n	8008fda <_strtod_l+0x4d2>
 8008f46:	2400      	movs	r4, #0
 8008f48:	46a0      	mov	r8, r4
 8008f4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008f4c:	46a1      	mov	r9, r4
 8008f4e:	9a05      	ldr	r2, [sp, #20]
 8008f50:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80090a0 <_strtod_l+0x598>
 8008f54:	2322      	movs	r3, #34	@ 0x22
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	f04f 0a00 	mov.w	sl, #0
 8008f5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f43f ae0b 	beq.w	8008b7a <_strtod_l+0x72>
 8008f64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f66:	9805      	ldr	r0, [sp, #20]
 8008f68:	f7ff f946 	bl	80081f8 <_Bfree>
 8008f6c:	9805      	ldr	r0, [sp, #20]
 8008f6e:	4649      	mov	r1, r9
 8008f70:	f7ff f942 	bl	80081f8 <_Bfree>
 8008f74:	9805      	ldr	r0, [sp, #20]
 8008f76:	4641      	mov	r1, r8
 8008f78:	f7ff f93e 	bl	80081f8 <_Bfree>
 8008f7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f7e:	9805      	ldr	r0, [sp, #20]
 8008f80:	f7ff f93a 	bl	80081f8 <_Bfree>
 8008f84:	9805      	ldr	r0, [sp, #20]
 8008f86:	4621      	mov	r1, r4
 8008f88:	f7ff f936 	bl	80081f8 <_Bfree>
 8008f8c:	e5f5      	b.n	8008b7a <_strtod_l+0x72>
 8008f8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008f94:	4293      	cmp	r3, r2
 8008f96:	dbbc      	blt.n	8008f12 <_strtod_l+0x40a>
 8008f98:	4c3f      	ldr	r4, [pc, #252]	@ (8009098 <_strtod_l+0x590>)
 8008f9a:	f1c5 050f 	rsb	r5, r5, #15
 8008f9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008fa2:	4652      	mov	r2, sl
 8008fa4:	465b      	mov	r3, fp
 8008fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008faa:	f7f7 fb35 	bl	8000618 <__aeabi_dmul>
 8008fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fb0:	1b5d      	subs	r5, r3, r5
 8008fb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008fb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008fba:	e78f      	b.n	8008edc <_strtod_l+0x3d4>
 8008fbc:	3316      	adds	r3, #22
 8008fbe:	dba8      	blt.n	8008f12 <_strtod_l+0x40a>
 8008fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fc2:	eba3 0808 	sub.w	r8, r3, r8
 8008fc6:	4b34      	ldr	r3, [pc, #208]	@ (8009098 <_strtod_l+0x590>)
 8008fc8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008fcc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008fd0:	4650      	mov	r0, sl
 8008fd2:	4659      	mov	r1, fp
 8008fd4:	f7f7 fc4a 	bl	800086c <__aeabi_ddiv>
 8008fd8:	e782      	b.n	8008ee0 <_strtod_l+0x3d8>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	4f2f      	ldr	r7, [pc, #188]	@ (800909c <_strtod_l+0x594>)
 8008fde:	1124      	asrs	r4, r4, #4
 8008fe0:	4650      	mov	r0, sl
 8008fe2:	4659      	mov	r1, fp
 8008fe4:	461e      	mov	r6, r3
 8008fe6:	2c01      	cmp	r4, #1
 8008fe8:	dc21      	bgt.n	800902e <_strtod_l+0x526>
 8008fea:	b10b      	cbz	r3, 8008ff0 <_strtod_l+0x4e8>
 8008fec:	4682      	mov	sl, r0
 8008fee:	468b      	mov	fp, r1
 8008ff0:	492a      	ldr	r1, [pc, #168]	@ (800909c <_strtod_l+0x594>)
 8008ff2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008ff6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008ffa:	4652      	mov	r2, sl
 8008ffc:	465b      	mov	r3, fp
 8008ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009002:	f7f7 fb09 	bl	8000618 <__aeabi_dmul>
 8009006:	4b26      	ldr	r3, [pc, #152]	@ (80090a0 <_strtod_l+0x598>)
 8009008:	460a      	mov	r2, r1
 800900a:	400b      	ands	r3, r1
 800900c:	4925      	ldr	r1, [pc, #148]	@ (80090a4 <_strtod_l+0x59c>)
 800900e:	428b      	cmp	r3, r1
 8009010:	4682      	mov	sl, r0
 8009012:	d898      	bhi.n	8008f46 <_strtod_l+0x43e>
 8009014:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009018:	428b      	cmp	r3, r1
 800901a:	bf86      	itte	hi
 800901c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80090a8 <_strtod_l+0x5a0>
 8009020:	f04f 3aff 	movhi.w	sl, #4294967295
 8009024:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009028:	2300      	movs	r3, #0
 800902a:	9308      	str	r3, [sp, #32]
 800902c:	e076      	b.n	800911c <_strtod_l+0x614>
 800902e:	07e2      	lsls	r2, r4, #31
 8009030:	d504      	bpl.n	800903c <_strtod_l+0x534>
 8009032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009036:	f7f7 faef 	bl	8000618 <__aeabi_dmul>
 800903a:	2301      	movs	r3, #1
 800903c:	3601      	adds	r6, #1
 800903e:	1064      	asrs	r4, r4, #1
 8009040:	3708      	adds	r7, #8
 8009042:	e7d0      	b.n	8008fe6 <_strtod_l+0x4de>
 8009044:	d0f0      	beq.n	8009028 <_strtod_l+0x520>
 8009046:	4264      	negs	r4, r4
 8009048:	f014 020f 	ands.w	r2, r4, #15
 800904c:	d00a      	beq.n	8009064 <_strtod_l+0x55c>
 800904e:	4b12      	ldr	r3, [pc, #72]	@ (8009098 <_strtod_l+0x590>)
 8009050:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009054:	4650      	mov	r0, sl
 8009056:	4659      	mov	r1, fp
 8009058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905c:	f7f7 fc06 	bl	800086c <__aeabi_ddiv>
 8009060:	4682      	mov	sl, r0
 8009062:	468b      	mov	fp, r1
 8009064:	1124      	asrs	r4, r4, #4
 8009066:	d0df      	beq.n	8009028 <_strtod_l+0x520>
 8009068:	2c1f      	cmp	r4, #31
 800906a:	dd1f      	ble.n	80090ac <_strtod_l+0x5a4>
 800906c:	2400      	movs	r4, #0
 800906e:	46a0      	mov	r8, r4
 8009070:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009072:	46a1      	mov	r9, r4
 8009074:	9a05      	ldr	r2, [sp, #20]
 8009076:	2322      	movs	r3, #34	@ 0x22
 8009078:	f04f 0a00 	mov.w	sl, #0
 800907c:	f04f 0b00 	mov.w	fp, #0
 8009080:	6013      	str	r3, [r2, #0]
 8009082:	e76b      	b.n	8008f5c <_strtod_l+0x454>
 8009084:	0800ac81 	.word	0x0800ac81
 8009088:	0800af48 	.word	0x0800af48
 800908c:	0800ac79 	.word	0x0800ac79
 8009090:	0800acb0 	.word	0x0800acb0
 8009094:	0800ade9 	.word	0x0800ade9
 8009098:	0800ae80 	.word	0x0800ae80
 800909c:	0800ae58 	.word	0x0800ae58
 80090a0:	7ff00000 	.word	0x7ff00000
 80090a4:	7ca00000 	.word	0x7ca00000
 80090a8:	7fefffff 	.word	0x7fefffff
 80090ac:	f014 0310 	ands.w	r3, r4, #16
 80090b0:	bf18      	it	ne
 80090b2:	236a      	movne	r3, #106	@ 0x6a
 80090b4:	4ea9      	ldr	r6, [pc, #676]	@ (800935c <_strtod_l+0x854>)
 80090b6:	9308      	str	r3, [sp, #32]
 80090b8:	4650      	mov	r0, sl
 80090ba:	4659      	mov	r1, fp
 80090bc:	2300      	movs	r3, #0
 80090be:	07e7      	lsls	r7, r4, #31
 80090c0:	d504      	bpl.n	80090cc <_strtod_l+0x5c4>
 80090c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80090c6:	f7f7 faa7 	bl	8000618 <__aeabi_dmul>
 80090ca:	2301      	movs	r3, #1
 80090cc:	1064      	asrs	r4, r4, #1
 80090ce:	f106 0608 	add.w	r6, r6, #8
 80090d2:	d1f4      	bne.n	80090be <_strtod_l+0x5b6>
 80090d4:	b10b      	cbz	r3, 80090da <_strtod_l+0x5d2>
 80090d6:	4682      	mov	sl, r0
 80090d8:	468b      	mov	fp, r1
 80090da:	9b08      	ldr	r3, [sp, #32]
 80090dc:	b1b3      	cbz	r3, 800910c <_strtod_l+0x604>
 80090de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80090e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	4659      	mov	r1, fp
 80090ea:	dd0f      	ble.n	800910c <_strtod_l+0x604>
 80090ec:	2b1f      	cmp	r3, #31
 80090ee:	dd56      	ble.n	800919e <_strtod_l+0x696>
 80090f0:	2b34      	cmp	r3, #52	@ 0x34
 80090f2:	bfde      	ittt	le
 80090f4:	f04f 33ff 	movle.w	r3, #4294967295
 80090f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80090fc:	4093      	lslle	r3, r2
 80090fe:	f04f 0a00 	mov.w	sl, #0
 8009102:	bfcc      	ite	gt
 8009104:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009108:	ea03 0b01 	andle.w	fp, r3, r1
 800910c:	2200      	movs	r2, #0
 800910e:	2300      	movs	r3, #0
 8009110:	4650      	mov	r0, sl
 8009112:	4659      	mov	r1, fp
 8009114:	f7f7 fce8 	bl	8000ae8 <__aeabi_dcmpeq>
 8009118:	2800      	cmp	r0, #0
 800911a:	d1a7      	bne.n	800906c <_strtod_l+0x564>
 800911c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009122:	9805      	ldr	r0, [sp, #20]
 8009124:	462b      	mov	r3, r5
 8009126:	464a      	mov	r2, r9
 8009128:	f7ff f8ce 	bl	80082c8 <__s2b>
 800912c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800912e:	2800      	cmp	r0, #0
 8009130:	f43f af09 	beq.w	8008f46 <_strtod_l+0x43e>
 8009134:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009136:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009138:	2a00      	cmp	r2, #0
 800913a:	eba3 0308 	sub.w	r3, r3, r8
 800913e:	bfa8      	it	ge
 8009140:	2300      	movge	r3, #0
 8009142:	9312      	str	r3, [sp, #72]	@ 0x48
 8009144:	2400      	movs	r4, #0
 8009146:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800914a:	9316      	str	r3, [sp, #88]	@ 0x58
 800914c:	46a0      	mov	r8, r4
 800914e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009150:	9805      	ldr	r0, [sp, #20]
 8009152:	6859      	ldr	r1, [r3, #4]
 8009154:	f7ff f810 	bl	8008178 <_Balloc>
 8009158:	4681      	mov	r9, r0
 800915a:	2800      	cmp	r0, #0
 800915c:	f43f aef7 	beq.w	8008f4e <_strtod_l+0x446>
 8009160:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009162:	691a      	ldr	r2, [r3, #16]
 8009164:	3202      	adds	r2, #2
 8009166:	f103 010c 	add.w	r1, r3, #12
 800916a:	0092      	lsls	r2, r2, #2
 800916c:	300c      	adds	r0, #12
 800916e:	f7fe f894 	bl	800729a <memcpy>
 8009172:	ec4b ab10 	vmov	d0, sl, fp
 8009176:	9805      	ldr	r0, [sp, #20]
 8009178:	aa1c      	add	r2, sp, #112	@ 0x70
 800917a:	a91b      	add	r1, sp, #108	@ 0x6c
 800917c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009180:	f7ff fbd6 	bl	8008930 <__d2b>
 8009184:	901a      	str	r0, [sp, #104]	@ 0x68
 8009186:	2800      	cmp	r0, #0
 8009188:	f43f aee1 	beq.w	8008f4e <_strtod_l+0x446>
 800918c:	9805      	ldr	r0, [sp, #20]
 800918e:	2101      	movs	r1, #1
 8009190:	f7ff f930 	bl	80083f4 <__i2b>
 8009194:	4680      	mov	r8, r0
 8009196:	b948      	cbnz	r0, 80091ac <_strtod_l+0x6a4>
 8009198:	f04f 0800 	mov.w	r8, #0
 800919c:	e6d7      	b.n	8008f4e <_strtod_l+0x446>
 800919e:	f04f 32ff 	mov.w	r2, #4294967295
 80091a2:	fa02 f303 	lsl.w	r3, r2, r3
 80091a6:	ea03 0a0a 	and.w	sl, r3, sl
 80091aa:	e7af      	b.n	800910c <_strtod_l+0x604>
 80091ac:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80091ae:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80091b0:	2d00      	cmp	r5, #0
 80091b2:	bfab      	itete	ge
 80091b4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80091b6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80091b8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80091ba:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80091bc:	bfac      	ite	ge
 80091be:	18ef      	addge	r7, r5, r3
 80091c0:	1b5e      	sublt	r6, r3, r5
 80091c2:	9b08      	ldr	r3, [sp, #32]
 80091c4:	1aed      	subs	r5, r5, r3
 80091c6:	4415      	add	r5, r2
 80091c8:	4b65      	ldr	r3, [pc, #404]	@ (8009360 <_strtod_l+0x858>)
 80091ca:	3d01      	subs	r5, #1
 80091cc:	429d      	cmp	r5, r3
 80091ce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80091d2:	da50      	bge.n	8009276 <_strtod_l+0x76e>
 80091d4:	1b5b      	subs	r3, r3, r5
 80091d6:	2b1f      	cmp	r3, #31
 80091d8:	eba2 0203 	sub.w	r2, r2, r3
 80091dc:	f04f 0101 	mov.w	r1, #1
 80091e0:	dc3d      	bgt.n	800925e <_strtod_l+0x756>
 80091e2:	fa01 f303 	lsl.w	r3, r1, r3
 80091e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80091e8:	2300      	movs	r3, #0
 80091ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80091ec:	18bd      	adds	r5, r7, r2
 80091ee:	9b08      	ldr	r3, [sp, #32]
 80091f0:	42af      	cmp	r7, r5
 80091f2:	4416      	add	r6, r2
 80091f4:	441e      	add	r6, r3
 80091f6:	463b      	mov	r3, r7
 80091f8:	bfa8      	it	ge
 80091fa:	462b      	movge	r3, r5
 80091fc:	42b3      	cmp	r3, r6
 80091fe:	bfa8      	it	ge
 8009200:	4633      	movge	r3, r6
 8009202:	2b00      	cmp	r3, #0
 8009204:	bfc2      	ittt	gt
 8009206:	1aed      	subgt	r5, r5, r3
 8009208:	1af6      	subgt	r6, r6, r3
 800920a:	1aff      	subgt	r7, r7, r3
 800920c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800920e:	2b00      	cmp	r3, #0
 8009210:	dd16      	ble.n	8009240 <_strtod_l+0x738>
 8009212:	4641      	mov	r1, r8
 8009214:	9805      	ldr	r0, [sp, #20]
 8009216:	461a      	mov	r2, r3
 8009218:	f7ff f9a4 	bl	8008564 <__pow5mult>
 800921c:	4680      	mov	r8, r0
 800921e:	2800      	cmp	r0, #0
 8009220:	d0ba      	beq.n	8009198 <_strtod_l+0x690>
 8009222:	4601      	mov	r1, r0
 8009224:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009226:	9805      	ldr	r0, [sp, #20]
 8009228:	f7ff f8fa 	bl	8008420 <__multiply>
 800922c:	900a      	str	r0, [sp, #40]	@ 0x28
 800922e:	2800      	cmp	r0, #0
 8009230:	f43f ae8d 	beq.w	8008f4e <_strtod_l+0x446>
 8009234:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009236:	9805      	ldr	r0, [sp, #20]
 8009238:	f7fe ffde 	bl	80081f8 <_Bfree>
 800923c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800923e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009240:	2d00      	cmp	r5, #0
 8009242:	dc1d      	bgt.n	8009280 <_strtod_l+0x778>
 8009244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009246:	2b00      	cmp	r3, #0
 8009248:	dd23      	ble.n	8009292 <_strtod_l+0x78a>
 800924a:	4649      	mov	r1, r9
 800924c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800924e:	9805      	ldr	r0, [sp, #20]
 8009250:	f7ff f988 	bl	8008564 <__pow5mult>
 8009254:	4681      	mov	r9, r0
 8009256:	b9e0      	cbnz	r0, 8009292 <_strtod_l+0x78a>
 8009258:	f04f 0900 	mov.w	r9, #0
 800925c:	e677      	b.n	8008f4e <_strtod_l+0x446>
 800925e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009262:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009266:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800926a:	35e2      	adds	r5, #226	@ 0xe2
 800926c:	fa01 f305 	lsl.w	r3, r1, r5
 8009270:	9310      	str	r3, [sp, #64]	@ 0x40
 8009272:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009274:	e7ba      	b.n	80091ec <_strtod_l+0x6e4>
 8009276:	2300      	movs	r3, #0
 8009278:	9310      	str	r3, [sp, #64]	@ 0x40
 800927a:	2301      	movs	r3, #1
 800927c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800927e:	e7b5      	b.n	80091ec <_strtod_l+0x6e4>
 8009280:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009282:	9805      	ldr	r0, [sp, #20]
 8009284:	462a      	mov	r2, r5
 8009286:	f7ff f9c7 	bl	8008618 <__lshift>
 800928a:	901a      	str	r0, [sp, #104]	@ 0x68
 800928c:	2800      	cmp	r0, #0
 800928e:	d1d9      	bne.n	8009244 <_strtod_l+0x73c>
 8009290:	e65d      	b.n	8008f4e <_strtod_l+0x446>
 8009292:	2e00      	cmp	r6, #0
 8009294:	dd07      	ble.n	80092a6 <_strtod_l+0x79e>
 8009296:	4649      	mov	r1, r9
 8009298:	9805      	ldr	r0, [sp, #20]
 800929a:	4632      	mov	r2, r6
 800929c:	f7ff f9bc 	bl	8008618 <__lshift>
 80092a0:	4681      	mov	r9, r0
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d0d8      	beq.n	8009258 <_strtod_l+0x750>
 80092a6:	2f00      	cmp	r7, #0
 80092a8:	dd08      	ble.n	80092bc <_strtod_l+0x7b4>
 80092aa:	4641      	mov	r1, r8
 80092ac:	9805      	ldr	r0, [sp, #20]
 80092ae:	463a      	mov	r2, r7
 80092b0:	f7ff f9b2 	bl	8008618 <__lshift>
 80092b4:	4680      	mov	r8, r0
 80092b6:	2800      	cmp	r0, #0
 80092b8:	f43f ae49 	beq.w	8008f4e <_strtod_l+0x446>
 80092bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092be:	9805      	ldr	r0, [sp, #20]
 80092c0:	464a      	mov	r2, r9
 80092c2:	f7ff fa31 	bl	8008728 <__mdiff>
 80092c6:	4604      	mov	r4, r0
 80092c8:	2800      	cmp	r0, #0
 80092ca:	f43f ae40 	beq.w	8008f4e <_strtod_l+0x446>
 80092ce:	68c3      	ldr	r3, [r0, #12]
 80092d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80092d2:	2300      	movs	r3, #0
 80092d4:	60c3      	str	r3, [r0, #12]
 80092d6:	4641      	mov	r1, r8
 80092d8:	f7ff fa0a 	bl	80086f0 <__mcmp>
 80092dc:	2800      	cmp	r0, #0
 80092de:	da45      	bge.n	800936c <_strtod_l+0x864>
 80092e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092e2:	ea53 030a 	orrs.w	r3, r3, sl
 80092e6:	d16b      	bne.n	80093c0 <_strtod_l+0x8b8>
 80092e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d167      	bne.n	80093c0 <_strtod_l+0x8b8>
 80092f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092f4:	0d1b      	lsrs	r3, r3, #20
 80092f6:	051b      	lsls	r3, r3, #20
 80092f8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80092fc:	d960      	bls.n	80093c0 <_strtod_l+0x8b8>
 80092fe:	6963      	ldr	r3, [r4, #20]
 8009300:	b913      	cbnz	r3, 8009308 <_strtod_l+0x800>
 8009302:	6923      	ldr	r3, [r4, #16]
 8009304:	2b01      	cmp	r3, #1
 8009306:	dd5b      	ble.n	80093c0 <_strtod_l+0x8b8>
 8009308:	4621      	mov	r1, r4
 800930a:	2201      	movs	r2, #1
 800930c:	9805      	ldr	r0, [sp, #20]
 800930e:	f7ff f983 	bl	8008618 <__lshift>
 8009312:	4641      	mov	r1, r8
 8009314:	4604      	mov	r4, r0
 8009316:	f7ff f9eb 	bl	80086f0 <__mcmp>
 800931a:	2800      	cmp	r0, #0
 800931c:	dd50      	ble.n	80093c0 <_strtod_l+0x8b8>
 800931e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009322:	9a08      	ldr	r2, [sp, #32]
 8009324:	0d1b      	lsrs	r3, r3, #20
 8009326:	051b      	lsls	r3, r3, #20
 8009328:	2a00      	cmp	r2, #0
 800932a:	d06a      	beq.n	8009402 <_strtod_l+0x8fa>
 800932c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009330:	d867      	bhi.n	8009402 <_strtod_l+0x8fa>
 8009332:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009336:	f67f ae9d 	bls.w	8009074 <_strtod_l+0x56c>
 800933a:	4b0a      	ldr	r3, [pc, #40]	@ (8009364 <_strtod_l+0x85c>)
 800933c:	4650      	mov	r0, sl
 800933e:	4659      	mov	r1, fp
 8009340:	2200      	movs	r2, #0
 8009342:	f7f7 f969 	bl	8000618 <__aeabi_dmul>
 8009346:	4b08      	ldr	r3, [pc, #32]	@ (8009368 <_strtod_l+0x860>)
 8009348:	400b      	ands	r3, r1
 800934a:	4682      	mov	sl, r0
 800934c:	468b      	mov	fp, r1
 800934e:	2b00      	cmp	r3, #0
 8009350:	f47f ae08 	bne.w	8008f64 <_strtod_l+0x45c>
 8009354:	9a05      	ldr	r2, [sp, #20]
 8009356:	2322      	movs	r3, #34	@ 0x22
 8009358:	6013      	str	r3, [r2, #0]
 800935a:	e603      	b.n	8008f64 <_strtod_l+0x45c>
 800935c:	0800af70 	.word	0x0800af70
 8009360:	fffffc02 	.word	0xfffffc02
 8009364:	39500000 	.word	0x39500000
 8009368:	7ff00000 	.word	0x7ff00000
 800936c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009370:	d165      	bne.n	800943e <_strtod_l+0x936>
 8009372:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009374:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009378:	b35a      	cbz	r2, 80093d2 <_strtod_l+0x8ca>
 800937a:	4a9f      	ldr	r2, [pc, #636]	@ (80095f8 <_strtod_l+0xaf0>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d12b      	bne.n	80093d8 <_strtod_l+0x8d0>
 8009380:	9b08      	ldr	r3, [sp, #32]
 8009382:	4651      	mov	r1, sl
 8009384:	b303      	cbz	r3, 80093c8 <_strtod_l+0x8c0>
 8009386:	4b9d      	ldr	r3, [pc, #628]	@ (80095fc <_strtod_l+0xaf4>)
 8009388:	465a      	mov	r2, fp
 800938a:	4013      	ands	r3, r2
 800938c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009390:	f04f 32ff 	mov.w	r2, #4294967295
 8009394:	d81b      	bhi.n	80093ce <_strtod_l+0x8c6>
 8009396:	0d1b      	lsrs	r3, r3, #20
 8009398:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800939c:	fa02 f303 	lsl.w	r3, r2, r3
 80093a0:	4299      	cmp	r1, r3
 80093a2:	d119      	bne.n	80093d8 <_strtod_l+0x8d0>
 80093a4:	4b96      	ldr	r3, [pc, #600]	@ (8009600 <_strtod_l+0xaf8>)
 80093a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d102      	bne.n	80093b2 <_strtod_l+0x8aa>
 80093ac:	3101      	adds	r1, #1
 80093ae:	f43f adce 	beq.w	8008f4e <_strtod_l+0x446>
 80093b2:	4b92      	ldr	r3, [pc, #584]	@ (80095fc <_strtod_l+0xaf4>)
 80093b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093b6:	401a      	ands	r2, r3
 80093b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80093bc:	f04f 0a00 	mov.w	sl, #0
 80093c0:	9b08      	ldr	r3, [sp, #32]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1b9      	bne.n	800933a <_strtod_l+0x832>
 80093c6:	e5cd      	b.n	8008f64 <_strtod_l+0x45c>
 80093c8:	f04f 33ff 	mov.w	r3, #4294967295
 80093cc:	e7e8      	b.n	80093a0 <_strtod_l+0x898>
 80093ce:	4613      	mov	r3, r2
 80093d0:	e7e6      	b.n	80093a0 <_strtod_l+0x898>
 80093d2:	ea53 030a 	orrs.w	r3, r3, sl
 80093d6:	d0a2      	beq.n	800931e <_strtod_l+0x816>
 80093d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80093da:	b1db      	cbz	r3, 8009414 <_strtod_l+0x90c>
 80093dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093de:	4213      	tst	r3, r2
 80093e0:	d0ee      	beq.n	80093c0 <_strtod_l+0x8b8>
 80093e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093e4:	9a08      	ldr	r2, [sp, #32]
 80093e6:	4650      	mov	r0, sl
 80093e8:	4659      	mov	r1, fp
 80093ea:	b1bb      	cbz	r3, 800941c <_strtod_l+0x914>
 80093ec:	f7ff fb6e 	bl	8008acc <sulp>
 80093f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093f4:	ec53 2b10 	vmov	r2, r3, d0
 80093f8:	f7f6 ff58 	bl	80002ac <__adddf3>
 80093fc:	4682      	mov	sl, r0
 80093fe:	468b      	mov	fp, r1
 8009400:	e7de      	b.n	80093c0 <_strtod_l+0x8b8>
 8009402:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009406:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800940a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800940e:	f04f 3aff 	mov.w	sl, #4294967295
 8009412:	e7d5      	b.n	80093c0 <_strtod_l+0x8b8>
 8009414:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009416:	ea13 0f0a 	tst.w	r3, sl
 800941a:	e7e1      	b.n	80093e0 <_strtod_l+0x8d8>
 800941c:	f7ff fb56 	bl	8008acc <sulp>
 8009420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009424:	ec53 2b10 	vmov	r2, r3, d0
 8009428:	f7f6 ff3e 	bl	80002a8 <__aeabi_dsub>
 800942c:	2200      	movs	r2, #0
 800942e:	2300      	movs	r3, #0
 8009430:	4682      	mov	sl, r0
 8009432:	468b      	mov	fp, r1
 8009434:	f7f7 fb58 	bl	8000ae8 <__aeabi_dcmpeq>
 8009438:	2800      	cmp	r0, #0
 800943a:	d0c1      	beq.n	80093c0 <_strtod_l+0x8b8>
 800943c:	e61a      	b.n	8009074 <_strtod_l+0x56c>
 800943e:	4641      	mov	r1, r8
 8009440:	4620      	mov	r0, r4
 8009442:	f7ff facd 	bl	80089e0 <__ratio>
 8009446:	ec57 6b10 	vmov	r6, r7, d0
 800944a:	2200      	movs	r2, #0
 800944c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009450:	4630      	mov	r0, r6
 8009452:	4639      	mov	r1, r7
 8009454:	f7f7 fb5c 	bl	8000b10 <__aeabi_dcmple>
 8009458:	2800      	cmp	r0, #0
 800945a:	d06f      	beq.n	800953c <_strtod_l+0xa34>
 800945c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800945e:	2b00      	cmp	r3, #0
 8009460:	d17a      	bne.n	8009558 <_strtod_l+0xa50>
 8009462:	f1ba 0f00 	cmp.w	sl, #0
 8009466:	d158      	bne.n	800951a <_strtod_l+0xa12>
 8009468:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800946a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800946e:	2b00      	cmp	r3, #0
 8009470:	d15a      	bne.n	8009528 <_strtod_l+0xa20>
 8009472:	4b64      	ldr	r3, [pc, #400]	@ (8009604 <_strtod_l+0xafc>)
 8009474:	2200      	movs	r2, #0
 8009476:	4630      	mov	r0, r6
 8009478:	4639      	mov	r1, r7
 800947a:	f7f7 fb3f 	bl	8000afc <__aeabi_dcmplt>
 800947e:	2800      	cmp	r0, #0
 8009480:	d159      	bne.n	8009536 <_strtod_l+0xa2e>
 8009482:	4630      	mov	r0, r6
 8009484:	4639      	mov	r1, r7
 8009486:	4b60      	ldr	r3, [pc, #384]	@ (8009608 <_strtod_l+0xb00>)
 8009488:	2200      	movs	r2, #0
 800948a:	f7f7 f8c5 	bl	8000618 <__aeabi_dmul>
 800948e:	4606      	mov	r6, r0
 8009490:	460f      	mov	r7, r1
 8009492:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009496:	9606      	str	r6, [sp, #24]
 8009498:	9307      	str	r3, [sp, #28]
 800949a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800949e:	4d57      	ldr	r5, [pc, #348]	@ (80095fc <_strtod_l+0xaf4>)
 80094a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80094a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094a6:	401d      	ands	r5, r3
 80094a8:	4b58      	ldr	r3, [pc, #352]	@ (800960c <_strtod_l+0xb04>)
 80094aa:	429d      	cmp	r5, r3
 80094ac:	f040 80b2 	bne.w	8009614 <_strtod_l+0xb0c>
 80094b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80094b6:	ec4b ab10 	vmov	d0, sl, fp
 80094ba:	f7ff f9c9 	bl	8008850 <__ulp>
 80094be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094c2:	ec51 0b10 	vmov	r0, r1, d0
 80094c6:	f7f7 f8a7 	bl	8000618 <__aeabi_dmul>
 80094ca:	4652      	mov	r2, sl
 80094cc:	465b      	mov	r3, fp
 80094ce:	f7f6 feed 	bl	80002ac <__adddf3>
 80094d2:	460b      	mov	r3, r1
 80094d4:	4949      	ldr	r1, [pc, #292]	@ (80095fc <_strtod_l+0xaf4>)
 80094d6:	4a4e      	ldr	r2, [pc, #312]	@ (8009610 <_strtod_l+0xb08>)
 80094d8:	4019      	ands	r1, r3
 80094da:	4291      	cmp	r1, r2
 80094dc:	4682      	mov	sl, r0
 80094de:	d942      	bls.n	8009566 <_strtod_l+0xa5e>
 80094e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80094e2:	4b47      	ldr	r3, [pc, #284]	@ (8009600 <_strtod_l+0xaf8>)
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d103      	bne.n	80094f0 <_strtod_l+0x9e8>
 80094e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094ea:	3301      	adds	r3, #1
 80094ec:	f43f ad2f 	beq.w	8008f4e <_strtod_l+0x446>
 80094f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009600 <_strtod_l+0xaf8>
 80094f4:	f04f 3aff 	mov.w	sl, #4294967295
 80094f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094fa:	9805      	ldr	r0, [sp, #20]
 80094fc:	f7fe fe7c 	bl	80081f8 <_Bfree>
 8009500:	9805      	ldr	r0, [sp, #20]
 8009502:	4649      	mov	r1, r9
 8009504:	f7fe fe78 	bl	80081f8 <_Bfree>
 8009508:	9805      	ldr	r0, [sp, #20]
 800950a:	4641      	mov	r1, r8
 800950c:	f7fe fe74 	bl	80081f8 <_Bfree>
 8009510:	9805      	ldr	r0, [sp, #20]
 8009512:	4621      	mov	r1, r4
 8009514:	f7fe fe70 	bl	80081f8 <_Bfree>
 8009518:	e619      	b.n	800914e <_strtod_l+0x646>
 800951a:	f1ba 0f01 	cmp.w	sl, #1
 800951e:	d103      	bne.n	8009528 <_strtod_l+0xa20>
 8009520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009522:	2b00      	cmp	r3, #0
 8009524:	f43f ada6 	beq.w	8009074 <_strtod_l+0x56c>
 8009528:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80095d8 <_strtod_l+0xad0>
 800952c:	4f35      	ldr	r7, [pc, #212]	@ (8009604 <_strtod_l+0xafc>)
 800952e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009532:	2600      	movs	r6, #0
 8009534:	e7b1      	b.n	800949a <_strtod_l+0x992>
 8009536:	4f34      	ldr	r7, [pc, #208]	@ (8009608 <_strtod_l+0xb00>)
 8009538:	2600      	movs	r6, #0
 800953a:	e7aa      	b.n	8009492 <_strtod_l+0x98a>
 800953c:	4b32      	ldr	r3, [pc, #200]	@ (8009608 <_strtod_l+0xb00>)
 800953e:	4630      	mov	r0, r6
 8009540:	4639      	mov	r1, r7
 8009542:	2200      	movs	r2, #0
 8009544:	f7f7 f868 	bl	8000618 <__aeabi_dmul>
 8009548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800954a:	4606      	mov	r6, r0
 800954c:	460f      	mov	r7, r1
 800954e:	2b00      	cmp	r3, #0
 8009550:	d09f      	beq.n	8009492 <_strtod_l+0x98a>
 8009552:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009556:	e7a0      	b.n	800949a <_strtod_l+0x992>
 8009558:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80095e0 <_strtod_l+0xad8>
 800955c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009560:	ec57 6b17 	vmov	r6, r7, d7
 8009564:	e799      	b.n	800949a <_strtod_l+0x992>
 8009566:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800956a:	9b08      	ldr	r3, [sp, #32]
 800956c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1c1      	bne.n	80094f8 <_strtod_l+0x9f0>
 8009574:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009578:	0d1b      	lsrs	r3, r3, #20
 800957a:	051b      	lsls	r3, r3, #20
 800957c:	429d      	cmp	r5, r3
 800957e:	d1bb      	bne.n	80094f8 <_strtod_l+0x9f0>
 8009580:	4630      	mov	r0, r6
 8009582:	4639      	mov	r1, r7
 8009584:	f7f7 fba8 	bl	8000cd8 <__aeabi_d2lz>
 8009588:	f7f7 f818 	bl	80005bc <__aeabi_l2d>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	4630      	mov	r0, r6
 8009592:	4639      	mov	r1, r7
 8009594:	f7f6 fe88 	bl	80002a8 <__aeabi_dsub>
 8009598:	460b      	mov	r3, r1
 800959a:	4602      	mov	r2, r0
 800959c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80095a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80095a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095a6:	ea46 060a 	orr.w	r6, r6, sl
 80095aa:	431e      	orrs	r6, r3
 80095ac:	d06f      	beq.n	800968e <_strtod_l+0xb86>
 80095ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80095e8 <_strtod_l+0xae0>)
 80095b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b4:	f7f7 faa2 	bl	8000afc <__aeabi_dcmplt>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	f47f acd3 	bne.w	8008f64 <_strtod_l+0x45c>
 80095be:	a30c      	add	r3, pc, #48	@ (adr r3, 80095f0 <_strtod_l+0xae8>)
 80095c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095c8:	f7f7 fab6 	bl	8000b38 <__aeabi_dcmpgt>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d093      	beq.n	80094f8 <_strtod_l+0x9f0>
 80095d0:	e4c8      	b.n	8008f64 <_strtod_l+0x45c>
 80095d2:	bf00      	nop
 80095d4:	f3af 8000 	nop.w
 80095d8:	00000000 	.word	0x00000000
 80095dc:	bff00000 	.word	0xbff00000
 80095e0:	00000000 	.word	0x00000000
 80095e4:	3ff00000 	.word	0x3ff00000
 80095e8:	94a03595 	.word	0x94a03595
 80095ec:	3fdfffff 	.word	0x3fdfffff
 80095f0:	35afe535 	.word	0x35afe535
 80095f4:	3fe00000 	.word	0x3fe00000
 80095f8:	000fffff 	.word	0x000fffff
 80095fc:	7ff00000 	.word	0x7ff00000
 8009600:	7fefffff 	.word	0x7fefffff
 8009604:	3ff00000 	.word	0x3ff00000
 8009608:	3fe00000 	.word	0x3fe00000
 800960c:	7fe00000 	.word	0x7fe00000
 8009610:	7c9fffff 	.word	0x7c9fffff
 8009614:	9b08      	ldr	r3, [sp, #32]
 8009616:	b323      	cbz	r3, 8009662 <_strtod_l+0xb5a>
 8009618:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800961c:	d821      	bhi.n	8009662 <_strtod_l+0xb5a>
 800961e:	a328      	add	r3, pc, #160	@ (adr r3, 80096c0 <_strtod_l+0xbb8>)
 8009620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009624:	4630      	mov	r0, r6
 8009626:	4639      	mov	r1, r7
 8009628:	f7f7 fa72 	bl	8000b10 <__aeabi_dcmple>
 800962c:	b1a0      	cbz	r0, 8009658 <_strtod_l+0xb50>
 800962e:	4639      	mov	r1, r7
 8009630:	4630      	mov	r0, r6
 8009632:	f7f7 fac9 	bl	8000bc8 <__aeabi_d2uiz>
 8009636:	2801      	cmp	r0, #1
 8009638:	bf38      	it	cc
 800963a:	2001      	movcc	r0, #1
 800963c:	f7f6 ff72 	bl	8000524 <__aeabi_ui2d>
 8009640:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009642:	4606      	mov	r6, r0
 8009644:	460f      	mov	r7, r1
 8009646:	b9fb      	cbnz	r3, 8009688 <_strtod_l+0xb80>
 8009648:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800964c:	9014      	str	r0, [sp, #80]	@ 0x50
 800964e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009650:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009654:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009658:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800965a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800965e:	1b5b      	subs	r3, r3, r5
 8009660:	9311      	str	r3, [sp, #68]	@ 0x44
 8009662:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009666:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800966a:	f7ff f8f1 	bl	8008850 <__ulp>
 800966e:	4650      	mov	r0, sl
 8009670:	ec53 2b10 	vmov	r2, r3, d0
 8009674:	4659      	mov	r1, fp
 8009676:	f7f6 ffcf 	bl	8000618 <__aeabi_dmul>
 800967a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800967e:	f7f6 fe15 	bl	80002ac <__adddf3>
 8009682:	4682      	mov	sl, r0
 8009684:	468b      	mov	fp, r1
 8009686:	e770      	b.n	800956a <_strtod_l+0xa62>
 8009688:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800968c:	e7e0      	b.n	8009650 <_strtod_l+0xb48>
 800968e:	a30e      	add	r3, pc, #56	@ (adr r3, 80096c8 <_strtod_l+0xbc0>)
 8009690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009694:	f7f7 fa32 	bl	8000afc <__aeabi_dcmplt>
 8009698:	e798      	b.n	80095cc <_strtod_l+0xac4>
 800969a:	2300      	movs	r3, #0
 800969c:	930e      	str	r3, [sp, #56]	@ 0x38
 800969e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80096a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	f7ff ba6d 	b.w	8008b82 <_strtod_l+0x7a>
 80096a8:	2a65      	cmp	r2, #101	@ 0x65
 80096aa:	f43f ab68 	beq.w	8008d7e <_strtod_l+0x276>
 80096ae:	2a45      	cmp	r2, #69	@ 0x45
 80096b0:	f43f ab65 	beq.w	8008d7e <_strtod_l+0x276>
 80096b4:	2301      	movs	r3, #1
 80096b6:	f7ff bba0 	b.w	8008dfa <_strtod_l+0x2f2>
 80096ba:	bf00      	nop
 80096bc:	f3af 8000 	nop.w
 80096c0:	ffc00000 	.word	0xffc00000
 80096c4:	41dfffff 	.word	0x41dfffff
 80096c8:	94a03595 	.word	0x94a03595
 80096cc:	3fcfffff 	.word	0x3fcfffff

080096d0 <_strtod_r>:
 80096d0:	4b01      	ldr	r3, [pc, #4]	@ (80096d8 <_strtod_r+0x8>)
 80096d2:	f7ff ba19 	b.w	8008b08 <_strtod_l>
 80096d6:	bf00      	nop
 80096d8:	20000074 	.word	0x20000074

080096dc <_strtol_l.isra.0>:
 80096dc:	2b24      	cmp	r3, #36	@ 0x24
 80096de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096e2:	4686      	mov	lr, r0
 80096e4:	4690      	mov	r8, r2
 80096e6:	d801      	bhi.n	80096ec <_strtol_l.isra.0+0x10>
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d106      	bne.n	80096fa <_strtol_l.isra.0+0x1e>
 80096ec:	f7fd fda8 	bl	8007240 <__errno>
 80096f0:	2316      	movs	r3, #22
 80096f2:	6003      	str	r3, [r0, #0]
 80096f4:	2000      	movs	r0, #0
 80096f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096fa:	4834      	ldr	r0, [pc, #208]	@ (80097cc <_strtol_l.isra.0+0xf0>)
 80096fc:	460d      	mov	r5, r1
 80096fe:	462a      	mov	r2, r5
 8009700:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009704:	5d06      	ldrb	r6, [r0, r4]
 8009706:	f016 0608 	ands.w	r6, r6, #8
 800970a:	d1f8      	bne.n	80096fe <_strtol_l.isra.0+0x22>
 800970c:	2c2d      	cmp	r4, #45	@ 0x2d
 800970e:	d110      	bne.n	8009732 <_strtol_l.isra.0+0x56>
 8009710:	782c      	ldrb	r4, [r5, #0]
 8009712:	2601      	movs	r6, #1
 8009714:	1c95      	adds	r5, r2, #2
 8009716:	f033 0210 	bics.w	r2, r3, #16
 800971a:	d115      	bne.n	8009748 <_strtol_l.isra.0+0x6c>
 800971c:	2c30      	cmp	r4, #48	@ 0x30
 800971e:	d10d      	bne.n	800973c <_strtol_l.isra.0+0x60>
 8009720:	782a      	ldrb	r2, [r5, #0]
 8009722:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009726:	2a58      	cmp	r2, #88	@ 0x58
 8009728:	d108      	bne.n	800973c <_strtol_l.isra.0+0x60>
 800972a:	786c      	ldrb	r4, [r5, #1]
 800972c:	3502      	adds	r5, #2
 800972e:	2310      	movs	r3, #16
 8009730:	e00a      	b.n	8009748 <_strtol_l.isra.0+0x6c>
 8009732:	2c2b      	cmp	r4, #43	@ 0x2b
 8009734:	bf04      	itt	eq
 8009736:	782c      	ldrbeq	r4, [r5, #0]
 8009738:	1c95      	addeq	r5, r2, #2
 800973a:	e7ec      	b.n	8009716 <_strtol_l.isra.0+0x3a>
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1f6      	bne.n	800972e <_strtol_l.isra.0+0x52>
 8009740:	2c30      	cmp	r4, #48	@ 0x30
 8009742:	bf14      	ite	ne
 8009744:	230a      	movne	r3, #10
 8009746:	2308      	moveq	r3, #8
 8009748:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800974c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009750:	2200      	movs	r2, #0
 8009752:	fbbc f9f3 	udiv	r9, ip, r3
 8009756:	4610      	mov	r0, r2
 8009758:	fb03 ca19 	mls	sl, r3, r9, ip
 800975c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009760:	2f09      	cmp	r7, #9
 8009762:	d80f      	bhi.n	8009784 <_strtol_l.isra.0+0xa8>
 8009764:	463c      	mov	r4, r7
 8009766:	42a3      	cmp	r3, r4
 8009768:	dd1b      	ble.n	80097a2 <_strtol_l.isra.0+0xc6>
 800976a:	1c57      	adds	r7, r2, #1
 800976c:	d007      	beq.n	800977e <_strtol_l.isra.0+0xa2>
 800976e:	4581      	cmp	r9, r0
 8009770:	d314      	bcc.n	800979c <_strtol_l.isra.0+0xc0>
 8009772:	d101      	bne.n	8009778 <_strtol_l.isra.0+0x9c>
 8009774:	45a2      	cmp	sl, r4
 8009776:	db11      	blt.n	800979c <_strtol_l.isra.0+0xc0>
 8009778:	fb00 4003 	mla	r0, r0, r3, r4
 800977c:	2201      	movs	r2, #1
 800977e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009782:	e7eb      	b.n	800975c <_strtol_l.isra.0+0x80>
 8009784:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009788:	2f19      	cmp	r7, #25
 800978a:	d801      	bhi.n	8009790 <_strtol_l.isra.0+0xb4>
 800978c:	3c37      	subs	r4, #55	@ 0x37
 800978e:	e7ea      	b.n	8009766 <_strtol_l.isra.0+0x8a>
 8009790:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009794:	2f19      	cmp	r7, #25
 8009796:	d804      	bhi.n	80097a2 <_strtol_l.isra.0+0xc6>
 8009798:	3c57      	subs	r4, #87	@ 0x57
 800979a:	e7e4      	b.n	8009766 <_strtol_l.isra.0+0x8a>
 800979c:	f04f 32ff 	mov.w	r2, #4294967295
 80097a0:	e7ed      	b.n	800977e <_strtol_l.isra.0+0xa2>
 80097a2:	1c53      	adds	r3, r2, #1
 80097a4:	d108      	bne.n	80097b8 <_strtol_l.isra.0+0xdc>
 80097a6:	2322      	movs	r3, #34	@ 0x22
 80097a8:	f8ce 3000 	str.w	r3, [lr]
 80097ac:	4660      	mov	r0, ip
 80097ae:	f1b8 0f00 	cmp.w	r8, #0
 80097b2:	d0a0      	beq.n	80096f6 <_strtol_l.isra.0+0x1a>
 80097b4:	1e69      	subs	r1, r5, #1
 80097b6:	e006      	b.n	80097c6 <_strtol_l.isra.0+0xea>
 80097b8:	b106      	cbz	r6, 80097bc <_strtol_l.isra.0+0xe0>
 80097ba:	4240      	negs	r0, r0
 80097bc:	f1b8 0f00 	cmp.w	r8, #0
 80097c0:	d099      	beq.n	80096f6 <_strtol_l.isra.0+0x1a>
 80097c2:	2a00      	cmp	r2, #0
 80097c4:	d1f6      	bne.n	80097b4 <_strtol_l.isra.0+0xd8>
 80097c6:	f8c8 1000 	str.w	r1, [r8]
 80097ca:	e794      	b.n	80096f6 <_strtol_l.isra.0+0x1a>
 80097cc:	0800af99 	.word	0x0800af99

080097d0 <_strtol_r>:
 80097d0:	f7ff bf84 	b.w	80096dc <_strtol_l.isra.0>

080097d4 <__ssputs_r>:
 80097d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d8:	688e      	ldr	r6, [r1, #8]
 80097da:	461f      	mov	r7, r3
 80097dc:	42be      	cmp	r6, r7
 80097de:	680b      	ldr	r3, [r1, #0]
 80097e0:	4682      	mov	sl, r0
 80097e2:	460c      	mov	r4, r1
 80097e4:	4690      	mov	r8, r2
 80097e6:	d82d      	bhi.n	8009844 <__ssputs_r+0x70>
 80097e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80097f0:	d026      	beq.n	8009840 <__ssputs_r+0x6c>
 80097f2:	6965      	ldr	r5, [r4, #20]
 80097f4:	6909      	ldr	r1, [r1, #16]
 80097f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097fa:	eba3 0901 	sub.w	r9, r3, r1
 80097fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009802:	1c7b      	adds	r3, r7, #1
 8009804:	444b      	add	r3, r9
 8009806:	106d      	asrs	r5, r5, #1
 8009808:	429d      	cmp	r5, r3
 800980a:	bf38      	it	cc
 800980c:	461d      	movcc	r5, r3
 800980e:	0553      	lsls	r3, r2, #21
 8009810:	d527      	bpl.n	8009862 <__ssputs_r+0x8e>
 8009812:	4629      	mov	r1, r5
 8009814:	f7fe fc24 	bl	8008060 <_malloc_r>
 8009818:	4606      	mov	r6, r0
 800981a:	b360      	cbz	r0, 8009876 <__ssputs_r+0xa2>
 800981c:	6921      	ldr	r1, [r4, #16]
 800981e:	464a      	mov	r2, r9
 8009820:	f7fd fd3b 	bl	800729a <memcpy>
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800982a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800982e:	81a3      	strh	r3, [r4, #12]
 8009830:	6126      	str	r6, [r4, #16]
 8009832:	6165      	str	r5, [r4, #20]
 8009834:	444e      	add	r6, r9
 8009836:	eba5 0509 	sub.w	r5, r5, r9
 800983a:	6026      	str	r6, [r4, #0]
 800983c:	60a5      	str	r5, [r4, #8]
 800983e:	463e      	mov	r6, r7
 8009840:	42be      	cmp	r6, r7
 8009842:	d900      	bls.n	8009846 <__ssputs_r+0x72>
 8009844:	463e      	mov	r6, r7
 8009846:	6820      	ldr	r0, [r4, #0]
 8009848:	4632      	mov	r2, r6
 800984a:	4641      	mov	r1, r8
 800984c:	f000 f9c6 	bl	8009bdc <memmove>
 8009850:	68a3      	ldr	r3, [r4, #8]
 8009852:	1b9b      	subs	r3, r3, r6
 8009854:	60a3      	str	r3, [r4, #8]
 8009856:	6823      	ldr	r3, [r4, #0]
 8009858:	4433      	add	r3, r6
 800985a:	6023      	str	r3, [r4, #0]
 800985c:	2000      	movs	r0, #0
 800985e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009862:	462a      	mov	r2, r5
 8009864:	f000 fd7d 	bl	800a362 <_realloc_r>
 8009868:	4606      	mov	r6, r0
 800986a:	2800      	cmp	r0, #0
 800986c:	d1e0      	bne.n	8009830 <__ssputs_r+0x5c>
 800986e:	6921      	ldr	r1, [r4, #16]
 8009870:	4650      	mov	r0, sl
 8009872:	f7fe fb81 	bl	8007f78 <_free_r>
 8009876:	230c      	movs	r3, #12
 8009878:	f8ca 3000 	str.w	r3, [sl]
 800987c:	89a3      	ldrh	r3, [r4, #12]
 800987e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009882:	81a3      	strh	r3, [r4, #12]
 8009884:	f04f 30ff 	mov.w	r0, #4294967295
 8009888:	e7e9      	b.n	800985e <__ssputs_r+0x8a>
	...

0800988c <_svfiprintf_r>:
 800988c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009890:	4698      	mov	r8, r3
 8009892:	898b      	ldrh	r3, [r1, #12]
 8009894:	061b      	lsls	r3, r3, #24
 8009896:	b09d      	sub	sp, #116	@ 0x74
 8009898:	4607      	mov	r7, r0
 800989a:	460d      	mov	r5, r1
 800989c:	4614      	mov	r4, r2
 800989e:	d510      	bpl.n	80098c2 <_svfiprintf_r+0x36>
 80098a0:	690b      	ldr	r3, [r1, #16]
 80098a2:	b973      	cbnz	r3, 80098c2 <_svfiprintf_r+0x36>
 80098a4:	2140      	movs	r1, #64	@ 0x40
 80098a6:	f7fe fbdb 	bl	8008060 <_malloc_r>
 80098aa:	6028      	str	r0, [r5, #0]
 80098ac:	6128      	str	r0, [r5, #16]
 80098ae:	b930      	cbnz	r0, 80098be <_svfiprintf_r+0x32>
 80098b0:	230c      	movs	r3, #12
 80098b2:	603b      	str	r3, [r7, #0]
 80098b4:	f04f 30ff 	mov.w	r0, #4294967295
 80098b8:	b01d      	add	sp, #116	@ 0x74
 80098ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098be:	2340      	movs	r3, #64	@ 0x40
 80098c0:	616b      	str	r3, [r5, #20]
 80098c2:	2300      	movs	r3, #0
 80098c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80098c6:	2320      	movs	r3, #32
 80098c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80098d0:	2330      	movs	r3, #48	@ 0x30
 80098d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009a70 <_svfiprintf_r+0x1e4>
 80098d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098da:	f04f 0901 	mov.w	r9, #1
 80098de:	4623      	mov	r3, r4
 80098e0:	469a      	mov	sl, r3
 80098e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098e6:	b10a      	cbz	r2, 80098ec <_svfiprintf_r+0x60>
 80098e8:	2a25      	cmp	r2, #37	@ 0x25
 80098ea:	d1f9      	bne.n	80098e0 <_svfiprintf_r+0x54>
 80098ec:	ebba 0b04 	subs.w	fp, sl, r4
 80098f0:	d00b      	beq.n	800990a <_svfiprintf_r+0x7e>
 80098f2:	465b      	mov	r3, fp
 80098f4:	4622      	mov	r2, r4
 80098f6:	4629      	mov	r1, r5
 80098f8:	4638      	mov	r0, r7
 80098fa:	f7ff ff6b 	bl	80097d4 <__ssputs_r>
 80098fe:	3001      	adds	r0, #1
 8009900:	f000 80a7 	beq.w	8009a52 <_svfiprintf_r+0x1c6>
 8009904:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009906:	445a      	add	r2, fp
 8009908:	9209      	str	r2, [sp, #36]	@ 0x24
 800990a:	f89a 3000 	ldrb.w	r3, [sl]
 800990e:	2b00      	cmp	r3, #0
 8009910:	f000 809f 	beq.w	8009a52 <_svfiprintf_r+0x1c6>
 8009914:	2300      	movs	r3, #0
 8009916:	f04f 32ff 	mov.w	r2, #4294967295
 800991a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800991e:	f10a 0a01 	add.w	sl, sl, #1
 8009922:	9304      	str	r3, [sp, #16]
 8009924:	9307      	str	r3, [sp, #28]
 8009926:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800992a:	931a      	str	r3, [sp, #104]	@ 0x68
 800992c:	4654      	mov	r4, sl
 800992e:	2205      	movs	r2, #5
 8009930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009934:	484e      	ldr	r0, [pc, #312]	@ (8009a70 <_svfiprintf_r+0x1e4>)
 8009936:	f7f6 fc5b 	bl	80001f0 <memchr>
 800993a:	9a04      	ldr	r2, [sp, #16]
 800993c:	b9d8      	cbnz	r0, 8009976 <_svfiprintf_r+0xea>
 800993e:	06d0      	lsls	r0, r2, #27
 8009940:	bf44      	itt	mi
 8009942:	2320      	movmi	r3, #32
 8009944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009948:	0711      	lsls	r1, r2, #28
 800994a:	bf44      	itt	mi
 800994c:	232b      	movmi	r3, #43	@ 0x2b
 800994e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009952:	f89a 3000 	ldrb.w	r3, [sl]
 8009956:	2b2a      	cmp	r3, #42	@ 0x2a
 8009958:	d015      	beq.n	8009986 <_svfiprintf_r+0xfa>
 800995a:	9a07      	ldr	r2, [sp, #28]
 800995c:	4654      	mov	r4, sl
 800995e:	2000      	movs	r0, #0
 8009960:	f04f 0c0a 	mov.w	ip, #10
 8009964:	4621      	mov	r1, r4
 8009966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800996a:	3b30      	subs	r3, #48	@ 0x30
 800996c:	2b09      	cmp	r3, #9
 800996e:	d94b      	bls.n	8009a08 <_svfiprintf_r+0x17c>
 8009970:	b1b0      	cbz	r0, 80099a0 <_svfiprintf_r+0x114>
 8009972:	9207      	str	r2, [sp, #28]
 8009974:	e014      	b.n	80099a0 <_svfiprintf_r+0x114>
 8009976:	eba0 0308 	sub.w	r3, r0, r8
 800997a:	fa09 f303 	lsl.w	r3, r9, r3
 800997e:	4313      	orrs	r3, r2
 8009980:	9304      	str	r3, [sp, #16]
 8009982:	46a2      	mov	sl, r4
 8009984:	e7d2      	b.n	800992c <_svfiprintf_r+0xa0>
 8009986:	9b03      	ldr	r3, [sp, #12]
 8009988:	1d19      	adds	r1, r3, #4
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	9103      	str	r1, [sp, #12]
 800998e:	2b00      	cmp	r3, #0
 8009990:	bfbb      	ittet	lt
 8009992:	425b      	neglt	r3, r3
 8009994:	f042 0202 	orrlt.w	r2, r2, #2
 8009998:	9307      	strge	r3, [sp, #28]
 800999a:	9307      	strlt	r3, [sp, #28]
 800999c:	bfb8      	it	lt
 800999e:	9204      	strlt	r2, [sp, #16]
 80099a0:	7823      	ldrb	r3, [r4, #0]
 80099a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80099a4:	d10a      	bne.n	80099bc <_svfiprintf_r+0x130>
 80099a6:	7863      	ldrb	r3, [r4, #1]
 80099a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80099aa:	d132      	bne.n	8009a12 <_svfiprintf_r+0x186>
 80099ac:	9b03      	ldr	r3, [sp, #12]
 80099ae:	1d1a      	adds	r2, r3, #4
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	9203      	str	r2, [sp, #12]
 80099b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099b8:	3402      	adds	r4, #2
 80099ba:	9305      	str	r3, [sp, #20]
 80099bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009a80 <_svfiprintf_r+0x1f4>
 80099c0:	7821      	ldrb	r1, [r4, #0]
 80099c2:	2203      	movs	r2, #3
 80099c4:	4650      	mov	r0, sl
 80099c6:	f7f6 fc13 	bl	80001f0 <memchr>
 80099ca:	b138      	cbz	r0, 80099dc <_svfiprintf_r+0x150>
 80099cc:	9b04      	ldr	r3, [sp, #16]
 80099ce:	eba0 000a 	sub.w	r0, r0, sl
 80099d2:	2240      	movs	r2, #64	@ 0x40
 80099d4:	4082      	lsls	r2, r0
 80099d6:	4313      	orrs	r3, r2
 80099d8:	3401      	adds	r4, #1
 80099da:	9304      	str	r3, [sp, #16]
 80099dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099e0:	4824      	ldr	r0, [pc, #144]	@ (8009a74 <_svfiprintf_r+0x1e8>)
 80099e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099e6:	2206      	movs	r2, #6
 80099e8:	f7f6 fc02 	bl	80001f0 <memchr>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d036      	beq.n	8009a5e <_svfiprintf_r+0x1d2>
 80099f0:	4b21      	ldr	r3, [pc, #132]	@ (8009a78 <_svfiprintf_r+0x1ec>)
 80099f2:	bb1b      	cbnz	r3, 8009a3c <_svfiprintf_r+0x1b0>
 80099f4:	9b03      	ldr	r3, [sp, #12]
 80099f6:	3307      	adds	r3, #7
 80099f8:	f023 0307 	bic.w	r3, r3, #7
 80099fc:	3308      	adds	r3, #8
 80099fe:	9303      	str	r3, [sp, #12]
 8009a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a02:	4433      	add	r3, r6
 8009a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a06:	e76a      	b.n	80098de <_svfiprintf_r+0x52>
 8009a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a0c:	460c      	mov	r4, r1
 8009a0e:	2001      	movs	r0, #1
 8009a10:	e7a8      	b.n	8009964 <_svfiprintf_r+0xd8>
 8009a12:	2300      	movs	r3, #0
 8009a14:	3401      	adds	r4, #1
 8009a16:	9305      	str	r3, [sp, #20]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	f04f 0c0a 	mov.w	ip, #10
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a24:	3a30      	subs	r2, #48	@ 0x30
 8009a26:	2a09      	cmp	r2, #9
 8009a28:	d903      	bls.n	8009a32 <_svfiprintf_r+0x1a6>
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d0c6      	beq.n	80099bc <_svfiprintf_r+0x130>
 8009a2e:	9105      	str	r1, [sp, #20]
 8009a30:	e7c4      	b.n	80099bc <_svfiprintf_r+0x130>
 8009a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a36:	4604      	mov	r4, r0
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e7f0      	b.n	8009a1e <_svfiprintf_r+0x192>
 8009a3c:	ab03      	add	r3, sp, #12
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	462a      	mov	r2, r5
 8009a42:	4b0e      	ldr	r3, [pc, #56]	@ (8009a7c <_svfiprintf_r+0x1f0>)
 8009a44:	a904      	add	r1, sp, #16
 8009a46:	4638      	mov	r0, r7
 8009a48:	f7fc fc70 	bl	800632c <_printf_float>
 8009a4c:	1c42      	adds	r2, r0, #1
 8009a4e:	4606      	mov	r6, r0
 8009a50:	d1d6      	bne.n	8009a00 <_svfiprintf_r+0x174>
 8009a52:	89ab      	ldrh	r3, [r5, #12]
 8009a54:	065b      	lsls	r3, r3, #25
 8009a56:	f53f af2d 	bmi.w	80098b4 <_svfiprintf_r+0x28>
 8009a5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a5c:	e72c      	b.n	80098b8 <_svfiprintf_r+0x2c>
 8009a5e:	ab03      	add	r3, sp, #12
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	462a      	mov	r2, r5
 8009a64:	4b05      	ldr	r3, [pc, #20]	@ (8009a7c <_svfiprintf_r+0x1f0>)
 8009a66:	a904      	add	r1, sp, #16
 8009a68:	4638      	mov	r0, r7
 8009a6a:	f7fc fef7 	bl	800685c <_printf_i>
 8009a6e:	e7ed      	b.n	8009a4c <_svfiprintf_r+0x1c0>
 8009a70:	0800ad95 	.word	0x0800ad95
 8009a74:	0800ad9f 	.word	0x0800ad9f
 8009a78:	0800632d 	.word	0x0800632d
 8009a7c:	080097d5 	.word	0x080097d5
 8009a80:	0800ad9b 	.word	0x0800ad9b

08009a84 <__sflush_r>:
 8009a84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a8c:	0716      	lsls	r6, r2, #28
 8009a8e:	4605      	mov	r5, r0
 8009a90:	460c      	mov	r4, r1
 8009a92:	d454      	bmi.n	8009b3e <__sflush_r+0xba>
 8009a94:	684b      	ldr	r3, [r1, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	dc02      	bgt.n	8009aa0 <__sflush_r+0x1c>
 8009a9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	dd48      	ble.n	8009b32 <__sflush_r+0xae>
 8009aa0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009aa2:	2e00      	cmp	r6, #0
 8009aa4:	d045      	beq.n	8009b32 <__sflush_r+0xae>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009aac:	682f      	ldr	r7, [r5, #0]
 8009aae:	6a21      	ldr	r1, [r4, #32]
 8009ab0:	602b      	str	r3, [r5, #0]
 8009ab2:	d030      	beq.n	8009b16 <__sflush_r+0x92>
 8009ab4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009ab6:	89a3      	ldrh	r3, [r4, #12]
 8009ab8:	0759      	lsls	r1, r3, #29
 8009aba:	d505      	bpl.n	8009ac8 <__sflush_r+0x44>
 8009abc:	6863      	ldr	r3, [r4, #4]
 8009abe:	1ad2      	subs	r2, r2, r3
 8009ac0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ac2:	b10b      	cbz	r3, 8009ac8 <__sflush_r+0x44>
 8009ac4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ac6:	1ad2      	subs	r2, r2, r3
 8009ac8:	2300      	movs	r3, #0
 8009aca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009acc:	6a21      	ldr	r1, [r4, #32]
 8009ace:	4628      	mov	r0, r5
 8009ad0:	47b0      	blx	r6
 8009ad2:	1c43      	adds	r3, r0, #1
 8009ad4:	89a3      	ldrh	r3, [r4, #12]
 8009ad6:	d106      	bne.n	8009ae6 <__sflush_r+0x62>
 8009ad8:	6829      	ldr	r1, [r5, #0]
 8009ada:	291d      	cmp	r1, #29
 8009adc:	d82b      	bhi.n	8009b36 <__sflush_r+0xb2>
 8009ade:	4a2a      	ldr	r2, [pc, #168]	@ (8009b88 <__sflush_r+0x104>)
 8009ae0:	40ca      	lsrs	r2, r1
 8009ae2:	07d6      	lsls	r6, r2, #31
 8009ae4:	d527      	bpl.n	8009b36 <__sflush_r+0xb2>
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	6062      	str	r2, [r4, #4]
 8009aea:	04d9      	lsls	r1, r3, #19
 8009aec:	6922      	ldr	r2, [r4, #16]
 8009aee:	6022      	str	r2, [r4, #0]
 8009af0:	d504      	bpl.n	8009afc <__sflush_r+0x78>
 8009af2:	1c42      	adds	r2, r0, #1
 8009af4:	d101      	bne.n	8009afa <__sflush_r+0x76>
 8009af6:	682b      	ldr	r3, [r5, #0]
 8009af8:	b903      	cbnz	r3, 8009afc <__sflush_r+0x78>
 8009afa:	6560      	str	r0, [r4, #84]	@ 0x54
 8009afc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009afe:	602f      	str	r7, [r5, #0]
 8009b00:	b1b9      	cbz	r1, 8009b32 <__sflush_r+0xae>
 8009b02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b06:	4299      	cmp	r1, r3
 8009b08:	d002      	beq.n	8009b10 <__sflush_r+0x8c>
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	f7fe fa34 	bl	8007f78 <_free_r>
 8009b10:	2300      	movs	r3, #0
 8009b12:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b14:	e00d      	b.n	8009b32 <__sflush_r+0xae>
 8009b16:	2301      	movs	r3, #1
 8009b18:	4628      	mov	r0, r5
 8009b1a:	47b0      	blx	r6
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	1c50      	adds	r0, r2, #1
 8009b20:	d1c9      	bne.n	8009ab6 <__sflush_r+0x32>
 8009b22:	682b      	ldr	r3, [r5, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d0c6      	beq.n	8009ab6 <__sflush_r+0x32>
 8009b28:	2b1d      	cmp	r3, #29
 8009b2a:	d001      	beq.n	8009b30 <__sflush_r+0xac>
 8009b2c:	2b16      	cmp	r3, #22
 8009b2e:	d11e      	bne.n	8009b6e <__sflush_r+0xea>
 8009b30:	602f      	str	r7, [r5, #0]
 8009b32:	2000      	movs	r0, #0
 8009b34:	e022      	b.n	8009b7c <__sflush_r+0xf8>
 8009b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b3a:	b21b      	sxth	r3, r3
 8009b3c:	e01b      	b.n	8009b76 <__sflush_r+0xf2>
 8009b3e:	690f      	ldr	r7, [r1, #16]
 8009b40:	2f00      	cmp	r7, #0
 8009b42:	d0f6      	beq.n	8009b32 <__sflush_r+0xae>
 8009b44:	0793      	lsls	r3, r2, #30
 8009b46:	680e      	ldr	r6, [r1, #0]
 8009b48:	bf08      	it	eq
 8009b4a:	694b      	ldreq	r3, [r1, #20]
 8009b4c:	600f      	str	r7, [r1, #0]
 8009b4e:	bf18      	it	ne
 8009b50:	2300      	movne	r3, #0
 8009b52:	eba6 0807 	sub.w	r8, r6, r7
 8009b56:	608b      	str	r3, [r1, #8]
 8009b58:	f1b8 0f00 	cmp.w	r8, #0
 8009b5c:	dde9      	ble.n	8009b32 <__sflush_r+0xae>
 8009b5e:	6a21      	ldr	r1, [r4, #32]
 8009b60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009b62:	4643      	mov	r3, r8
 8009b64:	463a      	mov	r2, r7
 8009b66:	4628      	mov	r0, r5
 8009b68:	47b0      	blx	r6
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	dc08      	bgt.n	8009b80 <__sflush_r+0xfc>
 8009b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b76:	81a3      	strh	r3, [r4, #12]
 8009b78:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b80:	4407      	add	r7, r0
 8009b82:	eba8 0800 	sub.w	r8, r8, r0
 8009b86:	e7e7      	b.n	8009b58 <__sflush_r+0xd4>
 8009b88:	20400001 	.word	0x20400001

08009b8c <_fflush_r>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	690b      	ldr	r3, [r1, #16]
 8009b90:	4605      	mov	r5, r0
 8009b92:	460c      	mov	r4, r1
 8009b94:	b913      	cbnz	r3, 8009b9c <_fflush_r+0x10>
 8009b96:	2500      	movs	r5, #0
 8009b98:	4628      	mov	r0, r5
 8009b9a:	bd38      	pop	{r3, r4, r5, pc}
 8009b9c:	b118      	cbz	r0, 8009ba6 <_fflush_r+0x1a>
 8009b9e:	6a03      	ldr	r3, [r0, #32]
 8009ba0:	b90b      	cbnz	r3, 8009ba6 <_fflush_r+0x1a>
 8009ba2:	f7fd fa13 	bl	8006fcc <__sinit>
 8009ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d0f3      	beq.n	8009b96 <_fflush_r+0xa>
 8009bae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009bb0:	07d0      	lsls	r0, r2, #31
 8009bb2:	d404      	bmi.n	8009bbe <_fflush_r+0x32>
 8009bb4:	0599      	lsls	r1, r3, #22
 8009bb6:	d402      	bmi.n	8009bbe <_fflush_r+0x32>
 8009bb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bba:	f7fd fb6c 	bl	8007296 <__retarget_lock_acquire_recursive>
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	f7ff ff5f 	bl	8009a84 <__sflush_r>
 8009bc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bc8:	07da      	lsls	r2, r3, #31
 8009bca:	4605      	mov	r5, r0
 8009bcc:	d4e4      	bmi.n	8009b98 <_fflush_r+0xc>
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	059b      	lsls	r3, r3, #22
 8009bd2:	d4e1      	bmi.n	8009b98 <_fflush_r+0xc>
 8009bd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bd6:	f7fd fb5f 	bl	8007298 <__retarget_lock_release_recursive>
 8009bda:	e7dd      	b.n	8009b98 <_fflush_r+0xc>

08009bdc <memmove>:
 8009bdc:	4288      	cmp	r0, r1
 8009bde:	b510      	push	{r4, lr}
 8009be0:	eb01 0402 	add.w	r4, r1, r2
 8009be4:	d902      	bls.n	8009bec <memmove+0x10>
 8009be6:	4284      	cmp	r4, r0
 8009be8:	4623      	mov	r3, r4
 8009bea:	d807      	bhi.n	8009bfc <memmove+0x20>
 8009bec:	1e43      	subs	r3, r0, #1
 8009bee:	42a1      	cmp	r1, r4
 8009bf0:	d008      	beq.n	8009c04 <memmove+0x28>
 8009bf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bfa:	e7f8      	b.n	8009bee <memmove+0x12>
 8009bfc:	4402      	add	r2, r0
 8009bfe:	4601      	mov	r1, r0
 8009c00:	428a      	cmp	r2, r1
 8009c02:	d100      	bne.n	8009c06 <memmove+0x2a>
 8009c04:	bd10      	pop	{r4, pc}
 8009c06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c0e:	e7f7      	b.n	8009c00 <memmove+0x24>

08009c10 <strncmp>:
 8009c10:	b510      	push	{r4, lr}
 8009c12:	b16a      	cbz	r2, 8009c30 <strncmp+0x20>
 8009c14:	3901      	subs	r1, #1
 8009c16:	1884      	adds	r4, r0, r2
 8009c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c1c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d103      	bne.n	8009c2c <strncmp+0x1c>
 8009c24:	42a0      	cmp	r0, r4
 8009c26:	d001      	beq.n	8009c2c <strncmp+0x1c>
 8009c28:	2a00      	cmp	r2, #0
 8009c2a:	d1f5      	bne.n	8009c18 <strncmp+0x8>
 8009c2c:	1ad0      	subs	r0, r2, r3
 8009c2e:	bd10      	pop	{r4, pc}
 8009c30:	4610      	mov	r0, r2
 8009c32:	e7fc      	b.n	8009c2e <strncmp+0x1e>

08009c34 <_sbrk_r>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	4d06      	ldr	r5, [pc, #24]	@ (8009c50 <_sbrk_r+0x1c>)
 8009c38:	2300      	movs	r3, #0
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	4608      	mov	r0, r1
 8009c3e:	602b      	str	r3, [r5, #0]
 8009c40:	f7f8 fd44 	bl	80026cc <_sbrk>
 8009c44:	1c43      	adds	r3, r0, #1
 8009c46:	d102      	bne.n	8009c4e <_sbrk_r+0x1a>
 8009c48:	682b      	ldr	r3, [r5, #0]
 8009c4a:	b103      	cbz	r3, 8009c4e <_sbrk_r+0x1a>
 8009c4c:	6023      	str	r3, [r4, #0]
 8009c4e:	bd38      	pop	{r3, r4, r5, pc}
 8009c50:	200009ec 	.word	0x200009ec
 8009c54:	00000000 	.word	0x00000000

08009c58 <nan>:
 8009c58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009c60 <nan+0x8>
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	00000000 	.word	0x00000000
 8009c64:	7ff80000 	.word	0x7ff80000

08009c68 <__assert_func>:
 8009c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c6a:	4614      	mov	r4, r2
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	4b09      	ldr	r3, [pc, #36]	@ (8009c94 <__assert_func+0x2c>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4605      	mov	r5, r0
 8009c74:	68d8      	ldr	r0, [r3, #12]
 8009c76:	b14c      	cbz	r4, 8009c8c <__assert_func+0x24>
 8009c78:	4b07      	ldr	r3, [pc, #28]	@ (8009c98 <__assert_func+0x30>)
 8009c7a:	9100      	str	r1, [sp, #0]
 8009c7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c80:	4906      	ldr	r1, [pc, #24]	@ (8009c9c <__assert_func+0x34>)
 8009c82:	462b      	mov	r3, r5
 8009c84:	f000 fba8 	bl	800a3d8 <fiprintf>
 8009c88:	f000 fbb8 	bl	800a3fc <abort>
 8009c8c:	4b04      	ldr	r3, [pc, #16]	@ (8009ca0 <__assert_func+0x38>)
 8009c8e:	461c      	mov	r4, r3
 8009c90:	e7f3      	b.n	8009c7a <__assert_func+0x12>
 8009c92:	bf00      	nop
 8009c94:	20000024 	.word	0x20000024
 8009c98:	0800adae 	.word	0x0800adae
 8009c9c:	0800adbb 	.word	0x0800adbb
 8009ca0:	0800ade9 	.word	0x0800ade9

08009ca4 <_calloc_r>:
 8009ca4:	b570      	push	{r4, r5, r6, lr}
 8009ca6:	fba1 5402 	umull	r5, r4, r1, r2
 8009caa:	b934      	cbnz	r4, 8009cba <_calloc_r+0x16>
 8009cac:	4629      	mov	r1, r5
 8009cae:	f7fe f9d7 	bl	8008060 <_malloc_r>
 8009cb2:	4606      	mov	r6, r0
 8009cb4:	b928      	cbnz	r0, 8009cc2 <_calloc_r+0x1e>
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	bd70      	pop	{r4, r5, r6, pc}
 8009cba:	220c      	movs	r2, #12
 8009cbc:	6002      	str	r2, [r0, #0]
 8009cbe:	2600      	movs	r6, #0
 8009cc0:	e7f9      	b.n	8009cb6 <_calloc_r+0x12>
 8009cc2:	462a      	mov	r2, r5
 8009cc4:	4621      	mov	r1, r4
 8009cc6:	f7fd fa69 	bl	800719c <memset>
 8009cca:	e7f4      	b.n	8009cb6 <_calloc_r+0x12>

08009ccc <rshift>:
 8009ccc:	6903      	ldr	r3, [r0, #16]
 8009cce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009cd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009cda:	f100 0414 	add.w	r4, r0, #20
 8009cde:	dd45      	ble.n	8009d6c <rshift+0xa0>
 8009ce0:	f011 011f 	ands.w	r1, r1, #31
 8009ce4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ce8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009cec:	d10c      	bne.n	8009d08 <rshift+0x3c>
 8009cee:	f100 0710 	add.w	r7, r0, #16
 8009cf2:	4629      	mov	r1, r5
 8009cf4:	42b1      	cmp	r1, r6
 8009cf6:	d334      	bcc.n	8009d62 <rshift+0x96>
 8009cf8:	1a9b      	subs	r3, r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	1eea      	subs	r2, r5, #3
 8009cfe:	4296      	cmp	r6, r2
 8009d00:	bf38      	it	cc
 8009d02:	2300      	movcc	r3, #0
 8009d04:	4423      	add	r3, r4
 8009d06:	e015      	b.n	8009d34 <rshift+0x68>
 8009d08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009d0c:	f1c1 0820 	rsb	r8, r1, #32
 8009d10:	40cf      	lsrs	r7, r1
 8009d12:	f105 0e04 	add.w	lr, r5, #4
 8009d16:	46a1      	mov	r9, r4
 8009d18:	4576      	cmp	r6, lr
 8009d1a:	46f4      	mov	ip, lr
 8009d1c:	d815      	bhi.n	8009d4a <rshift+0x7e>
 8009d1e:	1a9a      	subs	r2, r3, r2
 8009d20:	0092      	lsls	r2, r2, #2
 8009d22:	3a04      	subs	r2, #4
 8009d24:	3501      	adds	r5, #1
 8009d26:	42ae      	cmp	r6, r5
 8009d28:	bf38      	it	cc
 8009d2a:	2200      	movcc	r2, #0
 8009d2c:	18a3      	adds	r3, r4, r2
 8009d2e:	50a7      	str	r7, [r4, r2]
 8009d30:	b107      	cbz	r7, 8009d34 <rshift+0x68>
 8009d32:	3304      	adds	r3, #4
 8009d34:	1b1a      	subs	r2, r3, r4
 8009d36:	42a3      	cmp	r3, r4
 8009d38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d3c:	bf08      	it	eq
 8009d3e:	2300      	moveq	r3, #0
 8009d40:	6102      	str	r2, [r0, #16]
 8009d42:	bf08      	it	eq
 8009d44:	6143      	streq	r3, [r0, #20]
 8009d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d4a:	f8dc c000 	ldr.w	ip, [ip]
 8009d4e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d52:	ea4c 0707 	orr.w	r7, ip, r7
 8009d56:	f849 7b04 	str.w	r7, [r9], #4
 8009d5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d5e:	40cf      	lsrs	r7, r1
 8009d60:	e7da      	b.n	8009d18 <rshift+0x4c>
 8009d62:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d66:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d6a:	e7c3      	b.n	8009cf4 <rshift+0x28>
 8009d6c:	4623      	mov	r3, r4
 8009d6e:	e7e1      	b.n	8009d34 <rshift+0x68>

08009d70 <__hexdig_fun>:
 8009d70:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009d74:	2b09      	cmp	r3, #9
 8009d76:	d802      	bhi.n	8009d7e <__hexdig_fun+0xe>
 8009d78:	3820      	subs	r0, #32
 8009d7a:	b2c0      	uxtb	r0, r0
 8009d7c:	4770      	bx	lr
 8009d7e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009d82:	2b05      	cmp	r3, #5
 8009d84:	d801      	bhi.n	8009d8a <__hexdig_fun+0x1a>
 8009d86:	3847      	subs	r0, #71	@ 0x47
 8009d88:	e7f7      	b.n	8009d7a <__hexdig_fun+0xa>
 8009d8a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009d8e:	2b05      	cmp	r3, #5
 8009d90:	d801      	bhi.n	8009d96 <__hexdig_fun+0x26>
 8009d92:	3827      	subs	r0, #39	@ 0x27
 8009d94:	e7f1      	b.n	8009d7a <__hexdig_fun+0xa>
 8009d96:	2000      	movs	r0, #0
 8009d98:	4770      	bx	lr
	...

08009d9c <__gethex>:
 8009d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da0:	b085      	sub	sp, #20
 8009da2:	468a      	mov	sl, r1
 8009da4:	9302      	str	r3, [sp, #8]
 8009da6:	680b      	ldr	r3, [r1, #0]
 8009da8:	9001      	str	r0, [sp, #4]
 8009daa:	4690      	mov	r8, r2
 8009dac:	1c9c      	adds	r4, r3, #2
 8009dae:	46a1      	mov	r9, r4
 8009db0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009db4:	2830      	cmp	r0, #48	@ 0x30
 8009db6:	d0fa      	beq.n	8009dae <__gethex+0x12>
 8009db8:	eba9 0303 	sub.w	r3, r9, r3
 8009dbc:	f1a3 0b02 	sub.w	fp, r3, #2
 8009dc0:	f7ff ffd6 	bl	8009d70 <__hexdig_fun>
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d168      	bne.n	8009e9c <__gethex+0x100>
 8009dca:	49a0      	ldr	r1, [pc, #640]	@ (800a04c <__gethex+0x2b0>)
 8009dcc:	2201      	movs	r2, #1
 8009dce:	4648      	mov	r0, r9
 8009dd0:	f7ff ff1e 	bl	8009c10 <strncmp>
 8009dd4:	4607      	mov	r7, r0
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d167      	bne.n	8009eaa <__gethex+0x10e>
 8009dda:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009dde:	4626      	mov	r6, r4
 8009de0:	f7ff ffc6 	bl	8009d70 <__hexdig_fun>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d062      	beq.n	8009eae <__gethex+0x112>
 8009de8:	4623      	mov	r3, r4
 8009dea:	7818      	ldrb	r0, [r3, #0]
 8009dec:	2830      	cmp	r0, #48	@ 0x30
 8009dee:	4699      	mov	r9, r3
 8009df0:	f103 0301 	add.w	r3, r3, #1
 8009df4:	d0f9      	beq.n	8009dea <__gethex+0x4e>
 8009df6:	f7ff ffbb 	bl	8009d70 <__hexdig_fun>
 8009dfa:	fab0 f580 	clz	r5, r0
 8009dfe:	096d      	lsrs	r5, r5, #5
 8009e00:	f04f 0b01 	mov.w	fp, #1
 8009e04:	464a      	mov	r2, r9
 8009e06:	4616      	mov	r6, r2
 8009e08:	3201      	adds	r2, #1
 8009e0a:	7830      	ldrb	r0, [r6, #0]
 8009e0c:	f7ff ffb0 	bl	8009d70 <__hexdig_fun>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	d1f8      	bne.n	8009e06 <__gethex+0x6a>
 8009e14:	498d      	ldr	r1, [pc, #564]	@ (800a04c <__gethex+0x2b0>)
 8009e16:	2201      	movs	r2, #1
 8009e18:	4630      	mov	r0, r6
 8009e1a:	f7ff fef9 	bl	8009c10 <strncmp>
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	d13f      	bne.n	8009ea2 <__gethex+0x106>
 8009e22:	b944      	cbnz	r4, 8009e36 <__gethex+0x9a>
 8009e24:	1c74      	adds	r4, r6, #1
 8009e26:	4622      	mov	r2, r4
 8009e28:	4616      	mov	r6, r2
 8009e2a:	3201      	adds	r2, #1
 8009e2c:	7830      	ldrb	r0, [r6, #0]
 8009e2e:	f7ff ff9f 	bl	8009d70 <__hexdig_fun>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d1f8      	bne.n	8009e28 <__gethex+0x8c>
 8009e36:	1ba4      	subs	r4, r4, r6
 8009e38:	00a7      	lsls	r7, r4, #2
 8009e3a:	7833      	ldrb	r3, [r6, #0]
 8009e3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009e40:	2b50      	cmp	r3, #80	@ 0x50
 8009e42:	d13e      	bne.n	8009ec2 <__gethex+0x126>
 8009e44:	7873      	ldrb	r3, [r6, #1]
 8009e46:	2b2b      	cmp	r3, #43	@ 0x2b
 8009e48:	d033      	beq.n	8009eb2 <__gethex+0x116>
 8009e4a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009e4c:	d034      	beq.n	8009eb8 <__gethex+0x11c>
 8009e4e:	1c71      	adds	r1, r6, #1
 8009e50:	2400      	movs	r4, #0
 8009e52:	7808      	ldrb	r0, [r1, #0]
 8009e54:	f7ff ff8c 	bl	8009d70 <__hexdig_fun>
 8009e58:	1e43      	subs	r3, r0, #1
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	2b18      	cmp	r3, #24
 8009e5e:	d830      	bhi.n	8009ec2 <__gethex+0x126>
 8009e60:	f1a0 0210 	sub.w	r2, r0, #16
 8009e64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e68:	f7ff ff82 	bl	8009d70 <__hexdig_fun>
 8009e6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009e70:	fa5f fc8c 	uxtb.w	ip, ip
 8009e74:	f1bc 0f18 	cmp.w	ip, #24
 8009e78:	f04f 030a 	mov.w	r3, #10
 8009e7c:	d91e      	bls.n	8009ebc <__gethex+0x120>
 8009e7e:	b104      	cbz	r4, 8009e82 <__gethex+0xe6>
 8009e80:	4252      	negs	r2, r2
 8009e82:	4417      	add	r7, r2
 8009e84:	f8ca 1000 	str.w	r1, [sl]
 8009e88:	b1ed      	cbz	r5, 8009ec6 <__gethex+0x12a>
 8009e8a:	f1bb 0f00 	cmp.w	fp, #0
 8009e8e:	bf0c      	ite	eq
 8009e90:	2506      	moveq	r5, #6
 8009e92:	2500      	movne	r5, #0
 8009e94:	4628      	mov	r0, r5
 8009e96:	b005      	add	sp, #20
 8009e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9c:	2500      	movs	r5, #0
 8009e9e:	462c      	mov	r4, r5
 8009ea0:	e7b0      	b.n	8009e04 <__gethex+0x68>
 8009ea2:	2c00      	cmp	r4, #0
 8009ea4:	d1c7      	bne.n	8009e36 <__gethex+0x9a>
 8009ea6:	4627      	mov	r7, r4
 8009ea8:	e7c7      	b.n	8009e3a <__gethex+0x9e>
 8009eaa:	464e      	mov	r6, r9
 8009eac:	462f      	mov	r7, r5
 8009eae:	2501      	movs	r5, #1
 8009eb0:	e7c3      	b.n	8009e3a <__gethex+0x9e>
 8009eb2:	2400      	movs	r4, #0
 8009eb4:	1cb1      	adds	r1, r6, #2
 8009eb6:	e7cc      	b.n	8009e52 <__gethex+0xb6>
 8009eb8:	2401      	movs	r4, #1
 8009eba:	e7fb      	b.n	8009eb4 <__gethex+0x118>
 8009ebc:	fb03 0002 	mla	r0, r3, r2, r0
 8009ec0:	e7ce      	b.n	8009e60 <__gethex+0xc4>
 8009ec2:	4631      	mov	r1, r6
 8009ec4:	e7de      	b.n	8009e84 <__gethex+0xe8>
 8009ec6:	eba6 0309 	sub.w	r3, r6, r9
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	4629      	mov	r1, r5
 8009ece:	2b07      	cmp	r3, #7
 8009ed0:	dc0a      	bgt.n	8009ee8 <__gethex+0x14c>
 8009ed2:	9801      	ldr	r0, [sp, #4]
 8009ed4:	f7fe f950 	bl	8008178 <_Balloc>
 8009ed8:	4604      	mov	r4, r0
 8009eda:	b940      	cbnz	r0, 8009eee <__gethex+0x152>
 8009edc:	4b5c      	ldr	r3, [pc, #368]	@ (800a050 <__gethex+0x2b4>)
 8009ede:	4602      	mov	r2, r0
 8009ee0:	21e4      	movs	r1, #228	@ 0xe4
 8009ee2:	485c      	ldr	r0, [pc, #368]	@ (800a054 <__gethex+0x2b8>)
 8009ee4:	f7ff fec0 	bl	8009c68 <__assert_func>
 8009ee8:	3101      	adds	r1, #1
 8009eea:	105b      	asrs	r3, r3, #1
 8009eec:	e7ef      	b.n	8009ece <__gethex+0x132>
 8009eee:	f100 0a14 	add.w	sl, r0, #20
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	4655      	mov	r5, sl
 8009ef6:	469b      	mov	fp, r3
 8009ef8:	45b1      	cmp	r9, r6
 8009efa:	d337      	bcc.n	8009f6c <__gethex+0x1d0>
 8009efc:	f845 bb04 	str.w	fp, [r5], #4
 8009f00:	eba5 050a 	sub.w	r5, r5, sl
 8009f04:	10ad      	asrs	r5, r5, #2
 8009f06:	6125      	str	r5, [r4, #16]
 8009f08:	4658      	mov	r0, fp
 8009f0a:	f7fe fa27 	bl	800835c <__hi0bits>
 8009f0e:	016d      	lsls	r5, r5, #5
 8009f10:	f8d8 6000 	ldr.w	r6, [r8]
 8009f14:	1a2d      	subs	r5, r5, r0
 8009f16:	42b5      	cmp	r5, r6
 8009f18:	dd54      	ble.n	8009fc4 <__gethex+0x228>
 8009f1a:	1bad      	subs	r5, r5, r6
 8009f1c:	4629      	mov	r1, r5
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f7fe fdb3 	bl	8008a8a <__any_on>
 8009f24:	4681      	mov	r9, r0
 8009f26:	b178      	cbz	r0, 8009f48 <__gethex+0x1ac>
 8009f28:	1e6b      	subs	r3, r5, #1
 8009f2a:	1159      	asrs	r1, r3, #5
 8009f2c:	f003 021f 	and.w	r2, r3, #31
 8009f30:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009f34:	f04f 0901 	mov.w	r9, #1
 8009f38:	fa09 f202 	lsl.w	r2, r9, r2
 8009f3c:	420a      	tst	r2, r1
 8009f3e:	d003      	beq.n	8009f48 <__gethex+0x1ac>
 8009f40:	454b      	cmp	r3, r9
 8009f42:	dc36      	bgt.n	8009fb2 <__gethex+0x216>
 8009f44:	f04f 0902 	mov.w	r9, #2
 8009f48:	4629      	mov	r1, r5
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f7ff febe 	bl	8009ccc <rshift>
 8009f50:	442f      	add	r7, r5
 8009f52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f56:	42bb      	cmp	r3, r7
 8009f58:	da42      	bge.n	8009fe0 <__gethex+0x244>
 8009f5a:	9801      	ldr	r0, [sp, #4]
 8009f5c:	4621      	mov	r1, r4
 8009f5e:	f7fe f94b 	bl	80081f8 <_Bfree>
 8009f62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f64:	2300      	movs	r3, #0
 8009f66:	6013      	str	r3, [r2, #0]
 8009f68:	25a3      	movs	r5, #163	@ 0xa3
 8009f6a:	e793      	b.n	8009e94 <__gethex+0xf8>
 8009f6c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009f70:	2a2e      	cmp	r2, #46	@ 0x2e
 8009f72:	d012      	beq.n	8009f9a <__gethex+0x1fe>
 8009f74:	2b20      	cmp	r3, #32
 8009f76:	d104      	bne.n	8009f82 <__gethex+0x1e6>
 8009f78:	f845 bb04 	str.w	fp, [r5], #4
 8009f7c:	f04f 0b00 	mov.w	fp, #0
 8009f80:	465b      	mov	r3, fp
 8009f82:	7830      	ldrb	r0, [r6, #0]
 8009f84:	9303      	str	r3, [sp, #12]
 8009f86:	f7ff fef3 	bl	8009d70 <__hexdig_fun>
 8009f8a:	9b03      	ldr	r3, [sp, #12]
 8009f8c:	f000 000f 	and.w	r0, r0, #15
 8009f90:	4098      	lsls	r0, r3
 8009f92:	ea4b 0b00 	orr.w	fp, fp, r0
 8009f96:	3304      	adds	r3, #4
 8009f98:	e7ae      	b.n	8009ef8 <__gethex+0x15c>
 8009f9a:	45b1      	cmp	r9, r6
 8009f9c:	d8ea      	bhi.n	8009f74 <__gethex+0x1d8>
 8009f9e:	492b      	ldr	r1, [pc, #172]	@ (800a04c <__gethex+0x2b0>)
 8009fa0:	9303      	str	r3, [sp, #12]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	f7ff fe33 	bl	8009c10 <strncmp>
 8009faa:	9b03      	ldr	r3, [sp, #12]
 8009fac:	2800      	cmp	r0, #0
 8009fae:	d1e1      	bne.n	8009f74 <__gethex+0x1d8>
 8009fb0:	e7a2      	b.n	8009ef8 <__gethex+0x15c>
 8009fb2:	1ea9      	subs	r1, r5, #2
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	f7fe fd68 	bl	8008a8a <__any_on>
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d0c2      	beq.n	8009f44 <__gethex+0x1a8>
 8009fbe:	f04f 0903 	mov.w	r9, #3
 8009fc2:	e7c1      	b.n	8009f48 <__gethex+0x1ac>
 8009fc4:	da09      	bge.n	8009fda <__gethex+0x23e>
 8009fc6:	1b75      	subs	r5, r6, r5
 8009fc8:	4621      	mov	r1, r4
 8009fca:	9801      	ldr	r0, [sp, #4]
 8009fcc:	462a      	mov	r2, r5
 8009fce:	f7fe fb23 	bl	8008618 <__lshift>
 8009fd2:	1b7f      	subs	r7, r7, r5
 8009fd4:	4604      	mov	r4, r0
 8009fd6:	f100 0a14 	add.w	sl, r0, #20
 8009fda:	f04f 0900 	mov.w	r9, #0
 8009fde:	e7b8      	b.n	8009f52 <__gethex+0x1b6>
 8009fe0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009fe4:	42bd      	cmp	r5, r7
 8009fe6:	dd6f      	ble.n	800a0c8 <__gethex+0x32c>
 8009fe8:	1bed      	subs	r5, r5, r7
 8009fea:	42ae      	cmp	r6, r5
 8009fec:	dc34      	bgt.n	800a058 <__gethex+0x2bc>
 8009fee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d022      	beq.n	800a03c <__gethex+0x2a0>
 8009ff6:	2b03      	cmp	r3, #3
 8009ff8:	d024      	beq.n	800a044 <__gethex+0x2a8>
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d115      	bne.n	800a02a <__gethex+0x28e>
 8009ffe:	42ae      	cmp	r6, r5
 800a000:	d113      	bne.n	800a02a <__gethex+0x28e>
 800a002:	2e01      	cmp	r6, #1
 800a004:	d10b      	bne.n	800a01e <__gethex+0x282>
 800a006:	9a02      	ldr	r2, [sp, #8]
 800a008:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a00c:	6013      	str	r3, [r2, #0]
 800a00e:	2301      	movs	r3, #1
 800a010:	6123      	str	r3, [r4, #16]
 800a012:	f8ca 3000 	str.w	r3, [sl]
 800a016:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a018:	2562      	movs	r5, #98	@ 0x62
 800a01a:	601c      	str	r4, [r3, #0]
 800a01c:	e73a      	b.n	8009e94 <__gethex+0xf8>
 800a01e:	1e71      	subs	r1, r6, #1
 800a020:	4620      	mov	r0, r4
 800a022:	f7fe fd32 	bl	8008a8a <__any_on>
 800a026:	2800      	cmp	r0, #0
 800a028:	d1ed      	bne.n	800a006 <__gethex+0x26a>
 800a02a:	9801      	ldr	r0, [sp, #4]
 800a02c:	4621      	mov	r1, r4
 800a02e:	f7fe f8e3 	bl	80081f8 <_Bfree>
 800a032:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a034:	2300      	movs	r3, #0
 800a036:	6013      	str	r3, [r2, #0]
 800a038:	2550      	movs	r5, #80	@ 0x50
 800a03a:	e72b      	b.n	8009e94 <__gethex+0xf8>
 800a03c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1f3      	bne.n	800a02a <__gethex+0x28e>
 800a042:	e7e0      	b.n	800a006 <__gethex+0x26a>
 800a044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1dd      	bne.n	800a006 <__gethex+0x26a>
 800a04a:	e7ee      	b.n	800a02a <__gethex+0x28e>
 800a04c:	0800ad93 	.word	0x0800ad93
 800a050:	0800ad29 	.word	0x0800ad29
 800a054:	0800adea 	.word	0x0800adea
 800a058:	1e6f      	subs	r7, r5, #1
 800a05a:	f1b9 0f00 	cmp.w	r9, #0
 800a05e:	d130      	bne.n	800a0c2 <__gethex+0x326>
 800a060:	b127      	cbz	r7, 800a06c <__gethex+0x2d0>
 800a062:	4639      	mov	r1, r7
 800a064:	4620      	mov	r0, r4
 800a066:	f7fe fd10 	bl	8008a8a <__any_on>
 800a06a:	4681      	mov	r9, r0
 800a06c:	117a      	asrs	r2, r7, #5
 800a06e:	2301      	movs	r3, #1
 800a070:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a074:	f007 071f 	and.w	r7, r7, #31
 800a078:	40bb      	lsls	r3, r7
 800a07a:	4213      	tst	r3, r2
 800a07c:	4629      	mov	r1, r5
 800a07e:	4620      	mov	r0, r4
 800a080:	bf18      	it	ne
 800a082:	f049 0902 	orrne.w	r9, r9, #2
 800a086:	f7ff fe21 	bl	8009ccc <rshift>
 800a08a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a08e:	1b76      	subs	r6, r6, r5
 800a090:	2502      	movs	r5, #2
 800a092:	f1b9 0f00 	cmp.w	r9, #0
 800a096:	d047      	beq.n	800a128 <__gethex+0x38c>
 800a098:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d015      	beq.n	800a0cc <__gethex+0x330>
 800a0a0:	2b03      	cmp	r3, #3
 800a0a2:	d017      	beq.n	800a0d4 <__gethex+0x338>
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d109      	bne.n	800a0bc <__gethex+0x320>
 800a0a8:	f019 0f02 	tst.w	r9, #2
 800a0ac:	d006      	beq.n	800a0bc <__gethex+0x320>
 800a0ae:	f8da 3000 	ldr.w	r3, [sl]
 800a0b2:	ea49 0903 	orr.w	r9, r9, r3
 800a0b6:	f019 0f01 	tst.w	r9, #1
 800a0ba:	d10e      	bne.n	800a0da <__gethex+0x33e>
 800a0bc:	f045 0510 	orr.w	r5, r5, #16
 800a0c0:	e032      	b.n	800a128 <__gethex+0x38c>
 800a0c2:	f04f 0901 	mov.w	r9, #1
 800a0c6:	e7d1      	b.n	800a06c <__gethex+0x2d0>
 800a0c8:	2501      	movs	r5, #1
 800a0ca:	e7e2      	b.n	800a092 <__gethex+0x2f6>
 800a0cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0ce:	f1c3 0301 	rsb	r3, r3, #1
 800a0d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d0f0      	beq.n	800a0bc <__gethex+0x320>
 800a0da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a0de:	f104 0314 	add.w	r3, r4, #20
 800a0e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a0e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a0ea:	f04f 0c00 	mov.w	ip, #0
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a0f8:	d01b      	beq.n	800a132 <__gethex+0x396>
 800a0fa:	3201      	adds	r2, #1
 800a0fc:	6002      	str	r2, [r0, #0]
 800a0fe:	2d02      	cmp	r5, #2
 800a100:	f104 0314 	add.w	r3, r4, #20
 800a104:	d13c      	bne.n	800a180 <__gethex+0x3e4>
 800a106:	f8d8 2000 	ldr.w	r2, [r8]
 800a10a:	3a01      	subs	r2, #1
 800a10c:	42b2      	cmp	r2, r6
 800a10e:	d109      	bne.n	800a124 <__gethex+0x388>
 800a110:	1171      	asrs	r1, r6, #5
 800a112:	2201      	movs	r2, #1
 800a114:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a118:	f006 061f 	and.w	r6, r6, #31
 800a11c:	fa02 f606 	lsl.w	r6, r2, r6
 800a120:	421e      	tst	r6, r3
 800a122:	d13a      	bne.n	800a19a <__gethex+0x3fe>
 800a124:	f045 0520 	orr.w	r5, r5, #32
 800a128:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a12a:	601c      	str	r4, [r3, #0]
 800a12c:	9b02      	ldr	r3, [sp, #8]
 800a12e:	601f      	str	r7, [r3, #0]
 800a130:	e6b0      	b.n	8009e94 <__gethex+0xf8>
 800a132:	4299      	cmp	r1, r3
 800a134:	f843 cc04 	str.w	ip, [r3, #-4]
 800a138:	d8d9      	bhi.n	800a0ee <__gethex+0x352>
 800a13a:	68a3      	ldr	r3, [r4, #8]
 800a13c:	459b      	cmp	fp, r3
 800a13e:	db17      	blt.n	800a170 <__gethex+0x3d4>
 800a140:	6861      	ldr	r1, [r4, #4]
 800a142:	9801      	ldr	r0, [sp, #4]
 800a144:	3101      	adds	r1, #1
 800a146:	f7fe f817 	bl	8008178 <_Balloc>
 800a14a:	4681      	mov	r9, r0
 800a14c:	b918      	cbnz	r0, 800a156 <__gethex+0x3ba>
 800a14e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1b8 <__gethex+0x41c>)
 800a150:	4602      	mov	r2, r0
 800a152:	2184      	movs	r1, #132	@ 0x84
 800a154:	e6c5      	b.n	8009ee2 <__gethex+0x146>
 800a156:	6922      	ldr	r2, [r4, #16]
 800a158:	3202      	adds	r2, #2
 800a15a:	f104 010c 	add.w	r1, r4, #12
 800a15e:	0092      	lsls	r2, r2, #2
 800a160:	300c      	adds	r0, #12
 800a162:	f7fd f89a 	bl	800729a <memcpy>
 800a166:	4621      	mov	r1, r4
 800a168:	9801      	ldr	r0, [sp, #4]
 800a16a:	f7fe f845 	bl	80081f8 <_Bfree>
 800a16e:	464c      	mov	r4, r9
 800a170:	6923      	ldr	r3, [r4, #16]
 800a172:	1c5a      	adds	r2, r3, #1
 800a174:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a178:	6122      	str	r2, [r4, #16]
 800a17a:	2201      	movs	r2, #1
 800a17c:	615a      	str	r2, [r3, #20]
 800a17e:	e7be      	b.n	800a0fe <__gethex+0x362>
 800a180:	6922      	ldr	r2, [r4, #16]
 800a182:	455a      	cmp	r2, fp
 800a184:	dd0b      	ble.n	800a19e <__gethex+0x402>
 800a186:	2101      	movs	r1, #1
 800a188:	4620      	mov	r0, r4
 800a18a:	f7ff fd9f 	bl	8009ccc <rshift>
 800a18e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a192:	3701      	adds	r7, #1
 800a194:	42bb      	cmp	r3, r7
 800a196:	f6ff aee0 	blt.w	8009f5a <__gethex+0x1be>
 800a19a:	2501      	movs	r5, #1
 800a19c:	e7c2      	b.n	800a124 <__gethex+0x388>
 800a19e:	f016 061f 	ands.w	r6, r6, #31
 800a1a2:	d0fa      	beq.n	800a19a <__gethex+0x3fe>
 800a1a4:	4453      	add	r3, sl
 800a1a6:	f1c6 0620 	rsb	r6, r6, #32
 800a1aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a1ae:	f7fe f8d5 	bl	800835c <__hi0bits>
 800a1b2:	42b0      	cmp	r0, r6
 800a1b4:	dbe7      	blt.n	800a186 <__gethex+0x3ea>
 800a1b6:	e7f0      	b.n	800a19a <__gethex+0x3fe>
 800a1b8:	0800ad29 	.word	0x0800ad29

0800a1bc <L_shift>:
 800a1bc:	f1c2 0208 	rsb	r2, r2, #8
 800a1c0:	0092      	lsls	r2, r2, #2
 800a1c2:	b570      	push	{r4, r5, r6, lr}
 800a1c4:	f1c2 0620 	rsb	r6, r2, #32
 800a1c8:	6843      	ldr	r3, [r0, #4]
 800a1ca:	6804      	ldr	r4, [r0, #0]
 800a1cc:	fa03 f506 	lsl.w	r5, r3, r6
 800a1d0:	432c      	orrs	r4, r5
 800a1d2:	40d3      	lsrs	r3, r2
 800a1d4:	6004      	str	r4, [r0, #0]
 800a1d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a1da:	4288      	cmp	r0, r1
 800a1dc:	d3f4      	bcc.n	800a1c8 <L_shift+0xc>
 800a1de:	bd70      	pop	{r4, r5, r6, pc}

0800a1e0 <__match>:
 800a1e0:	b530      	push	{r4, r5, lr}
 800a1e2:	6803      	ldr	r3, [r0, #0]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1ea:	b914      	cbnz	r4, 800a1f2 <__match+0x12>
 800a1ec:	6003      	str	r3, [r0, #0]
 800a1ee:	2001      	movs	r0, #1
 800a1f0:	bd30      	pop	{r4, r5, pc}
 800a1f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a1fa:	2d19      	cmp	r5, #25
 800a1fc:	bf98      	it	ls
 800a1fe:	3220      	addls	r2, #32
 800a200:	42a2      	cmp	r2, r4
 800a202:	d0f0      	beq.n	800a1e6 <__match+0x6>
 800a204:	2000      	movs	r0, #0
 800a206:	e7f3      	b.n	800a1f0 <__match+0x10>

0800a208 <__hexnan>:
 800a208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20c:	680b      	ldr	r3, [r1, #0]
 800a20e:	6801      	ldr	r1, [r0, #0]
 800a210:	115e      	asrs	r6, r3, #5
 800a212:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a216:	f013 031f 	ands.w	r3, r3, #31
 800a21a:	b087      	sub	sp, #28
 800a21c:	bf18      	it	ne
 800a21e:	3604      	addne	r6, #4
 800a220:	2500      	movs	r5, #0
 800a222:	1f37      	subs	r7, r6, #4
 800a224:	4682      	mov	sl, r0
 800a226:	4690      	mov	r8, r2
 800a228:	9301      	str	r3, [sp, #4]
 800a22a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a22e:	46b9      	mov	r9, r7
 800a230:	463c      	mov	r4, r7
 800a232:	9502      	str	r5, [sp, #8]
 800a234:	46ab      	mov	fp, r5
 800a236:	784a      	ldrb	r2, [r1, #1]
 800a238:	1c4b      	adds	r3, r1, #1
 800a23a:	9303      	str	r3, [sp, #12]
 800a23c:	b342      	cbz	r2, 800a290 <__hexnan+0x88>
 800a23e:	4610      	mov	r0, r2
 800a240:	9105      	str	r1, [sp, #20]
 800a242:	9204      	str	r2, [sp, #16]
 800a244:	f7ff fd94 	bl	8009d70 <__hexdig_fun>
 800a248:	2800      	cmp	r0, #0
 800a24a:	d151      	bne.n	800a2f0 <__hexnan+0xe8>
 800a24c:	9a04      	ldr	r2, [sp, #16]
 800a24e:	9905      	ldr	r1, [sp, #20]
 800a250:	2a20      	cmp	r2, #32
 800a252:	d818      	bhi.n	800a286 <__hexnan+0x7e>
 800a254:	9b02      	ldr	r3, [sp, #8]
 800a256:	459b      	cmp	fp, r3
 800a258:	dd13      	ble.n	800a282 <__hexnan+0x7a>
 800a25a:	454c      	cmp	r4, r9
 800a25c:	d206      	bcs.n	800a26c <__hexnan+0x64>
 800a25e:	2d07      	cmp	r5, #7
 800a260:	dc04      	bgt.n	800a26c <__hexnan+0x64>
 800a262:	462a      	mov	r2, r5
 800a264:	4649      	mov	r1, r9
 800a266:	4620      	mov	r0, r4
 800a268:	f7ff ffa8 	bl	800a1bc <L_shift>
 800a26c:	4544      	cmp	r4, r8
 800a26e:	d952      	bls.n	800a316 <__hexnan+0x10e>
 800a270:	2300      	movs	r3, #0
 800a272:	f1a4 0904 	sub.w	r9, r4, #4
 800a276:	f844 3c04 	str.w	r3, [r4, #-4]
 800a27a:	f8cd b008 	str.w	fp, [sp, #8]
 800a27e:	464c      	mov	r4, r9
 800a280:	461d      	mov	r5, r3
 800a282:	9903      	ldr	r1, [sp, #12]
 800a284:	e7d7      	b.n	800a236 <__hexnan+0x2e>
 800a286:	2a29      	cmp	r2, #41	@ 0x29
 800a288:	d157      	bne.n	800a33a <__hexnan+0x132>
 800a28a:	3102      	adds	r1, #2
 800a28c:	f8ca 1000 	str.w	r1, [sl]
 800a290:	f1bb 0f00 	cmp.w	fp, #0
 800a294:	d051      	beq.n	800a33a <__hexnan+0x132>
 800a296:	454c      	cmp	r4, r9
 800a298:	d206      	bcs.n	800a2a8 <__hexnan+0xa0>
 800a29a:	2d07      	cmp	r5, #7
 800a29c:	dc04      	bgt.n	800a2a8 <__hexnan+0xa0>
 800a29e:	462a      	mov	r2, r5
 800a2a0:	4649      	mov	r1, r9
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	f7ff ff8a 	bl	800a1bc <L_shift>
 800a2a8:	4544      	cmp	r4, r8
 800a2aa:	d936      	bls.n	800a31a <__hexnan+0x112>
 800a2ac:	f1a8 0204 	sub.w	r2, r8, #4
 800a2b0:	4623      	mov	r3, r4
 800a2b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a2b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a2ba:	429f      	cmp	r7, r3
 800a2bc:	d2f9      	bcs.n	800a2b2 <__hexnan+0xaa>
 800a2be:	1b3b      	subs	r3, r7, r4
 800a2c0:	f023 0303 	bic.w	r3, r3, #3
 800a2c4:	3304      	adds	r3, #4
 800a2c6:	3401      	adds	r4, #1
 800a2c8:	3e03      	subs	r6, #3
 800a2ca:	42b4      	cmp	r4, r6
 800a2cc:	bf88      	it	hi
 800a2ce:	2304      	movhi	r3, #4
 800a2d0:	4443      	add	r3, r8
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f843 2b04 	str.w	r2, [r3], #4
 800a2d8:	429f      	cmp	r7, r3
 800a2da:	d2fb      	bcs.n	800a2d4 <__hexnan+0xcc>
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	b91b      	cbnz	r3, 800a2e8 <__hexnan+0xe0>
 800a2e0:	4547      	cmp	r7, r8
 800a2e2:	d128      	bne.n	800a336 <__hexnan+0x12e>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	603b      	str	r3, [r7, #0]
 800a2e8:	2005      	movs	r0, #5
 800a2ea:	b007      	add	sp, #28
 800a2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f0:	3501      	adds	r5, #1
 800a2f2:	2d08      	cmp	r5, #8
 800a2f4:	f10b 0b01 	add.w	fp, fp, #1
 800a2f8:	dd06      	ble.n	800a308 <__hexnan+0x100>
 800a2fa:	4544      	cmp	r4, r8
 800a2fc:	d9c1      	bls.n	800a282 <__hexnan+0x7a>
 800a2fe:	2300      	movs	r3, #0
 800a300:	f844 3c04 	str.w	r3, [r4, #-4]
 800a304:	2501      	movs	r5, #1
 800a306:	3c04      	subs	r4, #4
 800a308:	6822      	ldr	r2, [r4, #0]
 800a30a:	f000 000f 	and.w	r0, r0, #15
 800a30e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a312:	6020      	str	r0, [r4, #0]
 800a314:	e7b5      	b.n	800a282 <__hexnan+0x7a>
 800a316:	2508      	movs	r5, #8
 800a318:	e7b3      	b.n	800a282 <__hexnan+0x7a>
 800a31a:	9b01      	ldr	r3, [sp, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d0dd      	beq.n	800a2dc <__hexnan+0xd4>
 800a320:	f1c3 0320 	rsb	r3, r3, #32
 800a324:	f04f 32ff 	mov.w	r2, #4294967295
 800a328:	40da      	lsrs	r2, r3
 800a32a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a32e:	4013      	ands	r3, r2
 800a330:	f846 3c04 	str.w	r3, [r6, #-4]
 800a334:	e7d2      	b.n	800a2dc <__hexnan+0xd4>
 800a336:	3f04      	subs	r7, #4
 800a338:	e7d0      	b.n	800a2dc <__hexnan+0xd4>
 800a33a:	2004      	movs	r0, #4
 800a33c:	e7d5      	b.n	800a2ea <__hexnan+0xe2>

0800a33e <__ascii_mbtowc>:
 800a33e:	b082      	sub	sp, #8
 800a340:	b901      	cbnz	r1, 800a344 <__ascii_mbtowc+0x6>
 800a342:	a901      	add	r1, sp, #4
 800a344:	b142      	cbz	r2, 800a358 <__ascii_mbtowc+0x1a>
 800a346:	b14b      	cbz	r3, 800a35c <__ascii_mbtowc+0x1e>
 800a348:	7813      	ldrb	r3, [r2, #0]
 800a34a:	600b      	str	r3, [r1, #0]
 800a34c:	7812      	ldrb	r2, [r2, #0]
 800a34e:	1e10      	subs	r0, r2, #0
 800a350:	bf18      	it	ne
 800a352:	2001      	movne	r0, #1
 800a354:	b002      	add	sp, #8
 800a356:	4770      	bx	lr
 800a358:	4610      	mov	r0, r2
 800a35a:	e7fb      	b.n	800a354 <__ascii_mbtowc+0x16>
 800a35c:	f06f 0001 	mvn.w	r0, #1
 800a360:	e7f8      	b.n	800a354 <__ascii_mbtowc+0x16>

0800a362 <_realloc_r>:
 800a362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a366:	4607      	mov	r7, r0
 800a368:	4614      	mov	r4, r2
 800a36a:	460d      	mov	r5, r1
 800a36c:	b921      	cbnz	r1, 800a378 <_realloc_r+0x16>
 800a36e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a372:	4611      	mov	r1, r2
 800a374:	f7fd be74 	b.w	8008060 <_malloc_r>
 800a378:	b92a      	cbnz	r2, 800a386 <_realloc_r+0x24>
 800a37a:	f7fd fdfd 	bl	8007f78 <_free_r>
 800a37e:	4625      	mov	r5, r4
 800a380:	4628      	mov	r0, r5
 800a382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a386:	f000 f840 	bl	800a40a <_malloc_usable_size_r>
 800a38a:	4284      	cmp	r4, r0
 800a38c:	4606      	mov	r6, r0
 800a38e:	d802      	bhi.n	800a396 <_realloc_r+0x34>
 800a390:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a394:	d8f4      	bhi.n	800a380 <_realloc_r+0x1e>
 800a396:	4621      	mov	r1, r4
 800a398:	4638      	mov	r0, r7
 800a39a:	f7fd fe61 	bl	8008060 <_malloc_r>
 800a39e:	4680      	mov	r8, r0
 800a3a0:	b908      	cbnz	r0, 800a3a6 <_realloc_r+0x44>
 800a3a2:	4645      	mov	r5, r8
 800a3a4:	e7ec      	b.n	800a380 <_realloc_r+0x1e>
 800a3a6:	42b4      	cmp	r4, r6
 800a3a8:	4622      	mov	r2, r4
 800a3aa:	4629      	mov	r1, r5
 800a3ac:	bf28      	it	cs
 800a3ae:	4632      	movcs	r2, r6
 800a3b0:	f7fc ff73 	bl	800729a <memcpy>
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	4638      	mov	r0, r7
 800a3b8:	f7fd fdde 	bl	8007f78 <_free_r>
 800a3bc:	e7f1      	b.n	800a3a2 <_realloc_r+0x40>

0800a3be <__ascii_wctomb>:
 800a3be:	4603      	mov	r3, r0
 800a3c0:	4608      	mov	r0, r1
 800a3c2:	b141      	cbz	r1, 800a3d6 <__ascii_wctomb+0x18>
 800a3c4:	2aff      	cmp	r2, #255	@ 0xff
 800a3c6:	d904      	bls.n	800a3d2 <__ascii_wctomb+0x14>
 800a3c8:	228a      	movs	r2, #138	@ 0x8a
 800a3ca:	601a      	str	r2, [r3, #0]
 800a3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d0:	4770      	bx	lr
 800a3d2:	700a      	strb	r2, [r1, #0]
 800a3d4:	2001      	movs	r0, #1
 800a3d6:	4770      	bx	lr

0800a3d8 <fiprintf>:
 800a3d8:	b40e      	push	{r1, r2, r3}
 800a3da:	b503      	push	{r0, r1, lr}
 800a3dc:	4601      	mov	r1, r0
 800a3de:	ab03      	add	r3, sp, #12
 800a3e0:	4805      	ldr	r0, [pc, #20]	@ (800a3f8 <fiprintf+0x20>)
 800a3e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3e6:	6800      	ldr	r0, [r0, #0]
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	f000 f83f 	bl	800a46c <_vfiprintf_r>
 800a3ee:	b002      	add	sp, #8
 800a3f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3f4:	b003      	add	sp, #12
 800a3f6:	4770      	bx	lr
 800a3f8:	20000024 	.word	0x20000024

0800a3fc <abort>:
 800a3fc:	b508      	push	{r3, lr}
 800a3fe:	2006      	movs	r0, #6
 800a400:	f000 fa08 	bl	800a814 <raise>
 800a404:	2001      	movs	r0, #1
 800a406:	f7f8 f8e9 	bl	80025dc <_exit>

0800a40a <_malloc_usable_size_r>:
 800a40a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a40e:	1f18      	subs	r0, r3, #4
 800a410:	2b00      	cmp	r3, #0
 800a412:	bfbc      	itt	lt
 800a414:	580b      	ldrlt	r3, [r1, r0]
 800a416:	18c0      	addlt	r0, r0, r3
 800a418:	4770      	bx	lr

0800a41a <__sfputc_r>:
 800a41a:	6893      	ldr	r3, [r2, #8]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	2b00      	cmp	r3, #0
 800a420:	b410      	push	{r4}
 800a422:	6093      	str	r3, [r2, #8]
 800a424:	da08      	bge.n	800a438 <__sfputc_r+0x1e>
 800a426:	6994      	ldr	r4, [r2, #24]
 800a428:	42a3      	cmp	r3, r4
 800a42a:	db01      	blt.n	800a430 <__sfputc_r+0x16>
 800a42c:	290a      	cmp	r1, #10
 800a42e:	d103      	bne.n	800a438 <__sfputc_r+0x1e>
 800a430:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a434:	f000 b932 	b.w	800a69c <__swbuf_r>
 800a438:	6813      	ldr	r3, [r2, #0]
 800a43a:	1c58      	adds	r0, r3, #1
 800a43c:	6010      	str	r0, [r2, #0]
 800a43e:	7019      	strb	r1, [r3, #0]
 800a440:	4608      	mov	r0, r1
 800a442:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <__sfputs_r>:
 800a448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44a:	4606      	mov	r6, r0
 800a44c:	460f      	mov	r7, r1
 800a44e:	4614      	mov	r4, r2
 800a450:	18d5      	adds	r5, r2, r3
 800a452:	42ac      	cmp	r4, r5
 800a454:	d101      	bne.n	800a45a <__sfputs_r+0x12>
 800a456:	2000      	movs	r0, #0
 800a458:	e007      	b.n	800a46a <__sfputs_r+0x22>
 800a45a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a45e:	463a      	mov	r2, r7
 800a460:	4630      	mov	r0, r6
 800a462:	f7ff ffda 	bl	800a41a <__sfputc_r>
 800a466:	1c43      	adds	r3, r0, #1
 800a468:	d1f3      	bne.n	800a452 <__sfputs_r+0xa>
 800a46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a46c <_vfiprintf_r>:
 800a46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a470:	460d      	mov	r5, r1
 800a472:	b09d      	sub	sp, #116	@ 0x74
 800a474:	4614      	mov	r4, r2
 800a476:	4698      	mov	r8, r3
 800a478:	4606      	mov	r6, r0
 800a47a:	b118      	cbz	r0, 800a484 <_vfiprintf_r+0x18>
 800a47c:	6a03      	ldr	r3, [r0, #32]
 800a47e:	b90b      	cbnz	r3, 800a484 <_vfiprintf_r+0x18>
 800a480:	f7fc fda4 	bl	8006fcc <__sinit>
 800a484:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a486:	07d9      	lsls	r1, r3, #31
 800a488:	d405      	bmi.n	800a496 <_vfiprintf_r+0x2a>
 800a48a:	89ab      	ldrh	r3, [r5, #12]
 800a48c:	059a      	lsls	r2, r3, #22
 800a48e:	d402      	bmi.n	800a496 <_vfiprintf_r+0x2a>
 800a490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a492:	f7fc ff00 	bl	8007296 <__retarget_lock_acquire_recursive>
 800a496:	89ab      	ldrh	r3, [r5, #12]
 800a498:	071b      	lsls	r3, r3, #28
 800a49a:	d501      	bpl.n	800a4a0 <_vfiprintf_r+0x34>
 800a49c:	692b      	ldr	r3, [r5, #16]
 800a49e:	b99b      	cbnz	r3, 800a4c8 <_vfiprintf_r+0x5c>
 800a4a0:	4629      	mov	r1, r5
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	f000 f938 	bl	800a718 <__swsetup_r>
 800a4a8:	b170      	cbz	r0, 800a4c8 <_vfiprintf_r+0x5c>
 800a4aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4ac:	07dc      	lsls	r4, r3, #31
 800a4ae:	d504      	bpl.n	800a4ba <_vfiprintf_r+0x4e>
 800a4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b4:	b01d      	add	sp, #116	@ 0x74
 800a4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ba:	89ab      	ldrh	r3, [r5, #12]
 800a4bc:	0598      	lsls	r0, r3, #22
 800a4be:	d4f7      	bmi.n	800a4b0 <_vfiprintf_r+0x44>
 800a4c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4c2:	f7fc fee9 	bl	8007298 <__retarget_lock_release_recursive>
 800a4c6:	e7f3      	b.n	800a4b0 <_vfiprintf_r+0x44>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4cc:	2320      	movs	r3, #32
 800a4ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4d6:	2330      	movs	r3, #48	@ 0x30
 800a4d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a688 <_vfiprintf_r+0x21c>
 800a4dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4e0:	f04f 0901 	mov.w	r9, #1
 800a4e4:	4623      	mov	r3, r4
 800a4e6:	469a      	mov	sl, r3
 800a4e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4ec:	b10a      	cbz	r2, 800a4f2 <_vfiprintf_r+0x86>
 800a4ee:	2a25      	cmp	r2, #37	@ 0x25
 800a4f0:	d1f9      	bne.n	800a4e6 <_vfiprintf_r+0x7a>
 800a4f2:	ebba 0b04 	subs.w	fp, sl, r4
 800a4f6:	d00b      	beq.n	800a510 <_vfiprintf_r+0xa4>
 800a4f8:	465b      	mov	r3, fp
 800a4fa:	4622      	mov	r2, r4
 800a4fc:	4629      	mov	r1, r5
 800a4fe:	4630      	mov	r0, r6
 800a500:	f7ff ffa2 	bl	800a448 <__sfputs_r>
 800a504:	3001      	adds	r0, #1
 800a506:	f000 80a7 	beq.w	800a658 <_vfiprintf_r+0x1ec>
 800a50a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a50c:	445a      	add	r2, fp
 800a50e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a510:	f89a 3000 	ldrb.w	r3, [sl]
 800a514:	2b00      	cmp	r3, #0
 800a516:	f000 809f 	beq.w	800a658 <_vfiprintf_r+0x1ec>
 800a51a:	2300      	movs	r3, #0
 800a51c:	f04f 32ff 	mov.w	r2, #4294967295
 800a520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a524:	f10a 0a01 	add.w	sl, sl, #1
 800a528:	9304      	str	r3, [sp, #16]
 800a52a:	9307      	str	r3, [sp, #28]
 800a52c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a530:	931a      	str	r3, [sp, #104]	@ 0x68
 800a532:	4654      	mov	r4, sl
 800a534:	2205      	movs	r2, #5
 800a536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a53a:	4853      	ldr	r0, [pc, #332]	@ (800a688 <_vfiprintf_r+0x21c>)
 800a53c:	f7f5 fe58 	bl	80001f0 <memchr>
 800a540:	9a04      	ldr	r2, [sp, #16]
 800a542:	b9d8      	cbnz	r0, 800a57c <_vfiprintf_r+0x110>
 800a544:	06d1      	lsls	r1, r2, #27
 800a546:	bf44      	itt	mi
 800a548:	2320      	movmi	r3, #32
 800a54a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a54e:	0713      	lsls	r3, r2, #28
 800a550:	bf44      	itt	mi
 800a552:	232b      	movmi	r3, #43	@ 0x2b
 800a554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a558:	f89a 3000 	ldrb.w	r3, [sl]
 800a55c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a55e:	d015      	beq.n	800a58c <_vfiprintf_r+0x120>
 800a560:	9a07      	ldr	r2, [sp, #28]
 800a562:	4654      	mov	r4, sl
 800a564:	2000      	movs	r0, #0
 800a566:	f04f 0c0a 	mov.w	ip, #10
 800a56a:	4621      	mov	r1, r4
 800a56c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a570:	3b30      	subs	r3, #48	@ 0x30
 800a572:	2b09      	cmp	r3, #9
 800a574:	d94b      	bls.n	800a60e <_vfiprintf_r+0x1a2>
 800a576:	b1b0      	cbz	r0, 800a5a6 <_vfiprintf_r+0x13a>
 800a578:	9207      	str	r2, [sp, #28]
 800a57a:	e014      	b.n	800a5a6 <_vfiprintf_r+0x13a>
 800a57c:	eba0 0308 	sub.w	r3, r0, r8
 800a580:	fa09 f303 	lsl.w	r3, r9, r3
 800a584:	4313      	orrs	r3, r2
 800a586:	9304      	str	r3, [sp, #16]
 800a588:	46a2      	mov	sl, r4
 800a58a:	e7d2      	b.n	800a532 <_vfiprintf_r+0xc6>
 800a58c:	9b03      	ldr	r3, [sp, #12]
 800a58e:	1d19      	adds	r1, r3, #4
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	9103      	str	r1, [sp, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	bfbb      	ittet	lt
 800a598:	425b      	neglt	r3, r3
 800a59a:	f042 0202 	orrlt.w	r2, r2, #2
 800a59e:	9307      	strge	r3, [sp, #28]
 800a5a0:	9307      	strlt	r3, [sp, #28]
 800a5a2:	bfb8      	it	lt
 800a5a4:	9204      	strlt	r2, [sp, #16]
 800a5a6:	7823      	ldrb	r3, [r4, #0]
 800a5a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5aa:	d10a      	bne.n	800a5c2 <_vfiprintf_r+0x156>
 800a5ac:	7863      	ldrb	r3, [r4, #1]
 800a5ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5b0:	d132      	bne.n	800a618 <_vfiprintf_r+0x1ac>
 800a5b2:	9b03      	ldr	r3, [sp, #12]
 800a5b4:	1d1a      	adds	r2, r3, #4
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	9203      	str	r2, [sp, #12]
 800a5ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5be:	3402      	adds	r4, #2
 800a5c0:	9305      	str	r3, [sp, #20]
 800a5c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a698 <_vfiprintf_r+0x22c>
 800a5c6:	7821      	ldrb	r1, [r4, #0]
 800a5c8:	2203      	movs	r2, #3
 800a5ca:	4650      	mov	r0, sl
 800a5cc:	f7f5 fe10 	bl	80001f0 <memchr>
 800a5d0:	b138      	cbz	r0, 800a5e2 <_vfiprintf_r+0x176>
 800a5d2:	9b04      	ldr	r3, [sp, #16]
 800a5d4:	eba0 000a 	sub.w	r0, r0, sl
 800a5d8:	2240      	movs	r2, #64	@ 0x40
 800a5da:	4082      	lsls	r2, r0
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	3401      	adds	r4, #1
 800a5e0:	9304      	str	r3, [sp, #16]
 800a5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5e6:	4829      	ldr	r0, [pc, #164]	@ (800a68c <_vfiprintf_r+0x220>)
 800a5e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5ec:	2206      	movs	r2, #6
 800a5ee:	f7f5 fdff 	bl	80001f0 <memchr>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	d03f      	beq.n	800a676 <_vfiprintf_r+0x20a>
 800a5f6:	4b26      	ldr	r3, [pc, #152]	@ (800a690 <_vfiprintf_r+0x224>)
 800a5f8:	bb1b      	cbnz	r3, 800a642 <_vfiprintf_r+0x1d6>
 800a5fa:	9b03      	ldr	r3, [sp, #12]
 800a5fc:	3307      	adds	r3, #7
 800a5fe:	f023 0307 	bic.w	r3, r3, #7
 800a602:	3308      	adds	r3, #8
 800a604:	9303      	str	r3, [sp, #12]
 800a606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a608:	443b      	add	r3, r7
 800a60a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a60c:	e76a      	b.n	800a4e4 <_vfiprintf_r+0x78>
 800a60e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a612:	460c      	mov	r4, r1
 800a614:	2001      	movs	r0, #1
 800a616:	e7a8      	b.n	800a56a <_vfiprintf_r+0xfe>
 800a618:	2300      	movs	r3, #0
 800a61a:	3401      	adds	r4, #1
 800a61c:	9305      	str	r3, [sp, #20]
 800a61e:	4619      	mov	r1, r3
 800a620:	f04f 0c0a 	mov.w	ip, #10
 800a624:	4620      	mov	r0, r4
 800a626:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a62a:	3a30      	subs	r2, #48	@ 0x30
 800a62c:	2a09      	cmp	r2, #9
 800a62e:	d903      	bls.n	800a638 <_vfiprintf_r+0x1cc>
 800a630:	2b00      	cmp	r3, #0
 800a632:	d0c6      	beq.n	800a5c2 <_vfiprintf_r+0x156>
 800a634:	9105      	str	r1, [sp, #20]
 800a636:	e7c4      	b.n	800a5c2 <_vfiprintf_r+0x156>
 800a638:	fb0c 2101 	mla	r1, ip, r1, r2
 800a63c:	4604      	mov	r4, r0
 800a63e:	2301      	movs	r3, #1
 800a640:	e7f0      	b.n	800a624 <_vfiprintf_r+0x1b8>
 800a642:	ab03      	add	r3, sp, #12
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	462a      	mov	r2, r5
 800a648:	4b12      	ldr	r3, [pc, #72]	@ (800a694 <_vfiprintf_r+0x228>)
 800a64a:	a904      	add	r1, sp, #16
 800a64c:	4630      	mov	r0, r6
 800a64e:	f7fb fe6d 	bl	800632c <_printf_float>
 800a652:	4607      	mov	r7, r0
 800a654:	1c78      	adds	r0, r7, #1
 800a656:	d1d6      	bne.n	800a606 <_vfiprintf_r+0x19a>
 800a658:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a65a:	07d9      	lsls	r1, r3, #31
 800a65c:	d405      	bmi.n	800a66a <_vfiprintf_r+0x1fe>
 800a65e:	89ab      	ldrh	r3, [r5, #12]
 800a660:	059a      	lsls	r2, r3, #22
 800a662:	d402      	bmi.n	800a66a <_vfiprintf_r+0x1fe>
 800a664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a666:	f7fc fe17 	bl	8007298 <__retarget_lock_release_recursive>
 800a66a:	89ab      	ldrh	r3, [r5, #12]
 800a66c:	065b      	lsls	r3, r3, #25
 800a66e:	f53f af1f 	bmi.w	800a4b0 <_vfiprintf_r+0x44>
 800a672:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a674:	e71e      	b.n	800a4b4 <_vfiprintf_r+0x48>
 800a676:	ab03      	add	r3, sp, #12
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	462a      	mov	r2, r5
 800a67c:	4b05      	ldr	r3, [pc, #20]	@ (800a694 <_vfiprintf_r+0x228>)
 800a67e:	a904      	add	r1, sp, #16
 800a680:	4630      	mov	r0, r6
 800a682:	f7fc f8eb 	bl	800685c <_printf_i>
 800a686:	e7e4      	b.n	800a652 <_vfiprintf_r+0x1e6>
 800a688:	0800ad95 	.word	0x0800ad95
 800a68c:	0800ad9f 	.word	0x0800ad9f
 800a690:	0800632d 	.word	0x0800632d
 800a694:	0800a449 	.word	0x0800a449
 800a698:	0800ad9b 	.word	0x0800ad9b

0800a69c <__swbuf_r>:
 800a69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69e:	460e      	mov	r6, r1
 800a6a0:	4614      	mov	r4, r2
 800a6a2:	4605      	mov	r5, r0
 800a6a4:	b118      	cbz	r0, 800a6ae <__swbuf_r+0x12>
 800a6a6:	6a03      	ldr	r3, [r0, #32]
 800a6a8:	b90b      	cbnz	r3, 800a6ae <__swbuf_r+0x12>
 800a6aa:	f7fc fc8f 	bl	8006fcc <__sinit>
 800a6ae:	69a3      	ldr	r3, [r4, #24]
 800a6b0:	60a3      	str	r3, [r4, #8]
 800a6b2:	89a3      	ldrh	r3, [r4, #12]
 800a6b4:	071a      	lsls	r2, r3, #28
 800a6b6:	d501      	bpl.n	800a6bc <__swbuf_r+0x20>
 800a6b8:	6923      	ldr	r3, [r4, #16]
 800a6ba:	b943      	cbnz	r3, 800a6ce <__swbuf_r+0x32>
 800a6bc:	4621      	mov	r1, r4
 800a6be:	4628      	mov	r0, r5
 800a6c0:	f000 f82a 	bl	800a718 <__swsetup_r>
 800a6c4:	b118      	cbz	r0, 800a6ce <__swbuf_r+0x32>
 800a6c6:	f04f 37ff 	mov.w	r7, #4294967295
 800a6ca:	4638      	mov	r0, r7
 800a6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	6922      	ldr	r2, [r4, #16]
 800a6d2:	1a98      	subs	r0, r3, r2
 800a6d4:	6963      	ldr	r3, [r4, #20]
 800a6d6:	b2f6      	uxtb	r6, r6
 800a6d8:	4283      	cmp	r3, r0
 800a6da:	4637      	mov	r7, r6
 800a6dc:	dc05      	bgt.n	800a6ea <__swbuf_r+0x4e>
 800a6de:	4621      	mov	r1, r4
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	f7ff fa53 	bl	8009b8c <_fflush_r>
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	d1ed      	bne.n	800a6c6 <__swbuf_r+0x2a>
 800a6ea:	68a3      	ldr	r3, [r4, #8]
 800a6ec:	3b01      	subs	r3, #1
 800a6ee:	60a3      	str	r3, [r4, #8]
 800a6f0:	6823      	ldr	r3, [r4, #0]
 800a6f2:	1c5a      	adds	r2, r3, #1
 800a6f4:	6022      	str	r2, [r4, #0]
 800a6f6:	701e      	strb	r6, [r3, #0]
 800a6f8:	6962      	ldr	r2, [r4, #20]
 800a6fa:	1c43      	adds	r3, r0, #1
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d004      	beq.n	800a70a <__swbuf_r+0x6e>
 800a700:	89a3      	ldrh	r3, [r4, #12]
 800a702:	07db      	lsls	r3, r3, #31
 800a704:	d5e1      	bpl.n	800a6ca <__swbuf_r+0x2e>
 800a706:	2e0a      	cmp	r6, #10
 800a708:	d1df      	bne.n	800a6ca <__swbuf_r+0x2e>
 800a70a:	4621      	mov	r1, r4
 800a70c:	4628      	mov	r0, r5
 800a70e:	f7ff fa3d 	bl	8009b8c <_fflush_r>
 800a712:	2800      	cmp	r0, #0
 800a714:	d0d9      	beq.n	800a6ca <__swbuf_r+0x2e>
 800a716:	e7d6      	b.n	800a6c6 <__swbuf_r+0x2a>

0800a718 <__swsetup_r>:
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	4b29      	ldr	r3, [pc, #164]	@ (800a7c0 <__swsetup_r+0xa8>)
 800a71c:	4605      	mov	r5, r0
 800a71e:	6818      	ldr	r0, [r3, #0]
 800a720:	460c      	mov	r4, r1
 800a722:	b118      	cbz	r0, 800a72c <__swsetup_r+0x14>
 800a724:	6a03      	ldr	r3, [r0, #32]
 800a726:	b90b      	cbnz	r3, 800a72c <__swsetup_r+0x14>
 800a728:	f7fc fc50 	bl	8006fcc <__sinit>
 800a72c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a730:	0719      	lsls	r1, r3, #28
 800a732:	d422      	bmi.n	800a77a <__swsetup_r+0x62>
 800a734:	06da      	lsls	r2, r3, #27
 800a736:	d407      	bmi.n	800a748 <__swsetup_r+0x30>
 800a738:	2209      	movs	r2, #9
 800a73a:	602a      	str	r2, [r5, #0]
 800a73c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a740:	81a3      	strh	r3, [r4, #12]
 800a742:	f04f 30ff 	mov.w	r0, #4294967295
 800a746:	e033      	b.n	800a7b0 <__swsetup_r+0x98>
 800a748:	0758      	lsls	r0, r3, #29
 800a74a:	d512      	bpl.n	800a772 <__swsetup_r+0x5a>
 800a74c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a74e:	b141      	cbz	r1, 800a762 <__swsetup_r+0x4a>
 800a750:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a754:	4299      	cmp	r1, r3
 800a756:	d002      	beq.n	800a75e <__swsetup_r+0x46>
 800a758:	4628      	mov	r0, r5
 800a75a:	f7fd fc0d 	bl	8007f78 <_free_r>
 800a75e:	2300      	movs	r3, #0
 800a760:	6363      	str	r3, [r4, #52]	@ 0x34
 800a762:	89a3      	ldrh	r3, [r4, #12]
 800a764:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a768:	81a3      	strh	r3, [r4, #12]
 800a76a:	2300      	movs	r3, #0
 800a76c:	6063      	str	r3, [r4, #4]
 800a76e:	6923      	ldr	r3, [r4, #16]
 800a770:	6023      	str	r3, [r4, #0]
 800a772:	89a3      	ldrh	r3, [r4, #12]
 800a774:	f043 0308 	orr.w	r3, r3, #8
 800a778:	81a3      	strh	r3, [r4, #12]
 800a77a:	6923      	ldr	r3, [r4, #16]
 800a77c:	b94b      	cbnz	r3, 800a792 <__swsetup_r+0x7a>
 800a77e:	89a3      	ldrh	r3, [r4, #12]
 800a780:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a788:	d003      	beq.n	800a792 <__swsetup_r+0x7a>
 800a78a:	4621      	mov	r1, r4
 800a78c:	4628      	mov	r0, r5
 800a78e:	f000 f883 	bl	800a898 <__smakebuf_r>
 800a792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a796:	f013 0201 	ands.w	r2, r3, #1
 800a79a:	d00a      	beq.n	800a7b2 <__swsetup_r+0x9a>
 800a79c:	2200      	movs	r2, #0
 800a79e:	60a2      	str	r2, [r4, #8]
 800a7a0:	6962      	ldr	r2, [r4, #20]
 800a7a2:	4252      	negs	r2, r2
 800a7a4:	61a2      	str	r2, [r4, #24]
 800a7a6:	6922      	ldr	r2, [r4, #16]
 800a7a8:	b942      	cbnz	r2, 800a7bc <__swsetup_r+0xa4>
 800a7aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a7ae:	d1c5      	bne.n	800a73c <__swsetup_r+0x24>
 800a7b0:	bd38      	pop	{r3, r4, r5, pc}
 800a7b2:	0799      	lsls	r1, r3, #30
 800a7b4:	bf58      	it	pl
 800a7b6:	6962      	ldrpl	r2, [r4, #20]
 800a7b8:	60a2      	str	r2, [r4, #8]
 800a7ba:	e7f4      	b.n	800a7a6 <__swsetup_r+0x8e>
 800a7bc:	2000      	movs	r0, #0
 800a7be:	e7f7      	b.n	800a7b0 <__swsetup_r+0x98>
 800a7c0:	20000024 	.word	0x20000024

0800a7c4 <_raise_r>:
 800a7c4:	291f      	cmp	r1, #31
 800a7c6:	b538      	push	{r3, r4, r5, lr}
 800a7c8:	4605      	mov	r5, r0
 800a7ca:	460c      	mov	r4, r1
 800a7cc:	d904      	bls.n	800a7d8 <_raise_r+0x14>
 800a7ce:	2316      	movs	r3, #22
 800a7d0:	6003      	str	r3, [r0, #0]
 800a7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a7da:	b112      	cbz	r2, 800a7e2 <_raise_r+0x1e>
 800a7dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7e0:	b94b      	cbnz	r3, 800a7f6 <_raise_r+0x32>
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	f000 f830 	bl	800a848 <_getpid_r>
 800a7e8:	4622      	mov	r2, r4
 800a7ea:	4601      	mov	r1, r0
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7f2:	f000 b817 	b.w	800a824 <_kill_r>
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d00a      	beq.n	800a810 <_raise_r+0x4c>
 800a7fa:	1c59      	adds	r1, r3, #1
 800a7fc:	d103      	bne.n	800a806 <_raise_r+0x42>
 800a7fe:	2316      	movs	r3, #22
 800a800:	6003      	str	r3, [r0, #0]
 800a802:	2001      	movs	r0, #1
 800a804:	e7e7      	b.n	800a7d6 <_raise_r+0x12>
 800a806:	2100      	movs	r1, #0
 800a808:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a80c:	4620      	mov	r0, r4
 800a80e:	4798      	blx	r3
 800a810:	2000      	movs	r0, #0
 800a812:	e7e0      	b.n	800a7d6 <_raise_r+0x12>

0800a814 <raise>:
 800a814:	4b02      	ldr	r3, [pc, #8]	@ (800a820 <raise+0xc>)
 800a816:	4601      	mov	r1, r0
 800a818:	6818      	ldr	r0, [r3, #0]
 800a81a:	f7ff bfd3 	b.w	800a7c4 <_raise_r>
 800a81e:	bf00      	nop
 800a820:	20000024 	.word	0x20000024

0800a824 <_kill_r>:
 800a824:	b538      	push	{r3, r4, r5, lr}
 800a826:	4d07      	ldr	r5, [pc, #28]	@ (800a844 <_kill_r+0x20>)
 800a828:	2300      	movs	r3, #0
 800a82a:	4604      	mov	r4, r0
 800a82c:	4608      	mov	r0, r1
 800a82e:	4611      	mov	r1, r2
 800a830:	602b      	str	r3, [r5, #0]
 800a832:	f7f7 fec3 	bl	80025bc <_kill>
 800a836:	1c43      	adds	r3, r0, #1
 800a838:	d102      	bne.n	800a840 <_kill_r+0x1c>
 800a83a:	682b      	ldr	r3, [r5, #0]
 800a83c:	b103      	cbz	r3, 800a840 <_kill_r+0x1c>
 800a83e:	6023      	str	r3, [r4, #0]
 800a840:	bd38      	pop	{r3, r4, r5, pc}
 800a842:	bf00      	nop
 800a844:	200009ec 	.word	0x200009ec

0800a848 <_getpid_r>:
 800a848:	f7f7 beb0 	b.w	80025ac <_getpid>

0800a84c <__swhatbuf_r>:
 800a84c:	b570      	push	{r4, r5, r6, lr}
 800a84e:	460c      	mov	r4, r1
 800a850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a854:	2900      	cmp	r1, #0
 800a856:	b096      	sub	sp, #88	@ 0x58
 800a858:	4615      	mov	r5, r2
 800a85a:	461e      	mov	r6, r3
 800a85c:	da0d      	bge.n	800a87a <__swhatbuf_r+0x2e>
 800a85e:	89a3      	ldrh	r3, [r4, #12]
 800a860:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a864:	f04f 0100 	mov.w	r1, #0
 800a868:	bf14      	ite	ne
 800a86a:	2340      	movne	r3, #64	@ 0x40
 800a86c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a870:	2000      	movs	r0, #0
 800a872:	6031      	str	r1, [r6, #0]
 800a874:	602b      	str	r3, [r5, #0]
 800a876:	b016      	add	sp, #88	@ 0x58
 800a878:	bd70      	pop	{r4, r5, r6, pc}
 800a87a:	466a      	mov	r2, sp
 800a87c:	f000 f848 	bl	800a910 <_fstat_r>
 800a880:	2800      	cmp	r0, #0
 800a882:	dbec      	blt.n	800a85e <__swhatbuf_r+0x12>
 800a884:	9901      	ldr	r1, [sp, #4]
 800a886:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a88a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a88e:	4259      	negs	r1, r3
 800a890:	4159      	adcs	r1, r3
 800a892:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a896:	e7eb      	b.n	800a870 <__swhatbuf_r+0x24>

0800a898 <__smakebuf_r>:
 800a898:	898b      	ldrh	r3, [r1, #12]
 800a89a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a89c:	079d      	lsls	r5, r3, #30
 800a89e:	4606      	mov	r6, r0
 800a8a0:	460c      	mov	r4, r1
 800a8a2:	d507      	bpl.n	800a8b4 <__smakebuf_r+0x1c>
 800a8a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a8a8:	6023      	str	r3, [r4, #0]
 800a8aa:	6123      	str	r3, [r4, #16]
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	6163      	str	r3, [r4, #20]
 800a8b0:	b003      	add	sp, #12
 800a8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8b4:	ab01      	add	r3, sp, #4
 800a8b6:	466a      	mov	r2, sp
 800a8b8:	f7ff ffc8 	bl	800a84c <__swhatbuf_r>
 800a8bc:	9f00      	ldr	r7, [sp, #0]
 800a8be:	4605      	mov	r5, r0
 800a8c0:	4639      	mov	r1, r7
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	f7fd fbcc 	bl	8008060 <_malloc_r>
 800a8c8:	b948      	cbnz	r0, 800a8de <__smakebuf_r+0x46>
 800a8ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8ce:	059a      	lsls	r2, r3, #22
 800a8d0:	d4ee      	bmi.n	800a8b0 <__smakebuf_r+0x18>
 800a8d2:	f023 0303 	bic.w	r3, r3, #3
 800a8d6:	f043 0302 	orr.w	r3, r3, #2
 800a8da:	81a3      	strh	r3, [r4, #12]
 800a8dc:	e7e2      	b.n	800a8a4 <__smakebuf_r+0xc>
 800a8de:	89a3      	ldrh	r3, [r4, #12]
 800a8e0:	6020      	str	r0, [r4, #0]
 800a8e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8e6:	81a3      	strh	r3, [r4, #12]
 800a8e8:	9b01      	ldr	r3, [sp, #4]
 800a8ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a8ee:	b15b      	cbz	r3, 800a908 <__smakebuf_r+0x70>
 800a8f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	f000 f81d 	bl	800a934 <_isatty_r>
 800a8fa:	b128      	cbz	r0, 800a908 <__smakebuf_r+0x70>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	f023 0303 	bic.w	r3, r3, #3
 800a902:	f043 0301 	orr.w	r3, r3, #1
 800a906:	81a3      	strh	r3, [r4, #12]
 800a908:	89a3      	ldrh	r3, [r4, #12]
 800a90a:	431d      	orrs	r5, r3
 800a90c:	81a5      	strh	r5, [r4, #12]
 800a90e:	e7cf      	b.n	800a8b0 <__smakebuf_r+0x18>

0800a910 <_fstat_r>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	4d07      	ldr	r5, [pc, #28]	@ (800a930 <_fstat_r+0x20>)
 800a914:	2300      	movs	r3, #0
 800a916:	4604      	mov	r4, r0
 800a918:	4608      	mov	r0, r1
 800a91a:	4611      	mov	r1, r2
 800a91c:	602b      	str	r3, [r5, #0]
 800a91e:	f7f7 fead 	bl	800267c <_fstat>
 800a922:	1c43      	adds	r3, r0, #1
 800a924:	d102      	bne.n	800a92c <_fstat_r+0x1c>
 800a926:	682b      	ldr	r3, [r5, #0]
 800a928:	b103      	cbz	r3, 800a92c <_fstat_r+0x1c>
 800a92a:	6023      	str	r3, [r4, #0]
 800a92c:	bd38      	pop	{r3, r4, r5, pc}
 800a92e:	bf00      	nop
 800a930:	200009ec 	.word	0x200009ec

0800a934 <_isatty_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4d06      	ldr	r5, [pc, #24]	@ (800a950 <_isatty_r+0x1c>)
 800a938:	2300      	movs	r3, #0
 800a93a:	4604      	mov	r4, r0
 800a93c:	4608      	mov	r0, r1
 800a93e:	602b      	str	r3, [r5, #0]
 800a940:	f7f7 feac 	bl	800269c <_isatty>
 800a944:	1c43      	adds	r3, r0, #1
 800a946:	d102      	bne.n	800a94e <_isatty_r+0x1a>
 800a948:	682b      	ldr	r3, [r5, #0]
 800a94a:	b103      	cbz	r3, 800a94e <_isatty_r+0x1a>
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	bd38      	pop	{r3, r4, r5, pc}
 800a950:	200009ec 	.word	0x200009ec

0800a954 <_init>:
 800a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a956:	bf00      	nop
 800a958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a95a:	bc08      	pop	{r3}
 800a95c:	469e      	mov	lr, r3
 800a95e:	4770      	bx	lr

0800a960 <_fini>:
 800a960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a962:	bf00      	nop
 800a964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a966:	bc08      	pop	{r3}
 800a968:	469e      	mov	lr, r3
 800a96a:	4770      	bx	lr
