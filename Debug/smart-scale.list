
smart-scale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2e8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000092c  0800b498  0800b498  0000c498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdc4  0800bdc4  0000d1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bdc4  0800bdc4  0000cdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdcc  0800bdcc  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdcc  0800bdcc  0000cdcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bdd0  0800bdd0  0000cdd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800bdd4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1e0  2**0
                  CONTENTS
 10 .bss          0000250c  200001e0  200001e0  0000d1e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200026ec  200026ec  0000d1e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011827  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000297e  00000000  00000000  0001ea37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  000213b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d5f  00000000  00000000  000224e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002586f  00000000  00000000  00023247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013628  00000000  00000000  00048ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfbee  00000000  00000000  0005c0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013bccc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006068  00000000  00000000  0013bd10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00141d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b480 	.word	0x0800b480

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800b480 	.word	0x0800b480

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <Set7SegDisplayWithDecimal>:
    ShowDecimalPoint = 1; // Hiển thị dấu thập phân ở digit đầu tiên
}

// Hàm hiển thị số với dấu thập phân tùy chọn
void Set7SegDisplayWithDecimal(int val, int show_decimal)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
    if(val > 99) val = 99;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b63      	cmp	r3, #99	@ 0x63
 800106e:	dd01      	ble.n	8001074 <Set7SegDisplayWithDecimal+0x14>
 8001070:	2363      	movs	r3, #99	@ 0x63
 8001072:	607b      	str	r3, [r7, #4]
    if(val < 0) val = 0;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	da01      	bge.n	800107e <Set7SegDisplayWithDecimal+0x1e>
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]

    DisplayValue = val;
 800107e:	4a07      	ldr	r2, [pc, #28]	@ (800109c <Set7SegDisplayWithDecimal+0x3c>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6013      	str	r3, [r2, #0]
    pos = 0;
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <Set7SegDisplayWithDecimal+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
    ShowDecimalPoint = show_decimal;
 800108a:	4a06      	ldr	r2, [pc, #24]	@ (80010a4 <Set7SegDisplayWithDecimal+0x44>)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	200001fc 	.word	0x200001fc
 80010a0:	20000200 	.word	0x20000200
 80010a4:	20000204 	.word	0x20000204

080010a8 <Run7SegDisplay>:

void Run7SegDisplay()
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
    unsigned char val;
    int show_decimal_now = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]

    pos++;
 80010b2:	4b73      	ldr	r3, [pc, #460]	@ (8001280 <Run7SegDisplay+0x1d8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3301      	adds	r3, #1
 80010b8:	4a71      	ldr	r2, [pc, #452]	@ (8001280 <Run7SegDisplay+0x1d8>)
 80010ba:	6013      	str	r3, [r2, #0]
    HAL_GPIO_WritePin(PORT_7SEG_CONTROL0, PIN_7SEG_CONTROL0, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2104      	movs	r1, #4
 80010c0:	4870      	ldr	r0, [pc, #448]	@ (8001284 <Run7SegDisplay+0x1dc>)
 80010c2:	f002 fb89 	bl	80037d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2108      	movs	r1, #8
 80010ca:	486e      	ldr	r0, [pc, #440]	@ (8001284 <Run7SegDisplay+0x1dc>)
 80010cc:	f002 fb84 	bl	80037d8 <HAL_GPIO_WritePin>

    if (pos & 0x1) {
 80010d0:	4b6b      	ldr	r3, [pc, #428]	@ (8001280 <Run7SegDisplay+0x1d8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d012      	beq.n	8001102 <Run7SegDisplay+0x5a>
        // Digit đầu tiên (bên phải) - hàng đơn vị
        val = Mask[DisplayValue % 10];
 80010dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001288 <Run7SegDisplay+0x1e0>)
 80010de:	6819      	ldr	r1, [r3, #0]
 80010e0:	4b6a      	ldr	r3, [pc, #424]	@ (800128c <Run7SegDisplay+0x1e4>)
 80010e2:	fb83 2301 	smull	r2, r3, r3, r1
 80010e6:	109a      	asrs	r2, r3, #2
 80010e8:	17cb      	asrs	r3, r1, #31
 80010ea:	1ad2      	subs	r2, r2, r3
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	1aca      	subs	r2, r1, r3
 80010f6:	4b66      	ldr	r3, [pc, #408]	@ (8001290 <Run7SegDisplay+0x1e8>)
 80010f8:	5c9b      	ldrb	r3, [r3, r2]
 80010fa:	71fb      	strb	r3, [r7, #7]
        show_decimal_now = 0; // Không hiển thị dấu thập phân ở digit này
 80010fc:	2300      	movs	r3, #0
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	e01b      	b.n	800113a <Run7SegDisplay+0x92>
    } else {
        // Digit thứ hai (bên trái) - hàng chục
        val = Mask[(DisplayValue / 10) % 10];
 8001102:	4b61      	ldr	r3, [pc, #388]	@ (8001288 <Run7SegDisplay+0x1e0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a61      	ldr	r2, [pc, #388]	@ (800128c <Run7SegDisplay+0x1e4>)
 8001108:	fb82 1203 	smull	r1, r2, r2, r3
 800110c:	1092      	asrs	r2, r2, #2
 800110e:	17db      	asrs	r3, r3, #31
 8001110:	1ad1      	subs	r1, r2, r3
 8001112:	4b5e      	ldr	r3, [pc, #376]	@ (800128c <Run7SegDisplay+0x1e4>)
 8001114:	fb83 2301 	smull	r2, r3, r3, r1
 8001118:	109a      	asrs	r2, r3, #2
 800111a:	17cb      	asrs	r3, r1, #31
 800111c:	1ad2      	subs	r2, r2, r3
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	1aca      	subs	r2, r1, r3
 8001128:	4b59      	ldr	r3, [pc, #356]	@ (8001290 <Run7SegDisplay+0x1e8>)
 800112a:	5c9b      	ldrb	r3, [r3, r2]
 800112c:	71fb      	strb	r3, [r7, #7]
        // Hiển thị dấu thập phân ở digit này nếu cần (sau số hàng chục)
        if(ShowDecimalPoint) {
 800112e:	4b59      	ldr	r3, [pc, #356]	@ (8001294 <Run7SegDisplay+0x1ec>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <Run7SegDisplay+0x92>
            show_decimal_now = 1;
 8001136:	2301      	movs	r3, #1
 8001138:	603b      	str	r3, [r7, #0]
        }
    }

    // Thiết lập segment P (decimal point)
    if (show_decimal_now)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d006      	beq.n	800114e <Run7SegDisplay+0xa6>
        HAL_GPIO_WritePin(PORT_7SEG_P, PIN_7SEG_P, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001146:	4854      	ldr	r0, [pc, #336]	@ (8001298 <Run7SegDisplay+0x1f0>)
 8001148:	f002 fb46 	bl	80037d8 <HAL_GPIO_WritePin>
 800114c:	e005      	b.n	800115a <Run7SegDisplay+0xb2>
    else
        HAL_GPIO_WritePin(PORT_7SEG_P, PIN_7SEG_P, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001154:	4850      	ldr	r0, [pc, #320]	@ (8001298 <Run7SegDisplay+0x1f0>)
 8001156:	f002 fb3f 	bl	80037d8 <HAL_GPIO_WritePin>

    // Thiết lập các segment khác (G, F, E, D, C, B, A)
    if (val & 0x40)
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001160:	2b00      	cmp	r3, #0
 8001162:	d006      	beq.n	8001172 <Run7SegDisplay+0xca>
        HAL_GPIO_WritePin(PORT_7SEG_G, PIN_7SEG_G, GPIO_PIN_SET);
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800116a:	484b      	ldr	r0, [pc, #300]	@ (8001298 <Run7SegDisplay+0x1f0>)
 800116c:	f002 fb34 	bl	80037d8 <HAL_GPIO_WritePin>
 8001170:	e005      	b.n	800117e <Run7SegDisplay+0xd6>
    else
        HAL_GPIO_WritePin(PORT_7SEG_G, PIN_7SEG_G, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001178:	4847      	ldr	r0, [pc, #284]	@ (8001298 <Run7SegDisplay+0x1f0>)
 800117a:	f002 fb2d 	bl	80037d8 <HAL_GPIO_WritePin>

    if (val & 0x20)
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 0320 	and.w	r3, r3, #32
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <Run7SegDisplay+0xee>
        HAL_GPIO_WritePin(PORT_7SEG_F, PIN_7SEG_F, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800118e:	4842      	ldr	r0, [pc, #264]	@ (8001298 <Run7SegDisplay+0x1f0>)
 8001190:	f002 fb22 	bl	80037d8 <HAL_GPIO_WritePin>
 8001194:	e005      	b.n	80011a2 <Run7SegDisplay+0xfa>
    else
        HAL_GPIO_WritePin(PORT_7SEG_F, PIN_7SEG_F, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800119c:	483e      	ldr	r0, [pc, #248]	@ (8001298 <Run7SegDisplay+0x1f0>)
 800119e:	f002 fb1b 	bl	80037d8 <HAL_GPIO_WritePin>

    if (val & 0x10)
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d006      	beq.n	80011ba <Run7SegDisplay+0x112>
        HAL_GPIO_WritePin(PORT_7SEG_E, PIN_7SEG_E, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011b2:	4839      	ldr	r0, [pc, #228]	@ (8001298 <Run7SegDisplay+0x1f0>)
 80011b4:	f002 fb10 	bl	80037d8 <HAL_GPIO_WritePin>
 80011b8:	e005      	b.n	80011c6 <Run7SegDisplay+0x11e>
    else
        HAL_GPIO_WritePin(PORT_7SEG_E, PIN_7SEG_E, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011c0:	4835      	ldr	r0, [pc, #212]	@ (8001298 <Run7SegDisplay+0x1f0>)
 80011c2:	f002 fb09 	bl	80037d8 <HAL_GPIO_WritePin>

    if (val & 0x8)
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <Run7SegDisplay+0x136>
        HAL_GPIO_WritePin(PORT_7SEG_D, PIN_7SEG_D, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011d6:	4830      	ldr	r0, [pc, #192]	@ (8001298 <Run7SegDisplay+0x1f0>)
 80011d8:	f002 fafe 	bl	80037d8 <HAL_GPIO_WritePin>
 80011dc:	e005      	b.n	80011ea <Run7SegDisplay+0x142>
    else
        HAL_GPIO_WritePin(PORT_7SEG_D, PIN_7SEG_D, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011e4:	482c      	ldr	r0, [pc, #176]	@ (8001298 <Run7SegDisplay+0x1f0>)
 80011e6:	f002 faf7 	bl	80037d8 <HAL_GPIO_WritePin>

    if (val & 0x4)
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <Run7SegDisplay+0x15a>
        HAL_GPIO_WritePin(PORT_7SEG_C, PIN_7SEG_C, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011fa:	4827      	ldr	r0, [pc, #156]	@ (8001298 <Run7SegDisplay+0x1f0>)
 80011fc:	f002 faec 	bl	80037d8 <HAL_GPIO_WritePin>
 8001200:	e005      	b.n	800120e <Run7SegDisplay+0x166>
    else
        HAL_GPIO_WritePin(PORT_7SEG_C, PIN_7SEG_C, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001208:	4823      	ldr	r0, [pc, #140]	@ (8001298 <Run7SegDisplay+0x1f0>)
 800120a:	f002 fae5 	bl	80037d8 <HAL_GPIO_WritePin>

    if (val & 0x2)
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d006      	beq.n	8001226 <Run7SegDisplay+0x17e>
        HAL_GPIO_WritePin(PORT_7SEG_B, PIN_7SEG_B, GPIO_PIN_SET);
 8001218:	2201      	movs	r2, #1
 800121a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800121e:	481e      	ldr	r0, [pc, #120]	@ (8001298 <Run7SegDisplay+0x1f0>)
 8001220:	f002 fada 	bl	80037d8 <HAL_GPIO_WritePin>
 8001224:	e005      	b.n	8001232 <Run7SegDisplay+0x18a>
    else
        HAL_GPIO_WritePin(PORT_7SEG_B, PIN_7SEG_B, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800122c:	481a      	ldr	r0, [pc, #104]	@ (8001298 <Run7SegDisplay+0x1f0>)
 800122e:	f002 fad3 	bl	80037d8 <HAL_GPIO_WritePin>

    if (val & 0x1)
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <Run7SegDisplay+0x1a2>
        HAL_GPIO_WritePin(PORT_7SEG_A, PIN_7SEG_A, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001242:	4815      	ldr	r0, [pc, #84]	@ (8001298 <Run7SegDisplay+0x1f0>)
 8001244:	f002 fac8 	bl	80037d8 <HAL_GPIO_WritePin>
 8001248:	e005      	b.n	8001256 <Run7SegDisplay+0x1ae>
    else
        HAL_GPIO_WritePin(PORT_7SEG_A, PIN_7SEG_A, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001250:	4811      	ldr	r0, [pc, #68]	@ (8001298 <Run7SegDisplay+0x1f0>)
 8001252:	f002 fac1 	bl	80037d8 <HAL_GPIO_WritePin>

    // Kích hoạt digit tương ứng
    if (pos & 0x1)
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <Run7SegDisplay+0x1d8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d005      	beq.n	800126e <Run7SegDisplay+0x1c6>
        HAL_GPIO_WritePin(PORT_7SEG_CONTROL0, PIN_7SEG_CONTROL0, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	2104      	movs	r1, #4
 8001266:	4807      	ldr	r0, [pc, #28]	@ (8001284 <Run7SegDisplay+0x1dc>)
 8001268:	f002 fab6 	bl	80037d8 <HAL_GPIO_WritePin>
    else
        HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_SET);
}
 800126c:	e004      	b.n	8001278 <Run7SegDisplay+0x1d0>
        HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	2108      	movs	r1, #8
 8001272:	4804      	ldr	r0, [pc, #16]	@ (8001284 <Run7SegDisplay+0x1dc>)
 8001274:	f002 fab0 	bl	80037d8 <HAL_GPIO_WritePin>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000200 	.word	0x20000200
 8001284:	40021800 	.word	0x40021800
 8001288:	200001fc 	.word	0x200001fc
 800128c:	66666667 	.word	0x66666667
 8001290:	20000000 	.word	0x20000000
 8001294:	20000204 	.word	0x20000204
 8001298:	40021000 	.word	0x40021000

0800129c <hx711_init>:
 */

#include <HX711.h>

//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	@ 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	4613      	mov	r3, r2
 80012aa:	80fb      	strh	r3, [r7, #6]
  // Setup the pin connections with the STM Board
  hx711->clk_gpio = clk_gpio;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	88fa      	ldrh	r2, [r7, #6]
 80012b6:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80012c2:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80012dc:	2302      	movs	r3, #2
 80012de:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	68b8      	ldr	r0, [r7, #8]
 80012ec:	f002 f8b0 	bl	8003450 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f8:	2302      	movs	r3, #2
 80012fa:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 80012fc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80012fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	6838      	ldr	r0, [r7, #0]
 8001308:	f002 f8a2 	bl	8003450 <HAL_GPIO_Init>

}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	@ 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <set_scale>:

//#############################################################################################
void set_scale(hx711_t *hx711, float Ascale, float Bscale){
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001320:	edc7 0a01 	vstr	s1, [r7, #4]
  // Set the scale. To calibrate the cell, run the program with a scale of 1, call the tare function and then the get_units function. 
  // Divide the obtained weight by the real weight. The result is the parameter to pass to scale
	hx711->Ascale = Ascale;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	611a      	str	r2, [r3, #16]
	hx711->Bscale = Bscale;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	61da      	str	r2, [r3, #28]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <set_gain>:

//#############################################################################################
void set_gain(hx711_t *hx711, uint8_t Again, uint8_t Bgain){
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	70fb      	strb	r3, [r7, #3]
 8001348:	4613      	mov	r3, r2
 800134a:	70bb      	strb	r3, [r7, #2]
  // Define A channel's gain
	switch (Again) {
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	2b40      	cmp	r3, #64	@ 0x40
 8001350:	d005      	beq.n	800135e <set_gain+0x22>
 8001352:	2b80      	cmp	r3, #128	@ 0x80
 8001354:	d107      	bne.n	8001366 <set_gain+0x2a>
			case 128:		// channel A, gain factor 128
				hx711->Again = 1;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	751a      	strb	r2, [r3, #20]
				break;
 800135c:	e003      	b.n	8001366 <set_gain+0x2a>
			case 64:		// channel A, gain factor 64
				hx711->Again = 3;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2203      	movs	r2, #3
 8001362:	751a      	strb	r2, [r3, #20]
				break;
 8001364:	bf00      	nop
		}
	hx711->Bgain = 2;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2202      	movs	r2, #2
 800136a:	f883 2020 	strb.w	r2, [r3, #32]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <set_offset>:

//#############################################################################################
void set_offset(hx711_t *hx711, long offset, uint8_t channel){
 800137a:	b480      	push	{r7}
 800137c:	b085      	sub	sp, #20
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	4613      	mov	r3, r2
 8001386:	71fb      	strb	r3, [r7, #7]
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d103      	bne.n	8001396 <set_offset+0x1c>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	60da      	str	r2, [r3, #12]
	else hx711->Boffset = offset;
}
 8001394:	e002      	b.n	800139c <set_offset+0x22>
	else hx711->Boffset = offset;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	619a      	str	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <shiftIn>:

//############################################################################################
uint8_t shiftIn(hx711_t *hx711, uint8_t bitOrder) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]
    uint8_t i;

    for(i = 0; i < 8; ++i) {
 80013b8:	2300      	movs	r3, #0
 80013ba:	73bb      	strb	r3, [r7, #14]
 80013bc:	e03e      	b.n	800143c <shiftIn+0x94>
    	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	891b      	ldrh	r3, [r3, #8]
 80013c6:	2201      	movs	r2, #1
 80013c8:	4619      	mov	r1, r3
 80013ca:	f002 fa05 	bl	80037d8 <HAL_GPIO_WritePin>
        if(bitOrder == 0)
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d113      	bne.n	80013fc <shiftIn+0x54>
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << i;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	895b      	ldrh	r3, [r3, #10]
 80013dc:	4619      	mov	r1, r3
 80013de:	4610      	mov	r0, r2
 80013e0:	f002 f9e2 	bl	80037a8 <HAL_GPIO_ReadPin>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	7bbb      	ldrb	r3, [r7, #14]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	b25a      	sxtb	r2, r3
 80013f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	e014      	b.n	8001426 <shiftIn+0x7e>
        else
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << (7 - i);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	895b      	ldrh	r3, [r3, #10]
 8001404:	4619      	mov	r1, r3
 8001406:	4610      	mov	r0, r2
 8001408:	f002 f9ce 	bl	80037a8 <HAL_GPIO_ReadPin>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	7bbb      	ldrb	r3, [r7, #14]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	b25a      	sxtb	r2, r3
 800141c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001420:	4313      	orrs	r3, r2
 8001422:	b25b      	sxtb	r3, r3
 8001424:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	891b      	ldrh	r3, [r3, #8]
 800142e:	2200      	movs	r2, #0
 8001430:	4619      	mov	r1, r3
 8001432:	f002 f9d1 	bl	80037d8 <HAL_GPIO_WritePin>
    for(i = 0; i < 8; ++i) {
 8001436:	7bbb      	ldrb	r3, [r7, #14]
 8001438:	3301      	adds	r3, #1
 800143a:	73bb      	strb	r3, [r7, #14]
 800143c:	7bbb      	ldrb	r3, [r7, #14]
 800143e:	2b07      	cmp	r3, #7
 8001440:	d9bd      	bls.n	80013be <shiftIn+0x16>
    }
    return value;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <is_ready>:

//############################################################################################
bool is_ready(hx711_t *hx711) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_RESET){
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	895b      	ldrh	r3, [r3, #10]
 800145c:	4619      	mov	r1, r3
 800145e:	4610      	mov	r0, r2
 8001460:	f002 f9a2 	bl	80037a8 <HAL_GPIO_ReadPin>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <is_ready+0x22>
		return 1;
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <is_ready+0x24>
	}
	return 0;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <wait_ready>:

//############################################################################################
void wait_ready(hx711_t *hx711) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	// Wait for the chip to become ready.
	while (!is_ready(hx711)) {
 8001480:	e002      	b.n	8001488 <wait_ready+0x10>
		HAL_Delay(0);
 8001482:	2000      	movs	r0, #0
 8001484:	f001 fe1c 	bl	80030c0 <HAL_Delay>
	while (!is_ready(hx711)) {
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ffdf 	bl	800144c <is_ready>
 800148e:	4603      	mov	r3, r0
 8001490:	f083 0301 	eor.w	r3, r3, #1
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f3      	bne.n	8001482 <wait_ready+0xa>
	}
}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <read>:

//############################################################################################
long read(hx711_t *hx711, uint8_t channel){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	70fb      	strb	r3, [r7, #3]
	wait_ready(hx711);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ffe1 	bl	8001478 <wait_ready>
	unsigned long value = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = { 0 };
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	2100      	movs	r1, #0
 80014c0:	460a      	mov	r2, r1
 80014c2:	801a      	strh	r2, [r3, #0]
 80014c4:	460a      	mov	r2, r1
 80014c6:	709a      	strb	r2, [r3, #2]
	uint8_t filler = 0x00;
 80014c8:	2300      	movs	r3, #0
 80014ca:	75fb      	strb	r3, [r7, #23]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop

	noInterrupts();

	data[2] = shiftIn(hx711, 1);
 80014d0:	2101      	movs	r1, #1
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ff68 	bl	80013a8 <shiftIn>
 80014d8:	4603      	mov	r3, r0
 80014da:	72bb      	strb	r3, [r7, #10]
	data[1] = shiftIn(hx711, 1);
 80014dc:	2101      	movs	r1, #1
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ff62 	bl	80013a8 <shiftIn>
 80014e4:	4603      	mov	r3, r0
 80014e6:	727b      	strb	r3, [r7, #9]
	data[0] = shiftIn(hx711, 1);
 80014e8:	2101      	movs	r1, #1
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff5c 	bl	80013a8 <shiftIn>
 80014f0:	4603      	mov	r3, r0
 80014f2:	723b      	strb	r3, [r7, #8]

	uint8_t gain = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	75bb      	strb	r3, [r7, #22]
	if(channel == 0) gain = hx711->Again;
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d103      	bne.n	8001506 <read+0x62>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7d1b      	ldrb	r3, [r3, #20]
 8001502:	75bb      	strb	r3, [r7, #22]
 8001504:	e003      	b.n	800150e <read+0x6a>
	else gain = hx711->Bgain;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800150c:	75bb      	strb	r3, [r7, #22]

	for (unsigned int i = 0; i < gain; i++) {
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	e012      	b.n	800153a <read+0x96>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	891b      	ldrh	r3, [r3, #8]
 800151c:	2201      	movs	r2, #1
 800151e:	4619      	mov	r1, r3
 8001520:	f002 f95a 	bl	80037d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	891b      	ldrh	r3, [r3, #8]
 800152c:	2200      	movs	r2, #0
 800152e:	4619      	mov	r1, r3
 8001530:	f002 f952 	bl	80037d8 <HAL_GPIO_WritePin>
	for (unsigned int i = 0; i < gain; i++) {
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	3301      	adds	r3, #1
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	7dbb      	ldrb	r3, [r7, #22]
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	429a      	cmp	r2, r3
 8001540:	d3e8      	bcc.n	8001514 <read+0x70>
  __ASM volatile ("cpsie i" : : : "memory");
 8001542:	b662      	cpsie	i
}
 8001544:	bf00      	nop
	}

	interrupts();

	// Replicate the most significant bit to pad out a 32-bit signed integer
	if (data[2] & 0x80) {
 8001546:	7abb      	ldrb	r3, [r7, #10]
 8001548:	b25b      	sxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	da02      	bge.n	8001554 <read+0xb0>
		filler = 0xFF;
 800154e:	23ff      	movs	r3, #255	@ 0xff
 8001550:	75fb      	strb	r3, [r7, #23]
 8001552:	e001      	b.n	8001558 <read+0xb4>
	} else {
		filler = 0x00;
 8001554:	2300      	movs	r3, #0
 8001556:	75fb      	strb	r3, [r7, #23]
	}

	// Construct a 32-bit signed integer
	value = ( (unsigned long)(filler) << 24
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	061a      	lsls	r2, r3, #24
			| (unsigned long)(data[2]) << 16
 800155c:	7abb      	ldrb	r3, [r7, #10]
 800155e:	041b      	lsls	r3, r3, #16
 8001560:	431a      	orrs	r2, r3
			| (unsigned long)(data[1]) << 8
 8001562:	7a7b      	ldrb	r3, [r7, #9]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	4313      	orrs	r3, r2
			| (unsigned long)(data[0]) );
 8001568:	7a3a      	ldrb	r2, [r7, #8]
	value = ( (unsigned long)(filler) << 24
 800156a:	4313      	orrs	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]

	return (long)(value);
 800156e:	68fb      	ldr	r3, [r7, #12]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <read_average>:

//############################################################################################
long read_average(hx711_t *hx711, int8_t times, uint8_t channel) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	70fb      	strb	r3, [r7, #3]
 8001584:	4613      	mov	r3, r2
 8001586:	70bb      	strb	r3, [r7, #2]
	long sum = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
	for (int8_t i = 0; i < times; i++) {
 800158c:	2300      	movs	r3, #0
 800158e:	72fb      	strb	r3, [r7, #11]
 8001590:	e011      	b.n	80015b6 <read_average+0x3e>
		sum += read(hx711, channel);
 8001592:	78bb      	ldrb	r3, [r7, #2]
 8001594:	4619      	mov	r1, r3
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ff84 	bl	80014a4 <read>
 800159c:	4602      	mov	r2, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4413      	add	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
		HAL_Delay(0);
 80015a4:	2000      	movs	r0, #0
 80015a6:	f001 fd8b 	bl	80030c0 <HAL_Delay>
	for (int8_t i = 0; i < times; i++) {
 80015aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	3301      	adds	r3, #1
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	72fb      	strb	r3, [r7, #11]
 80015b6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80015ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015be:	429a      	cmp	r2, r3
 80015c0:	dbe7      	blt.n	8001592 <read_average+0x1a>
	}
	return sum / times;
 80015c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <get_value>:

//############################################################################################
double get_value(hx711_t *hx711, int8_t times, uint8_t channel) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]
 80015e0:	4613      	mov	r3, r2
 80015e2:	70bb      	strb	r3, [r7, #2]
	long offset = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) offset = hx711->Aoffset;
 80015e8:	78bb      	ldrb	r3, [r7, #2]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d103      	bne.n	80015f6 <get_value+0x22>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	e002      	b.n	80015fc <get_value+0x28>
	else offset = hx711->Boffset;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	60fb      	str	r3, [r7, #12]
	return read_average(hx711, times, channel) - offset;
 80015fc:	78ba      	ldrb	r2, [r7, #2]
 80015fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001602:	4619      	mov	r1, r3
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ffb7 	bl	8001578 <read_average>
 800160a:	4602      	mov	r2, r0
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ffa7 	bl	8000564 <__aeabi_i2d>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	ec43 2b17 	vmov	d7, r2, r3
}
 800161e:	eeb0 0a47 	vmov.f32	s0, s14
 8001622:	eef0 0a67 	vmov.f32	s1, s15
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <tare>:

//############################################################################################
void tare(hx711_t *hx711, uint8_t times, uint8_t channel) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
 8001638:	4613      	mov	r3, r2
 800163a:	70bb      	strb	r3, [r7, #2]
	read(hx711, channel); // Change channel
 800163c:	78bb      	ldrb	r3, [r7, #2]
 800163e:	4619      	mov	r1, r3
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff2f 	bl	80014a4 <read>
	double sum = read_average(hx711, times, channel);
 8001646:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800164a:	78ba      	ldrb	r2, [r7, #2]
 800164c:	4619      	mov	r1, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ff92 	bl	8001578 <read_average>
 8001654:	4603      	mov	r3, r0
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ff84 	bl	8000564 <__aeabi_i2d>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	e9c7 2302 	strd	r2, r3, [r7, #8]
	set_offset(hx711, sum, channel);
 8001664:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001668:	f7ff fa96 	bl	8000b98 <__aeabi_d2iz>
 800166c:	4601      	mov	r1, r0
 800166e:	78bb      	ldrb	r3, [r7, #2]
 8001670:	461a      	mov	r2, r3
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fe81 	bl	800137a <set_offset>
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <tare_all>:

//############################################################################################
void tare_all(hx711_t *hx711, uint8_t times) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	70fb      	strb	r3, [r7, #3]
	tare(hx711, times, CHANNEL_A);
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	2200      	movs	r2, #0
 8001690:	4619      	mov	r1, r3
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffca 	bl	800162c <tare>
	tare(hx711, times, CHANNEL_B);
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	2201      	movs	r2, #1
 800169c:	4619      	mov	r1, r3
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffc4 	bl	800162c <tare>
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <get_weight>:

//############################################################################################
float get_weight(hx711_t *hx711, int8_t times, uint8_t channel) {
 80016ac:	b5b0      	push	{r4, r5, r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70fb      	strb	r3, [r7, #3]
 80016b8:	4613      	mov	r3, r2
 80016ba:	70bb      	strb	r3, [r7, #2]
  // Read load cell
	read(hx711, channel);
 80016bc:	78bb      	ldrb	r3, [r7, #2]
 80016be:	4619      	mov	r1, r3
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff feef 	bl	80014a4 <read>
	float scale = 0;
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) scale = hx711->Ascale;
 80016cc:	78bb      	ldrb	r3, [r7, #2]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d103      	bne.n	80016da <get_weight+0x2e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	e002      	b.n	80016e0 <get_weight+0x34>
	else scale = hx711->Bscale;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	60fb      	str	r3, [r7, #12]
	return get_value(hx711, times, channel) / scale;
 80016e0:	78ba      	ldrb	r2, [r7, #2]
 80016e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016e6:	4619      	mov	r1, r3
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff73 	bl	80015d4 <get_value>
 80016ee:	ec55 4b10 	vmov	r4, r5, d0
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f7fe ff48 	bl	8000588 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4620      	mov	r0, r4
 80016fe:	4629      	mov	r1, r5
 8001700:	f7ff f8c4 	bl	800088c <__aeabi_ddiv>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	f7ff fa8c 	bl	8000c28 <__aeabi_d2f>
 8001710:	4603      	mov	r3, r0
 8001712:	ee07 3a90 	vmov	s15, r3
}
 8001716:	eeb0 0a67 	vmov.f32	s0, s15
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bdb0      	pop	{r4, r5, r7, pc}

08001720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001726:	f001 fc59 	bl	8002fdc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172a:	f000 f881 	bl	8001830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800172e:	f000 f985 	bl	8001a3c <MX_GPIO_Init>
  MX_SPI4_Init();
 8001732:	f000 f8ed 	bl	8001910 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8001736:	f000 f957 	bl	80019e8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800173a:	f000 f91f 	bl	800197c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //led 7 segment
  HAL_TIM_Base_Start_IT(&htim6);
 800173e:	4836      	ldr	r0, [pc, #216]	@ (8001818 <main+0xf8>)
 8001740:	f003 fb7c 	bl	8004e3c <HAL_TIM_Base_Start_IT>

  // Initialize scale system
  scale_init();
 8001744:	f000 fcf2 	bl	800212c <scale_init>

  //RFID
  TM_MFRC522_Init();
 8001748:	f001 f95a 	bl	8002a00 <TM_MFRC522_Init>
  scale_send_uart_data("Smart Scale System Initialized\r\n");
 800174c:	4833      	ldr	r0, [pc, #204]	@ (800181c <main+0xfc>)
 800174e:	f000 ff13 	bl	8002578 <scale_send_uart_data>

  HAL_UART_Receive_IT(&huart1, &uart_rx_data, 1);
 8001752:	2201      	movs	r2, #1
 8001754:	4932      	ldr	r1, [pc, #200]	@ (8001820 <main+0x100>)
 8001756:	4833      	ldr	r0, [pc, #204]	@ (8001824 <main+0x104>)
 8001758:	f003 ff09 	bl	800556e <HAL_UART_Receive_IT>

  HAL_Delay(1000);
 800175c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001760:	f001 fcae 	bl	80030c0 <HAL_Delay>
  scale_state.system_ready = 1;
 8001764:	4b30      	ldr	r3, [pc, #192]	@ (8001828 <main+0x108>)
 8001766:	2201      	movs	r2, #1
 8001768:	725a      	strb	r2, [r3, #9]
  scale_state.last_measurement_time = HAL_GetTick();
 800176a:	f001 fc9d 	bl	80030a8 <HAL_GetTick>
 800176e:	4603      	mov	r3, r0
 8001770:	4a2d      	ldr	r2, [pc, #180]	@ (8001828 <main+0x108>)
 8001772:	60d3      	str	r3, [r2, #12]
  scale_state.last_display_time = HAL_GetTick();
 8001774:	f001 fc98 	bl	80030a8 <HAL_GetTick>
 8001778:	4603      	mov	r3, r0
 800177a:	4a2b      	ldr	r2, [pc, #172]	@ (8001828 <main+0x108>)
 800177c:	6113      	str	r3, [r2, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (uart_command_ready) {
 800177e:	4b2b      	ldr	r3, [pc, #172]	@ (800182c <main+0x10c>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <main+0x6c>
		   process_uart_command();
 8001788:	f000 fab4 	bl	8001cf4 <process_uart_command>
	   }

	  uint32_t current_time = HAL_GetTick();
 800178c:	f001 fc8c 	bl	80030a8 <HAL_GetTick>
 8001790:	60f8      	str	r0, [r7, #12]


	  // Periodic weight measurement
	  if (current_time - scale_state.last_measurement_time >= MEASUREMENT_INTERVAL) {
 8001792:	4b25      	ldr	r3, [pc, #148]	@ (8001828 <main+0x108>)
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b63      	cmp	r3, #99	@ 0x63
 800179c:	d938      	bls.n	8001810 <main+0xf0>
		  scale_state.last_measurement_time = current_time;
 800179e:	4a22      	ldr	r2, [pc, #136]	@ (8001828 <main+0x108>)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	60d3      	str	r3, [r2, #12]
		  // Read and filter weight
		  float raw_weight = scale_read_weight();
 80017a4:	f000 fd2c 	bl	8002200 <scale_read_weight>
 80017a8:	ed87 0a02 	vstr	s0, [r7, #8]
		  float filtered_weight = scale_filter_weight(raw_weight);
 80017ac:	ed97 0a02 	vldr	s0, [r7, #8]
 80017b0:	f000 fd50 	bl	8002254 <scale_filter_weight>
 80017b4:	ed87 0a01 	vstr	s0, [r7, #4]
		  scale_state.current_weight = filtered_weight;
 80017b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001828 <main+0x108>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]

		  // Check weight stability
		  if (scale_is_weight_stable(filtered_weight)) {
 80017be:	ed97 0a01 	vldr	s0, [r7, #4]
 80017c2:	f000 fd7d 	bl	80022c0 <scale_is_weight_stable>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00a      	beq.n	80017e2 <main+0xc2>
			  if (current_time - scale_state.last_display_time >= DISPLAY_UPDATE_INTERVAL) {
 80017cc:	4b16      	ldr	r3, [pc, #88]	@ (8001828 <main+0x108>)
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017d8:	d31a      	bcc.n	8001810 <main+0xf0>
				  scale_state.last_display_time = current_time;
 80017da:	4a13      	ldr	r2, [pc, #76]	@ (8001828 <main+0x108>)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6113      	str	r3, [r2, #16]
 80017e0:	e016      	b.n	8001810 <main+0xf0>
			  }
		  } else {
			  // Weight is not stable, but still update display more frequently for debugging
			  if (current_time - scale_state.last_display_time >= (DISPLAY_UPDATE_INTERVAL / 2)) {
 80017e2:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <main+0x108>)
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2bf9      	cmp	r3, #249	@ 0xf9
 80017ec:	d910      	bls.n	8001810 <main+0xf0>
				  scale_state.last_display_time = current_time;
 80017ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001828 <main+0x108>)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6113      	str	r3, [r2, #16]
				  scale_display_weight(scale_state.current_weight);
 80017f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <main+0x108>)
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	eeb0 0a67 	vmov.f32	s0, s15
 80017fe:	f000 fd9b 	bl	8002338 <scale_display_weight>
				  scale_process_rfid(scale_state.current_weight);
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <main+0x108>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	eeb0 0a67 	vmov.f32	s0, s15
 800180c:	f000 fdd6 	bl	80023bc <scale_process_rfid>
			  }
		  }
	  }
	  // Small delay to prevent excessive CPU usage
	  HAL_Delay(10);
 8001810:	200a      	movs	r0, #10
 8001812:	f001 fc55 	bl	80030c0 <HAL_Delay>
  {
 8001816:	e7b2      	b.n	800177e <main+0x5e>
 8001818:	20000260 	.word	0x20000260
 800181c:	0800b498 	.word	0x0800b498
 8001820:	20002590 	.word	0x20002590
 8001824:	200002a8 	.word	0x200002a8
 8001828:	200002f0 	.word	0x200002f0
 800182c:	20002592 	.word	0x20002592

08001830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b094      	sub	sp, #80	@ 0x50
 8001834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001836:	f107 0320 	add.w	r3, r7, #32
 800183a:	2230      	movs	r2, #48	@ 0x30
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f005 fe2c 	bl	800749c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	4b2b      	ldr	r3, [pc, #172]	@ (8001908 <SystemClock_Config+0xd8>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185c:	4a2a      	ldr	r2, [pc, #168]	@ (8001908 <SystemClock_Config+0xd8>)
 800185e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001862:	6413      	str	r3, [r2, #64]	@ 0x40
 8001864:	4b28      	ldr	r3, [pc, #160]	@ (8001908 <SystemClock_Config+0xd8>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	4b25      	ldr	r3, [pc, #148]	@ (800190c <SystemClock_Config+0xdc>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a24      	ldr	r2, [pc, #144]	@ (800190c <SystemClock_Config+0xdc>)
 800187a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4b22      	ldr	r3, [pc, #136]	@ (800190c <SystemClock_Config+0xdc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800188c:	2301      	movs	r3, #1
 800188e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001890:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001896:	2302      	movs	r3, #2
 8001898:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800189a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800189e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018a0:	2304      	movs	r3, #4
 80018a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80018a4:	23b4      	movs	r3, #180	@ 0xb4
 80018a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018a8:	2302      	movs	r3, #2
 80018aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018ac:	2304      	movs	r3, #4
 80018ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b0:	f107 0320 	add.w	r3, r7, #32
 80018b4:	4618      	mov	r0, r3
 80018b6:	f001 fff9 	bl	80038ac <HAL_RCC_OscConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018c0:	f000 fe82 	bl	80025c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018c4:	f001 ffa2 	bl	800380c <HAL_PWREx_EnableOverDrive>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80018ce:	f000 fe7b 	bl	80025c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d2:	230f      	movs	r3, #15
 80018d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d6:	2302      	movs	r3, #2
 80018d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80018e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	2105      	movs	r1, #5
 80018f0:	4618      	mov	r0, r3
 80018f2:	f002 fa53 	bl	8003d9c <HAL_RCC_ClockConfig>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80018fc:	f000 fe64 	bl	80025c8 <Error_Handler>
  }
}
 8001900:	bf00      	nop
 8001902:	3750      	adds	r7, #80	@ 0x50
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	40007000 	.word	0x40007000

08001910 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001914:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <MX_SPI4_Init+0x64>)
 8001916:	4a18      	ldr	r2, [pc, #96]	@ (8001978 <MX_SPI4_Init+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800191a:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <MX_SPI4_Init+0x64>)
 800191c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001920:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001922:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <MX_SPI4_Init+0x64>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001928:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <MX_SPI4_Init+0x64>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800192e:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <MX_SPI4_Init+0x64>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001934:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <MX_SPI4_Init+0x64>)
 8001936:	2200      	movs	r2, #0
 8001938:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800193a:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <MX_SPI4_Init+0x64>)
 800193c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001940:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001942:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <MX_SPI4_Init+0x64>)
 8001944:	2218      	movs	r2, #24
 8001946:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001948:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <MX_SPI4_Init+0x64>)
 800194a:	2200      	movs	r2, #0
 800194c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <MX_SPI4_Init+0x64>)
 8001950:	2200      	movs	r2, #0
 8001952:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001954:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <MX_SPI4_Init+0x64>)
 8001956:	2200      	movs	r2, #0
 8001958:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <MX_SPI4_Init+0x64>)
 800195c:	220a      	movs	r2, #10
 800195e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001960:	4804      	ldr	r0, [pc, #16]	@ (8001974 <MX_SPI4_Init+0x64>)
 8001962:	f002 fc3b 	bl	80041dc <HAL_SPI_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 800196c:	f000 fe2c 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000208 	.word	0x20000208
 8001978:	40013400 	.word	0x40013400

0800197c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001982:	463b      	mov	r3, r7
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <MX_TIM6_Init+0x64>)
 800198c:	4a15      	ldr	r2, [pc, #84]	@ (80019e4 <MX_TIM6_Init+0x68>)
 800198e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001990:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <MX_TIM6_Init+0x64>)
 8001992:	2200      	movs	r2, #0
 8001994:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <MX_TIM6_Init+0x64>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800199c:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <MX_TIM6_Init+0x64>)
 800199e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a4:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <MX_TIM6_Init+0x64>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019aa:	480d      	ldr	r0, [pc, #52]	@ (80019e0 <MX_TIM6_Init+0x64>)
 80019ac:	f003 f9f6 	bl	8004d9c <HAL_TIM_Base_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80019b6:	f000 fe07 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019c2:	463b      	mov	r3, r7
 80019c4:	4619      	mov	r1, r3
 80019c6:	4806      	ldr	r0, [pc, #24]	@ (80019e0 <MX_TIM6_Init+0x64>)
 80019c8:	f003 fc66 	bl	8005298 <HAL_TIMEx_MasterConfigSynchronization>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80019d2:	f000 fdf9 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000260 	.word	0x20000260
 80019e4:	40001000 	.word	0x40001000

080019e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019ec:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <MX_USART1_UART_Init+0x4c>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	@ (8001a38 <MX_USART1_UART_Init+0x50>)
 80019f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <MX_USART1_UART_Init+0x4c>)
 80019f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <MX_USART1_UART_Init+0x4c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <MX_USART1_UART_Init+0x4c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <MX_USART1_UART_Init+0x4c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a0c:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <MX_USART1_UART_Init+0x4c>)
 8001a0e:	220c      	movs	r2, #12
 8001a10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a12:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <MX_USART1_UART_Init+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <MX_USART1_UART_Init+0x4c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a1e:	4805      	ldr	r0, [pc, #20]	@ (8001a34 <MX_USART1_UART_Init+0x4c>)
 8001a20:	f003 fcca 	bl	80053b8 <HAL_UART_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a2a:	f000 fdcd 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200002a8 	.word	0x200002a8
 8001a38:	40011000 	.word	0x40011000

08001a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	@ 0x28
 8001a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
 8001a50:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	4b43      	ldr	r3, [pc, #268]	@ (8001b64 <MX_GPIO_Init+0x128>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	4a42      	ldr	r2, [pc, #264]	@ (8001b64 <MX_GPIO_Init+0x128>)
 8001a5c:	f043 0310 	orr.w	r3, r3, #16
 8001a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a62:	4b40      	ldr	r3, [pc, #256]	@ (8001b64 <MX_GPIO_Init+0x128>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b3c      	ldr	r3, [pc, #240]	@ (8001b64 <MX_GPIO_Init+0x128>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	4a3b      	ldr	r2, [pc, #236]	@ (8001b64 <MX_GPIO_Init+0x128>)
 8001a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7e:	4b39      	ldr	r3, [pc, #228]	@ (8001b64 <MX_GPIO_Init+0x128>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	4b35      	ldr	r3, [pc, #212]	@ (8001b64 <MX_GPIO_Init+0x128>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	4a34      	ldr	r2, [pc, #208]	@ (8001b64 <MX_GPIO_Init+0x128>)
 8001a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9a:	4b32      	ldr	r3, [pc, #200]	@ (8001b64 <MX_GPIO_Init+0x128>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	4b2e      	ldr	r3, [pc, #184]	@ (8001b64 <MX_GPIO_Init+0x128>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	4a2d      	ldr	r2, [pc, #180]	@ (8001b64 <MX_GPIO_Init+0x128>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b64 <MX_GPIO_Init+0x128>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f64f 7110 	movw	r1, #65296	@ 0xff10
 8001ac8:	4827      	ldr	r0, [pc, #156]	@ (8001b68 <MX_GPIO_Init+0x12c>)
 8001aca:	f001 fe85 	bl	80037d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f246 010c 	movw	r1, #24588	@ 0x600c
 8001ad4:	4825      	ldr	r0, [pc, #148]	@ (8001b6c <MX_GPIO_Init+0x130>)
 8001ad6:	f001 fe7f 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ae0:	4823      	ldr	r0, [pc, #140]	@ (8001b70 <MX_GPIO_Init+0x134>)
 8001ae2:	f001 fe79 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001ae6:	f64f 7310 	movw	r3, #65296	@ 0xff10
 8001aea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aec:	2301      	movs	r3, #1
 8001aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	481a      	ldr	r0, [pc, #104]	@ (8001b68 <MX_GPIO_Init+0x12c>)
 8001b00:	f001 fca6 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_14;
 8001b04:	f246 030c 	movw	r3, #24588	@ 0x600c
 8001b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4813      	ldr	r0, [pc, #76]	@ (8001b6c <MX_GPIO_Init+0x130>)
 8001b1e:	f001 fc97 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	4619      	mov	r1, r3
 8001b36:	480e      	ldr	r0, [pc, #56]	@ (8001b70 <MX_GPIO_Init+0x134>)
 8001b38:	f001 fc8a 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4619      	mov	r1, r3
 8001b54:	4806      	ldr	r0, [pc, #24]	@ (8001b70 <MX_GPIO_Init+0x134>)
 8001b56:	f001 fc7b 	bl	8003450 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b5a:	bf00      	nop
 8001b5c:	3728      	adds	r7, #40	@ 0x28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40021800 	.word	0x40021800
 8001b70:	40020000 	.word	0x40020000

08001b74 <find_or_register_card>:

/* USER CODE BEGIN 4 */

CardData* find_or_register_card(uint8_t* card_uid) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
    // 1. Tìm thẻ đã tồn tại
    for (int i = 0; i < registered_card_count; i++) {
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	e017      	b.n	8001bb2 <find_or_register_card+0x3e>
        if (memcmp(card_database[i].uid, card_uid, 5) == 0) {
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	228c      	movs	r2, #140	@ 0x8c
 8001b86:	fb02 f303 	mul.w	r3, r2, r3
 8001b8a:	4a25      	ldr	r2, [pc, #148]	@ (8001c20 <find_or_register_card+0xac>)
 8001b8c:	4413      	add	r3, r2
 8001b8e:	2205      	movs	r2, #5
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f005 fc72 	bl	800747c <memcmp>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d106      	bne.n	8001bac <find_or_register_card+0x38>
            return &card_database[i];
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	228c      	movs	r2, #140	@ 0x8c
 8001ba2:	fb02 f303 	mul.w	r3, r2, r3
 8001ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c20 <find_or_register_card+0xac>)
 8001ba8:	4413      	add	r3, r2
 8001baa:	e035      	b.n	8001c18 <find_or_register_card+0xa4>
    for (int i = 0; i < registered_card_count; i++) {
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c24 <find_or_register_card+0xb0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dbe2      	blt.n	8001b82 <find_or_register_card+0xe>
        }
    }

    // 2. Nếu không tìm thấy, đăng ký thẻ mới nếu còn chỗ
    if (registered_card_count < MAX_REGISTERED_CARDS) {
 8001bbc:	4b19      	ldr	r3, [pc, #100]	@ (8001c24 <find_or_register_card+0xb0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b13      	cmp	r3, #19
 8001bc2:	dc25      	bgt.n	8001c10 <find_or_register_card+0x9c>
        CardData* new_card = &card_database[registered_card_count];
 8001bc4:	4b17      	ldr	r3, [pc, #92]	@ (8001c24 <find_or_register_card+0xb0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	228c      	movs	r2, #140	@ 0x8c
 8001bca:	fb02 f303 	mul.w	r3, r2, r3
 8001bce:	4a14      	ldr	r2, [pc, #80]	@ (8001c20 <find_or_register_card+0xac>)
 8001bd0:	4413      	add	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
        memcpy(new_card->uid, card_uid, 5);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2205      	movs	r2, #5
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f005 fd03 	bl	80075e6 <memcpy>
        // Khởi tạo lịch sử cân nặng
        memset(&new_card->weight_data, 0, sizeof(WeightHistory));
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	3308      	adds	r3, #8
 8001be4:	2220      	movs	r2, #32
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f005 fc57 	bl	800749c <memset>
        new_card->name[0] = '\0';
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        registered_card_count++;
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <find_or_register_card+0xb0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	4a09      	ldr	r2, [pc, #36]	@ (8001c24 <find_or_register_card+0xb0>)
 8001bfe:	6013      	str	r3, [r2, #0]
        scale_send_uart_data("New card registered. Total: %d\r\n", registered_card_count);
 8001c00:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <find_or_register_card+0xb0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4808      	ldr	r0, [pc, #32]	@ (8001c28 <find_or_register_card+0xb4>)
 8001c08:	f000 fcb6 	bl	8002578 <scale_send_uart_data>
        return new_card;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	e003      	b.n	8001c18 <find_or_register_card+0xa4>
    }

    // 3. Database đầy
    scale_send_uart_data("ERROR: Card database is full. Cannot register new card.\r\n");
 8001c10:	4806      	ldr	r0, [pc, #24]	@ (8001c2c <find_or_register_card+0xb8>)
 8001c12:	f000 fcb1 	bl	8002578 <scale_send_uart_data>
    return NULL;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20001a5c 	.word	0x20001a5c
 8001c24:	2000254c 	.word	0x2000254c
 8001c28:	0800b4bc 	.word	0x0800b4bc
 8001c2c:	0800b4e0 	.word	0x0800b4e0

08001c30 <push_weight_to_history>:

void push_weight_to_history(WeightHistory* history, float weight) {
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	ed87 0a00 	vstr	s0, [r7]
    history->history[history->head] = weight;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	601a      	str	r2, [r3, #0]
    history->head = (history->head + 1) % MAX_WEIGHT_HISTORY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	1c59      	adds	r1, r3, #1
 8001c50:	4b0d      	ldr	r3, [pc, #52]	@ (8001c88 <push_weight_to_history+0x58>)
 8001c52:	fb83 2301 	smull	r2, r3, r3, r1
 8001c56:	105a      	asrs	r2, r3, #1
 8001c58:	17cb      	asrs	r3, r1, #31
 8001c5a:	1ad2      	subs	r2, r2, r3
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	1aca      	subs	r2, r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	615a      	str	r2, [r3, #20]
    if (history->count < MAX_WEIGHT_HISTORY) {
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	dc04      	bgt.n	8001c7a <push_weight_to_history+0x4a>
        history->count++;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	619a      	str	r2, [r3, #24]
    }
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	66666667 	.word	0x66666667

08001c8c <are_all_weights_stable>:

uint8_t are_all_weights_stable(WeightHistory* history) {
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
    if (history->count < MAX_WEIGHT_HISTORY) {
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	dc01      	bgt.n	8001ca0 <are_all_weights_stable+0x14>
        return 0; // Chưa đủ 10 giá trị
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e021      	b.n	8001ce4 <are_all_weights_stable+0x58>
    }

    float first_weight = history->history[0];
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60bb      	str	r3, [r7, #8]
    for (int i = 1; i < MAX_WEIGHT_HISTORY; i++) {
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	e017      	b.n	8001cdc <are_all_weights_stable+0x50>
        // Sử dụng một ngưỡng nhỏ để so sánh số thực
        if (fabsf(history->history[i] - first_weight) > WEIGHT_STABILITY_THRESHOLD) {
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	ed93 7a00 	vldr	s14, [r3]
 8001cb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc0:	eef0 7ae7 	vabs.f32	s15, s15
 8001cc4:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001cf0 <are_all_weights_stable+0x64>
 8001cc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd0:	dd01      	ble.n	8001cd6 <are_all_weights_stable+0x4a>
            return 0; // Tìm thấy một giá trị khác biệt
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e006      	b.n	8001ce4 <are_all_weights_stable+0x58>
    for (int i = 1; i < MAX_WEIGHT_HISTORY; i++) {
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	dde4      	ble.n	8001cac <are_all_weights_stable+0x20>
        }
    }

    return 1; // Tất cả 10 giá trị đều giống nhau
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	3c23d70a 	.word	0x3c23d70a

08001cf4 <process_uart_command>:

void process_uart_command(void) {
 8001cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cf8:	b0ae      	sub	sp, #184	@ 0xb8
 8001cfa:	af06      	add	r7, sp, #24

	int len = strlen((char*)uart_rx_buffer);
 8001cfc:	48b1      	ldr	r0, [pc, #708]	@ (8001fc4 <process_uart_command+0x2d0>)
 8001cfe:	f7fe fad7 	bl	80002b0 <strlen>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	uart_rx_buffer[len - 1] = 0;
 8001d08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	4aad      	ldr	r2, [pc, #692]	@ (8001fc4 <process_uart_command+0x2d0>)
 8001d10:	2100      	movs	r1, #0
 8001d12:	54d1      	strb	r1, [r2, r3]
	char* command = (char*)uart_rx_buffer;
 8001d14:	4bab      	ldr	r3, [pc, #684]	@ (8001fc4 <process_uart_command+0x2d0>)
 8001d16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (strcmp(command, "LIST") == 0) {
 8001d1a:	49ab      	ldr	r1, [pc, #684]	@ (8001fc8 <process_uart_command+0x2d4>)
 8001d1c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001d20:	f7fe fa66 	bl	80001f0 <strcmp>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 8084 	bne.w	8001e34 <process_uart_command+0x140>
        scale_send_uart_data("\r\n--- Registered Card List ---\r\n");
 8001d2c:	48a7      	ldr	r0, [pc, #668]	@ (8001fcc <process_uart_command+0x2d8>)
 8001d2e:	f000 fc23 	bl	8002578 <scale_send_uart_data>
        if (registered_card_count == 0) {
 8001d32:	4ba7      	ldr	r3, [pc, #668]	@ (8001fd0 <process_uart_command+0x2dc>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d103      	bne.n	8001d42 <process_uart_command+0x4e>
            scale_send_uart_data("No cards registered yet.\r\n");
 8001d3a:	48a6      	ldr	r0, [pc, #664]	@ (8001fd4 <process_uart_command+0x2e0>)
 8001d3c:	f000 fc1c 	bl	8002578 <scale_send_uart_data>
 8001d40:	e074      	b.n	8001e2c <process_uart_command+0x138>
        } else {
            for (int i = 0; i < registered_card_count; i++) {
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001d48:	e06a      	b.n	8001e20 <process_uart_command+0x12c>
                const char* display_name = (card_database[i].name[0] == '\0') ? "(not set)" : card_database[i].name;
 8001d4a:	4aa3      	ldr	r2, [pc, #652]	@ (8001fd8 <process_uart_command+0x2e4>)
 8001d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d50:	218c      	movs	r1, #140	@ 0x8c
 8001d52:	fb01 f303 	mul.w	r3, r1, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	3328      	adds	r3, #40	@ 0x28
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <process_uart_command+0x7e>
 8001d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d64:	228c      	movs	r2, #140	@ 0x8c
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	3328      	adds	r3, #40	@ 0x28
 8001d6c:	4a9a      	ldr	r2, [pc, #616]	@ (8001fd8 <process_uart_command+0x2e4>)
 8001d6e:	4413      	add	r3, r2
 8001d70:	e000      	b.n	8001d74 <process_uart_command+0x80>
 8001d72:	4b9a      	ldr	r3, [pc, #616]	@ (8001fdc <process_uart_command+0x2e8>)
 8001d74:	677b      	str	r3, [r7, #116]	@ 0x74

            	scale_send_uart_data("Card %d | Name: %-15s | UID: %02X%02X%02X%02X%02X | Saved Weight: %.1f kg\r\n",
 8001d76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d7a:	1c5c      	adds	r4, r3, #1
								 i + 1, // Index cho người dùng (bắt đầu từ 1)
								 display_name,
								 card_database[i].uid[0], card_database[i].uid[1], card_database[i].uid[2], card_database[i].uid[3], card_database[i].uid[4],
 8001d7c:	4a96      	ldr	r2, [pc, #600]	@ (8001fd8 <process_uart_command+0x2e4>)
 8001d7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d82:	218c      	movs	r1, #140	@ 0x8c
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	781b      	ldrb	r3, [r3, #0]
            	scale_send_uart_data("Card %d | Name: %-15s | UID: %02X%02X%02X%02X%02X | Saved Weight: %.1f kg\r\n",
 8001d8c:	4698      	mov	r8, r3
								 card_database[i].uid[0], card_database[i].uid[1], card_database[i].uid[2], card_database[i].uid[3], card_database[i].uid[4],
 8001d8e:	4a92      	ldr	r2, [pc, #584]	@ (8001fd8 <process_uart_command+0x2e4>)
 8001d90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d94:	218c      	movs	r1, #140	@ 0x8c
 8001d96:	fb01 f303 	mul.w	r3, r1, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	781b      	ldrb	r3, [r3, #0]
            	scale_send_uart_data("Card %d | Name: %-15s | UID: %02X%02X%02X%02X%02X | Saved Weight: %.1f kg\r\n",
 8001da0:	461d      	mov	r5, r3
								 card_database[i].uid[0], card_database[i].uid[1], card_database[i].uid[2], card_database[i].uid[3], card_database[i].uid[4],
 8001da2:	4a8d      	ldr	r2, [pc, #564]	@ (8001fd8 <process_uart_command+0x2e4>)
 8001da4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001da8:	218c      	movs	r1, #140	@ 0x8c
 8001daa:	fb01 f303 	mul.w	r3, r1, r3
 8001dae:	4413      	add	r3, r2
 8001db0:	3302      	adds	r3, #2
 8001db2:	781b      	ldrb	r3, [r3, #0]
            	scale_send_uart_data("Card %d | Name: %-15s | UID: %02X%02X%02X%02X%02X | Saved Weight: %.1f kg\r\n",
 8001db4:	461e      	mov	r6, r3
								 card_database[i].uid[0], card_database[i].uid[1], card_database[i].uid[2], card_database[i].uid[3], card_database[i].uid[4],
 8001db6:	4a88      	ldr	r2, [pc, #544]	@ (8001fd8 <process_uart_command+0x2e4>)
 8001db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001dbc:	218c      	movs	r1, #140	@ 0x8c
 8001dbe:	fb01 f303 	mul.w	r3, r1, r3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3303      	adds	r3, #3
 8001dc6:	781b      	ldrb	r3, [r3, #0]
            	scale_send_uart_data("Card %d | Name: %-15s | UID: %02X%02X%02X%02X%02X | Saved Weight: %.1f kg\r\n",
 8001dc8:	607b      	str	r3, [r7, #4]
								 card_database[i].uid[0], card_database[i].uid[1], card_database[i].uid[2], card_database[i].uid[3], card_database[i].uid[4],
 8001dca:	4a83      	ldr	r2, [pc, #524]	@ (8001fd8 <process_uart_command+0x2e4>)
 8001dcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001dd0:	218c      	movs	r1, #140	@ 0x8c
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3304      	adds	r3, #4
 8001dda:	781b      	ldrb	r3, [r3, #0]
            	scale_send_uart_data("Card %d | Name: %-15s | UID: %02X%02X%02X%02X%02X | Saved Weight: %.1f kg\r\n",
 8001ddc:	603b      	str	r3, [r7, #0]
								 card_database[i].weight_data.saved_weight);
 8001dde:	4a7e      	ldr	r2, [pc, #504]	@ (8001fd8 <process_uart_command+0x2e4>)
 8001de0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001de4:	218c      	movs	r1, #140	@ 0x8c
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	3324      	adds	r3, #36	@ 0x24
 8001dee:	681b      	ldr	r3, [r3, #0]
            	scale_send_uart_data("Card %d | Name: %-15s | UID: %02X%02X%02X%02X%02X | Saved Weight: %.1f kg\r\n",
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fbc9 	bl	8000588 <__aeabi_f2d>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	9203      	str	r2, [sp, #12]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	9302      	str	r3, [sp, #8]
 8001e06:	9601      	str	r6, [sp, #4]
 8001e08:	9500      	str	r5, [sp, #0]
 8001e0a:	4643      	mov	r3, r8
 8001e0c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001e0e:	4621      	mov	r1, r4
 8001e10:	4873      	ldr	r0, [pc, #460]	@ (8001fe0 <process_uart_command+0x2ec>)
 8001e12:	f000 fbb1 	bl	8002578 <scale_send_uart_data>
            for (int i = 0; i < registered_card_count; i++) {
 8001e16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001e20:	4b6b      	ldr	r3, [pc, #428]	@ (8001fd0 <process_uart_command+0x2dc>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	db8e      	blt.n	8001d4a <process_uart_command+0x56>
            }
        }
        scale_send_uart_data("----------------------------\r\n");
 8001e2c:	486d      	ldr	r0, [pc, #436]	@ (8001fe4 <process_uart_command+0x2f0>)
 8001e2e:	f000 fba3 	bl	8002578 <scale_send_uart_data>
 8001e32:	e0b6      	b.n	8001fa2 <process_uart_command+0x2ae>
    } else if (strncmp(command, "SET ", 4) == 0) {
 8001e34:	2204      	movs	r2, #4
 8001e36:	496c      	ldr	r1, [pc, #432]	@ (8001fe8 <process_uart_command+0x2f4>)
 8001e38:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001e3c:	f005 fb36 	bl	80074ac <strncmp>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d13b      	bne.n	8001ebe <process_uart_command+0x1ca>
        char name_to_set[100];
        int card_index;

        // Sử dụng sscanf để trích xuất tên và index từ chuỗi lệnh
        int items_scanned = sscanf(command, "SET %s %d", name_to_set, &card_index);
 8001e46:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001e4a:	f107 020c 	add.w	r2, r7, #12
 8001e4e:	4967      	ldr	r1, [pc, #412]	@ (8001fec <process_uart_command+0x2f8>)
 8001e50:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001e54:	f005 fa64 	bl	8007320 <siscanf>
 8001e58:	67f8      	str	r0, [r7, #124]	@ 0x7c

        if (items_scanned == 2) { // Phải trích xuất được 2 mục (tên và index)
 8001e5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d12a      	bne.n	8001eb6 <process_uart_command+0x1c2>
            // Kiểm tra xem index có hợp lệ không (người dùng nhập 1, 2, 3...)
            if (card_index > 0 && card_index <= registered_card_count) {
 8001e60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	dd20      	ble.n	8001ea8 <process_uart_command+0x1b4>
 8001e66:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001e68:	4b59      	ldr	r3, [pc, #356]	@ (8001fd0 <process_uart_command+0x2dc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	dc1b      	bgt.n	8001ea8 <process_uart_command+0x1b4>
                // Chuyển đổi từ index người dùng (1-based) sang index mảng (0-based)
                CardData* card = &card_database[card_index - 1];
 8001e70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e72:	3b01      	subs	r3, #1
 8001e74:	228c      	movs	r2, #140	@ 0x8c
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	4a57      	ldr	r2, [pc, #348]	@ (8001fd8 <process_uart_command+0x2e4>)
 8001e7c:	4413      	add	r3, r2
 8001e7e:	67bb      	str	r3, [r7, #120]	@ 0x78

                // Sao chép tên mới vào thẻ (sử dụng strncpy để an toàn)
                strncpy(card->name, name_to_set, sizeof(card->name) - 1);
 8001e80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e82:	3328      	adds	r3, #40	@ 0x28
 8001e84:	f107 010c 	add.w	r1, r7, #12
 8001e88:	2263      	movs	r2, #99	@ 0x63
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f005 fb20 	bl	80074d0 <strncpy>
                card->name[sizeof(card->name) - 1] = '\0'; // Đảm bảo chuỗi luôn kết thúc bằng null
 8001e90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b

                scale_send_uart_data("Success: Name '%s' has been set for Card %d.\r\n", card->name, card_index);
 8001e98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e9a:	3328      	adds	r3, #40	@ 0x28
 8001e9c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4853      	ldr	r0, [pc, #332]	@ (8001ff0 <process_uart_command+0x2fc>)
 8001ea2:	f000 fb69 	bl	8002578 <scale_send_uart_data>
            if (card_index > 0 && card_index <= registered_card_count) {
 8001ea6:	e07c      	b.n	8001fa2 <process_uart_command+0x2ae>
            } else {
                scale_send_uart_data("Error: Invalid card index. Please use an index from 1 to %d.\r\n", registered_card_count);
 8001ea8:	4b49      	ldr	r3, [pc, #292]	@ (8001fd0 <process_uart_command+0x2dc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	4851      	ldr	r0, [pc, #324]	@ (8001ff4 <process_uart_command+0x300>)
 8001eb0:	f000 fb62 	bl	8002578 <scale_send_uart_data>
 8001eb4:	e075      	b.n	8001fa2 <process_uart_command+0x2ae>
            }
        } else {
            scale_send_uart_data("Error: Invalid command format. Use: SET <name> <index>\r\n");
 8001eb6:	4850      	ldr	r0, [pc, #320]	@ (8001ff8 <process_uart_command+0x304>)
 8001eb8:	f000 fb5e 	bl	8002578 <scale_send_uart_data>
 8001ebc:	e071      	b.n	8001fa2 <process_uart_command+0x2ae>
        }
    } else if (strcmp(command, "HISTORY") == 0) {
 8001ebe:	494f      	ldr	r1, [pc, #316]	@ (8001ffc <process_uart_command+0x308>)
 8001ec0:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001ec4:	f7fe f994 	bl	80001f0 <strcmp>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d165      	bne.n	8001f9a <process_uart_command+0x2a6>
        scale_send_uart_data("\r\n--- Weighing History (Oldest to Newest) ---\r\n");
 8001ece:	484c      	ldr	r0, [pc, #304]	@ (8002000 <process_uart_command+0x30c>)
 8001ed0:	f000 fb52 	bl	8002578 <scale_send_uart_data>
        if (history_count == 0) {
 8001ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8002004 <process_uart_command+0x310>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d103      	bne.n	8001ee4 <process_uart_command+0x1f0>
            scale_send_uart_data("History is empty.\r\n");
 8001edc:	484a      	ldr	r0, [pc, #296]	@ (8002008 <process_uart_command+0x314>)
 8001ede:	f000 fb4b 	bl	8002578 <scale_send_uart_data>
 8001ee2:	e056      	b.n	8001f92 <process_uart_command+0x29e>
        } else {
            // Xác định vị trí bắt đầu để in theo thứ tự thời gian
            int start_index = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
            if (history_count == MAX_WEIGHING_HISTORY) {
 8001eea:	4b46      	ldr	r3, [pc, #280]	@ (8002004 <process_uart_command+0x310>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b32      	cmp	r3, #50	@ 0x32
 8001ef0:	d103      	bne.n	8001efa <process_uart_command+0x206>
                start_index = history_head;
 8001ef2:	4b46      	ldr	r3, [pc, #280]	@ (800200c <process_uart_command+0x318>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
            }

            for (int i = 0; i < history_count; i++) {
 8001efa:	2300      	movs	r3, #0
 8001efc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001f00:	e041      	b.n	8001f86 <process_uart_command+0x292>
                int current_index = (start_index + i) % MAX_WEIGHING_HISTORY;
 8001f02:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001f06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a40      	ldr	r2, [pc, #256]	@ (8002010 <process_uart_command+0x31c>)
 8001f0e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f12:	1111      	asrs	r1, r2, #4
 8001f14:	17da      	asrs	r2, r3, #31
 8001f16:	1a8a      	subs	r2, r1, r2
 8001f18:	2132      	movs	r1, #50	@ 0x32
 8001f1a:	fb01 f202 	mul.w	r2, r1, r2
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                HistoryEntry* entry = &weighing_history[current_index];
 8001f24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f28:	2274      	movs	r2, #116	@ 0x74
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
 8001f2e:	4a39      	ldr	r2, [pc, #228]	@ (8002014 <process_uart_command+0x320>)
 8001f30:	4413      	add	r3, r2
 8001f32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                const char* display_name = (entry->name[0] == '\0') ? "(not set)" : entry->name;
 8001f36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f3a:	795b      	ldrb	r3, [r3, #5]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <process_uart_command+0x254>
 8001f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f44:	3305      	adds	r3, #5
 8001f46:	e000      	b.n	8001f4a <process_uart_command+0x256>
 8001f48:	4b24      	ldr	r3, [pc, #144]	@ (8001fdc <process_uart_command+0x2e8>)
 8001f4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                // In ra từng mục trong lịch sử
                scale_send_uart_data("#%d | Time: %lu ms | Name: %-15s | Weight: %.1f kg\r\n",
 8001f4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f52:	1c5c      	adds	r4, r3, #1
 8001f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f58:	6f1d      	ldr	r5, [r3, #112]	@ 0x70
                                     i + 1,
                                     entry->timestamp,
                                     display_name,
                                     entry->weight);
 8001f5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
                scale_send_uart_data("#%d | Time: %lu ms | Name: %-15s | Weight: %.1f kg\r\n",
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fb11 	bl	8000588 <__aeabi_f2d>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	e9cd 2300 	strd	r2, r3, [sp]
 8001f6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f72:	462a      	mov	r2, r5
 8001f74:	4621      	mov	r1, r4
 8001f76:	4828      	ldr	r0, [pc, #160]	@ (8002018 <process_uart_command+0x324>)
 8001f78:	f000 fafe 	bl	8002578 <scale_send_uart_data>
            for (int i = 0; i < history_count; i++) {
 8001f7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f80:	3301      	adds	r3, #1
 8001f82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001f86:	4b1f      	ldr	r3, [pc, #124]	@ (8002004 <process_uart_command+0x310>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	dbb7      	blt.n	8001f02 <process_uart_command+0x20e>
            }
        }
        scale_send_uart_data("--------------------------------------------\r\n");
 8001f92:	4822      	ldr	r0, [pc, #136]	@ (800201c <process_uart_command+0x328>)
 8001f94:	f000 faf0 	bl	8002578 <scale_send_uart_data>
 8001f98:	e003      	b.n	8001fa2 <process_uart_command+0x2ae>
    }
    else {
        scale_send_uart_data("Unknown command: %s\r\n", uart_rx_buffer);
 8001f9a:	490a      	ldr	r1, [pc, #40]	@ (8001fc4 <process_uart_command+0x2d0>)
 8001f9c:	4820      	ldr	r0, [pc, #128]	@ (8002020 <process_uart_command+0x32c>)
 8001f9e:	f000 faeb 	bl	8002578 <scale_send_uart_data>
    }

    // Reset buffer và cờ
    memset(uart_rx_buffer, 0, sizeof(uart_rx_buffer));
 8001fa2:	2240      	movs	r2, #64	@ 0x40
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4807      	ldr	r0, [pc, #28]	@ (8001fc4 <process_uart_command+0x2d0>)
 8001fa8:	f005 fa78 	bl	800749c <memset>
    uart_rx_index = 0;
 8001fac:	4b1d      	ldr	r3, [pc, #116]	@ (8002024 <process_uart_command+0x330>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
    uart_command_ready = 0;
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002028 <process_uart_command+0x334>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	37a0      	adds	r7, #160	@ 0xa0
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20002550 	.word	0x20002550
 8001fc8:	0800b51c 	.word	0x0800b51c
 8001fcc:	0800b524 	.word	0x0800b524
 8001fd0:	2000254c 	.word	0x2000254c
 8001fd4:	0800b548 	.word	0x0800b548
 8001fd8:	20001a5c 	.word	0x20001a5c
 8001fdc:	0800b564 	.word	0x0800b564
 8001fe0:	0800b570 	.word	0x0800b570
 8001fe4:	0800b5bc 	.word	0x0800b5bc
 8001fe8:	0800b5dc 	.word	0x0800b5dc
 8001fec:	0800b5e4 	.word	0x0800b5e4
 8001ff0:	0800b5f0 	.word	0x0800b5f0
 8001ff4:	0800b620 	.word	0x0800b620
 8001ff8:	0800b660 	.word	0x0800b660
 8001ffc:	0800b69c 	.word	0x0800b69c
 8002000:	0800b6a4 	.word	0x0800b6a4
 8002004:	200019b0 	.word	0x200019b0
 8002008:	0800b6d4 	.word	0x0800b6d4
 800200c:	200019b4 	.word	0x200019b4
 8002010:	51eb851f 	.word	0x51eb851f
 8002014:	20000308 	.word	0x20000308
 8002018:	0800b6e8 	.word	0x0800b6e8
 800201c:	0800b720 	.word	0x0800b720
 8002020:	0800b750 	.word	0x0800b750
 8002024:	20002591 	.word	0x20002591
 8002028:	20002592 	.word	0x20002592

0800202c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a19      	ldr	r2, [pc, #100]	@ (80020a0 <HAL_UART_RxCpltCallback+0x74>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d12c      	bne.n	8002098 <HAL_UART_RxCpltCallback+0x6c>
        if (uart_rx_data == '\n' || uart_rx_data == '\r' || uart_rx_index >= sizeof(uart_rx_buffer) - 1) {
 800203e:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <HAL_UART_RxCpltCallback+0x78>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b0a      	cmp	r3, #10
 8002044:	d007      	beq.n	8002056 <HAL_UART_RxCpltCallback+0x2a>
 8002046:	4b17      	ldr	r3, [pc, #92]	@ (80020a4 <HAL_UART_RxCpltCallback+0x78>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b0d      	cmp	r3, #13
 800204c:	d003      	beq.n	8002056 <HAL_UART_RxCpltCallback+0x2a>
 800204e:	4b16      	ldr	r3, [pc, #88]	@ (80020a8 <HAL_UART_RxCpltCallback+0x7c>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b3e      	cmp	r3, #62	@ 0x3e
 8002054:	d910      	bls.n	8002078 <HAL_UART_RxCpltCallback+0x4c>
            uart_rx_buffer[uart_rx_index] = '\0'; // Kết thúc chuỗi
 8002056:	4b14      	ldr	r3, [pc, #80]	@ (80020a8 <HAL_UART_RxCpltCallback+0x7c>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	4b13      	ldr	r3, [pc, #76]	@ (80020ac <HAL_UART_RxCpltCallback+0x80>)
 800205e:	2100      	movs	r1, #0
 8002060:	5499      	strb	r1, [r3, r2]
            if (uart_rx_index > 0) {
 8002062:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <HAL_UART_RxCpltCallback+0x7c>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_UART_RxCpltCallback+0x44>
                uart_command_ready = 1; // Báo hiệu có lệnh cần xử lý
 800206a:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <HAL_UART_RxCpltCallback+0x84>)
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
            }
            uart_rx_index = 0;
 8002070:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <HAL_UART_RxCpltCallback+0x7c>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
 8002076:	e00a      	b.n	800208e <HAL_UART_RxCpltCallback+0x62>
        } else {
            uart_rx_buffer[uart_rx_index++] = uart_rx_data;
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <HAL_UART_RxCpltCallback+0x7c>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	b2d1      	uxtb	r1, r2
 8002080:	4a09      	ldr	r2, [pc, #36]	@ (80020a8 <HAL_UART_RxCpltCallback+0x7c>)
 8002082:	7011      	strb	r1, [r2, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	4b07      	ldr	r3, [pc, #28]	@ (80020a4 <HAL_UART_RxCpltCallback+0x78>)
 8002088:	7819      	ldrb	r1, [r3, #0]
 800208a:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <HAL_UART_RxCpltCallback+0x80>)
 800208c:	5499      	strb	r1, [r3, r2]
        }
        // Kích hoạt lại ngắt nhận UART cho byte tiếp theo
        HAL_UART_Receive_IT(&huart1, &uart_rx_data, 1);
 800208e:	2201      	movs	r2, #1
 8002090:	4904      	ldr	r1, [pc, #16]	@ (80020a4 <HAL_UART_RxCpltCallback+0x78>)
 8002092:	4808      	ldr	r0, [pc, #32]	@ (80020b4 <HAL_UART_RxCpltCallback+0x88>)
 8002094:	f003 fa6b 	bl	800556e <HAL_UART_Receive_IT>
    }
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40011000 	.word	0x40011000
 80020a4:	20002590 	.word	0x20002590
 80020a8:	20002591 	.word	0x20002591
 80020ac:	20002550 	.word	0x20002550
 80020b0:	20002592 	.word	0x20002592
 80020b4:	200002a8 	.word	0x200002a8

080020b8 <save_weight_to_rfid_card>:

void save_weight_to_rfid_card(uint8_t* card_uid, float weight) {
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af02      	add	r7, sp, #8
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	ed87 0a00 	vstr	s0, [r7]
    // 3. Chuẩn bị dữ liệu (chuyển float sang mảng byte).
    // 4. Ghi dữ liệu vào block (ví dụ: PCD_Write).
    // 5. Kết thúc giao tiếp.

    // Tạm thời, chúng ta chỉ in ra UART để mô phỏng
    scale_send_uart_data("------ SAVING TO CARD ------\r\n");
 80020c4:	4815      	ldr	r0, [pc, #84]	@ (800211c <save_weight_to_rfid_card+0x64>)
 80020c6:	f000 fa57 	bl	8002578 <scale_send_uart_data>
    scale_send_uart_data("Card UID: %02X%02X%02X%02X%02X\r\n",
                         card_uid[0], card_uid[1], card_uid[2], card_uid[3], card_uid[4]);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	781b      	ldrb	r3, [r3, #0]
    scale_send_uart_data("Card UID: %02X%02X%02X%02X%02X\r\n",
 80020ce:	4619      	mov	r1, r3
                         card_uid[0], card_uid[1], card_uid[2], card_uid[3], card_uid[4]);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3301      	adds	r3, #1
 80020d4:	781b      	ldrb	r3, [r3, #0]
    scale_send_uart_data("Card UID: %02X%02X%02X%02X%02X\r\n",
 80020d6:	4618      	mov	r0, r3
                         card_uid[0], card_uid[1], card_uid[2], card_uid[3], card_uid[4]);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3302      	adds	r3, #2
 80020dc:	781b      	ldrb	r3, [r3, #0]
    scale_send_uart_data("Card UID: %02X%02X%02X%02X%02X\r\n",
 80020de:	461c      	mov	r4, r3
                         card_uid[0], card_uid[1], card_uid[2], card_uid[3], card_uid[4]);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3303      	adds	r3, #3
 80020e4:	781b      	ldrb	r3, [r3, #0]
    scale_send_uart_data("Card UID: %02X%02X%02X%02X%02X\r\n",
 80020e6:	461a      	mov	r2, r3
                         card_uid[0], card_uid[1], card_uid[2], card_uid[3], card_uid[4]);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	781b      	ldrb	r3, [r3, #0]
    scale_send_uart_data("Card UID: %02X%02X%02X%02X%02X\r\n",
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	9200      	str	r2, [sp, #0]
 80020f2:	4623      	mov	r3, r4
 80020f4:	4602      	mov	r2, r0
 80020f6:	480a      	ldr	r0, [pc, #40]	@ (8002120 <save_weight_to_rfid_card+0x68>)
 80020f8:	f000 fa3e 	bl	8002578 <scale_send_uart_data>
    scale_send_uart_data("Saving Weight: %.3f kg\r\n", weight);
 80020fc:	6838      	ldr	r0, [r7, #0]
 80020fe:	f7fe fa43 	bl	8000588 <__aeabi_f2d>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4807      	ldr	r0, [pc, #28]	@ (8002124 <save_weight_to_rfid_card+0x6c>)
 8002108:	f000 fa36 	bl	8002578 <scale_send_uart_data>
    scale_send_uart_data("--------------------------\r\n");
 800210c:	4806      	ldr	r0, [pc, #24]	@ (8002128 <save_weight_to_rfid_card+0x70>)
 800210e:	f000 fa33 	bl	8002578 <scale_send_uart_data>
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bd90      	pop	{r4, r7, pc}
 800211a:	bf00      	nop
 800211c:	0800b768 	.word	0x0800b768
 8002120:	0800b788 	.word	0x0800b788
 8002124:	0800b7ac 	.word	0x0800b7ac
 8002128:	0800b7c8 	.word	0x0800b7c8

0800212c <scale_init>:
void scale_init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af02      	add	r7, sp, #8
    scale_send_uart_data("Initializing HX711 load cell...\r\n");
 8002132:	481e      	ldr	r0, [pc, #120]	@ (80021ac <scale_init+0x80>)
 8002134:	f000 fa20 	bl	8002578 <scale_send_uart_data>

    // Initialize HX711
    hx711_init(&hx711, HX711_SCK_PORT, HX711_SCK_PIN, HX711_DT_PORT, HX711_DT_PIN);
 8002138:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	4b1c      	ldr	r3, [pc, #112]	@ (80021b0 <scale_init+0x84>)
 8002140:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002144:	491a      	ldr	r1, [pc, #104]	@ (80021b0 <scale_init+0x84>)
 8002146:	481b      	ldr	r0, [pc, #108]	@ (80021b4 <scale_init+0x88>)
 8002148:	f7ff f8a8 	bl	800129c <hx711_init>

    set_gain(&hx711, 128, 32);  // Channel A: 128 gain, Channel B: 32 gain
 800214c:	2220      	movs	r2, #32
 800214e:	2180      	movs	r1, #128	@ 0x80
 8002150:	4818      	ldr	r0, [pc, #96]	@ (80021b4 <scale_init+0x88>)
 8002152:	f7ff f8f3 	bl	800133c <set_gain>

    // Debug: Test if HX711 is responding
	if (is_ready(&hx711)) {
 8002156:	4817      	ldr	r0, [pc, #92]	@ (80021b4 <scale_init+0x88>)
 8002158:	f7ff f978 	bl	800144c <is_ready>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <scale_init+0x3e>
		scale_send_uart_data("HX711 is ready!\r\n");
 8002162:	4815      	ldr	r0, [pc, #84]	@ (80021b8 <scale_init+0x8c>)
 8002164:	f000 fa08 	bl	8002578 <scale_send_uart_data>
 8002168:	e002      	b.n	8002170 <scale_init+0x44>
//		for (int i = 0; i < 5; i++) {
//			long raw = get_value(&hx711, 1, CHANNEL_A);
//			HAL_Delay(100);
//		}
	} else {
		scale_send_uart_data("HX711 is NOT ready!\r\n");
 800216a:	4814      	ldr	r0, [pc, #80]	@ (80021bc <scale_init+0x90>)
 800216c:	f000 fa04 	bl	8002578 <scale_send_uart_data>
	}

    // Set initial scale factor (you may need to adjust this)
    set_scale(&hx711, SCALE_FACTOR, SCALE_FACTOR);
 8002170:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80021c0 <scale_init+0x94>
 8002174:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80021c0 <scale_init+0x94>
 8002178:	480e      	ldr	r0, [pc, #56]	@ (80021b4 <scale_init+0x88>)
 800217a:	f7ff f8cb 	bl	8001314 <set_scale>

    // Perform initial calibration
    scale_calibrate();
 800217e:	f000 f827 	bl	80021d0 <scale_calibrate>

    // Initialize state variables
    scale_state.current_weight = 0.0f;
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <scale_init+0x98>)
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
    scale_state.previous_weight = 0.0f;
 800218a:	4b0e      	ldr	r3, [pc, #56]	@ (80021c4 <scale_init+0x98>)
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	605a      	str	r2, [r3, #4]
    scale_state.weight_stable_count = 0;
 8002192:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <scale_init+0x98>)
 8002194:	2200      	movs	r2, #0
 8002196:	721a      	strb	r2, [r3, #8]
    scale_state.weight_threshold = WEIGHT_STABILITY_THRESHOLD;
 8002198:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <scale_init+0x98>)
 800219a:	4a0b      	ldr	r2, [pc, #44]	@ (80021c8 <scale_init+0x9c>)
 800219c:	615a      	str	r2, [r3, #20]

    scale_send_uart_data("Scale initialization complete\r\n");
 800219e:	480b      	ldr	r0, [pc, #44]	@ (80021cc <scale_init+0xa0>)
 80021a0:	f000 f9ea 	bl	8002578 <scale_send_uart_data>
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	0800b7e8 	.word	0x0800b7e8
 80021b0:	40020000 	.word	0x40020000
 80021b4:	200019b8 	.word	0x200019b8
 80021b8:	0800b80c 	.word	0x0800b80c
 80021bc:	0800b820 	.word	0x0800b820
 80021c0:	47a21c00 	.word	0x47a21c00
 80021c4:	200002f0 	.word	0x200002f0
 80021c8:	3c23d70a 	.word	0x3c23d70a
 80021cc:	0800b838 	.word	0x0800b838

080021d0 <scale_calibrate>:

/**
 * @brief Calibrate the scale (tare)
 */
void scale_calibrate(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
    scale_send_uart_data("Calibrating scale... Please ensure scale is empty\r\n");
 80021d4:	4807      	ldr	r0, [pc, #28]	@ (80021f4 <scale_calibrate+0x24>)
 80021d6:	f000 f9cf 	bl	8002578 <scale_send_uart_data>
    HAL_Delay(2000);  // Give user time to clear scale
 80021da:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80021de:	f000 ff6f 	bl	80030c0 <HAL_Delay>
    tare_all(&hx711, 10);
 80021e2:	210a      	movs	r1, #10
 80021e4:	4804      	ldr	r0, [pc, #16]	@ (80021f8 <scale_calibrate+0x28>)
 80021e6:	f7ff fa4b 	bl	8001680 <tare_all>
    scale_send_uart_data("Scale calibration complete\r\n");
 80021ea:	4804      	ldr	r0, [pc, #16]	@ (80021fc <scale_calibrate+0x2c>)
 80021ec:	f000 f9c4 	bl	8002578 <scale_send_uart_data>
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	0800b858 	.word	0x0800b858
 80021f8:	200019b8 	.word	0x200019b8
 80021fc:	0800b88c 	.word	0x0800b88c

08002200 <scale_read_weight>:
/**
 * @brief Read raw weight from HX711
 * @return Raw weight value in kg
 */
float scale_read_weight(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
	// Debug: Check if HX711 is ready
	if (!is_ready(&hx711)) {
 8002206:	4812      	ldr	r0, [pc, #72]	@ (8002250 <scale_read_weight+0x50>)
 8002208:	f7ff f920 	bl	800144c <is_ready>
 800220c:	4603      	mov	r3, r0
 800220e:	f083 0301 	eor.w	r3, r3, #1
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <scale_read_weight+0x1e>
//		scale_send_uart_data("DEBUG - HX711 not ready!\r\n");
		return 0.0f;
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	e011      	b.n	8002242 <scale_read_weight+0x42>

	// Get raw value first for debugging
//	long raw_value = get_value(&hx711, 1, CHANNEL_A);  // Single reading for faster response

	// Get weight using library function
	float weight = get_weight(&hx711, 10, CHANNEL_A);  // Single reading for faster response
 800221e:	2200      	movs	r2, #0
 8002220:	210a      	movs	r1, #10
 8002222:	480b      	ldr	r0, [pc, #44]	@ (8002250 <scale_read_weight+0x50>)
 8002224:	f7ff fa42 	bl	80016ac <get_weight>
 8002228:	ed87 0a01 	vstr	s0, [r7, #4]


	// Ensure weight is not negative (noise or drift)
	if (weight < 0.0f) {
 800222c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002230:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002238:	d502      	bpl.n	8002240 <scale_read_weight+0x40>
		weight = 0.0f;
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	607b      	str	r3, [r7, #4]
	}

	return weight;
 8002240:	687b      	ldr	r3, [r7, #4]
}
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eeb0 0a67 	vmov.f32	s0, s15
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	200019b8 	.word	0x200019b8

08002254 <scale_filter_weight>:
 * @brief Apply low-pass filter to weight reading
 * @param raw_weight: Raw weight reading
 * @return Filtered weight
 */
float scale_filter_weight(float raw_weight)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	ed87 0a01 	vstr	s0, [r7, #4]
    static float filtered_weight = 0.0f;
    static uint8_t first_reading = 1;

    if (first_reading) {
 800225e:	4b14      	ldr	r3, [pc, #80]	@ (80022b0 <scale_filter_weight+0x5c>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d006      	beq.n	8002274 <scale_filter_weight+0x20>
        filtered_weight = raw_weight;
 8002266:	4a13      	ldr	r2, [pc, #76]	@ (80022b4 <scale_filter_weight+0x60>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6013      	str	r3, [r2, #0]
        first_reading = 0;
 800226c:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <scale_filter_weight+0x5c>)
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	e011      	b.n	8002298 <scale_filter_weight+0x44>
    } else {
        // Simple low-pass filter: y[n] = α * x[n] + (1-α) * y[n-1]
        filtered_weight = WEIGHT_FILTER_ALPHA * raw_weight + (1.0f - WEIGHT_FILTER_ALPHA) * filtered_weight;
 8002274:	edd7 7a01 	vldr	s15, [r7, #4]
 8002278:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80022b8 <scale_filter_weight+0x64>
 800227c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002280:	4b0c      	ldr	r3, [pc, #48]	@ (80022b4 <scale_filter_weight+0x60>)
 8002282:	edd3 7a00 	vldr	s15, [r3]
 8002286:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80022bc <scale_filter_weight+0x68>
 800228a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800228e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002292:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <scale_filter_weight+0x60>)
 8002294:	edc3 7a00 	vstr	s15, [r3]
    }

    return filtered_weight;
 8002298:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <scale_filter_weight+0x60>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	ee07 3a90 	vmov	s15, r3
}
 80022a0:	eeb0 0a67 	vmov.f32	s0, s15
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	2000000a 	.word	0x2000000a
 80022b4:	20002594 	.word	0x20002594
 80022b8:	3e99999a 	.word	0x3e99999a
 80022bc:	3f333333 	.word	0x3f333333

080022c0 <scale_is_weight_stable>:
 * @brief Check if weight reading is stable
 * @param weight: Current weight reading
 * @return 1 if stable, 0 if not stable
 */
uint8_t scale_is_weight_stable(float weight)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	ed87 0a01 	vstr	s0, [r7, #4]
    float weight_diff = fabsf(weight - scale_state.previous_weight);
 80022ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002334 <scale_is_weight_stable+0x74>)
 80022cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80022d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80022d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d8:	eef0 7ae7 	vabs.f32	s15, s15
 80022dc:	edc7 7a03 	vstr	s15, [r7, #12]

    if (weight_diff < scale_state.weight_threshold) {
 80022e0:	4b14      	ldr	r3, [pc, #80]	@ (8002334 <scale_is_weight_stable+0x74>)
 80022e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80022e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80022ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f2:	d511      	bpl.n	8002318 <scale_is_weight_stable+0x58>
        scale_state.weight_stable_count++;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002334 <scale_is_weight_stable+0x74>)
 80022f6:	7a1b      	ldrb	r3, [r3, #8]
 80022f8:	3301      	adds	r3, #1
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002334 <scale_is_weight_stable+0x74>)
 80022fe:	721a      	strb	r2, [r3, #8]
        if (scale_state.weight_stable_count >= WEIGHT_STABILITY_COUNT) {
 8002300:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <scale_is_weight_stable+0x74>)
 8002302:	7a1b      	ldrb	r3, [r3, #8]
 8002304:	2b04      	cmp	r3, #4
 8002306:	d90d      	bls.n	8002324 <scale_is_weight_stable+0x64>
            scale_state.weight_stable_count = WEIGHT_STABILITY_COUNT;  // Cap the counter
 8002308:	4b0a      	ldr	r3, [pc, #40]	@ (8002334 <scale_is_weight_stable+0x74>)
 800230a:	2205      	movs	r2, #5
 800230c:	721a      	strb	r2, [r3, #8]
            scale_state.previous_weight = weight;
 800230e:	4a09      	ldr	r2, [pc, #36]	@ (8002334 <scale_is_weight_stable+0x74>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6053      	str	r3, [r2, #4]
            return 1;
 8002314:	2301      	movs	r3, #1
 8002316:	e006      	b.n	8002326 <scale_is_weight_stable+0x66>
        }
    } else {
        scale_state.weight_stable_count = 0;
 8002318:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <scale_is_weight_stable+0x74>)
 800231a:	2200      	movs	r2, #0
 800231c:	721a      	strb	r2, [r3, #8]
        scale_state.previous_weight = weight;
 800231e:	4a05      	ldr	r2, [pc, #20]	@ (8002334 <scale_is_weight_stable+0x74>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6053      	str	r3, [r2, #4]
    }

    return 0;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	200002f0 	.word	0x200002f0

08002338 <scale_display_weight>:
/**
 * @brief Display weight on 7-segment display and send via UART
 * @param weight: Weight to display in kg
 */
void scale_display_weight(float weight)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (weight < 0.0f) weight = 0.0f;
 8002342:	edd7 7a01 	vldr	s15, [r7, #4]
 8002346:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800234a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234e:	d502      	bpl.n	8002356 <scale_display_weight+0x1e>
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
	if (weight > 9.9f) weight = 9.9f;
 8002356:	edd7 7a01 	vldr	s15, [r7, #4]
 800235a:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80023b0 <scale_display_weight+0x78>
 800235e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002366:	dd01      	ble.n	800236c <scale_display_weight+0x34>
 8002368:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <scale_display_weight+0x7c>)
 800236a:	607b      	str	r3, [r7, #4]

	// Chuyển đổi sang số nguyên để hiển thị (VD: 2.5kg -> 25)
	int display_value = (int)(weight * 10 + 0.5f);  // +0.5 để làm tròn
 800236c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002370:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002378:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800237c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002384:	ee17 3a90 	vmov	r3, s15
 8002388:	60fb      	str	r3, [r7, #12]

	// Hiển thị trên LED 7 đoạn với 1 chữ số thập phân
	Set7SegDisplayWithDecimal(display_value, 1);  // Hiển thị với 1 chữ số sau dấu phẩy
 800238a:	2101      	movs	r1, #1
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f7fe fe67 	bl	8001060 <Set7SegDisplayWithDecimal>

	// Gọi hàm chạy hiển thị LED 7 đoạn
	Run7SegDisplay();
 8002392:	f7fe fe89 	bl	80010a8 <Run7SegDisplay>

    // Send weight data via UART
//    scale_send_uart_data("Weight: %.3f kg (%.0f g)\r\n", weight, weight * 1000);
    scale_send_uart_data("Weight: %d (display_value) = %.3f kg\r\n", display_value, weight);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe f8f6 	bl	8000588 <__aeabi_f2d>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	68f9      	ldr	r1, [r7, #12]
 80023a2:	4805      	ldr	r0, [pc, #20]	@ (80023b8 <scale_display_weight+0x80>)
 80023a4:	f000 f8e8 	bl	8002578 <scale_send_uart_data>
}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	411e6666 	.word	0x411e6666
 80023b4:	411e6666 	.word	0x411e6666
 80023b8:	0800b8ac 	.word	0x0800b8ac

080023bc <scale_process_rfid>:
/**
 * @brief Process RFID reading and combine with weight data
 * @param weight: Current stable weight
 */
void scale_process_rfid(float weight)
{
 80023bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023c0:	b08d      	sub	sp, #52	@ 0x34
 80023c2:	af06      	add	r7, sp, #24
 80023c4:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t CardUID[5];

    if (TM_MFRC522_Check(CardUID) == MI_OK) {
 80023c8:	f107 0308 	add.w	r3, r7, #8
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 fb3d 	bl	8002a4c <TM_MFRC522_Check>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d165      	bne.n	80024a4 <scale_process_rfid+0xe8>
        // Card detected - turn on green LED
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);   // Green LED ON
 80023d8:	2201      	movs	r2, #1
 80023da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023de:	4839      	ldr	r0, [pc, #228]	@ (80024c4 <scale_process_rfid+0x108>)
 80023e0:	f001 f9fa 	bl	80037d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET); // Red LED OFF
 80023e4:	2200      	movs	r2, #0
 80023e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023ea:	4836      	ldr	r0, [pc, #216]	@ (80024c4 <scale_process_rfid+0x108>)
 80023ec:	f001 f9f4 	bl	80037d8 <HAL_GPIO_WritePin>

        CardData* current_card = find_or_register_card(CardUID);
 80023f0:	f107 0308 	add.w	r3, r7, #8
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fbbd 	bl	8001b74 <find_or_register_card>
 80023fa:	6178      	str	r0, [r7, #20]
		if (current_card == NULL) {
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d103      	bne.n	800240a <scale_process_rfid+0x4e>
			scale_send_uart_data("Full database\r\n");
 8002402:	4831      	ldr	r0, [pc, #196]	@ (80024c8 <scale_process_rfid+0x10c>)
 8002404:	f000 f8b8 	bl	8002578 <scale_send_uart_data>
 8002408:	e058      	b.n	80024bc <scale_process_rfid+0x100>
			// Lỗi: database đầy, không xử lý tiếp
			return;
		}

		push_weight_to_history(&current_card->weight_data, weight);
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3308      	adds	r3, #8
 800240e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fc0c 	bl	8001c30 <push_weight_to_history>

		if (are_all_weights_stable(&current_card->weight_data)) {
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	3308      	adds	r3, #8
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fc35 	bl	8001c8c <are_all_weights_stable>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d020      	beq.n	800246a <scale_process_rfid+0xae>
			float stable_weight = current_card->weight_data.history[0]; // Lấy giá trị ổn định
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	613b      	str	r3, [r7, #16]

			// Chỉ lưu nếu giá trị ổn định mới khác với giá trị đã lưu
			// (tránh ghi vào thẻ liên tục không cần thiết)
			if (fabsf(stable_weight - current_card->weight_data.saved_weight) >= 0.1f) {
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002434:	ed97 7a04 	vldr	s14, [r7, #16]
 8002438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800243c:	eef0 7ae7 	vabs.f32	s15, s15
 8002440:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80024cc <scale_process_rfid+0x110>
 8002444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244c:	db0d      	blt.n	800246a <scale_process_rfid+0xae>
				// Thực hiện lưu giá trị cân nặng vào thẻ RFID
				save_weight_to_rfid_card(current_card->uid, stable_weight);
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	ed97 0a04 	vldr	s0, [r7, #16]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fe2f 	bl	80020b8 <save_weight_to_rfid_card>

				// Cập nhật giá trị đã lưu trong RAM
				current_card->weight_data.saved_weight = stable_weight;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	625a      	str	r2, [r3, #36]	@ 0x24
				add_to_weighing_history(current_card, stable_weight);
 8002460:	ed97 0a04 	vldr	s0, [r7, #16]
 8002464:	6978      	ldr	r0, [r7, #20]
 8002466:	f000 f835 	bl	80024d4 <add_to_weighing_history>
			}
		}

		scale_send_uart_data("Card: %02X%02X%02X%02X%02X | Weight: %.1f kg | History Cnt: %d\r\n",
				CardUID[0], CardUID[1], CardUID[2], CardUID[3], CardUID[4], weight, current_card->weight_data.count);
 800246a:	7a3b      	ldrb	r3, [r7, #8]
		scale_send_uart_data("Card: %02X%02X%02X%02X%02X | Weight: %.1f kg | History Cnt: %d\r\n",
 800246c:	461e      	mov	r6, r3
				CardUID[0], CardUID[1], CardUID[2], CardUID[3], CardUID[4], weight, current_card->weight_data.count);
 800246e:	7a7b      	ldrb	r3, [r7, #9]
		scale_send_uart_data("Card: %02X%02X%02X%02X%02X | Weight: %.1f kg | History Cnt: %d\r\n",
 8002470:	4698      	mov	r8, r3
				CardUID[0], CardUID[1], CardUID[2], CardUID[3], CardUID[4], weight, current_card->weight_data.count);
 8002472:	7abb      	ldrb	r3, [r7, #10]
		scale_send_uart_data("Card: %02X%02X%02X%02X%02X | Weight: %.1f kg | History Cnt: %d\r\n",
 8002474:	4699      	mov	r9, r3
				CardUID[0], CardUID[1], CardUID[2], CardUID[3], CardUID[4], weight, current_card->weight_data.count);
 8002476:	7afb      	ldrb	r3, [r7, #11]
		scale_send_uart_data("Card: %02X%02X%02X%02X%02X | Weight: %.1f kg | History Cnt: %d\r\n",
 8002478:	461c      	mov	r4, r3
				CardUID[0], CardUID[1], CardUID[2], CardUID[3], CardUID[4], weight, current_card->weight_data.count);
 800247a:	7b3b      	ldrb	r3, [r7, #12]
		scale_send_uart_data("Card: %02X%02X%02X%02X%02X | Weight: %.1f kg | History Cnt: %d\r\n",
 800247c:	461d      	mov	r5, r3
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe f882 	bl	8000588 <__aeabi_f2d>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	6979      	ldr	r1, [r7, #20]
 800248a:	6a09      	ldr	r1, [r1, #32]
 800248c:	9104      	str	r1, [sp, #16]
 800248e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002492:	9501      	str	r5, [sp, #4]
 8002494:	9400      	str	r4, [sp, #0]
 8002496:	464b      	mov	r3, r9
 8002498:	4642      	mov	r2, r8
 800249a:	4631      	mov	r1, r6
 800249c:	480c      	ldr	r0, [pc, #48]	@ (80024d0 <scale_process_rfid+0x114>)
 800249e:	f000 f86b 	bl	8002578 <scale_send_uart_data>
 80024a2:	e00b      	b.n	80024bc <scale_process_rfid+0x100>
    } else {
        // No card detected - turn on red LED
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);   // Red LED ON
 80024a4:	2201      	movs	r2, #1
 80024a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024aa:	4806      	ldr	r0, [pc, #24]	@ (80024c4 <scale_process_rfid+0x108>)
 80024ac:	f001 f994 	bl	80037d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET); // Green LED OFF
 80024b0:	2200      	movs	r2, #0
 80024b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024b6:	4803      	ldr	r0, [pc, #12]	@ (80024c4 <scale_process_rfid+0x108>)
 80024b8:	f001 f98e 	bl	80037d8 <HAL_GPIO_WritePin>
    }
}
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80024c4:	40021800 	.word	0x40021800
 80024c8:	0800b8d4 	.word	0x0800b8d4
 80024cc:	3dcccccd 	.word	0x3dcccccd
 80024d0:	0800b8e4 	.word	0x0800b8e4

080024d4 <add_to_weighing_history>:

void add_to_weighing_history(CardData* card, float weight) {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	ed87 0a00 	vstr	s0, [r7]
    // Lấy vị trí tiếp theo trong bộ đệm vòng
    HistoryEntry* new_entry = &weighing_history[history_head];
 80024e0:	4b20      	ldr	r3, [pc, #128]	@ (8002564 <add_to_weighing_history+0x90>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2274      	movs	r2, #116	@ 0x74
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002568 <add_to_weighing_history+0x94>)
 80024ec:	4413      	add	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]

    // Sao chép thông tin vào mục lịch sử mới
    memcpy(new_entry->uid, card->uid, 5);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	2205      	movs	r2, #5
 80024f6:	4618      	mov	r0, r3
 80024f8:	f005 f875 	bl	80075e6 <memcpy>
    strncpy(new_entry->name, card->name, sizeof(new_entry->name) - 1);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1d58      	adds	r0, r3, #5
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3328      	adds	r3, #40	@ 0x28
 8002504:	2263      	movs	r2, #99	@ 0x63
 8002506:	4619      	mov	r1, r3
 8002508:	f004 ffe2 	bl	80074d0 <strncpy>
    new_entry->name[sizeof(new_entry->name) - 1] = '\0'; // Đảm bảo an toàn
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    new_entry->weight = weight;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	66da      	str	r2, [r3, #108]	@ 0x6c
    new_entry->timestamp = HAL_GetTick(); // Ghi lại dấu thời gian
 800251a:	f000 fdc5 	bl	80030a8 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	671a      	str	r2, [r3, #112]	@ 0x70

    // Di chuyển con trỏ của bộ đệm vòng
    history_head = (history_head + 1) % MAX_WEIGHING_HISTORY;
 8002524:	4b0f      	ldr	r3, [pc, #60]	@ (8002564 <add_to_weighing_history+0x90>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	4b10      	ldr	r3, [pc, #64]	@ (800256c <add_to_weighing_history+0x98>)
 800252c:	fb83 1302 	smull	r1, r3, r3, r2
 8002530:	1119      	asrs	r1, r3, #4
 8002532:	17d3      	asrs	r3, r2, #31
 8002534:	1acb      	subs	r3, r1, r3
 8002536:	2132      	movs	r1, #50	@ 0x32
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	4a09      	ldr	r2, [pc, #36]	@ (8002564 <add_to_weighing_history+0x90>)
 8002540:	6013      	str	r3, [r2, #0]

    // Tăng số lượng mục, nhưng không vượt quá kích thước tối đa
    if (history_count < MAX_WEIGHING_HISTORY) {
 8002542:	4b0b      	ldr	r3, [pc, #44]	@ (8002570 <add_to_weighing_history+0x9c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b31      	cmp	r3, #49	@ 0x31
 8002548:	dc04      	bgt.n	8002554 <add_to_weighing_history+0x80>
        history_count++;
 800254a:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <add_to_weighing_history+0x9c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	3301      	adds	r3, #1
 8002550:	4a07      	ldr	r2, [pc, #28]	@ (8002570 <add_to_weighing_history+0x9c>)
 8002552:	6013      	str	r3, [r2, #0]
    }

    scale_send_uart_data("OK: New entry added to weighing history.\r\n");
 8002554:	4807      	ldr	r0, [pc, #28]	@ (8002574 <add_to_weighing_history+0xa0>)
 8002556:	f000 f80f 	bl	8002578 <scale_send_uart_data>
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	200019b4 	.word	0x200019b4
 8002568:	20000308 	.word	0x20000308
 800256c:	51eb851f 	.word	0x51eb851f
 8002570:	200019b0 	.word	0x200019b0
 8002574:	0800b928 	.word	0x0800b928

08002578 <scale_send_uart_data>:
 * @brief Send formatted data via UART
 * @param format: Printf-style format string
 * @param ...: Variable arguments
 */
void scale_send_uart_data(const char* format, ...)
{
 8002578:	b40f      	push	{r0, r1, r2, r3}
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	603b      	str	r3, [r7, #0]

    int len = vsnprintf(uart_buffer, sizeof(uart_buffer), format, args);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	2180      	movs	r1, #128	@ 0x80
 800258c:	480c      	ldr	r0, [pc, #48]	@ (80025c0 <scale_send_uart_data+0x48>)
 800258e:	f004 ff67 	bl	8007460 <vsniprintf>
 8002592:	6078      	str	r0, [r7, #4]

    va_end(args);

    if (len > 0 && len < sizeof(uart_buffer)) {
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	dd0a      	ble.n	80025b0 <scale_send_uart_data+0x38>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b7f      	cmp	r3, #127	@ 0x7f
 800259e:	d807      	bhi.n	80025b0 <scale_send_uart_data+0x38>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, len, 1000);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025a8:	4905      	ldr	r1, [pc, #20]	@ (80025c0 <scale_send_uart_data+0x48>)
 80025aa:	4806      	ldr	r0, [pc, #24]	@ (80025c4 <scale_send_uart_data+0x4c>)
 80025ac:	f002 ff54 	bl	8005458 <HAL_UART_Transmit>
    }
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025ba:	b004      	add	sp, #16
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	200019dc 	.word	0x200019dc
 80025c4:	200002a8 	.word	0x200002a8

080025c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025cc:	b672      	cpsid	i
}
 80025ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025d0:	bf00      	nop
 80025d2:	e7fd      	b.n	80025d0 <Error_Handler+0x8>

080025d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	4b10      	ldr	r3, [pc, #64]	@ (8002620 <HAL_MspInit+0x4c>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002620 <HAL_MspInit+0x4c>)
 80025e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002620 <HAL_MspInit+0x4c>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	4b09      	ldr	r3, [pc, #36]	@ (8002620 <HAL_MspInit+0x4c>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	4a08      	ldr	r2, [pc, #32]	@ (8002620 <HAL_MspInit+0x4c>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002604:	6413      	str	r3, [r2, #64]	@ 0x40
 8002606:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <HAL_MspInit+0x4c>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800

08002624 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	@ 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a19      	ldr	r2, [pc, #100]	@ (80026a8 <HAL_SPI_MspInit+0x84>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d12b      	bne.n	800269e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	4b18      	ldr	r3, [pc, #96]	@ (80026ac <HAL_SPI_MspInit+0x88>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264e:	4a17      	ldr	r2, [pc, #92]	@ (80026ac <HAL_SPI_MspInit+0x88>)
 8002650:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002654:	6453      	str	r3, [r2, #68]	@ 0x44
 8002656:	4b15      	ldr	r3, [pc, #84]	@ (80026ac <HAL_SPI_MspInit+0x88>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <HAL_SPI_MspInit+0x88>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	4a10      	ldr	r2, [pc, #64]	@ (80026ac <HAL_SPI_MspInit+0x88>)
 800266c:	f043 0310 	orr.w	r3, r3, #16
 8002670:	6313      	str	r3, [r2, #48]	@ 0x30
 8002672:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <HAL_SPI_MspInit+0x88>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800267e:	2364      	movs	r3, #100	@ 0x64
 8002680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268a:	2303      	movs	r3, #3
 800268c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800268e:	2305      	movs	r3, #5
 8002690:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002692:	f107 0314 	add.w	r3, r7, #20
 8002696:	4619      	mov	r1, r3
 8002698:	4805      	ldr	r0, [pc, #20]	@ (80026b0 <HAL_SPI_MspInit+0x8c>)
 800269a:	f000 fed9 	bl	8003450 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 800269e:	bf00      	nop
 80026a0:	3728      	adds	r7, #40	@ 0x28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40013400 	.word	0x40013400
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40021000 	.word	0x40021000

080026b4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a0e      	ldr	r2, [pc, #56]	@ (80026fc <HAL_TIM_Base_MspInit+0x48>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d115      	bne.n	80026f2 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002700 <HAL_TIM_Base_MspInit+0x4c>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002700 <HAL_TIM_Base_MspInit+0x4c>)
 80026d0:	f043 0310 	orr.w	r3, r3, #16
 80026d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002700 <HAL_TIM_Base_MspInit+0x4c>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	f003 0310 	and.w	r3, r3, #16
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80026e2:	2200      	movs	r2, #0
 80026e4:	2100      	movs	r1, #0
 80026e6:	2036      	movs	r0, #54	@ 0x36
 80026e8:	f000 fde9 	bl	80032be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026ec:	2036      	movs	r0, #54	@ 0x36
 80026ee:	f000 fe02 	bl	80032f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40001000 	.word	0x40001000
 8002700:	40023800 	.word	0x40023800

08002704 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	@ 0x28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1d      	ldr	r2, [pc, #116]	@ (8002798 <HAL_UART_MspInit+0x94>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d134      	bne.n	8002790 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	4b1c      	ldr	r3, [pc, #112]	@ (800279c <HAL_UART_MspInit+0x98>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272e:	4a1b      	ldr	r2, [pc, #108]	@ (800279c <HAL_UART_MspInit+0x98>)
 8002730:	f043 0310 	orr.w	r3, r3, #16
 8002734:	6453      	str	r3, [r2, #68]	@ 0x44
 8002736:	4b19      	ldr	r3, [pc, #100]	@ (800279c <HAL_UART_MspInit+0x98>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	4b15      	ldr	r3, [pc, #84]	@ (800279c <HAL_UART_MspInit+0x98>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	4a14      	ldr	r2, [pc, #80]	@ (800279c <HAL_UART_MspInit+0x98>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6313      	str	r3, [r2, #48]	@ 0x30
 8002752:	4b12      	ldr	r3, [pc, #72]	@ (800279c <HAL_UART_MspInit+0x98>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800275e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276c:	2303      	movs	r3, #3
 800276e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002770:	2307      	movs	r3, #7
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	4619      	mov	r1, r3
 800277a:	4809      	ldr	r0, [pc, #36]	@ (80027a0 <HAL_UART_MspInit+0x9c>)
 800277c:	f000 fe68 	bl	8003450 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002780:	2200      	movs	r2, #0
 8002782:	2100      	movs	r1, #0
 8002784:	2025      	movs	r0, #37	@ 0x25
 8002786:	f000 fd9a 	bl	80032be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800278a:	2025      	movs	r0, #37	@ 0x25
 800278c:	f000 fdb3 	bl	80032f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002790:	bf00      	nop
 8002792:	3728      	adds	r7, #40	@ 0x28
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40011000 	.word	0x40011000
 800279c:	40023800 	.word	0x40023800
 80027a0:	40020000 	.word	0x40020000

080027a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027a8:	bf00      	nop
 80027aa:	e7fd      	b.n	80027a8 <NMI_Handler+0x4>

080027ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <HardFault_Handler+0x4>

080027b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b8:	bf00      	nop
 80027ba:	e7fd      	b.n	80027b8 <MemManage_Handler+0x4>

080027bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027c0:	bf00      	nop
 80027c2:	e7fd      	b.n	80027c0 <BusFault_Handler+0x4>

080027c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c8:	bf00      	nop
 80027ca:	e7fd      	b.n	80027c8 <UsageFault_Handler+0x4>

080027cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027fa:	f000 fc41 	bl	8003080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002808:	4802      	ldr	r0, [pc, #8]	@ (8002814 <USART1_IRQHandler+0x10>)
 800280a:	f002 fed5 	bl	80055b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200002a8 	.word	0x200002a8

08002818 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800281c:	4802      	ldr	r0, [pc, #8]	@ (8002828 <TIM6_DAC_IRQHandler+0x10>)
 800281e:	f002 fb7d 	bl	8004f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000260 	.word	0x20000260

0800282c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
extern void Run7SegDisplay();

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a04      	ldr	r2, [pc, #16]	@ (800284c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d101      	bne.n	8002842 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        Run7SegDisplay();  // Quét LED 7 thanh định kỳ
 800283e:	f7fe fc33 	bl	80010a8 <Run7SegDisplay>
    }
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40001000 	.word	0x40001000

08002850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return 1;
 8002854:	2301      	movs	r3, #1
}
 8002856:	4618      	mov	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <_kill>:

int _kill(int pid, int sig)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800286a:	f004 fe8f 	bl	800758c <__errno>
 800286e:	4603      	mov	r3, r0
 8002870:	2216      	movs	r2, #22
 8002872:	601a      	str	r2, [r3, #0]
  return -1;
 8002874:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <_exit>:

void _exit (int status)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002888:	f04f 31ff 	mov.w	r1, #4294967295
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ffe7 	bl	8002860 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002892:	bf00      	nop
 8002894:	e7fd      	b.n	8002892 <_exit+0x12>

08002896 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b086      	sub	sp, #24
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	e00a      	b.n	80028be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028a8:	f3af 8000 	nop.w
 80028ac:	4601      	mov	r1, r0
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	60ba      	str	r2, [r7, #8]
 80028b4:	b2ca      	uxtb	r2, r1
 80028b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	3301      	adds	r3, #1
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	dbf0      	blt.n	80028a8 <_read+0x12>
  }

  return len;
 80028c6:	687b      	ldr	r3, [r7, #4]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	e009      	b.n	80028f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	60ba      	str	r2, [r7, #8]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	3301      	adds	r3, #1
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	dbf1      	blt.n	80028e2 <_write+0x12>
  }
  return len;
 80028fe:	687b      	ldr	r3, [r7, #4]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <_close>:

int _close(int file)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002910:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002930:	605a      	str	r2, [r3, #4]
  return 0;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <_isatty>:

int _isatty(int file)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002948:	2301      	movs	r3, #1
}
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002978:	4a14      	ldr	r2, [pc, #80]	@ (80029cc <_sbrk+0x5c>)
 800297a:	4b15      	ldr	r3, [pc, #84]	@ (80029d0 <_sbrk+0x60>)
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002984:	4b13      	ldr	r3, [pc, #76]	@ (80029d4 <_sbrk+0x64>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800298c:	4b11      	ldr	r3, [pc, #68]	@ (80029d4 <_sbrk+0x64>)
 800298e:	4a12      	ldr	r2, [pc, #72]	@ (80029d8 <_sbrk+0x68>)
 8002990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <_sbrk+0x64>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	429a      	cmp	r2, r3
 800299e:	d207      	bcs.n	80029b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a0:	f004 fdf4 	bl	800758c <__errno>
 80029a4:	4603      	mov	r3, r0
 80029a6:	220c      	movs	r2, #12
 80029a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295
 80029ae:	e009      	b.n	80029c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b0:	4b08      	ldr	r3, [pc, #32]	@ (80029d4 <_sbrk+0x64>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029b6:	4b07      	ldr	r3, [pc, #28]	@ (80029d4 <_sbrk+0x64>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	4a05      	ldr	r2, [pc, #20]	@ (80029d4 <_sbrk+0x64>)
 80029c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029c2:	68fb      	ldr	r3, [r7, #12]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20030000 	.word	0x20030000
 80029d0:	00000400 	.word	0x00000400
 80029d4:	20002598 	.word	0x20002598
 80029d8:	200026f0 	.word	0x200026f0

080029dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e0:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <SystemInit+0x20>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e6:	4a05      	ldr	r2, [pc, #20]	@ (80029fc <SystemInit+0x20>)
 80029e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <TM_MFRC522_Init>:
 */
#include "tm_stm32f4_mfrc522.h"

extern SPI_HandleTypeDef hspi4;

void TM_MFRC522_Init(void) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
	TM_MFRC522_InitPins();
 8002a04:	f000 f83c 	bl	8002a80 <TM_MFRC522_InitPins>
	//TM_SPI_Init(MFRC522_SPI, MFRC522_SPI_PINSPACK);

	TM_MFRC522_Reset();
 8002a08:	f000 f921 	bl	8002c4e <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8002a0c:	218d      	movs	r1, #141	@ 0x8d
 8002a0e:	202a      	movs	r0, #42	@ 0x2a
 8002a10:	f000 f842 	bl	8002a98 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8002a14:	213e      	movs	r1, #62	@ 0x3e
 8002a16:	202b      	movs	r0, #43	@ 0x2b
 8002a18:	f000 f83e 	bl	8002a98 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8002a1c:	211e      	movs	r1, #30
 8002a1e:	202d      	movs	r0, #45	@ 0x2d
 8002a20:	f000 f83a 	bl	8002a98 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8002a24:	2100      	movs	r1, #0
 8002a26:	202c      	movs	r0, #44	@ 0x2c
 8002a28:	f000 f836 	bl	8002a98 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8002a2c:	2170      	movs	r1, #112	@ 0x70
 8002a2e:	2026      	movs	r0, #38	@ 0x26
 8002a30:	f000 f832 	bl	8002a98 <TM_MFRC522_WriteRegister>
	
	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8002a34:	2140      	movs	r1, #64	@ 0x40
 8002a36:	2015      	movs	r0, #21
 8002a38:	f000 f82e 	bl	8002a98 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8002a3c:	213d      	movs	r1, #61	@ 0x3d
 8002a3e:	2011      	movs	r0, #17
 8002a40:	f000 f82a 	bl	8002a98 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8002a44:	f000 f8ee 	bl	8002c24 <TM_MFRC522_AntennaOn>
}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type
	status = TM_MFRC522_Request(PICC_REQIDL, id);	
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	2026      	movs	r0, #38	@ 0x26
 8002a58:	f000 f901 	bl	8002c5e <TM_MFRC522_Request>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d104      	bne.n	8002a70 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);	
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f9ed 	bl	8002e46 <TM_MFRC522_Anticoll>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
 8002a70:	f000 fa6f 	bl	8002f52 <TM_MFRC522_Halt>

	return status;
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <TM_MFRC522_InitPins>:
		}
	}
	return MI_OK;
}

void TM_MFRC522_InitPins(void) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	//CS pin
//	GPIO_InitStruct.GPIO_Pin = MFRC522_CS_PIN;
//	GPIO_Init(MFRC522_CS_PORT, &GPIO_InitStruct);

	MFRC522_CS_HIGH;
 8002a84:	2201      	movs	r2, #1
 8002a86:	2110      	movs	r1, #16
 8002a88:	4802      	ldr	r0, [pc, #8]	@ (8002a94 <TM_MFRC522_InitPins+0x14>)
 8002a8a:	f000 fea5 	bl	80037d8 <HAL_GPIO_WritePin>
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000

08002a98 <TM_MFRC522_WriteRegister>:

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	460a      	mov	r2, r1
 8002aa2:	71fb      	strb	r3, [r7, #7]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2110      	movs	r1, #16
 8002aac:	481a      	ldr	r0, [pc, #104]	@ (8002b18 <TM_MFRC522_WriteRegister+0x80>)
 8002aae:	f000 fe93 	bl	80037d8 <HAL_GPIO_WritePin>
	//Send address
	uint8_t buf = (addr << 1) & 0x7E;
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef ret = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 8002ac4:	f107 010e 	add.w	r1, r7, #14
 8002ac8:	230a      	movs	r3, #10
 8002aca:	2201      	movs	r2, #1
 8002acc:	4813      	ldr	r0, [pc, #76]	@ (8002b1c <TM_MFRC522_WriteRegister+0x84>)
 8002ace:	f001 fc0e 	bl	80042ee <HAL_SPI_Transmit>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8002ad6:	bf00      	nop
 8002ad8:	4810      	ldr	r0, [pc, #64]	@ (8002b1c <TM_MFRC522_WriteRegister+0x84>)
 8002ada:	f002 f80e 	bl	8004afa <HAL_SPI_GetState>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	73fb      	strb	r3, [r7, #15]
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d0f7      	beq.n	8002ad8 <TM_MFRC522_WriteRegister+0x40>
	//Send data	
	HAL_SPI_Transmit(&hspi4, &val, 1, 10);
 8002ae8:	1db9      	adds	r1, r7, #6
 8002aea:	230a      	movs	r3, #10
 8002aec:	2201      	movs	r2, #1
 8002aee:	480b      	ldr	r0, [pc, #44]	@ (8002b1c <TM_MFRC522_WriteRegister+0x84>)
 8002af0:	f001 fbfd 	bl	80042ee <HAL_SPI_Transmit>
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8002af4:	bf00      	nop
 8002af6:	4809      	ldr	r0, [pc, #36]	@ (8002b1c <TM_MFRC522_WriteRegister+0x84>)
 8002af8:	f001 ffff 	bl	8004afa <HAL_SPI_GetState>
 8002afc:	4603      	mov	r3, r0
 8002afe:	73fb      	strb	r3, [r7, #15]
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d0f7      	beq.n	8002af6 <TM_MFRC522_WriteRegister+0x5e>
	//CS high
	MFRC522_CS_HIGH;
 8002b06:	2201      	movs	r2, #1
 8002b08:	2110      	movs	r1, #16
 8002b0a:	4803      	ldr	r0, [pc, #12]	@ (8002b18 <TM_MFRC522_WriteRegister+0x80>)
 8002b0c:	f000 fe64 	bl	80037d8 <HAL_GPIO_WritePin>
}
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	20000208 	.word	0x20000208

08002b20 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2110      	movs	r1, #16
 8002b2e:	481f      	ldr	r0, [pc, #124]	@ (8002bac <TM_MFRC522_ReadRegister+0x8c>)
 8002b30:	f000 fe52 	bl	80037d8 <HAL_GPIO_WritePin>

	uint8_t buf = ((addr << 1) & 0x7E) | 0x80;
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	b25b      	sxtb	r3, r3
 8002b3c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002b40:	b25b      	sxtb	r3, r3
 8002b42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b46:	b25b      	sxtb	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 8002b50:	f107 010d 	add.w	r1, r7, #13
 8002b54:	230a      	movs	r3, #10
 8002b56:	2201      	movs	r2, #1
 8002b58:	4815      	ldr	r0, [pc, #84]	@ (8002bb0 <TM_MFRC522_ReadRegister+0x90>)
 8002b5a:	f001 fbc8 	bl	80042ee <HAL_SPI_Transmit>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8002b62:	bf00      	nop
 8002b64:	4812      	ldr	r0, [pc, #72]	@ (8002bb0 <TM_MFRC522_ReadRegister+0x90>)
 8002b66:	f001 ffc8 	bl	8004afa <HAL_SPI_GetState>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	73fb      	strb	r3, [r7, #15]
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d0f7      	beq.n	8002b64 <TM_MFRC522_ReadRegister+0x44>
	ret = HAL_SPI_Receive(&hspi4, &val, 1, 10);
 8002b74:	f107 010e 	add.w	r1, r7, #14
 8002b78:	230a      	movs	r3, #10
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	480c      	ldr	r0, [pc, #48]	@ (8002bb0 <TM_MFRC522_ReadRegister+0x90>)
 8002b7e:	f001 fcfa 	bl	8004576 <HAL_SPI_Receive>
 8002b82:	4603      	mov	r3, r0
 8002b84:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8002b86:	bf00      	nop
 8002b88:	4809      	ldr	r0, [pc, #36]	@ (8002bb0 <TM_MFRC522_ReadRegister+0x90>)
 8002b8a:	f001 ffb6 	bl	8004afa <HAL_SPI_GetState>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	73fb      	strb	r3, [r7, #15]
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d0f7      	beq.n	8002b88 <TM_MFRC522_ReadRegister+0x68>
	//CS high
	MFRC522_CS_HIGH;
 8002b98:	2201      	movs	r2, #1
 8002b9a:	2110      	movs	r1, #16
 8002b9c:	4803      	ldr	r0, [pc, #12]	@ (8002bac <TM_MFRC522_ReadRegister+0x8c>)
 8002b9e:	f000 fe1b 	bl	80037d8 <HAL_GPIO_WritePin>

	return val;	
 8002ba2:	7bbb      	ldrb	r3, [r7, #14]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	20000208 	.word	0x20000208

08002bb4 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	460a      	mov	r2, r1
 8002bbe:	71fb      	strb	r3, [r7, #7]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff ffaa 	bl	8002b20 <TM_MFRC522_ReadRegister>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	461a      	mov	r2, r3
 8002bd0:	79bb      	ldrb	r3, [r7, #6]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff5c 	bl	8002a98 <TM_MFRC522_WriteRegister>
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	460a      	mov	r2, r1
 8002bf2:	71fb      	strb	r3, [r7, #7]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff ff90 	bl	8002b20 <TM_MFRC522_ReadRegister>
 8002c00:	4603      	mov	r3, r0
 8002c02:	b25a      	sxtb	r2, r3
 8002c04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	b25b      	sxtb	r3, r3
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	b25b      	sxtb	r3, r3
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff ff3e 	bl	8002a98 <TM_MFRC522_WriteRegister>
} 
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8002c2a:	2014      	movs	r0, #20
 8002c2c:	f7ff ff78 	bl	8002b20 <TM_MFRC522_ReadRegister>
 8002c30:	4603      	mov	r3, r0
 8002c32:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d103      	bne.n	8002c46 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8002c3e:	2103      	movs	r1, #3
 8002c40:	2014      	movs	r0, #20
 8002c42:	f7ff ffb7 	bl	8002bb4 <TM_MFRC522_SetBitMask>
	}
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8002c52:	210f      	movs	r1, #15
 8002c54:	2001      	movs	r0, #1
 8002c56:	f7ff ff1f 	bl	8002a98 <TM_MFRC522_WriteRegister>
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b086      	sub	sp, #24
 8002c62:	af02      	add	r7, sp, #8
 8002c64:	4603      	mov	r3, r0
 8002c66:	6039      	str	r1, [r7, #0]
 8002c68:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;  
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8002c6a:	2107      	movs	r1, #7
 8002c6c:	200d      	movs	r0, #13
 8002c6e:	f7ff ff13 	bl	8002a98 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	79fa      	ldrb	r2, [r7, #7]
 8002c76:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002c78:	f107 030c 	add.w	r3, r7, #12
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2201      	movs	r2, #1
 8002c82:	6839      	ldr	r1, [r7, #0]
 8002c84:	200c      	movs	r0, #12
 8002c86:	f000 f80f 	bl	8002ca8 <TM_MFRC522_ToCard>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10)) {    
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <TM_MFRC522_Request+0x3c>
 8002c94:	89bb      	ldrh	r3, [r7, #12]
 8002c96:	2b10      	cmp	r3, #16
 8002c98:	d001      	beq.n	8002c9e <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	2b0c      	cmp	r3, #12
 8002cca:	d006      	beq.n	8002cda <TM_MFRC522_ToCard+0x32>
 8002ccc:	2b0e      	cmp	r3, #14
 8002cce:	d109      	bne.n	8002ce4 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8002cd0:	2312      	movs	r3, #18
 8002cd2:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8002cd4:	2310      	movs	r3, #16
 8002cd6:	757b      	strb	r3, [r7, #21]
			break;
 8002cd8:	e005      	b.n	8002ce6 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8002cda:	2377      	movs	r3, #119	@ 0x77
 8002cdc:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8002cde:	2330      	movs	r3, #48	@ 0x30
 8002ce0:	757b      	strb	r3, [r7, #21]
			break;
 8002ce2:	e000      	b.n	8002ce6 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8002ce4:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8002ce6:	7dbb      	ldrb	r3, [r7, #22]
 8002ce8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	4619      	mov	r1, r3
 8002cf0:	2002      	movs	r0, #2
 8002cf2:	f7ff fed1 	bl	8002a98 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8002cf6:	2180      	movs	r1, #128	@ 0x80
 8002cf8:	2004      	movs	r0, #4
 8002cfa:	f7ff ff75 	bl	8002be8 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8002cfe:	2180      	movs	r1, #128	@ 0x80
 8002d00:	200a      	movs	r0, #10
 8002d02:	f7ff ff57 	bl	8002bb4 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8002d06:	2100      	movs	r1, #0
 8002d08:	2001      	movs	r0, #1
 8002d0a:	f7ff fec5 	bl	8002a98 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {   
 8002d0e:	2300      	movs	r3, #0
 8002d10:	827b      	strh	r3, [r7, #18]
 8002d12:	e00a      	b.n	8002d2a <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
 8002d14:	8a7b      	ldrh	r3, [r7, #18]
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	4413      	add	r3, r2
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	2009      	movs	r0, #9
 8002d20:	f7ff feba 	bl	8002a98 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {   
 8002d24:	8a7b      	ldrh	r3, [r7, #18]
 8002d26:	3301      	adds	r3, #1
 8002d28:	827b      	strh	r3, [r7, #18]
 8002d2a:	7bbb      	ldrb	r3, [r7, #14]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	8a7a      	ldrh	r2, [r7, #18]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d3ef      	bcc.n	8002d14 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	4619      	mov	r1, r3
 8002d38:	2001      	movs	r0, #1
 8002d3a:	f7ff fead 	bl	8002a98 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {    
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	2b0c      	cmp	r3, #12
 8002d42:	d103      	bne.n	8002d4c <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
 8002d44:	2180      	movs	r1, #128	@ 0x80
 8002d46:	200d      	movs	r0, #13
 8002d48:	f7ff ff34 	bl	8002bb4 <TM_MFRC522_SetBitMask>
	}   

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8002d4c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002d50:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8002d52:	2004      	movs	r0, #4
 8002d54:	f7ff fee4 	bl	8002b20 <TM_MFRC522_ReadRegister>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	753b      	strb	r3, [r7, #20]
		i--;
 8002d5c:	8a7b      	ldrh	r3, [r7, #18]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002d62:	8a7b      	ldrh	r3, [r7, #18]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <TM_MFRC522_ToCard+0xd6>
 8002d68:	7d3b      	ldrb	r3, [r7, #20]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d105      	bne.n	8002d7e <TM_MFRC522_ToCard+0xd6>
 8002d72:	7d3a      	ldrb	r2, [r7, #20]
 8002d74:	7d7b      	ldrb	r3, [r7, #21]
 8002d76:	4013      	ands	r3, r2
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0e9      	beq.n	8002d52 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8002d7e:	2180      	movs	r1, #128	@ 0x80
 8002d80:	200d      	movs	r0, #13
 8002d82:	f7ff ff31 	bl	8002be8 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8002d86:	8a7b      	ldrh	r3, [r7, #18]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d057      	beq.n	8002e3c <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8002d8c:	2006      	movs	r0, #6
 8002d8e:	f7ff fec7 	bl	8002b20 <TM_MFRC522_ReadRegister>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f003 031b 	and.w	r3, r3, #27
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d14d      	bne.n	8002e38 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {   
 8002da0:	7d3a      	ldrb	r2, [r7, #20]
 8002da2:	7dbb      	ldrb	r3, [r7, #22]
 8002da4:	4013      	ands	r3, r2
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;			
 8002db0:	2301      	movs	r3, #1
 8002db2:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	2b0c      	cmp	r3, #12
 8002db8:	d140      	bne.n	8002e3c <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8002dba:	200a      	movs	r0, #10
 8002dbc:	f7ff feb0 	bl	8002b20 <TM_MFRC522_ReadRegister>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8002dc4:	200c      	movs	r0, #12
 8002dc6:	f7ff feab 	bl	8002b20 <TM_MFRC522_ReadRegister>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	747b      	strb	r3, [r7, #17]
				if (lastBits) {   
 8002dd2:	7c7b      	ldrb	r3, [r7, #17]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00b      	beq.n	8002df0 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;   
 8002dd8:	7d3b      	ldrb	r3, [r7, #20]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	7c7b      	ldrb	r3, [r7, #17]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dec:	801a      	strh	r2, [r3, #0]
 8002dee:	e005      	b.n	8002dfc <TM_MFRC522_ToCard+0x154>
				} else {   
					*backLen = n * 8;   
 8002df0:	7d3b      	ldrb	r3, [r7, #20]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfa:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {   
 8002dfc:	7d3b      	ldrb	r3, [r7, #20]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <TM_MFRC522_ToCard+0x15e>
					n = 1;    
 8002e02:	2301      	movs	r3, #1
 8002e04:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {   
 8002e06:	7d3b      	ldrb	r3, [r7, #20]
 8002e08:	2b10      	cmp	r3, #16
 8002e0a:	d901      	bls.n	8002e10 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;   
 8002e0c:	2310      	movs	r3, #16
 8002e0e:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {   
 8002e10:	2300      	movs	r3, #0
 8002e12:	827b      	strh	r3, [r7, #18]
 8002e14:	e00a      	b.n	8002e2c <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
 8002e16:	8a7b      	ldrh	r3, [r7, #18]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	18d4      	adds	r4, r2, r3
 8002e1c:	2009      	movs	r0, #9
 8002e1e:	f7ff fe7f 	bl	8002b20 <TM_MFRC522_ReadRegister>
 8002e22:	4603      	mov	r3, r0
 8002e24:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {   
 8002e26:	8a7b      	ldrh	r3, [r7, #18]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	827b      	strh	r3, [r7, #18]
 8002e2c:	7d3b      	ldrb	r3, [r7, #20]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	8a7a      	ldrh	r2, [r7, #18]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d3ef      	bcc.n	8002e16 <TM_MFRC522_ToCard+0x16e>
 8002e36:	e001      	b.n	8002e3c <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {   
			status = MI_ERR;  
 8002e38:	2302      	movs	r3, #2
 8002e3a:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8002e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	371c      	adds	r7, #28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd90      	pop	{r4, r7, pc}

08002e46 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af02      	add	r7, sp, #8
 8002e4c:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8002e52:	2100      	movs	r1, #0
 8002e54:	200d      	movs	r0, #13
 8002e56:	f7ff fe1f 	bl	8002a98 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2293      	movs	r2, #147	@ 0x93
 8002e5e:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3301      	adds	r3, #1
 8002e64:	2220      	movs	r2, #32
 8002e66:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8002e68:	f107 030a 	add.w	r3, r7, #10
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	200c      	movs	r0, #12
 8002e76:	f7ff ff17 	bl	8002ca8 <TM_MFRC522_ToCard>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d118      	bne.n	8002eb6 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {   
 8002e84:	2300      	movs	r3, #0
 8002e86:	73bb      	strb	r3, [r7, #14]
 8002e88:	e009      	b.n	8002e9e <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8002e8a:	7bbb      	ldrb	r3, [r7, #14]
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	4413      	add	r3, r2
 8002e90:	781a      	ldrb	r2, [r3, #0]
 8002e92:	7b7b      	ldrb	r3, [r7, #13]
 8002e94:	4053      	eors	r3, r2
 8002e96:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {   
 8002e98:	7bbb      	ldrb	r3, [r7, #14]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	73bb      	strb	r3, [r7, #14]
 8002e9e:	7bbb      	ldrb	r3, [r7, #14]
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d9f2      	bls.n	8002e8a <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {   
 8002ea4:	7bbb      	ldrb	r3, [r7, #14]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	7b7a      	ldrb	r2, [r7, #13]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d001      	beq.n	8002eb6 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;    
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
} 
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8002ec0:	b590      	push	{r4, r7, lr}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);				//CRCIrq = 0
 8002ece:	2104      	movs	r1, #4
 8002ed0:	2005      	movs	r0, #5
 8002ed2:	f7ff fe89 	bl	8002be8 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8002ed6:	2180      	movs	r1, #128	@ 0x80
 8002ed8:	200a      	movs	r0, #10
 8002eda:	f7ff fe6b 	bl	8002bb4 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {   
 8002ede:	2300      	movs	r3, #0
 8002ee0:	75fb      	strb	r3, [r7, #23]
 8002ee2:	e00a      	b.n	8002efa <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));   
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4413      	add	r3, r2
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	4619      	mov	r1, r3
 8002eee:	2009      	movs	r0, #9
 8002ef0:	f7ff fdd2 	bl	8002a98 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {   
 8002ef4:	7dfb      	ldrb	r3, [r7, #23]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	75fb      	strb	r3, [r7, #23]
 8002efa:	7dfa      	ldrb	r2, [r7, #23]
 8002efc:	7afb      	ldrb	r3, [r7, #11]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d3f0      	bcc.n	8002ee4 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8002f02:	2103      	movs	r1, #3
 8002f04:	2001      	movs	r0, #1
 8002f06:	f7ff fdc7 	bl	8002a98 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8002f0a:	23ff      	movs	r3, #255	@ 0xff
 8002f0c:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8002f0e:	2005      	movs	r0, #5
 8002f10:	f7ff fe06 	bl	8002b20 <TM_MFRC522_ReadRegister>
 8002f14:	4603      	mov	r3, r0
 8002f16:	75bb      	strb	r3, [r7, #22]
		i--;
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8002f1e:	7dfb      	ldrb	r3, [r7, #23]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d004      	beq.n	8002f2e <TM_MFRC522_CalculateCRC+0x6e>
 8002f24:	7dbb      	ldrb	r3, [r7, #22]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0ef      	beq.n	8002f0e <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8002f2e:	2022      	movs	r0, #34	@ 0x22
 8002f30:	f7ff fdf6 	bl	8002b20 <TM_MFRC522_ReadRegister>
 8002f34:	4603      	mov	r3, r0
 8002f36:	461a      	mov	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	1c5c      	adds	r4, r3, #1
 8002f40:	2021      	movs	r0, #33	@ 0x21
 8002f42:	f7ff fded 	bl	8002b20 <TM_MFRC522_ReadRegister>
 8002f46:	4603      	mov	r3, r0
 8002f48:	7023      	strb	r3, [r4, #0]
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd90      	pop	{r4, r7, pc}

08002f52 <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8002f58:	2350      	movs	r3, #80	@ 0x50
 8002f5a:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8002f60:	463b      	mov	r3, r7
 8002f62:	1c9a      	adds	r2, r3, #2
 8002f64:	463b      	mov	r3, r7
 8002f66:	2102      	movs	r1, #2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ffa9 	bl	8002ec0 <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8002f6e:	463a      	mov	r2, r7
 8002f70:	4639      	mov	r1, r7
 8002f72:	1dbb      	adds	r3, r7, #6
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	4613      	mov	r3, r2
 8002f78:	2204      	movs	r2, #4
 8002f7a:	200c      	movs	r0, #12
 8002f7c:	f7ff fe94 	bl	8002ca8 <TM_MFRC522_ToCard>
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <Reset_Handler>:
 8002f88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fc0 <LoopFillZerobss+0xe>
 8002f8c:	f7ff fd26 	bl	80029dc <SystemInit>
 8002f90:	480c      	ldr	r0, [pc, #48]	@ (8002fc4 <LoopFillZerobss+0x12>)
 8002f92:	490d      	ldr	r1, [pc, #52]	@ (8002fc8 <LoopFillZerobss+0x16>)
 8002f94:	4a0d      	ldr	r2, [pc, #52]	@ (8002fcc <LoopFillZerobss+0x1a>)
 8002f96:	2300      	movs	r3, #0
 8002f98:	e002      	b.n	8002fa0 <LoopCopyDataInit>

08002f9a <CopyDataInit>:
 8002f9a:	58d4      	ldr	r4, [r2, r3]
 8002f9c:	50c4      	str	r4, [r0, r3]
 8002f9e:	3304      	adds	r3, #4

08002fa0 <LoopCopyDataInit>:
 8002fa0:	18c4      	adds	r4, r0, r3
 8002fa2:	428c      	cmp	r4, r1
 8002fa4:	d3f9      	bcc.n	8002f9a <CopyDataInit>
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd0 <LoopFillZerobss+0x1e>)
 8002fa8:	4c0a      	ldr	r4, [pc, #40]	@ (8002fd4 <LoopFillZerobss+0x22>)
 8002faa:	2300      	movs	r3, #0
 8002fac:	e001      	b.n	8002fb2 <LoopFillZerobss>

08002fae <FillZerobss>:
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	3204      	adds	r2, #4

08002fb2 <LoopFillZerobss>:
 8002fb2:	42a2      	cmp	r2, r4
 8002fb4:	d3fb      	bcc.n	8002fae <FillZerobss>
 8002fb6:	f004 faef 	bl	8007598 <__libc_init_array>
 8002fba:	f7fe fbb1 	bl	8001720 <main>
 8002fbe:	4770      	bx	lr
 8002fc0:	20030000 	.word	0x20030000
 8002fc4:	20000000 	.word	0x20000000
 8002fc8:	200001e0 	.word	0x200001e0
 8002fcc:	0800bdd4 	.word	0x0800bdd4
 8002fd0:	200001e0 	.word	0x200001e0
 8002fd4:	200026ec 	.word	0x200026ec

08002fd8 <ADC_IRQHandler>:
 8002fd8:	e7fe      	b.n	8002fd8 <ADC_IRQHandler>
	...

08002fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800301c <HAL_Init+0x40>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800301c <HAL_Init+0x40>)
 8002fe6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fec:	4b0b      	ldr	r3, [pc, #44]	@ (800301c <HAL_Init+0x40>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <HAL_Init+0x40>)
 8002ff2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ff6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ff8:	4b08      	ldr	r3, [pc, #32]	@ (800301c <HAL_Init+0x40>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a07      	ldr	r2, [pc, #28]	@ (800301c <HAL_Init+0x40>)
 8002ffe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003004:	2003      	movs	r0, #3
 8003006:	f000 f94f 	bl	80032a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800300a:	200f      	movs	r0, #15
 800300c:	f000 f808 	bl	8003020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003010:	f7ff fae0 	bl	80025d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023c00 	.word	0x40023c00

08003020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003028:	4b12      	ldr	r3, [pc, #72]	@ (8003074 <HAL_InitTick+0x54>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b12      	ldr	r3, [pc, #72]	@ (8003078 <HAL_InitTick+0x58>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	4619      	mov	r1, r3
 8003032:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003036:	fbb3 f3f1 	udiv	r3, r3, r1
 800303a:	fbb2 f3f3 	udiv	r3, r2, r3
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f967 	bl	8003312 <HAL_SYSTICK_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e00e      	b.n	800306c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b0f      	cmp	r3, #15
 8003052:	d80a      	bhi.n	800306a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003054:	2200      	movs	r2, #0
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	f04f 30ff 	mov.w	r0, #4294967295
 800305c:	f000 f92f 	bl	80032be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003060:	4a06      	ldr	r2, [pc, #24]	@ (800307c <HAL_InitTick+0x5c>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	e000      	b.n	800306c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	2000000c 	.word	0x2000000c
 8003078:	20000014 	.word	0x20000014
 800307c:	20000010 	.word	0x20000010

08003080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003084:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <HAL_IncTick+0x20>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4b06      	ldr	r3, [pc, #24]	@ (80030a4 <HAL_IncTick+0x24>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4413      	add	r3, r2
 8003090:	4a04      	ldr	r2, [pc, #16]	@ (80030a4 <HAL_IncTick+0x24>)
 8003092:	6013      	str	r3, [r2, #0]
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000014 	.word	0x20000014
 80030a4:	2000259c 	.word	0x2000259c

080030a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return uwTick;
 80030ac:	4b03      	ldr	r3, [pc, #12]	@ (80030bc <HAL_GetTick+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	2000259c 	.word	0x2000259c

080030c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030c8:	f7ff ffee 	bl	80030a8 <HAL_GetTick>
 80030cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d005      	beq.n	80030e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030da:	4b0a      	ldr	r3, [pc, #40]	@ (8003104 <HAL_Delay+0x44>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030e6:	bf00      	nop
 80030e8:	f7ff ffde 	bl	80030a8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d8f7      	bhi.n	80030e8 <HAL_Delay+0x28>
  {
  }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000014 	.word	0x20000014

08003108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003118:	4b0c      	ldr	r3, [pc, #48]	@ (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003124:	4013      	ands	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313a:	4a04      	ldr	r2, [pc, #16]	@ (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	60d3      	str	r3, [r2, #12]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003154:	4b04      	ldr	r3, [pc, #16]	@ (8003168 <__NVIC_GetPriorityGrouping+0x18>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	f003 0307 	and.w	r3, r3, #7
}
 800315e:	4618      	mov	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	2b00      	cmp	r3, #0
 800317c:	db0b      	blt.n	8003196 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	f003 021f 	and.w	r2, r3, #31
 8003184:	4907      	ldr	r1, [pc, #28]	@ (80031a4 <__NVIC_EnableIRQ+0x38>)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	2001      	movs	r0, #1
 800318e:	fa00 f202 	lsl.w	r2, r0, r2
 8003192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	e000e100 	.word	0xe000e100

080031a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	db0a      	blt.n	80031d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	490c      	ldr	r1, [pc, #48]	@ (80031f4 <__NVIC_SetPriority+0x4c>)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	0112      	lsls	r2, r2, #4
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	440b      	add	r3, r1
 80031cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d0:	e00a      	b.n	80031e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4908      	ldr	r1, [pc, #32]	@ (80031f8 <__NVIC_SetPriority+0x50>)
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	3b04      	subs	r3, #4
 80031e0:	0112      	lsls	r2, r2, #4
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	440b      	add	r3, r1
 80031e6:	761a      	strb	r2, [r3, #24]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000e100 	.word	0xe000e100
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	@ 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f1c3 0307 	rsb	r3, r3, #7
 8003216:	2b04      	cmp	r3, #4
 8003218:	bf28      	it	cs
 800321a:	2304      	movcs	r3, #4
 800321c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3304      	adds	r3, #4
 8003222:	2b06      	cmp	r3, #6
 8003224:	d902      	bls.n	800322c <NVIC_EncodePriority+0x30>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3b03      	subs	r3, #3
 800322a:	e000      	b.n	800322e <NVIC_EncodePriority+0x32>
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	f04f 32ff 	mov.w	r2, #4294967295
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43da      	mvns	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	401a      	ands	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003244:	f04f 31ff 	mov.w	r1, #4294967295
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43d9      	mvns	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	4313      	orrs	r3, r2
         );
}
 8003256:	4618      	mov	r0, r3
 8003258:	3724      	adds	r7, #36	@ 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3b01      	subs	r3, #1
 8003270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003274:	d301      	bcc.n	800327a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003276:	2301      	movs	r3, #1
 8003278:	e00f      	b.n	800329a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800327a:	4a0a      	ldr	r2, [pc, #40]	@ (80032a4 <SysTick_Config+0x40>)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3b01      	subs	r3, #1
 8003280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003282:	210f      	movs	r1, #15
 8003284:	f04f 30ff 	mov.w	r0, #4294967295
 8003288:	f7ff ff8e 	bl	80031a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800328c:	4b05      	ldr	r3, [pc, #20]	@ (80032a4 <SysTick_Config+0x40>)
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003292:	4b04      	ldr	r3, [pc, #16]	@ (80032a4 <SysTick_Config+0x40>)
 8003294:	2207      	movs	r2, #7
 8003296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	e000e010 	.word	0xe000e010

080032a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ff29 	bl	8003108 <__NVIC_SetPriorityGrouping>
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	4603      	mov	r3, r0
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032d0:	f7ff ff3e 	bl	8003150 <__NVIC_GetPriorityGrouping>
 80032d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	6978      	ldr	r0, [r7, #20]
 80032dc:	f7ff ff8e 	bl	80031fc <NVIC_EncodePriority>
 80032e0:	4602      	mov	r2, r0
 80032e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff5d 	bl	80031a8 <__NVIC_SetPriority>
}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff31 	bl	800316c <__NVIC_EnableIRQ>
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ffa2 	bl	8003264 <SysTick_Config>
 8003320:	4603      	mov	r3, r0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003336:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003338:	f7ff feb6 	bl	80030a8 <HAL_GetTick>
 800333c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d008      	beq.n	800335c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2280      	movs	r2, #128	@ 0x80
 800334e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e052      	b.n	8003402 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0216 	bic.w	r2, r2, #22
 800336a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800337a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d103      	bne.n	800338c <HAL_DMA_Abort+0x62>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0208 	bic.w	r2, r2, #8
 800339a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0201 	bic.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033ac:	e013      	b.n	80033d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033ae:	f7ff fe7b 	bl	80030a8 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	d90c      	bls.n	80033d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2203      	movs	r2, #3
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e015      	b.n	8003402 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1e4      	bne.n	80033ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e8:	223f      	movs	r2, #63	@ 0x3f
 80033ea:	409a      	lsls	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d004      	beq.n	8003428 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2280      	movs	r2, #128	@ 0x80
 8003422:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e00c      	b.n	8003442 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2205      	movs	r2, #5
 800342c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003450:	b480      	push	{r7}
 8003452:	b089      	sub	sp, #36	@ 0x24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800345e:	2300      	movs	r3, #0
 8003460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003462:	2300      	movs	r3, #0
 8003464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	e177      	b.n	800375c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800346c:	2201      	movs	r2, #1
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4013      	ands	r3, r2
 800347e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	429a      	cmp	r2, r3
 8003486:	f040 8166 	bne.w	8003756 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d005      	beq.n	80034a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d130      	bne.n	8003504 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	2203      	movs	r2, #3
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034d8:	2201      	movs	r2, #1
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 0201 	and.w	r2, r3, #1
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	2b03      	cmp	r3, #3
 800350e:	d017      	beq.n	8003540 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	2203      	movs	r2, #3
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d123      	bne.n	8003594 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	08da      	lsrs	r2, r3, #3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3208      	adds	r2, #8
 8003554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003558:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	220f      	movs	r2, #15
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	08da      	lsrs	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3208      	adds	r2, #8
 800358e:	69b9      	ldr	r1, [r7, #24]
 8003590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	2203      	movs	r2, #3
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0203 	and.w	r2, r3, #3
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 80c0 	beq.w	8003756 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	4b66      	ldr	r3, [pc, #408]	@ (8003774 <HAL_GPIO_Init+0x324>)
 80035dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035de:	4a65      	ldr	r2, [pc, #404]	@ (8003774 <HAL_GPIO_Init+0x324>)
 80035e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80035e6:	4b63      	ldr	r3, [pc, #396]	@ (8003774 <HAL_GPIO_Init+0x324>)
 80035e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035f2:	4a61      	ldr	r2, [pc, #388]	@ (8003778 <HAL_GPIO_Init+0x328>)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	089b      	lsrs	r3, r3, #2
 80035f8:	3302      	adds	r3, #2
 80035fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	220f      	movs	r2, #15
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a58      	ldr	r2, [pc, #352]	@ (800377c <HAL_GPIO_Init+0x32c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d037      	beq.n	800368e <HAL_GPIO_Init+0x23e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a57      	ldr	r2, [pc, #348]	@ (8003780 <HAL_GPIO_Init+0x330>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d031      	beq.n	800368a <HAL_GPIO_Init+0x23a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a56      	ldr	r2, [pc, #344]	@ (8003784 <HAL_GPIO_Init+0x334>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d02b      	beq.n	8003686 <HAL_GPIO_Init+0x236>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a55      	ldr	r2, [pc, #340]	@ (8003788 <HAL_GPIO_Init+0x338>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d025      	beq.n	8003682 <HAL_GPIO_Init+0x232>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a54      	ldr	r2, [pc, #336]	@ (800378c <HAL_GPIO_Init+0x33c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d01f      	beq.n	800367e <HAL_GPIO_Init+0x22e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a53      	ldr	r2, [pc, #332]	@ (8003790 <HAL_GPIO_Init+0x340>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d019      	beq.n	800367a <HAL_GPIO_Init+0x22a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a52      	ldr	r2, [pc, #328]	@ (8003794 <HAL_GPIO_Init+0x344>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d013      	beq.n	8003676 <HAL_GPIO_Init+0x226>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a51      	ldr	r2, [pc, #324]	@ (8003798 <HAL_GPIO_Init+0x348>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00d      	beq.n	8003672 <HAL_GPIO_Init+0x222>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a50      	ldr	r2, [pc, #320]	@ (800379c <HAL_GPIO_Init+0x34c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d007      	beq.n	800366e <HAL_GPIO_Init+0x21e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a4f      	ldr	r2, [pc, #316]	@ (80037a0 <HAL_GPIO_Init+0x350>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d101      	bne.n	800366a <HAL_GPIO_Init+0x21a>
 8003666:	2309      	movs	r3, #9
 8003668:	e012      	b.n	8003690 <HAL_GPIO_Init+0x240>
 800366a:	230a      	movs	r3, #10
 800366c:	e010      	b.n	8003690 <HAL_GPIO_Init+0x240>
 800366e:	2308      	movs	r3, #8
 8003670:	e00e      	b.n	8003690 <HAL_GPIO_Init+0x240>
 8003672:	2307      	movs	r3, #7
 8003674:	e00c      	b.n	8003690 <HAL_GPIO_Init+0x240>
 8003676:	2306      	movs	r3, #6
 8003678:	e00a      	b.n	8003690 <HAL_GPIO_Init+0x240>
 800367a:	2305      	movs	r3, #5
 800367c:	e008      	b.n	8003690 <HAL_GPIO_Init+0x240>
 800367e:	2304      	movs	r3, #4
 8003680:	e006      	b.n	8003690 <HAL_GPIO_Init+0x240>
 8003682:	2303      	movs	r3, #3
 8003684:	e004      	b.n	8003690 <HAL_GPIO_Init+0x240>
 8003686:	2302      	movs	r3, #2
 8003688:	e002      	b.n	8003690 <HAL_GPIO_Init+0x240>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <HAL_GPIO_Init+0x240>
 800368e:	2300      	movs	r3, #0
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	f002 0203 	and.w	r2, r2, #3
 8003696:	0092      	lsls	r2, r2, #2
 8003698:	4093      	lsls	r3, r2
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036a0:	4935      	ldr	r1, [pc, #212]	@ (8003778 <HAL_GPIO_Init+0x328>)
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	089b      	lsrs	r3, r3, #2
 80036a6:	3302      	adds	r3, #2
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ae:	4b3d      	ldr	r3, [pc, #244]	@ (80037a4 <HAL_GPIO_Init+0x354>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	43db      	mvns	r3, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4013      	ands	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036d2:	4a34      	ldr	r2, [pc, #208]	@ (80037a4 <HAL_GPIO_Init+0x354>)
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036d8:	4b32      	ldr	r3, [pc, #200]	@ (80037a4 <HAL_GPIO_Init+0x354>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036fc:	4a29      	ldr	r2, [pc, #164]	@ (80037a4 <HAL_GPIO_Init+0x354>)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003702:	4b28      	ldr	r3, [pc, #160]	@ (80037a4 <HAL_GPIO_Init+0x354>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	43db      	mvns	r3, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4013      	ands	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003726:	4a1f      	ldr	r2, [pc, #124]	@ (80037a4 <HAL_GPIO_Init+0x354>)
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800372c:	4b1d      	ldr	r3, [pc, #116]	@ (80037a4 <HAL_GPIO_Init+0x354>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	43db      	mvns	r3, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003750:	4a14      	ldr	r2, [pc, #80]	@ (80037a4 <HAL_GPIO_Init+0x354>)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	3301      	adds	r3, #1
 800375a:	61fb      	str	r3, [r7, #28]
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	2b0f      	cmp	r3, #15
 8003760:	f67f ae84 	bls.w	800346c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003764:	bf00      	nop
 8003766:	bf00      	nop
 8003768:	3724      	adds	r7, #36	@ 0x24
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800
 8003778:	40013800 	.word	0x40013800
 800377c:	40020000 	.word	0x40020000
 8003780:	40020400 	.word	0x40020400
 8003784:	40020800 	.word	0x40020800
 8003788:	40020c00 	.word	0x40020c00
 800378c:	40021000 	.word	0x40021000
 8003790:	40021400 	.word	0x40021400
 8003794:	40021800 	.word	0x40021800
 8003798:	40021c00 	.word	0x40021c00
 800379c:	40022000 	.word	0x40022000
 80037a0:	40022400 	.word	0x40022400
 80037a4:	40013c00 	.word	0x40013c00

080037a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	887b      	ldrh	r3, [r7, #2]
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
 80037c4:	e001      	b.n	80037ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	807b      	strh	r3, [r7, #2]
 80037e4:	4613      	mov	r3, r2
 80037e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037e8:	787b      	ldrb	r3, [r7, #1]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ee:	887a      	ldrh	r2, [r7, #2]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037f4:	e003      	b.n	80037fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037f6:	887b      	ldrh	r3, [r7, #2]
 80037f8:	041a      	lsls	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	619a      	str	r2, [r3, #24]
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	603b      	str	r3, [r7, #0]
 800381a:	4b20      	ldr	r3, [pc, #128]	@ (800389c <HAL_PWREx_EnableOverDrive+0x90>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	4a1f      	ldr	r2, [pc, #124]	@ (800389c <HAL_PWREx_EnableOverDrive+0x90>)
 8003820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003824:	6413      	str	r3, [r2, #64]	@ 0x40
 8003826:	4b1d      	ldr	r3, [pc, #116]	@ (800389c <HAL_PWREx_EnableOverDrive+0x90>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003832:	4b1b      	ldr	r3, [pc, #108]	@ (80038a0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003834:	2201      	movs	r2, #1
 8003836:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003838:	f7ff fc36 	bl	80030a8 <HAL_GetTick>
 800383c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800383e:	e009      	b.n	8003854 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003840:	f7ff fc32 	bl	80030a8 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800384e:	d901      	bls.n	8003854 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e01f      	b.n	8003894 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003854:	4b13      	ldr	r3, [pc, #76]	@ (80038a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003860:	d1ee      	bne.n	8003840 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003862:	4b11      	ldr	r3, [pc, #68]	@ (80038a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003864:	2201      	movs	r2, #1
 8003866:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003868:	f7ff fc1e 	bl	80030a8 <HAL_GetTick>
 800386c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800386e:	e009      	b.n	8003884 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003870:	f7ff fc1a 	bl	80030a8 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800387e:	d901      	bls.n	8003884 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e007      	b.n	8003894 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003884:	4b07      	ldr	r3, [pc, #28]	@ (80038a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003890:	d1ee      	bne.n	8003870 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40023800 	.word	0x40023800
 80038a0:	420e0040 	.word	0x420e0040
 80038a4:	40007000 	.word	0x40007000
 80038a8:	420e0044 	.word	0x420e0044

080038ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e267      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d075      	beq.n	80039b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038ca:	4b88      	ldr	r3, [pc, #544]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d00c      	beq.n	80038f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038d6:	4b85      	ldr	r3, [pc, #532]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d112      	bne.n	8003908 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038e2:	4b82      	ldr	r3, [pc, #520]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038ee:	d10b      	bne.n	8003908 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f0:	4b7e      	ldr	r3, [pc, #504]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d05b      	beq.n	80039b4 <HAL_RCC_OscConfig+0x108>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d157      	bne.n	80039b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e242      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003910:	d106      	bne.n	8003920 <HAL_RCC_OscConfig+0x74>
 8003912:	4b76      	ldr	r3, [pc, #472]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a75      	ldr	r2, [pc, #468]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	e01d      	b.n	800395c <HAL_RCC_OscConfig+0xb0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003928:	d10c      	bne.n	8003944 <HAL_RCC_OscConfig+0x98>
 800392a:	4b70      	ldr	r3, [pc, #448]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a6f      	ldr	r2, [pc, #444]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 8003930:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b6d      	ldr	r3, [pc, #436]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a6c      	ldr	r2, [pc, #432]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e00b      	b.n	800395c <HAL_RCC_OscConfig+0xb0>
 8003944:	4b69      	ldr	r3, [pc, #420]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a68      	ldr	r2, [pc, #416]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 800394a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	4b66      	ldr	r3, [pc, #408]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a65      	ldr	r2, [pc, #404]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 8003956:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800395a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d013      	beq.n	800398c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7ff fba0 	bl	80030a8 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800396c:	f7ff fb9c 	bl	80030a8 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b64      	cmp	r3, #100	@ 0x64
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e207      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	4b5b      	ldr	r3, [pc, #364]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0xc0>
 800398a:	e014      	b.n	80039b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398c:	f7ff fb8c 	bl	80030a8 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003994:	f7ff fb88 	bl	80030a8 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b64      	cmp	r3, #100	@ 0x64
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e1f3      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a6:	4b51      	ldr	r3, [pc, #324]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0xe8>
 80039b2:	e000      	b.n	80039b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d063      	beq.n	8003a8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039c2:	4b4a      	ldr	r3, [pc, #296]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ce:	4b47      	ldr	r3, [pc, #284]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d11c      	bne.n	8003a14 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039da:	4b44      	ldr	r3, [pc, #272]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d116      	bne.n	8003a14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e6:	4b41      	ldr	r3, [pc, #260]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <HAL_RCC_OscConfig+0x152>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d001      	beq.n	80039fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e1c7      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fe:	4b3b      	ldr	r3, [pc, #236]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	4937      	ldr	r1, [pc, #220]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a12:	e03a      	b.n	8003a8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d020      	beq.n	8003a5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a1c:	4b34      	ldr	r3, [pc, #208]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a22:	f7ff fb41 	bl	80030a8 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2a:	f7ff fb3d 	bl	80030a8 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e1a8      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a48:	4b28      	ldr	r3, [pc, #160]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4925      	ldr	r1, [pc, #148]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]
 8003a5c:	e015      	b.n	8003a8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a5e:	4b24      	ldr	r3, [pc, #144]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a64:	f7ff fb20 	bl	80030a8 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a6c:	f7ff fb1c 	bl	80030a8 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e187      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d036      	beq.n	8003b04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d016      	beq.n	8003acc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a9e:	4b15      	ldr	r3, [pc, #84]	@ (8003af4 <HAL_RCC_OscConfig+0x248>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7ff fb00 	bl	80030a8 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aac:	f7ff fafc 	bl	80030a8 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e167      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003abe:	4b0b      	ldr	r3, [pc, #44]	@ (8003aec <HAL_RCC_OscConfig+0x240>)
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0x200>
 8003aca:	e01b      	b.n	8003b04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003acc:	4b09      	ldr	r3, [pc, #36]	@ (8003af4 <HAL_RCC_OscConfig+0x248>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad2:	f7ff fae9 	bl	80030a8 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad8:	e00e      	b.n	8003af8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ada:	f7ff fae5 	bl	80030a8 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d907      	bls.n	8003af8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e150      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
 8003aec:	40023800 	.word	0x40023800
 8003af0:	42470000 	.word	0x42470000
 8003af4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af8:	4b88      	ldr	r3, [pc, #544]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003afa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1ea      	bne.n	8003ada <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8097 	beq.w	8003c40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b16:	4b81      	ldr	r3, [pc, #516]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10f      	bne.n	8003b42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b22:	2300      	movs	r3, #0
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	4b7d      	ldr	r3, [pc, #500]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b32:	4b7a      	ldr	r3, [pc, #488]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b42:	4b77      	ldr	r3, [pc, #476]	@ (8003d20 <HAL_RCC_OscConfig+0x474>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d118      	bne.n	8003b80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b4e:	4b74      	ldr	r3, [pc, #464]	@ (8003d20 <HAL_RCC_OscConfig+0x474>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a73      	ldr	r2, [pc, #460]	@ (8003d20 <HAL_RCC_OscConfig+0x474>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5a:	f7ff faa5 	bl	80030a8 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b62:	f7ff faa1 	bl	80030a8 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e10c      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b74:	4b6a      	ldr	r3, [pc, #424]	@ (8003d20 <HAL_RCC_OscConfig+0x474>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d106      	bne.n	8003b96 <HAL_RCC_OscConfig+0x2ea>
 8003b88:	4b64      	ldr	r3, [pc, #400]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8c:	4a63      	ldr	r2, [pc, #396]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b94:	e01c      	b.n	8003bd0 <HAL_RCC_OscConfig+0x324>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b05      	cmp	r3, #5
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x30c>
 8003b9e:	4b5f      	ldr	r3, [pc, #380]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba2:	4a5e      	ldr	r2, [pc, #376]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003ba4:	f043 0304 	orr.w	r3, r3, #4
 8003ba8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003baa:	4b5c      	ldr	r3, [pc, #368]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bae:	4a5b      	ldr	r2, [pc, #364]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb6:	e00b      	b.n	8003bd0 <HAL_RCC_OscConfig+0x324>
 8003bb8:	4b58      	ldr	r3, [pc, #352]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bbc:	4a57      	ldr	r2, [pc, #348]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bbe:	f023 0301 	bic.w	r3, r3, #1
 8003bc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc4:	4b55      	ldr	r3, [pc, #340]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc8:	4a54      	ldr	r2, [pc, #336]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bca:	f023 0304 	bic.w	r3, r3, #4
 8003bce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d015      	beq.n	8003c04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd8:	f7ff fa66 	bl	80030a8 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be0:	f7ff fa62 	bl	80030a8 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e0cb      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf6:	4b49      	ldr	r3, [pc, #292]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0ee      	beq.n	8003be0 <HAL_RCC_OscConfig+0x334>
 8003c02:	e014      	b.n	8003c2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c04:	f7ff fa50 	bl	80030a8 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0c:	f7ff fa4c 	bl	80030a8 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e0b5      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c22:	4b3e      	ldr	r3, [pc, #248]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1ee      	bne.n	8003c0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c2e:	7dfb      	ldrb	r3, [r7, #23]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d105      	bne.n	8003c40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c34:	4b39      	ldr	r3, [pc, #228]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c38:	4a38      	ldr	r2, [pc, #224]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003c3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80a1 	beq.w	8003d8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c4a:	4b34      	ldr	r3, [pc, #208]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d05c      	beq.n	8003d10 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d141      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5e:	4b31      	ldr	r3, [pc, #196]	@ (8003d24 <HAL_RCC_OscConfig+0x478>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7ff fa20 	bl	80030a8 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c6c:	f7ff fa1c 	bl	80030a8 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e087      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7e:	4b27      	ldr	r3, [pc, #156]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69da      	ldr	r2, [r3, #28]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	019b      	lsls	r3, r3, #6
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	041b      	lsls	r3, r3, #16
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cac:	061b      	lsls	r3, r3, #24
 8003cae:	491b      	ldr	r1, [pc, #108]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d24 <HAL_RCC_OscConfig+0x478>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cba:	f7ff f9f5 	bl	80030a8 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc2:	f7ff f9f1 	bl	80030a8 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e05c      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd4:	4b11      	ldr	r3, [pc, #68]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x416>
 8003ce0:	e054      	b.n	8003d8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce2:	4b10      	ldr	r3, [pc, #64]	@ (8003d24 <HAL_RCC_OscConfig+0x478>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7ff f9de 	bl	80030a8 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf0:	f7ff f9da 	bl	80030a8 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e045      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d02:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x444>
 8003d0e:	e03d      	b.n	8003d8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d107      	bne.n	8003d28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e038      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40007000 	.word	0x40007000
 8003d24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d28:	4b1b      	ldr	r3, [pc, #108]	@ (8003d98 <HAL_RCC_OscConfig+0x4ec>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d028      	beq.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d121      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d11a      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d58:	4013      	ands	r3, r2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d111      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6e:	085b      	lsrs	r3, r3, #1
 8003d70:	3b01      	subs	r3, #1
 8003d72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d107      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800

08003d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0cc      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003db0:	4b68      	ldr	r3, [pc, #416]	@ (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d90c      	bls.n	8003dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbe:	4b65      	ldr	r3, [pc, #404]	@ (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b63      	ldr	r3, [pc, #396]	@ (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0b8      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d020      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003df0:	4b59      	ldr	r3, [pc, #356]	@ (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a58      	ldr	r2, [pc, #352]	@ (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003dfa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e08:	4b53      	ldr	r3, [pc, #332]	@ (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4a52      	ldr	r2, [pc, #328]	@ (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e14:	4b50      	ldr	r3, [pc, #320]	@ (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	494d      	ldr	r1, [pc, #308]	@ (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d044      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d107      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	4b47      	ldr	r3, [pc, #284]	@ (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d119      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e07f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d003      	beq.n	8003e5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d107      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e06f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e067      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e7a:	4b37      	ldr	r3, [pc, #220]	@ (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f023 0203 	bic.w	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4934      	ldr	r1, [pc, #208]	@ (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e8c:	f7ff f90c 	bl	80030a8 <HAL_GetTick>
 8003e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	e00a      	b.n	8003eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e94:	f7ff f908 	bl	80030a8 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e04f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 020c 	and.w	r2, r3, #12
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d1eb      	bne.n	8003e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b25      	ldr	r3, [pc, #148]	@ (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d20c      	bcs.n	8003ee4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b22      	ldr	r3, [pc, #136]	@ (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b20      	ldr	r3, [pc, #128]	@ (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e032      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef0:	4b19      	ldr	r3, [pc, #100]	@ (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4916      	ldr	r1, [pc, #88]	@ (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f0e:	4b12      	ldr	r3, [pc, #72]	@ (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	490e      	ldr	r1, [pc, #56]	@ (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f22:	f000 f821 	bl	8003f68 <HAL_RCC_GetSysClockFreq>
 8003f26:	4602      	mov	r2, r0
 8003f28:	4b0b      	ldr	r3, [pc, #44]	@ (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	490a      	ldr	r1, [pc, #40]	@ (8003f5c <HAL_RCC_ClockConfig+0x1c0>)
 8003f34:	5ccb      	ldrb	r3, [r1, r3]
 8003f36:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3a:	4a09      	ldr	r2, [pc, #36]	@ (8003f60 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f3e:	4b09      	ldr	r3, [pc, #36]	@ (8003f64 <HAL_RCC_ClockConfig+0x1c8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff f86c 	bl	8003020 <HAL_InitTick>

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40023c00 	.word	0x40023c00
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	0800b96c 	.word	0x0800b96c
 8003f60:	2000000c 	.word	0x2000000c
 8003f64:	20000010 	.word	0x20000010

08003f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f6c:	b094      	sub	sp, #80	@ 0x50
 8003f6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f80:	4b79      	ldr	r3, [pc, #484]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 030c 	and.w	r3, r3, #12
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d00d      	beq.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x40>
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	f200 80e1 	bhi.w	8004154 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0x34>
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d003      	beq.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f9a:	e0db      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f9c:	4b73      	ldr	r3, [pc, #460]	@ (800416c <HAL_RCC_GetSysClockFreq+0x204>)
 8003f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fa0:	e0db      	b.n	800415a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fa2:	4b73      	ldr	r3, [pc, #460]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fa6:	e0d8      	b.n	800415a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa8:	4b6f      	ldr	r3, [pc, #444]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x200>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fb0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fb2:	4b6d      	ldr	r3, [pc, #436]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d063      	beq.n	8004086 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fbe:	4b6a      	ldr	r3, [pc, #424]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	099b      	lsrs	r3, r3, #6
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003fda:	4622      	mov	r2, r4
 8003fdc:	462b      	mov	r3, r5
 8003fde:	f04f 0000 	mov.w	r0, #0
 8003fe2:	f04f 0100 	mov.w	r1, #0
 8003fe6:	0159      	lsls	r1, r3, #5
 8003fe8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fec:	0150      	lsls	r0, r2, #5
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	1a51      	subs	r1, r2, r1
 8003ff6:	6139      	str	r1, [r7, #16]
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	eb63 0301 	sbc.w	r3, r3, r1
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800400c:	4659      	mov	r1, fp
 800400e:	018b      	lsls	r3, r1, #6
 8004010:	4651      	mov	r1, sl
 8004012:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004016:	4651      	mov	r1, sl
 8004018:	018a      	lsls	r2, r1, #6
 800401a:	4651      	mov	r1, sl
 800401c:	ebb2 0801 	subs.w	r8, r2, r1
 8004020:	4659      	mov	r1, fp
 8004022:	eb63 0901 	sbc.w	r9, r3, r1
 8004026:	f04f 0200 	mov.w	r2, #0
 800402a:	f04f 0300 	mov.w	r3, #0
 800402e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004032:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004036:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800403a:	4690      	mov	r8, r2
 800403c:	4699      	mov	r9, r3
 800403e:	4623      	mov	r3, r4
 8004040:	eb18 0303 	adds.w	r3, r8, r3
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	462b      	mov	r3, r5
 8004048:	eb49 0303 	adc.w	r3, r9, r3
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	f04f 0300 	mov.w	r3, #0
 8004056:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800405a:	4629      	mov	r1, r5
 800405c:	024b      	lsls	r3, r1, #9
 800405e:	4621      	mov	r1, r4
 8004060:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004064:	4621      	mov	r1, r4
 8004066:	024a      	lsls	r2, r1, #9
 8004068:	4610      	mov	r0, r2
 800406a:	4619      	mov	r1, r3
 800406c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800406e:	2200      	movs	r2, #0
 8004070:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004072:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004074:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004078:	f7fc fe26 	bl	8000cc8 <__aeabi_uldivmod>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4613      	mov	r3, r2
 8004082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004084:	e058      	b.n	8004138 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004086:	4b38      	ldr	r3, [pc, #224]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x200>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	099b      	lsrs	r3, r3, #6
 800408c:	2200      	movs	r2, #0
 800408e:	4618      	mov	r0, r3
 8004090:	4611      	mov	r1, r2
 8004092:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004096:	623b      	str	r3, [r7, #32]
 8004098:	2300      	movs	r3, #0
 800409a:	627b      	str	r3, [r7, #36]	@ 0x24
 800409c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040a0:	4642      	mov	r2, r8
 80040a2:	464b      	mov	r3, r9
 80040a4:	f04f 0000 	mov.w	r0, #0
 80040a8:	f04f 0100 	mov.w	r1, #0
 80040ac:	0159      	lsls	r1, r3, #5
 80040ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040b2:	0150      	lsls	r0, r2, #5
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4641      	mov	r1, r8
 80040ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80040be:	4649      	mov	r1, r9
 80040c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040d8:	ebb2 040a 	subs.w	r4, r2, sl
 80040dc:	eb63 050b 	sbc.w	r5, r3, fp
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	00eb      	lsls	r3, r5, #3
 80040ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ee:	00e2      	lsls	r2, r4, #3
 80040f0:	4614      	mov	r4, r2
 80040f2:	461d      	mov	r5, r3
 80040f4:	4643      	mov	r3, r8
 80040f6:	18e3      	adds	r3, r4, r3
 80040f8:	603b      	str	r3, [r7, #0]
 80040fa:	464b      	mov	r3, r9
 80040fc:	eb45 0303 	adc.w	r3, r5, r3
 8004100:	607b      	str	r3, [r7, #4]
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800410e:	4629      	mov	r1, r5
 8004110:	028b      	lsls	r3, r1, #10
 8004112:	4621      	mov	r1, r4
 8004114:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004118:	4621      	mov	r1, r4
 800411a:	028a      	lsls	r2, r1, #10
 800411c:	4610      	mov	r0, r2
 800411e:	4619      	mov	r1, r3
 8004120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004122:	2200      	movs	r2, #0
 8004124:	61bb      	str	r3, [r7, #24]
 8004126:	61fa      	str	r2, [r7, #28]
 8004128:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800412c:	f7fc fdcc 	bl	8000cc8 <__aeabi_uldivmod>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4613      	mov	r3, r2
 8004136:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004138:	4b0b      	ldr	r3, [pc, #44]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x200>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	3301      	adds	r3, #1
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004148:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800414a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800414c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004150:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004152:	e002      	b.n	800415a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004154:	4b05      	ldr	r3, [pc, #20]	@ (800416c <HAL_RCC_GetSysClockFreq+0x204>)
 8004156:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800415a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800415c:	4618      	mov	r0, r3
 800415e:	3750      	adds	r7, #80	@ 0x50
 8004160:	46bd      	mov	sp, r7
 8004162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004166:	bf00      	nop
 8004168:	40023800 	.word	0x40023800
 800416c:	00f42400 	.word	0x00f42400
 8004170:	007a1200 	.word	0x007a1200

08004174 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004178:	4b03      	ldr	r3, [pc, #12]	@ (8004188 <HAL_RCC_GetHCLKFreq+0x14>)
 800417a:	681b      	ldr	r3, [r3, #0]
}
 800417c:	4618      	mov	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	2000000c 	.word	0x2000000c

0800418c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004190:	f7ff fff0 	bl	8004174 <HAL_RCC_GetHCLKFreq>
 8004194:	4602      	mov	r2, r0
 8004196:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	0a9b      	lsrs	r3, r3, #10
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	4903      	ldr	r1, [pc, #12]	@ (80041b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041a2:	5ccb      	ldrb	r3, [r1, r3]
 80041a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40023800 	.word	0x40023800
 80041b0:	0800b97c 	.word	0x0800b97c

080041b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041b8:	f7ff ffdc 	bl	8004174 <HAL_RCC_GetHCLKFreq>
 80041bc:	4602      	mov	r2, r0
 80041be:	4b05      	ldr	r3, [pc, #20]	@ (80041d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	0b5b      	lsrs	r3, r3, #13
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	4903      	ldr	r1, [pc, #12]	@ (80041d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ca:	5ccb      	ldrb	r3, [r1, r3]
 80041cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40023800 	.word	0x40023800
 80041d8:	0800b97c 	.word	0x0800b97c

080041dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e07b      	b.n	80042e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d108      	bne.n	8004208 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041fe:	d009      	beq.n	8004214 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	61da      	str	r2, [r3, #28]
 8004206:	e005      	b.n	8004214 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fe f9f8 	bl	8002624 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800424a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004298:	ea42 0103 	orr.w	r1, r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	0c1b      	lsrs	r3, r3, #16
 80042b2:	f003 0104 	and.w	r1, r3, #4
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	f003 0210 	and.w	r2, r3, #16
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b088      	sub	sp, #32
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	603b      	str	r3, [r7, #0]
 80042fa:	4613      	mov	r3, r2
 80042fc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042fe:	f7fe fed3 	bl	80030a8 <HAL_GetTick>
 8004302:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004304:	88fb      	ldrh	r3, [r7, #6]
 8004306:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	d001      	beq.n	8004318 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004314:	2302      	movs	r3, #2
 8004316:	e12a      	b.n	800456e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <HAL_SPI_Transmit+0x36>
 800431e:	88fb      	ldrh	r3, [r7, #6]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e122      	b.n	800456e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_SPI_Transmit+0x48>
 8004332:	2302      	movs	r3, #2
 8004334:	e11b      	b.n	800456e <HAL_SPI_Transmit+0x280>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2203      	movs	r2, #3
 8004342:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	88fa      	ldrh	r2, [r7, #6]
 8004356:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	88fa      	ldrh	r2, [r7, #6]
 800435c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004384:	d10f      	bne.n	80043a6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004394:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b0:	2b40      	cmp	r3, #64	@ 0x40
 80043b2:	d007      	beq.n	80043c4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043cc:	d152      	bne.n	8004474 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_SPI_Transmit+0xee>
 80043d6:	8b7b      	ldrh	r3, [r7, #26]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d145      	bne.n	8004468 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e0:	881a      	ldrh	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ec:	1c9a      	adds	r2, r3, #2
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004400:	e032      	b.n	8004468 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b02      	cmp	r3, #2
 800440e:	d112      	bne.n	8004436 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004414:	881a      	ldrh	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004420:	1c9a      	adds	r2, r3, #2
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004434:	e018      	b.n	8004468 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004436:	f7fe fe37 	bl	80030a8 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d803      	bhi.n	800444e <HAL_SPI_Transmit+0x160>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d102      	bne.n	8004454 <HAL_SPI_Transmit+0x166>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d109      	bne.n	8004468 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e082      	b.n	800456e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1c7      	bne.n	8004402 <HAL_SPI_Transmit+0x114>
 8004472:	e053      	b.n	800451c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_SPI_Transmit+0x194>
 800447c:	8b7b      	ldrh	r3, [r7, #26]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d147      	bne.n	8004512 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	7812      	ldrb	r2, [r2, #0]
 800448e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800449e:	b29b      	uxth	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044a8:	e033      	b.n	8004512 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d113      	bne.n	80044e0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	7812      	ldrb	r2, [r2, #0]
 80044c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80044de:	e018      	b.n	8004512 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044e0:	f7fe fde2 	bl	80030a8 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d803      	bhi.n	80044f8 <HAL_SPI_Transmit+0x20a>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f6:	d102      	bne.n	80044fe <HAL_SPI_Transmit+0x210>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e02d      	b.n	800456e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1c6      	bne.n	80044aa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	6839      	ldr	r1, [r7, #0]
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fbe7 	bl	8004cf4 <SPI_EndRxTxTransaction>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800456c:	2300      	movs	r3, #0
  }
}
 800456e:	4618      	mov	r0, r3
 8004570:	3720      	adds	r7, #32
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b088      	sub	sp, #32
 800457a:	af02      	add	r7, sp, #8
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	4613      	mov	r3, r2
 8004584:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b01      	cmp	r3, #1
 8004590:	d001      	beq.n	8004596 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004592:	2302      	movs	r3, #2
 8004594:	e104      	b.n	80047a0 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <HAL_SPI_Receive+0x2c>
 800459c:	88fb      	ldrh	r3, [r7, #6]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e0fc      	b.n	80047a0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045ae:	d112      	bne.n	80045d6 <HAL_SPI_Receive+0x60>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10e      	bne.n	80045d6 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2204      	movs	r2, #4
 80045bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045c0:	88fa      	ldrh	r2, [r7, #6]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	4613      	mov	r3, r2
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 f8eb 	bl	80047a8 <HAL_SPI_TransmitReceive>
 80045d2:	4603      	mov	r3, r0
 80045d4:	e0e4      	b.n	80047a0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045d6:	f7fe fd67 	bl	80030a8 <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_SPI_Receive+0x74>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e0da      	b.n	80047a0 <HAL_SPI_Receive+0x22a>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2204      	movs	r2, #4
 80045f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	88fa      	ldrh	r2, [r7, #6]
 800460a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	88fa      	ldrh	r2, [r7, #6]
 8004610:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004638:	d10f      	bne.n	800465a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004648:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004658:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004664:	2b40      	cmp	r3, #64	@ 0x40
 8004666:	d007      	beq.n	8004678 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004676:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d170      	bne.n	8004762 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004680:	e035      	b.n	80046ee <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b01      	cmp	r3, #1
 800468e:	d115      	bne.n	80046bc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f103 020c 	add.w	r2, r3, #12
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469c:	7812      	ldrb	r2, [r2, #0]
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046ba:	e018      	b.n	80046ee <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046bc:	f7fe fcf4 	bl	80030a8 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d803      	bhi.n	80046d4 <HAL_SPI_Receive+0x15e>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d2:	d102      	bne.n	80046da <HAL_SPI_Receive+0x164>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e058      	b.n	80047a0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1c4      	bne.n	8004682 <HAL_SPI_Receive+0x10c>
 80046f8:	e038      	b.n	800476c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b01      	cmp	r3, #1
 8004706:	d113      	bne.n	8004730 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004712:	b292      	uxth	r2, r2
 8004714:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471a:	1c9a      	adds	r2, r3, #2
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004724:	b29b      	uxth	r3, r3
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800472e:	e018      	b.n	8004762 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004730:	f7fe fcba 	bl	80030a8 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d803      	bhi.n	8004748 <HAL_SPI_Receive+0x1d2>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004746:	d102      	bne.n	800474e <HAL_SPI_Receive+0x1d8>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e01e      	b.n	80047a0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1c6      	bne.n	80046fa <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	6839      	ldr	r1, [r7, #0]
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 fa59 	bl	8004c28 <SPI_EndRxTransaction>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800479e:	2300      	movs	r3, #0
  }
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	@ 0x28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047b6:	2301      	movs	r3, #1
 80047b8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047ba:	f7fe fc75 	bl	80030a8 <HAL_GetTick>
 80047be:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047c6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80047ce:	887b      	ldrh	r3, [r7, #2]
 80047d0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047d2:	7ffb      	ldrb	r3, [r7, #31]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d00c      	beq.n	80047f2 <HAL_SPI_TransmitReceive+0x4a>
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047de:	d106      	bne.n	80047ee <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d102      	bne.n	80047ee <HAL_SPI_TransmitReceive+0x46>
 80047e8:	7ffb      	ldrb	r3, [r7, #31]
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d001      	beq.n	80047f2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80047ee:	2302      	movs	r3, #2
 80047f0:	e17f      	b.n	8004af2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_SPI_TransmitReceive+0x5c>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_SPI_TransmitReceive+0x5c>
 80047fe:	887b      	ldrh	r3, [r7, #2]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e174      	b.n	8004af2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800480e:	2b01      	cmp	r3, #1
 8004810:	d101      	bne.n	8004816 <HAL_SPI_TransmitReceive+0x6e>
 8004812:	2302      	movs	r3, #2
 8004814:	e16d      	b.n	8004af2 <HAL_SPI_TransmitReceive+0x34a>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b04      	cmp	r3, #4
 8004828:	d003      	beq.n	8004832 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2205      	movs	r2, #5
 800482e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	887a      	ldrh	r2, [r7, #2]
 8004842:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	887a      	ldrh	r2, [r7, #2]
 8004848:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	887a      	ldrh	r2, [r7, #2]
 8004854:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	887a      	ldrh	r2, [r7, #2]
 800485a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004872:	2b40      	cmp	r3, #64	@ 0x40
 8004874:	d007      	beq.n	8004886 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004884:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800488e:	d17e      	bne.n	800498e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <HAL_SPI_TransmitReceive+0xf6>
 8004898:	8afb      	ldrh	r3, [r7, #22]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d16c      	bne.n	8004978 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a2:	881a      	ldrh	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ae:	1c9a      	adds	r2, r3, #2
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048c2:	e059      	b.n	8004978 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d11b      	bne.n	800490a <HAL_SPI_TransmitReceive+0x162>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d016      	beq.n	800490a <HAL_SPI_TransmitReceive+0x162>
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d113      	bne.n	800490a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e6:	881a      	ldrh	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f2:	1c9a      	adds	r2, r3, #2
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b01      	cmp	r3, #1
 8004916:	d119      	bne.n	800494c <HAL_SPI_TransmitReceive+0x1a4>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d014      	beq.n	800494c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492c:	b292      	uxth	r2, r2
 800492e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004934:	1c9a      	adds	r2, r3, #2
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004948:	2301      	movs	r3, #1
 800494a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800494c:	f7fe fbac 	bl	80030a8 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004958:	429a      	cmp	r2, r3
 800495a:	d80d      	bhi.n	8004978 <HAL_SPI_TransmitReceive+0x1d0>
 800495c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004962:	d009      	beq.n	8004978 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e0bc      	b.n	8004af2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1a0      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x11c>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d19b      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x11c>
 800498c:	e082      	b.n	8004a94 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_SPI_TransmitReceive+0x1f4>
 8004996:	8afb      	ldrh	r3, [r7, #22]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d171      	bne.n	8004a80 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	7812      	ldrb	r2, [r2, #0]
 80049a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049c2:	e05d      	b.n	8004a80 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d11c      	bne.n	8004a0c <HAL_SPI_TransmitReceive+0x264>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d017      	beq.n	8004a0c <HAL_SPI_TransmitReceive+0x264>
 80049dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d114      	bne.n	8004a0c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	330c      	adds	r3, #12
 80049ec:	7812      	ldrb	r2, [r2, #0]
 80049ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d119      	bne.n	8004a4e <HAL_SPI_TransmitReceive+0x2a6>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d014      	beq.n	8004a4e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a4e:	f7fe fb2b 	bl	80030a8 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d803      	bhi.n	8004a66 <HAL_SPI_TransmitReceive+0x2be>
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a64:	d102      	bne.n	8004a6c <HAL_SPI_TransmitReceive+0x2c4>
 8004a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e038      	b.n	8004af2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d19c      	bne.n	80049c4 <HAL_SPI_TransmitReceive+0x21c>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d197      	bne.n	80049c4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a94:	6a3a      	ldr	r2, [r7, #32]
 8004a96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f92b 	bl	8004cf4 <SPI_EndRxTxTransaction>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d008      	beq.n	8004ab6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e01d      	b.n	8004af2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10a      	bne.n	8004ad4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004abe:	2300      	movs	r3, #0
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004af0:	2300      	movs	r3, #0
  }
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3728      	adds	r7, #40	@ 0x28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b08:	b2db      	uxtb	r3, r3
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	4613      	mov	r3, r2
 8004b26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b28:	f7fe fabe 	bl	80030a8 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	4413      	add	r3, r2
 8004b36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b38:	f7fe fab6 	bl	80030a8 <HAL_GetTick>
 8004b3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b3e:	4b39      	ldr	r3, [pc, #228]	@ (8004c24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	015b      	lsls	r3, r3, #5
 8004b44:	0d1b      	lsrs	r3, r3, #20
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	fb02 f303 	mul.w	r3, r2, r3
 8004b4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b4e:	e055      	b.n	8004bfc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	d051      	beq.n	8004bfc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b58:	f7fe faa6 	bl	80030a8 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d902      	bls.n	8004b6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d13d      	bne.n	8004bea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b86:	d111      	bne.n	8004bac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b90:	d004      	beq.n	8004b9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b9a:	d107      	bne.n	8004bac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004baa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bb4:	d10f      	bne.n	8004bd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e018      	b.n	8004c1c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d102      	bne.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61fb      	str	r3, [r7, #28]
 8004bf4:	e002      	b.n	8004bfc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	4013      	ands	r3, r2
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	bf0c      	ite	eq
 8004c0c:	2301      	moveq	r3, #1
 8004c0e:	2300      	movne	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	461a      	mov	r2, r3
 8004c14:	79fb      	ldrb	r3, [r7, #7]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d19a      	bne.n	8004b50 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3720      	adds	r7, #32
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	2000000c 	.word	0x2000000c

08004c28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c3c:	d111      	bne.n	8004c62 <SPI_EndRxTransaction+0x3a>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c46:	d004      	beq.n	8004c52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c50:	d107      	bne.n	8004c62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c60:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c6a:	d12a      	bne.n	8004cc2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c74:	d012      	beq.n	8004c9c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2180      	movs	r1, #128	@ 0x80
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7ff ff49 	bl	8004b18 <SPI_WaitFlagStateUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d02d      	beq.n	8004ce8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c90:	f043 0220 	orr.w	r2, r3, #32
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e026      	b.n	8004cea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f7ff ff36 	bl	8004b18 <SPI_WaitFlagStateUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01a      	beq.n	8004ce8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb6:	f043 0220 	orr.w	r2, r3, #32
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e013      	b.n	8004cea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2101      	movs	r1, #1
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f7ff ff23 	bl	8004b18 <SPI_WaitFlagStateUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d007      	beq.n	8004ce8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cdc:	f043 0220 	orr.w	r2, r3, #32
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e000      	b.n	8004cea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af02      	add	r7, sp, #8
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2201      	movs	r2, #1
 8004d08:	2102      	movs	r1, #2
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7ff ff04 	bl	8004b18 <SPI_WaitFlagStateUntilTimeout>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d1a:	f043 0220 	orr.w	r2, r3, #32
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e032      	b.n	8004d8c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d26:	4b1b      	ldr	r3, [pc, #108]	@ (8004d94 <SPI_EndRxTxTransaction+0xa0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004d98 <SPI_EndRxTxTransaction+0xa4>)
 8004d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d30:	0d5b      	lsrs	r3, r3, #21
 8004d32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d44:	d112      	bne.n	8004d6c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2180      	movs	r1, #128	@ 0x80
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f7ff fee1 	bl	8004b18 <SPI_WaitFlagStateUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d016      	beq.n	8004d8a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d60:	f043 0220 	orr.w	r2, r3, #32
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e00f      	b.n	8004d8c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d82:	2b80      	cmp	r3, #128	@ 0x80
 8004d84:	d0f2      	beq.n	8004d6c <SPI_EndRxTxTransaction+0x78>
 8004d86:	e000      	b.n	8004d8a <SPI_EndRxTxTransaction+0x96>
        break;
 8004d88:	bf00      	nop
  }

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	2000000c 	.word	0x2000000c
 8004d98:	165e9f81 	.word	0x165e9f81

08004d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e041      	b.n	8004e32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fd fc76 	bl	80026b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4610      	mov	r0, r2
 8004ddc:	f000 f9b6 	bl	800514c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d001      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e04e      	b.n	8004ef2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a23      	ldr	r2, [pc, #140]	@ (8004f00 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d022      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7e:	d01d      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a1f      	ldr	r2, [pc, #124]	@ (8004f04 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d018      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8004f08 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d013      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a1c      	ldr	r2, [pc, #112]	@ (8004f0c <HAL_TIM_Base_Start_IT+0xd0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00e      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8004f10 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d009      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a19      	ldr	r2, [pc, #100]	@ (8004f14 <HAL_TIM_Base_Start_IT+0xd8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d004      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a18      	ldr	r2, [pc, #96]	@ (8004f18 <HAL_TIM_Base_Start_IT+0xdc>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d111      	bne.n	8004ee0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b06      	cmp	r3, #6
 8004ecc:	d010      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0201 	orr.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ede:	e007      	b.n	8004ef0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40010000 	.word	0x40010000
 8004f04:	40000400 	.word	0x40000400
 8004f08:	40000800 	.word	0x40000800
 8004f0c:	40000c00 	.word	0x40000c00
 8004f10:	40010400 	.word	0x40010400
 8004f14:	40014000 	.word	0x40014000
 8004f18:	40001800 	.word	0x40001800

08004f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d020      	beq.n	8004f80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01b      	beq.n	8004f80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0202 	mvn.w	r2, #2
 8004f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f8d2 	bl	8005110 <HAL_TIM_IC_CaptureCallback>
 8004f6c:	e005      	b.n	8004f7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f8c4 	bl	80050fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f8d5 	bl	8005124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d020      	beq.n	8004fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01b      	beq.n	8004fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0204 	mvn.w	r2, #4
 8004f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f8ac 	bl	8005110 <HAL_TIM_IC_CaptureCallback>
 8004fb8:	e005      	b.n	8004fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f89e 	bl	80050fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f8af 	bl	8005124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d020      	beq.n	8005018 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01b      	beq.n	8005018 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0208 	mvn.w	r2, #8
 8004fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2204      	movs	r2, #4
 8004fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f886 	bl	8005110 <HAL_TIM_IC_CaptureCallback>
 8005004:	e005      	b.n	8005012 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f878 	bl	80050fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f889 	bl	8005124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f003 0310 	and.w	r3, r3, #16
 800501e:	2b00      	cmp	r3, #0
 8005020:	d020      	beq.n	8005064 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b00      	cmp	r3, #0
 800502a:	d01b      	beq.n	8005064 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0210 	mvn.w	r2, #16
 8005034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2208      	movs	r2, #8
 800503a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f860 	bl	8005110 <HAL_TIM_IC_CaptureCallback>
 8005050:	e005      	b.n	800505e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f852 	bl	80050fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f863 	bl	8005124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00c      	beq.n	8005088 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d007      	beq.n	8005088 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f06f 0201 	mvn.w	r2, #1
 8005080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fd fbd2 	bl	800282c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00c      	beq.n	80050ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80050a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f97c 	bl	80053a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00c      	beq.n	80050d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d007      	beq.n	80050d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f834 	bl	8005138 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00c      	beq.n	80050f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f003 0320 	and.w	r3, r3, #32
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0220 	mvn.w	r2, #32
 80050ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f94e 	bl	8005390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050f4:	bf00      	nop
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a43      	ldr	r2, [pc, #268]	@ (800526c <TIM_Base_SetConfig+0x120>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d013      	beq.n	800518c <TIM_Base_SetConfig+0x40>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800516a:	d00f      	beq.n	800518c <TIM_Base_SetConfig+0x40>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a40      	ldr	r2, [pc, #256]	@ (8005270 <TIM_Base_SetConfig+0x124>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00b      	beq.n	800518c <TIM_Base_SetConfig+0x40>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a3f      	ldr	r2, [pc, #252]	@ (8005274 <TIM_Base_SetConfig+0x128>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d007      	beq.n	800518c <TIM_Base_SetConfig+0x40>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a3e      	ldr	r2, [pc, #248]	@ (8005278 <TIM_Base_SetConfig+0x12c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_Base_SetConfig+0x40>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a3d      	ldr	r2, [pc, #244]	@ (800527c <TIM_Base_SetConfig+0x130>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d108      	bne.n	800519e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a32      	ldr	r2, [pc, #200]	@ (800526c <TIM_Base_SetConfig+0x120>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d02b      	beq.n	80051fe <TIM_Base_SetConfig+0xb2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ac:	d027      	beq.n	80051fe <TIM_Base_SetConfig+0xb2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005270 <TIM_Base_SetConfig+0x124>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d023      	beq.n	80051fe <TIM_Base_SetConfig+0xb2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005274 <TIM_Base_SetConfig+0x128>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d01f      	beq.n	80051fe <TIM_Base_SetConfig+0xb2>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005278 <TIM_Base_SetConfig+0x12c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d01b      	beq.n	80051fe <TIM_Base_SetConfig+0xb2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a2c      	ldr	r2, [pc, #176]	@ (800527c <TIM_Base_SetConfig+0x130>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d017      	beq.n	80051fe <TIM_Base_SetConfig+0xb2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a2b      	ldr	r2, [pc, #172]	@ (8005280 <TIM_Base_SetConfig+0x134>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d013      	beq.n	80051fe <TIM_Base_SetConfig+0xb2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005284 <TIM_Base_SetConfig+0x138>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00f      	beq.n	80051fe <TIM_Base_SetConfig+0xb2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a29      	ldr	r2, [pc, #164]	@ (8005288 <TIM_Base_SetConfig+0x13c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00b      	beq.n	80051fe <TIM_Base_SetConfig+0xb2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a28      	ldr	r2, [pc, #160]	@ (800528c <TIM_Base_SetConfig+0x140>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d007      	beq.n	80051fe <TIM_Base_SetConfig+0xb2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a27      	ldr	r2, [pc, #156]	@ (8005290 <TIM_Base_SetConfig+0x144>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d003      	beq.n	80051fe <TIM_Base_SetConfig+0xb2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a26      	ldr	r2, [pc, #152]	@ (8005294 <TIM_Base_SetConfig+0x148>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d108      	bne.n	8005210 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4313      	orrs	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a0e      	ldr	r2, [pc, #56]	@ (800526c <TIM_Base_SetConfig+0x120>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d003      	beq.n	800523e <TIM_Base_SetConfig+0xf2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a10      	ldr	r2, [pc, #64]	@ (800527c <TIM_Base_SetConfig+0x130>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d103      	bne.n	8005246 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f043 0204 	orr.w	r2, r3, #4
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	601a      	str	r2, [r3, #0]
}
 800525e:	bf00      	nop
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40010000 	.word	0x40010000
 8005270:	40000400 	.word	0x40000400
 8005274:	40000800 	.word	0x40000800
 8005278:	40000c00 	.word	0x40000c00
 800527c:	40010400 	.word	0x40010400
 8005280:	40014000 	.word	0x40014000
 8005284:	40014400 	.word	0x40014400
 8005288:	40014800 	.word	0x40014800
 800528c:	40001800 	.word	0x40001800
 8005290:	40001c00 	.word	0x40001c00
 8005294:	40002000 	.word	0x40002000

08005298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e05a      	b.n	8005366 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a21      	ldr	r2, [pc, #132]	@ (8005374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d022      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052fc:	d01d      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1d      	ldr	r2, [pc, #116]	@ (8005378 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d018      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a1b      	ldr	r2, [pc, #108]	@ (800537c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a1a      	ldr	r2, [pc, #104]	@ (8005380 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00e      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a18      	ldr	r2, [pc, #96]	@ (8005384 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d009      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a17      	ldr	r2, [pc, #92]	@ (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d004      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a15      	ldr	r2, [pc, #84]	@ (800538c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d10c      	bne.n	8005354 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	4313      	orrs	r3, r2
 800534a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40010000 	.word	0x40010000
 8005378:	40000400 	.word	0x40000400
 800537c:	40000800 	.word	0x40000800
 8005380:	40000c00 	.word	0x40000c00
 8005384:	40010400 	.word	0x40010400
 8005388:	40014000 	.word	0x40014000
 800538c:	40001800 	.word	0x40001800

08005390 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e042      	b.n	8005450 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d106      	bne.n	80053e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fd f990 	bl	8002704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2224      	movs	r2, #36	@ 0x24
 80053e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fdd3 	bl	8005fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005410:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695a      	ldr	r2, [r3, #20]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005420:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005430:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08a      	sub	sp, #40	@ 0x28
 800545c:	af02      	add	r7, sp, #8
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	603b      	str	r3, [r7, #0]
 8005464:	4613      	mov	r3, r2
 8005466:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b20      	cmp	r3, #32
 8005476:	d175      	bne.n	8005564 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <HAL_UART_Transmit+0x2c>
 800547e:	88fb      	ldrh	r3, [r7, #6]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e06e      	b.n	8005566 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2221      	movs	r2, #33	@ 0x21
 8005492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005496:	f7fd fe07 	bl	80030a8 <HAL_GetTick>
 800549a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	88fa      	ldrh	r2, [r7, #6]
 80054a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	88fa      	ldrh	r2, [r7, #6]
 80054a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b0:	d108      	bne.n	80054c4 <HAL_UART_Transmit+0x6c>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d104      	bne.n	80054c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	61bb      	str	r3, [r7, #24]
 80054c2:	e003      	b.n	80054cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054c8:	2300      	movs	r3, #0
 80054ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054cc:	e02e      	b.n	800552c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2200      	movs	r2, #0
 80054d6:	2180      	movs	r1, #128	@ 0x80
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 fb37 	bl	8005b4c <UART_WaitOnFlagUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d005      	beq.n	80054f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e03a      	b.n	8005566 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10b      	bne.n	800550e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005504:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	3302      	adds	r3, #2
 800550a:	61bb      	str	r3, [r7, #24]
 800550c:	e007      	b.n	800551e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	781a      	ldrb	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	3301      	adds	r3, #1
 800551c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1cb      	bne.n	80054ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2200      	movs	r2, #0
 800553e:	2140      	movs	r1, #64	@ 0x40
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 fb03 	bl	8005b4c <UART_WaitOnFlagUntilTimeout>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d005      	beq.n	8005558 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e006      	b.n	8005566 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005560:	2300      	movs	r3, #0
 8005562:	e000      	b.n	8005566 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005564:	2302      	movs	r3, #2
  }
}
 8005566:	4618      	mov	r0, r3
 8005568:	3720      	adds	r7, #32
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b084      	sub	sp, #16
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	4613      	mov	r3, r2
 800557a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b20      	cmp	r3, #32
 8005586:	d112      	bne.n	80055ae <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <HAL_UART_Receive_IT+0x26>
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e00b      	b.n	80055b0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800559e:	88fb      	ldrh	r3, [r7, #6]
 80055a0:	461a      	mov	r2, r3
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 fb2a 	bl	8005bfe <UART_Start_Receive_IT>
 80055aa:	4603      	mov	r3, r0
 80055ac:	e000      	b.n	80055b0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80055ae:	2302      	movs	r3, #2
  }
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b0ba      	sub	sp, #232	@ 0xe8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80055de:	2300      	movs	r3, #0
 80055e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80055f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10f      	bne.n	800561e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	d009      	beq.n	800561e <HAL_UART_IRQHandler+0x66>
 800560a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fc07 	bl	8005e2a <UART_Receive_IT>
      return;
 800561c:	e273      	b.n	8005b06 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800561e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 80de 	beq.w	80057e4 <HAL_UART_IRQHandler+0x22c>
 8005628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d106      	bne.n	8005642 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005638:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 80d1 	beq.w	80057e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00b      	beq.n	8005666 <HAL_UART_IRQHandler+0xae>
 800564e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005656:	2b00      	cmp	r3, #0
 8005658:	d005      	beq.n	8005666 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800565e:	f043 0201 	orr.w	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <HAL_UART_IRQHandler+0xd2>
 8005672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d005      	beq.n	800568a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005682:	f043 0202 	orr.w	r2, r3, #2
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800568a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <HAL_UART_IRQHandler+0xf6>
 8005696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d005      	beq.n	80056ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a6:	f043 0204 	orr.w	r2, r3, #4
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d011      	beq.n	80056de <HAL_UART_IRQHandler+0x126>
 80056ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d105      	bne.n	80056d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056d6:	f043 0208 	orr.w	r2, r3, #8
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 820a 	beq.w	8005afc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d008      	beq.n	8005706 <HAL_UART_IRQHandler+0x14e>
 80056f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fb92 	bl	8005e2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005710:	2b40      	cmp	r3, #64	@ 0x40
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d103      	bne.n	8005732 <HAL_UART_IRQHandler+0x17a>
 800572a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800572e:	2b00      	cmp	r3, #0
 8005730:	d04f      	beq.n	80057d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fa9d 	bl	8005c72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005742:	2b40      	cmp	r3, #64	@ 0x40
 8005744:	d141      	bne.n	80057ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3314      	adds	r3, #20
 800574c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800575c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005760:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005764:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3314      	adds	r3, #20
 800576e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005772:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005776:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800577e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800578a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1d9      	bne.n	8005746 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d013      	beq.n	80057c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579e:	4a8a      	ldr	r2, [pc, #552]	@ (80059c8 <HAL_UART_IRQHandler+0x410>)
 80057a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fd fe2f 	bl	800340a <HAL_DMA_Abort_IT>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d016      	beq.n	80057e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057bc:	4610      	mov	r0, r2
 80057be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c0:	e00e      	b.n	80057e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f9ac 	bl	8005b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c8:	e00a      	b.n	80057e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f9a8 	bl	8005b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d0:	e006      	b.n	80057e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f9a4 	bl	8005b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80057de:	e18d      	b.n	8005afc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e0:	bf00      	nop
    return;
 80057e2:	e18b      	b.n	8005afc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	f040 8167 	bne.w	8005abc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f2:	f003 0310 	and.w	r3, r3, #16
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 8160 	beq.w	8005abc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80057fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 8159 	beq.w	8005abc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800580a:	2300      	movs	r3, #0
 800580c:	60bb      	str	r3, [r7, #8]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	60bb      	str	r3, [r7, #8]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800582a:	2b40      	cmp	r3, #64	@ 0x40
 800582c:	f040 80ce 	bne.w	80059cc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800583c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 80a9 	beq.w	8005998 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800584a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800584e:	429a      	cmp	r2, r3
 8005850:	f080 80a2 	bcs.w	8005998 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800585a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005866:	f000 8088 	beq.w	800597a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	330c      	adds	r3, #12
 8005870:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005880:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005884:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005888:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	330c      	adds	r3, #12
 8005892:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005896:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800589a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80058a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80058ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1d9      	bne.n	800586a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3314      	adds	r3, #20
 80058bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058c8:	f023 0301 	bic.w	r3, r3, #1
 80058cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3314      	adds	r3, #20
 80058d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80058de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80058ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e1      	bne.n	80058b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3314      	adds	r3, #20
 80058f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005902:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005908:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3314      	adds	r3, #20
 8005912:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005916:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005918:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800591c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005924:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e3      	bne.n	80058f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	330c      	adds	r3, #12
 800593e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005942:	e853 3f00 	ldrex	r3, [r3]
 8005946:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005948:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800594a:	f023 0310 	bic.w	r3, r3, #16
 800594e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	330c      	adds	r3, #12
 8005958:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800595c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800595e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005962:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005964:	e841 2300 	strex	r3, r2, [r1]
 8005968:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800596a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e3      	bne.n	8005938 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005974:	4618      	mov	r0, r3
 8005976:	f7fd fcd8 	bl	800332a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2202      	movs	r2, #2
 800597e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005988:	b29b      	uxth	r3, r3
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	b29b      	uxth	r3, r3
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f8cf 	bl	8005b34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005996:	e0b3      	b.n	8005b00 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800599c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059a0:	429a      	cmp	r2, r3
 80059a2:	f040 80ad 	bne.w	8005b00 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059b0:	f040 80a6 	bne.w	8005b00 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f8b7 	bl	8005b34 <HAL_UARTEx_RxEventCallback>
      return;
 80059c6:	e09b      	b.n	8005b00 <HAL_UART_IRQHandler+0x548>
 80059c8:	08005d39 	.word	0x08005d39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 808e 	beq.w	8005b04 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80059e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 8089 	beq.w	8005b04 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	330c      	adds	r3, #12
 80059f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	330c      	adds	r3, #12
 8005a12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a16:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e3      	bne.n	80059f2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3314      	adds	r3, #20
 8005a30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	623b      	str	r3, [r7, #32]
   return(result);
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	f023 0301 	bic.w	r3, r3, #1
 8005a40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3314      	adds	r3, #20
 8005a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a56:	e841 2300 	strex	r3, r2, [r1]
 8005a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1e3      	bne.n	8005a2a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	330c      	adds	r3, #12
 8005a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0310 	bic.w	r3, r3, #16
 8005a86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	330c      	adds	r3, #12
 8005a90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005a94:	61fa      	str	r2, [r7, #28]
 8005a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	69b9      	ldr	r1, [r7, #24]
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e3      	bne.n	8005a70 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005aae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f83d 	bl	8005b34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005aba:	e023      	b.n	8005b04 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d009      	beq.n	8005adc <HAL_UART_IRQHandler+0x524>
 8005ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f940 	bl	8005d5a <UART_Transmit_IT>
    return;
 8005ada:	e014      	b.n	8005b06 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00e      	beq.n	8005b06 <HAL_UART_IRQHandler+0x54e>
 8005ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f980 	bl	8005dfa <UART_EndTransmit_IT>
    return;
 8005afa:	e004      	b.n	8005b06 <HAL_UART_IRQHandler+0x54e>
    return;
 8005afc:	bf00      	nop
 8005afe:	e002      	b.n	8005b06 <HAL_UART_IRQHandler+0x54e>
      return;
 8005b00:	bf00      	nop
 8005b02:	e000      	b.n	8005b06 <HAL_UART_IRQHandler+0x54e>
      return;
 8005b04:	bf00      	nop
  }
}
 8005b06:	37e8      	adds	r7, #232	@ 0xe8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b5c:	e03b      	b.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b64:	d037      	beq.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b66:	f7fd fa9f 	bl	80030a8 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	6a3a      	ldr	r2, [r7, #32]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d302      	bcc.n	8005b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e03a      	b.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f003 0304 	and.w	r3, r3, #4
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d023      	beq.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	2b80      	cmp	r3, #128	@ 0x80
 8005b92:	d020      	beq.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b40      	cmp	r3, #64	@ 0x40
 8005b98:	d01d      	beq.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d116      	bne.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f857 	bl	8005c72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2208      	movs	r2, #8
 8005bc8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e00f      	b.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	4013      	ands	r3, r2
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	bf0c      	ite	eq
 8005be6:	2301      	moveq	r3, #1
 8005be8:	2300      	movne	r3, #0
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	79fb      	ldrb	r3, [r7, #7]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d0b4      	beq.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	88fa      	ldrh	r2, [r7, #6]
 8005c16:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	88fa      	ldrh	r2, [r7, #6]
 8005c1c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2222      	movs	r2, #34	@ 0x22
 8005c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d007      	beq.n	8005c44 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c42:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695a      	ldr	r2, [r3, #20]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0201 	orr.w	r2, r2, #1
 8005c52:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0220 	orr.w	r2, r2, #32
 8005c62:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b095      	sub	sp, #84	@ 0x54
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	330c      	adds	r3, #12
 8005c80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	330c      	adds	r3, #12
 8005c98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ca0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e5      	bne.n	8005c7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3314      	adds	r3, #20
 8005cb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	f023 0301 	bic.w	r3, r3, #1
 8005cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3314      	adds	r3, #20
 8005ccc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e5      	bne.n	8005cae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d119      	bne.n	8005d1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	330c      	adds	r3, #12
 8005cf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	e853 3f00 	ldrex	r3, [r3]
 8005cf8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f023 0310 	bic.w	r3, r3, #16
 8005d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	330c      	adds	r3, #12
 8005d08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d0a:	61ba      	str	r2, [r7, #24]
 8005d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	6979      	ldr	r1, [r7, #20]
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	613b      	str	r3, [r7, #16]
   return(result);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e5      	bne.n	8005cea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d2c:	bf00      	nop
 8005d2e:	3754      	adds	r7, #84	@ 0x54
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f7ff fee7 	bl	8005b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b21      	cmp	r3, #33	@ 0x21
 8005d6c:	d13e      	bne.n	8005dec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d76:	d114      	bne.n	8005da2 <UART_Transmit_IT+0x48>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d110      	bne.n	8005da2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	1c9a      	adds	r2, r3, #2
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	621a      	str	r2, [r3, #32]
 8005da0:	e008      	b.n	8005db4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	1c59      	adds	r1, r3, #1
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6211      	str	r1, [r2, #32]
 8005dac:	781a      	ldrb	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10f      	bne.n	8005de8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005dd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005de6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	e000      	b.n	8005dee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005dec:	2302      	movs	r3, #2
  }
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff fe76 	bl	8005b0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b08c      	sub	sp, #48	@ 0x30
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005e32:	2300      	movs	r3, #0
 8005e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b22      	cmp	r3, #34	@ 0x22
 8005e44:	f040 80aa 	bne.w	8005f9c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e50:	d115      	bne.n	8005e7e <UART_Receive_IT+0x54>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d111      	bne.n	8005e7e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e76:	1c9a      	adds	r2, r3, #2
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e7c:	e024      	b.n	8005ec8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e8c:	d007      	beq.n	8005e9e <UART_Receive_IT+0x74>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10a      	bne.n	8005eac <UART_Receive_IT+0x82>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	e008      	b.n	8005ebe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ebc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d15d      	bne.n	8005f98 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 0220 	bic.w	r2, r2, #32
 8005eea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005efa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695a      	ldr	r2, [r3, #20]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0201 	bic.w	r2, r2, #1
 8005f0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d135      	bne.n	8005f8e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	330c      	adds	r3, #12
 8005f2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	e853 3f00 	ldrex	r3, [r3]
 8005f36:	613b      	str	r3, [r7, #16]
   return(result);
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f023 0310 	bic.w	r3, r3, #16
 8005f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	330c      	adds	r3, #12
 8005f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f48:	623a      	str	r2, [r7, #32]
 8005f4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4c:	69f9      	ldr	r1, [r7, #28]
 8005f4e:	6a3a      	ldr	r2, [r7, #32]
 8005f50:	e841 2300 	strex	r3, r2, [r1]
 8005f54:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1e5      	bne.n	8005f28 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0310 	and.w	r3, r3, #16
 8005f66:	2b10      	cmp	r3, #16
 8005f68:	d10a      	bne.n	8005f80 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7ff fdd4 	bl	8005b34 <HAL_UARTEx_RxEventCallback>
 8005f8c:	e002      	b.n	8005f94 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fc f84c 	bl	800202c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	e002      	b.n	8005f9e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e000      	b.n	8005f9e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005f9c:	2302      	movs	r3, #2
  }
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3730      	adds	r7, #48	@ 0x30
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fac:	b0c0      	sub	sp, #256	@ 0x100
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc4:	68d9      	ldr	r1, [r3, #12]
 8005fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	ea40 0301 	orr.w	r3, r0, r1
 8005fd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006000:	f021 010c 	bic.w	r1, r1, #12
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800600e:	430b      	orrs	r3, r1
 8006010:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800601e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006022:	6999      	ldr	r1, [r3, #24]
 8006024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	ea40 0301 	orr.w	r3, r0, r1
 800602e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	4b8f      	ldr	r3, [pc, #572]	@ (8006274 <UART_SetConfig+0x2cc>)
 8006038:	429a      	cmp	r2, r3
 800603a:	d005      	beq.n	8006048 <UART_SetConfig+0xa0>
 800603c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	4b8d      	ldr	r3, [pc, #564]	@ (8006278 <UART_SetConfig+0x2d0>)
 8006044:	429a      	cmp	r2, r3
 8006046:	d104      	bne.n	8006052 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006048:	f7fe f8b4 	bl	80041b4 <HAL_RCC_GetPCLK2Freq>
 800604c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006050:	e003      	b.n	800605a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006052:	f7fe f89b 	bl	800418c <HAL_RCC_GetPCLK1Freq>
 8006056:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006064:	f040 810c 	bne.w	8006280 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800606c:	2200      	movs	r2, #0
 800606e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006072:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006076:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800607a:	4622      	mov	r2, r4
 800607c:	462b      	mov	r3, r5
 800607e:	1891      	adds	r1, r2, r2
 8006080:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006082:	415b      	adcs	r3, r3
 8006084:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006086:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800608a:	4621      	mov	r1, r4
 800608c:	eb12 0801 	adds.w	r8, r2, r1
 8006090:	4629      	mov	r1, r5
 8006092:	eb43 0901 	adc.w	r9, r3, r1
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	f04f 0300 	mov.w	r3, #0
 800609e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060aa:	4690      	mov	r8, r2
 80060ac:	4699      	mov	r9, r3
 80060ae:	4623      	mov	r3, r4
 80060b0:	eb18 0303 	adds.w	r3, r8, r3
 80060b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060b8:	462b      	mov	r3, r5
 80060ba:	eb49 0303 	adc.w	r3, r9, r3
 80060be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80060d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060d6:	460b      	mov	r3, r1
 80060d8:	18db      	adds	r3, r3, r3
 80060da:	653b      	str	r3, [r7, #80]	@ 0x50
 80060dc:	4613      	mov	r3, r2
 80060de:	eb42 0303 	adc.w	r3, r2, r3
 80060e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80060e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80060e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80060ec:	f7fa fdec 	bl	8000cc8 <__aeabi_uldivmod>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4b61      	ldr	r3, [pc, #388]	@ (800627c <UART_SetConfig+0x2d4>)
 80060f6:	fba3 2302 	umull	r2, r3, r3, r2
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	011c      	lsls	r4, r3, #4
 80060fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006102:	2200      	movs	r2, #0
 8006104:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006108:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800610c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006110:	4642      	mov	r2, r8
 8006112:	464b      	mov	r3, r9
 8006114:	1891      	adds	r1, r2, r2
 8006116:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006118:	415b      	adcs	r3, r3
 800611a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800611c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006120:	4641      	mov	r1, r8
 8006122:	eb12 0a01 	adds.w	sl, r2, r1
 8006126:	4649      	mov	r1, r9
 8006128:	eb43 0b01 	adc.w	fp, r3, r1
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006138:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800613c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006140:	4692      	mov	sl, r2
 8006142:	469b      	mov	fp, r3
 8006144:	4643      	mov	r3, r8
 8006146:	eb1a 0303 	adds.w	r3, sl, r3
 800614a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800614e:	464b      	mov	r3, r9
 8006150:	eb4b 0303 	adc.w	r3, fp, r3
 8006154:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006164:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006168:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800616c:	460b      	mov	r3, r1
 800616e:	18db      	adds	r3, r3, r3
 8006170:	643b      	str	r3, [r7, #64]	@ 0x40
 8006172:	4613      	mov	r3, r2
 8006174:	eb42 0303 	adc.w	r3, r2, r3
 8006178:	647b      	str	r3, [r7, #68]	@ 0x44
 800617a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800617e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006182:	f7fa fda1 	bl	8000cc8 <__aeabi_uldivmod>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	4611      	mov	r1, r2
 800618c:	4b3b      	ldr	r3, [pc, #236]	@ (800627c <UART_SetConfig+0x2d4>)
 800618e:	fba3 2301 	umull	r2, r3, r3, r1
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	2264      	movs	r2, #100	@ 0x64
 8006196:	fb02 f303 	mul.w	r3, r2, r3
 800619a:	1acb      	subs	r3, r1, r3
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80061a2:	4b36      	ldr	r3, [pc, #216]	@ (800627c <UART_SetConfig+0x2d4>)
 80061a4:	fba3 2302 	umull	r2, r3, r3, r2
 80061a8:	095b      	lsrs	r3, r3, #5
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80061b0:	441c      	add	r4, r3
 80061b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80061c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80061c4:	4642      	mov	r2, r8
 80061c6:	464b      	mov	r3, r9
 80061c8:	1891      	adds	r1, r2, r2
 80061ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80061cc:	415b      	adcs	r3, r3
 80061ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80061d4:	4641      	mov	r1, r8
 80061d6:	1851      	adds	r1, r2, r1
 80061d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80061da:	4649      	mov	r1, r9
 80061dc:	414b      	adcs	r3, r1
 80061de:	637b      	str	r3, [r7, #52]	@ 0x34
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80061ec:	4659      	mov	r1, fp
 80061ee:	00cb      	lsls	r3, r1, #3
 80061f0:	4651      	mov	r1, sl
 80061f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061f6:	4651      	mov	r1, sl
 80061f8:	00ca      	lsls	r2, r1, #3
 80061fa:	4610      	mov	r0, r2
 80061fc:	4619      	mov	r1, r3
 80061fe:	4603      	mov	r3, r0
 8006200:	4642      	mov	r2, r8
 8006202:	189b      	adds	r3, r3, r2
 8006204:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006208:	464b      	mov	r3, r9
 800620a:	460a      	mov	r2, r1
 800620c:	eb42 0303 	adc.w	r3, r2, r3
 8006210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006220:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006224:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006228:	460b      	mov	r3, r1
 800622a:	18db      	adds	r3, r3, r3
 800622c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800622e:	4613      	mov	r3, r2
 8006230:	eb42 0303 	adc.w	r3, r2, r3
 8006234:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800623a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800623e:	f7fa fd43 	bl	8000cc8 <__aeabi_uldivmod>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4b0d      	ldr	r3, [pc, #52]	@ (800627c <UART_SetConfig+0x2d4>)
 8006248:	fba3 1302 	umull	r1, r3, r3, r2
 800624c:	095b      	lsrs	r3, r3, #5
 800624e:	2164      	movs	r1, #100	@ 0x64
 8006250:	fb01 f303 	mul.w	r3, r1, r3
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	3332      	adds	r3, #50	@ 0x32
 800625a:	4a08      	ldr	r2, [pc, #32]	@ (800627c <UART_SetConfig+0x2d4>)
 800625c:	fba2 2303 	umull	r2, r3, r2, r3
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	f003 0207 	and.w	r2, r3, #7
 8006266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4422      	add	r2, r4
 800626e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006270:	e106      	b.n	8006480 <UART_SetConfig+0x4d8>
 8006272:	bf00      	nop
 8006274:	40011000 	.word	0x40011000
 8006278:	40011400 	.word	0x40011400
 800627c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006284:	2200      	movs	r2, #0
 8006286:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800628a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800628e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006292:	4642      	mov	r2, r8
 8006294:	464b      	mov	r3, r9
 8006296:	1891      	adds	r1, r2, r2
 8006298:	6239      	str	r1, [r7, #32]
 800629a:	415b      	adcs	r3, r3
 800629c:	627b      	str	r3, [r7, #36]	@ 0x24
 800629e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062a2:	4641      	mov	r1, r8
 80062a4:	1854      	adds	r4, r2, r1
 80062a6:	4649      	mov	r1, r9
 80062a8:	eb43 0501 	adc.w	r5, r3, r1
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	00eb      	lsls	r3, r5, #3
 80062b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062ba:	00e2      	lsls	r2, r4, #3
 80062bc:	4614      	mov	r4, r2
 80062be:	461d      	mov	r5, r3
 80062c0:	4643      	mov	r3, r8
 80062c2:	18e3      	adds	r3, r4, r3
 80062c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80062c8:	464b      	mov	r3, r9
 80062ca:	eb45 0303 	adc.w	r3, r5, r3
 80062ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80062ee:	4629      	mov	r1, r5
 80062f0:	008b      	lsls	r3, r1, #2
 80062f2:	4621      	mov	r1, r4
 80062f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062f8:	4621      	mov	r1, r4
 80062fa:	008a      	lsls	r2, r1, #2
 80062fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006300:	f7fa fce2 	bl	8000cc8 <__aeabi_uldivmod>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	4b60      	ldr	r3, [pc, #384]	@ (800648c <UART_SetConfig+0x4e4>)
 800630a:	fba3 2302 	umull	r2, r3, r3, r2
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	011c      	lsls	r4, r3, #4
 8006312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006316:	2200      	movs	r2, #0
 8006318:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800631c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006320:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006324:	4642      	mov	r2, r8
 8006326:	464b      	mov	r3, r9
 8006328:	1891      	adds	r1, r2, r2
 800632a:	61b9      	str	r1, [r7, #24]
 800632c:	415b      	adcs	r3, r3
 800632e:	61fb      	str	r3, [r7, #28]
 8006330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006334:	4641      	mov	r1, r8
 8006336:	1851      	adds	r1, r2, r1
 8006338:	6139      	str	r1, [r7, #16]
 800633a:	4649      	mov	r1, r9
 800633c:	414b      	adcs	r3, r1
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800634c:	4659      	mov	r1, fp
 800634e:	00cb      	lsls	r3, r1, #3
 8006350:	4651      	mov	r1, sl
 8006352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006356:	4651      	mov	r1, sl
 8006358:	00ca      	lsls	r2, r1, #3
 800635a:	4610      	mov	r0, r2
 800635c:	4619      	mov	r1, r3
 800635e:	4603      	mov	r3, r0
 8006360:	4642      	mov	r2, r8
 8006362:	189b      	adds	r3, r3, r2
 8006364:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006368:	464b      	mov	r3, r9
 800636a:	460a      	mov	r2, r1
 800636c:	eb42 0303 	adc.w	r3, r2, r3
 8006370:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800637e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006380:	f04f 0200 	mov.w	r2, #0
 8006384:	f04f 0300 	mov.w	r3, #0
 8006388:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800638c:	4649      	mov	r1, r9
 800638e:	008b      	lsls	r3, r1, #2
 8006390:	4641      	mov	r1, r8
 8006392:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006396:	4641      	mov	r1, r8
 8006398:	008a      	lsls	r2, r1, #2
 800639a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800639e:	f7fa fc93 	bl	8000cc8 <__aeabi_uldivmod>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	4611      	mov	r1, r2
 80063a8:	4b38      	ldr	r3, [pc, #224]	@ (800648c <UART_SetConfig+0x4e4>)
 80063aa:	fba3 2301 	umull	r2, r3, r3, r1
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	2264      	movs	r2, #100	@ 0x64
 80063b2:	fb02 f303 	mul.w	r3, r2, r3
 80063b6:	1acb      	subs	r3, r1, r3
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	3332      	adds	r3, #50	@ 0x32
 80063bc:	4a33      	ldr	r2, [pc, #204]	@ (800648c <UART_SetConfig+0x4e4>)
 80063be:	fba2 2303 	umull	r2, r3, r2, r3
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063c8:	441c      	add	r4, r3
 80063ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063ce:	2200      	movs	r2, #0
 80063d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80063d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80063d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80063d8:	4642      	mov	r2, r8
 80063da:	464b      	mov	r3, r9
 80063dc:	1891      	adds	r1, r2, r2
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	415b      	adcs	r3, r3
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063e8:	4641      	mov	r1, r8
 80063ea:	1851      	adds	r1, r2, r1
 80063ec:	6039      	str	r1, [r7, #0]
 80063ee:	4649      	mov	r1, r9
 80063f0:	414b      	adcs	r3, r1
 80063f2:	607b      	str	r3, [r7, #4]
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	f04f 0300 	mov.w	r3, #0
 80063fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006400:	4659      	mov	r1, fp
 8006402:	00cb      	lsls	r3, r1, #3
 8006404:	4651      	mov	r1, sl
 8006406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800640a:	4651      	mov	r1, sl
 800640c:	00ca      	lsls	r2, r1, #3
 800640e:	4610      	mov	r0, r2
 8006410:	4619      	mov	r1, r3
 8006412:	4603      	mov	r3, r0
 8006414:	4642      	mov	r2, r8
 8006416:	189b      	adds	r3, r3, r2
 8006418:	66bb      	str	r3, [r7, #104]	@ 0x68
 800641a:	464b      	mov	r3, r9
 800641c:	460a      	mov	r2, r1
 800641e:	eb42 0303 	adc.w	r3, r2, r3
 8006422:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	663b      	str	r3, [r7, #96]	@ 0x60
 800642e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800643c:	4649      	mov	r1, r9
 800643e:	008b      	lsls	r3, r1, #2
 8006440:	4641      	mov	r1, r8
 8006442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006446:	4641      	mov	r1, r8
 8006448:	008a      	lsls	r2, r1, #2
 800644a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800644e:	f7fa fc3b 	bl	8000cc8 <__aeabi_uldivmod>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	4b0d      	ldr	r3, [pc, #52]	@ (800648c <UART_SetConfig+0x4e4>)
 8006458:	fba3 1302 	umull	r1, r3, r3, r2
 800645c:	095b      	lsrs	r3, r3, #5
 800645e:	2164      	movs	r1, #100	@ 0x64
 8006460:	fb01 f303 	mul.w	r3, r1, r3
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	3332      	adds	r3, #50	@ 0x32
 800646a:	4a08      	ldr	r2, [pc, #32]	@ (800648c <UART_SetConfig+0x4e4>)
 800646c:	fba2 2303 	umull	r2, r3, r2, r3
 8006470:	095b      	lsrs	r3, r3, #5
 8006472:	f003 020f 	and.w	r2, r3, #15
 8006476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4422      	add	r2, r4
 800647e:	609a      	str	r2, [r3, #8]
}
 8006480:	bf00      	nop
 8006482:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006486:	46bd      	mov	sp, r7
 8006488:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800648c:	51eb851f 	.word	0x51eb851f

08006490 <__cvt>:
 8006490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006494:	ec57 6b10 	vmov	r6, r7, d0
 8006498:	2f00      	cmp	r7, #0
 800649a:	460c      	mov	r4, r1
 800649c:	4619      	mov	r1, r3
 800649e:	463b      	mov	r3, r7
 80064a0:	bfbb      	ittet	lt
 80064a2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80064a6:	461f      	movlt	r7, r3
 80064a8:	2300      	movge	r3, #0
 80064aa:	232d      	movlt	r3, #45	@ 0x2d
 80064ac:	700b      	strb	r3, [r1, #0]
 80064ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064b0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80064b4:	4691      	mov	r9, r2
 80064b6:	f023 0820 	bic.w	r8, r3, #32
 80064ba:	bfbc      	itt	lt
 80064bc:	4632      	movlt	r2, r6
 80064be:	4616      	movlt	r6, r2
 80064c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064c4:	d005      	beq.n	80064d2 <__cvt+0x42>
 80064c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80064ca:	d100      	bne.n	80064ce <__cvt+0x3e>
 80064cc:	3401      	adds	r4, #1
 80064ce:	2102      	movs	r1, #2
 80064d0:	e000      	b.n	80064d4 <__cvt+0x44>
 80064d2:	2103      	movs	r1, #3
 80064d4:	ab03      	add	r3, sp, #12
 80064d6:	9301      	str	r3, [sp, #4]
 80064d8:	ab02      	add	r3, sp, #8
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	ec47 6b10 	vmov	d0, r6, r7
 80064e0:	4653      	mov	r3, sl
 80064e2:	4622      	mov	r2, r4
 80064e4:	f001 f91c 	bl	8007720 <_dtoa_r>
 80064e8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80064ec:	4605      	mov	r5, r0
 80064ee:	d119      	bne.n	8006524 <__cvt+0x94>
 80064f0:	f019 0f01 	tst.w	r9, #1
 80064f4:	d00e      	beq.n	8006514 <__cvt+0x84>
 80064f6:	eb00 0904 	add.w	r9, r0, r4
 80064fa:	2200      	movs	r2, #0
 80064fc:	2300      	movs	r3, #0
 80064fe:	4630      	mov	r0, r6
 8006500:	4639      	mov	r1, r7
 8006502:	f7fa fb01 	bl	8000b08 <__aeabi_dcmpeq>
 8006506:	b108      	cbz	r0, 800650c <__cvt+0x7c>
 8006508:	f8cd 900c 	str.w	r9, [sp, #12]
 800650c:	2230      	movs	r2, #48	@ 0x30
 800650e:	9b03      	ldr	r3, [sp, #12]
 8006510:	454b      	cmp	r3, r9
 8006512:	d31e      	bcc.n	8006552 <__cvt+0xc2>
 8006514:	9b03      	ldr	r3, [sp, #12]
 8006516:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006518:	1b5b      	subs	r3, r3, r5
 800651a:	4628      	mov	r0, r5
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	b004      	add	sp, #16
 8006520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006524:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006528:	eb00 0904 	add.w	r9, r0, r4
 800652c:	d1e5      	bne.n	80064fa <__cvt+0x6a>
 800652e:	7803      	ldrb	r3, [r0, #0]
 8006530:	2b30      	cmp	r3, #48	@ 0x30
 8006532:	d10a      	bne.n	800654a <__cvt+0xba>
 8006534:	2200      	movs	r2, #0
 8006536:	2300      	movs	r3, #0
 8006538:	4630      	mov	r0, r6
 800653a:	4639      	mov	r1, r7
 800653c:	f7fa fae4 	bl	8000b08 <__aeabi_dcmpeq>
 8006540:	b918      	cbnz	r0, 800654a <__cvt+0xba>
 8006542:	f1c4 0401 	rsb	r4, r4, #1
 8006546:	f8ca 4000 	str.w	r4, [sl]
 800654a:	f8da 3000 	ldr.w	r3, [sl]
 800654e:	4499      	add	r9, r3
 8006550:	e7d3      	b.n	80064fa <__cvt+0x6a>
 8006552:	1c59      	adds	r1, r3, #1
 8006554:	9103      	str	r1, [sp, #12]
 8006556:	701a      	strb	r2, [r3, #0]
 8006558:	e7d9      	b.n	800650e <__cvt+0x7e>

0800655a <__exponent>:
 800655a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800655c:	2900      	cmp	r1, #0
 800655e:	bfba      	itte	lt
 8006560:	4249      	neglt	r1, r1
 8006562:	232d      	movlt	r3, #45	@ 0x2d
 8006564:	232b      	movge	r3, #43	@ 0x2b
 8006566:	2909      	cmp	r1, #9
 8006568:	7002      	strb	r2, [r0, #0]
 800656a:	7043      	strb	r3, [r0, #1]
 800656c:	dd29      	ble.n	80065c2 <__exponent+0x68>
 800656e:	f10d 0307 	add.w	r3, sp, #7
 8006572:	461d      	mov	r5, r3
 8006574:	270a      	movs	r7, #10
 8006576:	461a      	mov	r2, r3
 8006578:	fbb1 f6f7 	udiv	r6, r1, r7
 800657c:	fb07 1416 	mls	r4, r7, r6, r1
 8006580:	3430      	adds	r4, #48	@ 0x30
 8006582:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006586:	460c      	mov	r4, r1
 8006588:	2c63      	cmp	r4, #99	@ 0x63
 800658a:	f103 33ff 	add.w	r3, r3, #4294967295
 800658e:	4631      	mov	r1, r6
 8006590:	dcf1      	bgt.n	8006576 <__exponent+0x1c>
 8006592:	3130      	adds	r1, #48	@ 0x30
 8006594:	1e94      	subs	r4, r2, #2
 8006596:	f803 1c01 	strb.w	r1, [r3, #-1]
 800659a:	1c41      	adds	r1, r0, #1
 800659c:	4623      	mov	r3, r4
 800659e:	42ab      	cmp	r3, r5
 80065a0:	d30a      	bcc.n	80065b8 <__exponent+0x5e>
 80065a2:	f10d 0309 	add.w	r3, sp, #9
 80065a6:	1a9b      	subs	r3, r3, r2
 80065a8:	42ac      	cmp	r4, r5
 80065aa:	bf88      	it	hi
 80065ac:	2300      	movhi	r3, #0
 80065ae:	3302      	adds	r3, #2
 80065b0:	4403      	add	r3, r0
 80065b2:	1a18      	subs	r0, r3, r0
 80065b4:	b003      	add	sp, #12
 80065b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065b8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80065bc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80065c0:	e7ed      	b.n	800659e <__exponent+0x44>
 80065c2:	2330      	movs	r3, #48	@ 0x30
 80065c4:	3130      	adds	r1, #48	@ 0x30
 80065c6:	7083      	strb	r3, [r0, #2]
 80065c8:	70c1      	strb	r1, [r0, #3]
 80065ca:	1d03      	adds	r3, r0, #4
 80065cc:	e7f1      	b.n	80065b2 <__exponent+0x58>
	...

080065d0 <_printf_float>:
 80065d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d4:	b08d      	sub	sp, #52	@ 0x34
 80065d6:	460c      	mov	r4, r1
 80065d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80065dc:	4616      	mov	r6, r2
 80065de:	461f      	mov	r7, r3
 80065e0:	4605      	mov	r5, r0
 80065e2:	f000 ff89 	bl	80074f8 <_localeconv_r>
 80065e6:	6803      	ldr	r3, [r0, #0]
 80065e8:	9304      	str	r3, [sp, #16]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7f9 fe60 	bl	80002b0 <strlen>
 80065f0:	2300      	movs	r3, #0
 80065f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80065f4:	f8d8 3000 	ldr.w	r3, [r8]
 80065f8:	9005      	str	r0, [sp, #20]
 80065fa:	3307      	adds	r3, #7
 80065fc:	f023 0307 	bic.w	r3, r3, #7
 8006600:	f103 0208 	add.w	r2, r3, #8
 8006604:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006608:	f8d4 b000 	ldr.w	fp, [r4]
 800660c:	f8c8 2000 	str.w	r2, [r8]
 8006610:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006614:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006618:	9307      	str	r3, [sp, #28]
 800661a:	f8cd 8018 	str.w	r8, [sp, #24]
 800661e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006622:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006626:	4b9c      	ldr	r3, [pc, #624]	@ (8006898 <_printf_float+0x2c8>)
 8006628:	f04f 32ff 	mov.w	r2, #4294967295
 800662c:	f7fa fa9e 	bl	8000b6c <__aeabi_dcmpun>
 8006630:	bb70      	cbnz	r0, 8006690 <_printf_float+0xc0>
 8006632:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006636:	4b98      	ldr	r3, [pc, #608]	@ (8006898 <_printf_float+0x2c8>)
 8006638:	f04f 32ff 	mov.w	r2, #4294967295
 800663c:	f7fa fa78 	bl	8000b30 <__aeabi_dcmple>
 8006640:	bb30      	cbnz	r0, 8006690 <_printf_float+0xc0>
 8006642:	2200      	movs	r2, #0
 8006644:	2300      	movs	r3, #0
 8006646:	4640      	mov	r0, r8
 8006648:	4649      	mov	r1, r9
 800664a:	f7fa fa67 	bl	8000b1c <__aeabi_dcmplt>
 800664e:	b110      	cbz	r0, 8006656 <_printf_float+0x86>
 8006650:	232d      	movs	r3, #45	@ 0x2d
 8006652:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006656:	4a91      	ldr	r2, [pc, #580]	@ (800689c <_printf_float+0x2cc>)
 8006658:	4b91      	ldr	r3, [pc, #580]	@ (80068a0 <_printf_float+0x2d0>)
 800665a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800665e:	bf8c      	ite	hi
 8006660:	4690      	movhi	r8, r2
 8006662:	4698      	movls	r8, r3
 8006664:	2303      	movs	r3, #3
 8006666:	6123      	str	r3, [r4, #16]
 8006668:	f02b 0304 	bic.w	r3, fp, #4
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	f04f 0900 	mov.w	r9, #0
 8006672:	9700      	str	r7, [sp, #0]
 8006674:	4633      	mov	r3, r6
 8006676:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006678:	4621      	mov	r1, r4
 800667a:	4628      	mov	r0, r5
 800667c:	f000 f9d2 	bl	8006a24 <_printf_common>
 8006680:	3001      	adds	r0, #1
 8006682:	f040 808d 	bne.w	80067a0 <_printf_float+0x1d0>
 8006686:	f04f 30ff 	mov.w	r0, #4294967295
 800668a:	b00d      	add	sp, #52	@ 0x34
 800668c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006690:	4642      	mov	r2, r8
 8006692:	464b      	mov	r3, r9
 8006694:	4640      	mov	r0, r8
 8006696:	4649      	mov	r1, r9
 8006698:	f7fa fa68 	bl	8000b6c <__aeabi_dcmpun>
 800669c:	b140      	cbz	r0, 80066b0 <_printf_float+0xe0>
 800669e:	464b      	mov	r3, r9
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	bfbc      	itt	lt
 80066a4:	232d      	movlt	r3, #45	@ 0x2d
 80066a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80066aa:	4a7e      	ldr	r2, [pc, #504]	@ (80068a4 <_printf_float+0x2d4>)
 80066ac:	4b7e      	ldr	r3, [pc, #504]	@ (80068a8 <_printf_float+0x2d8>)
 80066ae:	e7d4      	b.n	800665a <_printf_float+0x8a>
 80066b0:	6863      	ldr	r3, [r4, #4]
 80066b2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80066b6:	9206      	str	r2, [sp, #24]
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	d13b      	bne.n	8006734 <_printf_float+0x164>
 80066bc:	2306      	movs	r3, #6
 80066be:	6063      	str	r3, [r4, #4]
 80066c0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80066c4:	2300      	movs	r3, #0
 80066c6:	6022      	str	r2, [r4, #0]
 80066c8:	9303      	str	r3, [sp, #12]
 80066ca:	ab0a      	add	r3, sp, #40	@ 0x28
 80066cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80066d0:	ab09      	add	r3, sp, #36	@ 0x24
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	6861      	ldr	r1, [r4, #4]
 80066d6:	ec49 8b10 	vmov	d0, r8, r9
 80066da:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80066de:	4628      	mov	r0, r5
 80066e0:	f7ff fed6 	bl	8006490 <__cvt>
 80066e4:	9b06      	ldr	r3, [sp, #24]
 80066e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066e8:	2b47      	cmp	r3, #71	@ 0x47
 80066ea:	4680      	mov	r8, r0
 80066ec:	d129      	bne.n	8006742 <_printf_float+0x172>
 80066ee:	1cc8      	adds	r0, r1, #3
 80066f0:	db02      	blt.n	80066f8 <_printf_float+0x128>
 80066f2:	6863      	ldr	r3, [r4, #4]
 80066f4:	4299      	cmp	r1, r3
 80066f6:	dd41      	ble.n	800677c <_printf_float+0x1ac>
 80066f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80066fc:	fa5f fa8a 	uxtb.w	sl, sl
 8006700:	3901      	subs	r1, #1
 8006702:	4652      	mov	r2, sl
 8006704:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006708:	9109      	str	r1, [sp, #36]	@ 0x24
 800670a:	f7ff ff26 	bl	800655a <__exponent>
 800670e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006710:	1813      	adds	r3, r2, r0
 8006712:	2a01      	cmp	r2, #1
 8006714:	4681      	mov	r9, r0
 8006716:	6123      	str	r3, [r4, #16]
 8006718:	dc02      	bgt.n	8006720 <_printf_float+0x150>
 800671a:	6822      	ldr	r2, [r4, #0]
 800671c:	07d2      	lsls	r2, r2, #31
 800671e:	d501      	bpl.n	8006724 <_printf_float+0x154>
 8006720:	3301      	adds	r3, #1
 8006722:	6123      	str	r3, [r4, #16]
 8006724:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0a2      	beq.n	8006672 <_printf_float+0xa2>
 800672c:	232d      	movs	r3, #45	@ 0x2d
 800672e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006732:	e79e      	b.n	8006672 <_printf_float+0xa2>
 8006734:	9a06      	ldr	r2, [sp, #24]
 8006736:	2a47      	cmp	r2, #71	@ 0x47
 8006738:	d1c2      	bne.n	80066c0 <_printf_float+0xf0>
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1c0      	bne.n	80066c0 <_printf_float+0xf0>
 800673e:	2301      	movs	r3, #1
 8006740:	e7bd      	b.n	80066be <_printf_float+0xee>
 8006742:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006746:	d9db      	bls.n	8006700 <_printf_float+0x130>
 8006748:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800674c:	d118      	bne.n	8006780 <_printf_float+0x1b0>
 800674e:	2900      	cmp	r1, #0
 8006750:	6863      	ldr	r3, [r4, #4]
 8006752:	dd0b      	ble.n	800676c <_printf_float+0x19c>
 8006754:	6121      	str	r1, [r4, #16]
 8006756:	b913      	cbnz	r3, 800675e <_printf_float+0x18e>
 8006758:	6822      	ldr	r2, [r4, #0]
 800675a:	07d0      	lsls	r0, r2, #31
 800675c:	d502      	bpl.n	8006764 <_printf_float+0x194>
 800675e:	3301      	adds	r3, #1
 8006760:	440b      	add	r3, r1
 8006762:	6123      	str	r3, [r4, #16]
 8006764:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006766:	f04f 0900 	mov.w	r9, #0
 800676a:	e7db      	b.n	8006724 <_printf_float+0x154>
 800676c:	b913      	cbnz	r3, 8006774 <_printf_float+0x1a4>
 800676e:	6822      	ldr	r2, [r4, #0]
 8006770:	07d2      	lsls	r2, r2, #31
 8006772:	d501      	bpl.n	8006778 <_printf_float+0x1a8>
 8006774:	3302      	adds	r3, #2
 8006776:	e7f4      	b.n	8006762 <_printf_float+0x192>
 8006778:	2301      	movs	r3, #1
 800677a:	e7f2      	b.n	8006762 <_printf_float+0x192>
 800677c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006780:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006782:	4299      	cmp	r1, r3
 8006784:	db05      	blt.n	8006792 <_printf_float+0x1c2>
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	6121      	str	r1, [r4, #16]
 800678a:	07d8      	lsls	r0, r3, #31
 800678c:	d5ea      	bpl.n	8006764 <_printf_float+0x194>
 800678e:	1c4b      	adds	r3, r1, #1
 8006790:	e7e7      	b.n	8006762 <_printf_float+0x192>
 8006792:	2900      	cmp	r1, #0
 8006794:	bfd4      	ite	le
 8006796:	f1c1 0202 	rsble	r2, r1, #2
 800679a:	2201      	movgt	r2, #1
 800679c:	4413      	add	r3, r2
 800679e:	e7e0      	b.n	8006762 <_printf_float+0x192>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	055a      	lsls	r2, r3, #21
 80067a4:	d407      	bmi.n	80067b6 <_printf_float+0x1e6>
 80067a6:	6923      	ldr	r3, [r4, #16]
 80067a8:	4642      	mov	r2, r8
 80067aa:	4631      	mov	r1, r6
 80067ac:	4628      	mov	r0, r5
 80067ae:	47b8      	blx	r7
 80067b0:	3001      	adds	r0, #1
 80067b2:	d12b      	bne.n	800680c <_printf_float+0x23c>
 80067b4:	e767      	b.n	8006686 <_printf_float+0xb6>
 80067b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067ba:	f240 80dd 	bls.w	8006978 <_printf_float+0x3a8>
 80067be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067c2:	2200      	movs	r2, #0
 80067c4:	2300      	movs	r3, #0
 80067c6:	f7fa f99f 	bl	8000b08 <__aeabi_dcmpeq>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d033      	beq.n	8006836 <_printf_float+0x266>
 80067ce:	4a37      	ldr	r2, [pc, #220]	@ (80068ac <_printf_float+0x2dc>)
 80067d0:	2301      	movs	r3, #1
 80067d2:	4631      	mov	r1, r6
 80067d4:	4628      	mov	r0, r5
 80067d6:	47b8      	blx	r7
 80067d8:	3001      	adds	r0, #1
 80067da:	f43f af54 	beq.w	8006686 <_printf_float+0xb6>
 80067de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80067e2:	4543      	cmp	r3, r8
 80067e4:	db02      	blt.n	80067ec <_printf_float+0x21c>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	07d8      	lsls	r0, r3, #31
 80067ea:	d50f      	bpl.n	800680c <_printf_float+0x23c>
 80067ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067f0:	4631      	mov	r1, r6
 80067f2:	4628      	mov	r0, r5
 80067f4:	47b8      	blx	r7
 80067f6:	3001      	adds	r0, #1
 80067f8:	f43f af45 	beq.w	8006686 <_printf_float+0xb6>
 80067fc:	f04f 0900 	mov.w	r9, #0
 8006800:	f108 38ff 	add.w	r8, r8, #4294967295
 8006804:	f104 0a1a 	add.w	sl, r4, #26
 8006808:	45c8      	cmp	r8, r9
 800680a:	dc09      	bgt.n	8006820 <_printf_float+0x250>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	079b      	lsls	r3, r3, #30
 8006810:	f100 8103 	bmi.w	8006a1a <_printf_float+0x44a>
 8006814:	68e0      	ldr	r0, [r4, #12]
 8006816:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006818:	4298      	cmp	r0, r3
 800681a:	bfb8      	it	lt
 800681c:	4618      	movlt	r0, r3
 800681e:	e734      	b.n	800668a <_printf_float+0xba>
 8006820:	2301      	movs	r3, #1
 8006822:	4652      	mov	r2, sl
 8006824:	4631      	mov	r1, r6
 8006826:	4628      	mov	r0, r5
 8006828:	47b8      	blx	r7
 800682a:	3001      	adds	r0, #1
 800682c:	f43f af2b 	beq.w	8006686 <_printf_float+0xb6>
 8006830:	f109 0901 	add.w	r9, r9, #1
 8006834:	e7e8      	b.n	8006808 <_printf_float+0x238>
 8006836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006838:	2b00      	cmp	r3, #0
 800683a:	dc39      	bgt.n	80068b0 <_printf_float+0x2e0>
 800683c:	4a1b      	ldr	r2, [pc, #108]	@ (80068ac <_printf_float+0x2dc>)
 800683e:	2301      	movs	r3, #1
 8006840:	4631      	mov	r1, r6
 8006842:	4628      	mov	r0, r5
 8006844:	47b8      	blx	r7
 8006846:	3001      	adds	r0, #1
 8006848:	f43f af1d 	beq.w	8006686 <_printf_float+0xb6>
 800684c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006850:	ea59 0303 	orrs.w	r3, r9, r3
 8006854:	d102      	bne.n	800685c <_printf_float+0x28c>
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	07d9      	lsls	r1, r3, #31
 800685a:	d5d7      	bpl.n	800680c <_printf_float+0x23c>
 800685c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006860:	4631      	mov	r1, r6
 8006862:	4628      	mov	r0, r5
 8006864:	47b8      	blx	r7
 8006866:	3001      	adds	r0, #1
 8006868:	f43f af0d 	beq.w	8006686 <_printf_float+0xb6>
 800686c:	f04f 0a00 	mov.w	sl, #0
 8006870:	f104 0b1a 	add.w	fp, r4, #26
 8006874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006876:	425b      	negs	r3, r3
 8006878:	4553      	cmp	r3, sl
 800687a:	dc01      	bgt.n	8006880 <_printf_float+0x2b0>
 800687c:	464b      	mov	r3, r9
 800687e:	e793      	b.n	80067a8 <_printf_float+0x1d8>
 8006880:	2301      	movs	r3, #1
 8006882:	465a      	mov	r2, fp
 8006884:	4631      	mov	r1, r6
 8006886:	4628      	mov	r0, r5
 8006888:	47b8      	blx	r7
 800688a:	3001      	adds	r0, #1
 800688c:	f43f aefb 	beq.w	8006686 <_printf_float+0xb6>
 8006890:	f10a 0a01 	add.w	sl, sl, #1
 8006894:	e7ee      	b.n	8006874 <_printf_float+0x2a4>
 8006896:	bf00      	nop
 8006898:	7fefffff 	.word	0x7fefffff
 800689c:	0800b988 	.word	0x0800b988
 80068a0:	0800b984 	.word	0x0800b984
 80068a4:	0800b990 	.word	0x0800b990
 80068a8:	0800b98c 	.word	0x0800b98c
 80068ac:	0800baca 	.word	0x0800baca
 80068b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068b2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068b6:	4553      	cmp	r3, sl
 80068b8:	bfa8      	it	ge
 80068ba:	4653      	movge	r3, sl
 80068bc:	2b00      	cmp	r3, #0
 80068be:	4699      	mov	r9, r3
 80068c0:	dc36      	bgt.n	8006930 <_printf_float+0x360>
 80068c2:	f04f 0b00 	mov.w	fp, #0
 80068c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068ca:	f104 021a 	add.w	r2, r4, #26
 80068ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068d0:	9306      	str	r3, [sp, #24]
 80068d2:	eba3 0309 	sub.w	r3, r3, r9
 80068d6:	455b      	cmp	r3, fp
 80068d8:	dc31      	bgt.n	800693e <_printf_float+0x36e>
 80068da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068dc:	459a      	cmp	sl, r3
 80068de:	dc3a      	bgt.n	8006956 <_printf_float+0x386>
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	07da      	lsls	r2, r3, #31
 80068e4:	d437      	bmi.n	8006956 <_printf_float+0x386>
 80068e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068e8:	ebaa 0903 	sub.w	r9, sl, r3
 80068ec:	9b06      	ldr	r3, [sp, #24]
 80068ee:	ebaa 0303 	sub.w	r3, sl, r3
 80068f2:	4599      	cmp	r9, r3
 80068f4:	bfa8      	it	ge
 80068f6:	4699      	movge	r9, r3
 80068f8:	f1b9 0f00 	cmp.w	r9, #0
 80068fc:	dc33      	bgt.n	8006966 <_printf_float+0x396>
 80068fe:	f04f 0800 	mov.w	r8, #0
 8006902:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006906:	f104 0b1a 	add.w	fp, r4, #26
 800690a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800690c:	ebaa 0303 	sub.w	r3, sl, r3
 8006910:	eba3 0309 	sub.w	r3, r3, r9
 8006914:	4543      	cmp	r3, r8
 8006916:	f77f af79 	ble.w	800680c <_printf_float+0x23c>
 800691a:	2301      	movs	r3, #1
 800691c:	465a      	mov	r2, fp
 800691e:	4631      	mov	r1, r6
 8006920:	4628      	mov	r0, r5
 8006922:	47b8      	blx	r7
 8006924:	3001      	adds	r0, #1
 8006926:	f43f aeae 	beq.w	8006686 <_printf_float+0xb6>
 800692a:	f108 0801 	add.w	r8, r8, #1
 800692e:	e7ec      	b.n	800690a <_printf_float+0x33a>
 8006930:	4642      	mov	r2, r8
 8006932:	4631      	mov	r1, r6
 8006934:	4628      	mov	r0, r5
 8006936:	47b8      	blx	r7
 8006938:	3001      	adds	r0, #1
 800693a:	d1c2      	bne.n	80068c2 <_printf_float+0x2f2>
 800693c:	e6a3      	b.n	8006686 <_printf_float+0xb6>
 800693e:	2301      	movs	r3, #1
 8006940:	4631      	mov	r1, r6
 8006942:	4628      	mov	r0, r5
 8006944:	9206      	str	r2, [sp, #24]
 8006946:	47b8      	blx	r7
 8006948:	3001      	adds	r0, #1
 800694a:	f43f ae9c 	beq.w	8006686 <_printf_float+0xb6>
 800694e:	9a06      	ldr	r2, [sp, #24]
 8006950:	f10b 0b01 	add.w	fp, fp, #1
 8006954:	e7bb      	b.n	80068ce <_printf_float+0x2fe>
 8006956:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800695a:	4631      	mov	r1, r6
 800695c:	4628      	mov	r0, r5
 800695e:	47b8      	blx	r7
 8006960:	3001      	adds	r0, #1
 8006962:	d1c0      	bne.n	80068e6 <_printf_float+0x316>
 8006964:	e68f      	b.n	8006686 <_printf_float+0xb6>
 8006966:	9a06      	ldr	r2, [sp, #24]
 8006968:	464b      	mov	r3, r9
 800696a:	4442      	add	r2, r8
 800696c:	4631      	mov	r1, r6
 800696e:	4628      	mov	r0, r5
 8006970:	47b8      	blx	r7
 8006972:	3001      	adds	r0, #1
 8006974:	d1c3      	bne.n	80068fe <_printf_float+0x32e>
 8006976:	e686      	b.n	8006686 <_printf_float+0xb6>
 8006978:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800697c:	f1ba 0f01 	cmp.w	sl, #1
 8006980:	dc01      	bgt.n	8006986 <_printf_float+0x3b6>
 8006982:	07db      	lsls	r3, r3, #31
 8006984:	d536      	bpl.n	80069f4 <_printf_float+0x424>
 8006986:	2301      	movs	r3, #1
 8006988:	4642      	mov	r2, r8
 800698a:	4631      	mov	r1, r6
 800698c:	4628      	mov	r0, r5
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	f43f ae78 	beq.w	8006686 <_printf_float+0xb6>
 8006996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800699a:	4631      	mov	r1, r6
 800699c:	4628      	mov	r0, r5
 800699e:	47b8      	blx	r7
 80069a0:	3001      	adds	r0, #1
 80069a2:	f43f ae70 	beq.w	8006686 <_printf_float+0xb6>
 80069a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069aa:	2200      	movs	r2, #0
 80069ac:	2300      	movs	r3, #0
 80069ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069b2:	f7fa f8a9 	bl	8000b08 <__aeabi_dcmpeq>
 80069b6:	b9c0      	cbnz	r0, 80069ea <_printf_float+0x41a>
 80069b8:	4653      	mov	r3, sl
 80069ba:	f108 0201 	add.w	r2, r8, #1
 80069be:	4631      	mov	r1, r6
 80069c0:	4628      	mov	r0, r5
 80069c2:	47b8      	blx	r7
 80069c4:	3001      	adds	r0, #1
 80069c6:	d10c      	bne.n	80069e2 <_printf_float+0x412>
 80069c8:	e65d      	b.n	8006686 <_printf_float+0xb6>
 80069ca:	2301      	movs	r3, #1
 80069cc:	465a      	mov	r2, fp
 80069ce:	4631      	mov	r1, r6
 80069d0:	4628      	mov	r0, r5
 80069d2:	47b8      	blx	r7
 80069d4:	3001      	adds	r0, #1
 80069d6:	f43f ae56 	beq.w	8006686 <_printf_float+0xb6>
 80069da:	f108 0801 	add.w	r8, r8, #1
 80069de:	45d0      	cmp	r8, sl
 80069e0:	dbf3      	blt.n	80069ca <_printf_float+0x3fa>
 80069e2:	464b      	mov	r3, r9
 80069e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80069e8:	e6df      	b.n	80067aa <_printf_float+0x1da>
 80069ea:	f04f 0800 	mov.w	r8, #0
 80069ee:	f104 0b1a 	add.w	fp, r4, #26
 80069f2:	e7f4      	b.n	80069de <_printf_float+0x40e>
 80069f4:	2301      	movs	r3, #1
 80069f6:	4642      	mov	r2, r8
 80069f8:	e7e1      	b.n	80069be <_printf_float+0x3ee>
 80069fa:	2301      	movs	r3, #1
 80069fc:	464a      	mov	r2, r9
 80069fe:	4631      	mov	r1, r6
 8006a00:	4628      	mov	r0, r5
 8006a02:	47b8      	blx	r7
 8006a04:	3001      	adds	r0, #1
 8006a06:	f43f ae3e 	beq.w	8006686 <_printf_float+0xb6>
 8006a0a:	f108 0801 	add.w	r8, r8, #1
 8006a0e:	68e3      	ldr	r3, [r4, #12]
 8006a10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a12:	1a5b      	subs	r3, r3, r1
 8006a14:	4543      	cmp	r3, r8
 8006a16:	dcf0      	bgt.n	80069fa <_printf_float+0x42a>
 8006a18:	e6fc      	b.n	8006814 <_printf_float+0x244>
 8006a1a:	f04f 0800 	mov.w	r8, #0
 8006a1e:	f104 0919 	add.w	r9, r4, #25
 8006a22:	e7f4      	b.n	8006a0e <_printf_float+0x43e>

08006a24 <_printf_common>:
 8006a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a28:	4616      	mov	r6, r2
 8006a2a:	4698      	mov	r8, r3
 8006a2c:	688a      	ldr	r2, [r1, #8]
 8006a2e:	690b      	ldr	r3, [r1, #16]
 8006a30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a34:	4293      	cmp	r3, r2
 8006a36:	bfb8      	it	lt
 8006a38:	4613      	movlt	r3, r2
 8006a3a:	6033      	str	r3, [r6, #0]
 8006a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a40:	4607      	mov	r7, r0
 8006a42:	460c      	mov	r4, r1
 8006a44:	b10a      	cbz	r2, 8006a4a <_printf_common+0x26>
 8006a46:	3301      	adds	r3, #1
 8006a48:	6033      	str	r3, [r6, #0]
 8006a4a:	6823      	ldr	r3, [r4, #0]
 8006a4c:	0699      	lsls	r1, r3, #26
 8006a4e:	bf42      	ittt	mi
 8006a50:	6833      	ldrmi	r3, [r6, #0]
 8006a52:	3302      	addmi	r3, #2
 8006a54:	6033      	strmi	r3, [r6, #0]
 8006a56:	6825      	ldr	r5, [r4, #0]
 8006a58:	f015 0506 	ands.w	r5, r5, #6
 8006a5c:	d106      	bne.n	8006a6c <_printf_common+0x48>
 8006a5e:	f104 0a19 	add.w	sl, r4, #25
 8006a62:	68e3      	ldr	r3, [r4, #12]
 8006a64:	6832      	ldr	r2, [r6, #0]
 8006a66:	1a9b      	subs	r3, r3, r2
 8006a68:	42ab      	cmp	r3, r5
 8006a6a:	dc26      	bgt.n	8006aba <_printf_common+0x96>
 8006a6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a70:	6822      	ldr	r2, [r4, #0]
 8006a72:	3b00      	subs	r3, #0
 8006a74:	bf18      	it	ne
 8006a76:	2301      	movne	r3, #1
 8006a78:	0692      	lsls	r2, r2, #26
 8006a7a:	d42b      	bmi.n	8006ad4 <_printf_common+0xb0>
 8006a7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a80:	4641      	mov	r1, r8
 8006a82:	4638      	mov	r0, r7
 8006a84:	47c8      	blx	r9
 8006a86:	3001      	adds	r0, #1
 8006a88:	d01e      	beq.n	8006ac8 <_printf_common+0xa4>
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	6922      	ldr	r2, [r4, #16]
 8006a8e:	f003 0306 	and.w	r3, r3, #6
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	bf02      	ittt	eq
 8006a96:	68e5      	ldreq	r5, [r4, #12]
 8006a98:	6833      	ldreq	r3, [r6, #0]
 8006a9a:	1aed      	subeq	r5, r5, r3
 8006a9c:	68a3      	ldr	r3, [r4, #8]
 8006a9e:	bf0c      	ite	eq
 8006aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006aa4:	2500      	movne	r5, #0
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	bfc4      	itt	gt
 8006aaa:	1a9b      	subgt	r3, r3, r2
 8006aac:	18ed      	addgt	r5, r5, r3
 8006aae:	2600      	movs	r6, #0
 8006ab0:	341a      	adds	r4, #26
 8006ab2:	42b5      	cmp	r5, r6
 8006ab4:	d11a      	bne.n	8006aec <_printf_common+0xc8>
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	e008      	b.n	8006acc <_printf_common+0xa8>
 8006aba:	2301      	movs	r3, #1
 8006abc:	4652      	mov	r2, sl
 8006abe:	4641      	mov	r1, r8
 8006ac0:	4638      	mov	r0, r7
 8006ac2:	47c8      	blx	r9
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	d103      	bne.n	8006ad0 <_printf_common+0xac>
 8006ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8006acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad0:	3501      	adds	r5, #1
 8006ad2:	e7c6      	b.n	8006a62 <_printf_common+0x3e>
 8006ad4:	18e1      	adds	r1, r4, r3
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	2030      	movs	r0, #48	@ 0x30
 8006ada:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ade:	4422      	add	r2, r4
 8006ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ae4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ae8:	3302      	adds	r3, #2
 8006aea:	e7c7      	b.n	8006a7c <_printf_common+0x58>
 8006aec:	2301      	movs	r3, #1
 8006aee:	4622      	mov	r2, r4
 8006af0:	4641      	mov	r1, r8
 8006af2:	4638      	mov	r0, r7
 8006af4:	47c8      	blx	r9
 8006af6:	3001      	adds	r0, #1
 8006af8:	d0e6      	beq.n	8006ac8 <_printf_common+0xa4>
 8006afa:	3601      	adds	r6, #1
 8006afc:	e7d9      	b.n	8006ab2 <_printf_common+0x8e>
	...

08006b00 <_printf_i>:
 8006b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b04:	7e0f      	ldrb	r7, [r1, #24]
 8006b06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b08:	2f78      	cmp	r7, #120	@ 0x78
 8006b0a:	4691      	mov	r9, r2
 8006b0c:	4680      	mov	r8, r0
 8006b0e:	460c      	mov	r4, r1
 8006b10:	469a      	mov	sl, r3
 8006b12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b16:	d807      	bhi.n	8006b28 <_printf_i+0x28>
 8006b18:	2f62      	cmp	r7, #98	@ 0x62
 8006b1a:	d80a      	bhi.n	8006b32 <_printf_i+0x32>
 8006b1c:	2f00      	cmp	r7, #0
 8006b1e:	f000 80d1 	beq.w	8006cc4 <_printf_i+0x1c4>
 8006b22:	2f58      	cmp	r7, #88	@ 0x58
 8006b24:	f000 80b8 	beq.w	8006c98 <_printf_i+0x198>
 8006b28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b30:	e03a      	b.n	8006ba8 <_printf_i+0xa8>
 8006b32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b36:	2b15      	cmp	r3, #21
 8006b38:	d8f6      	bhi.n	8006b28 <_printf_i+0x28>
 8006b3a:	a101      	add	r1, pc, #4	@ (adr r1, 8006b40 <_printf_i+0x40>)
 8006b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b40:	08006b99 	.word	0x08006b99
 8006b44:	08006bad 	.word	0x08006bad
 8006b48:	08006b29 	.word	0x08006b29
 8006b4c:	08006b29 	.word	0x08006b29
 8006b50:	08006b29 	.word	0x08006b29
 8006b54:	08006b29 	.word	0x08006b29
 8006b58:	08006bad 	.word	0x08006bad
 8006b5c:	08006b29 	.word	0x08006b29
 8006b60:	08006b29 	.word	0x08006b29
 8006b64:	08006b29 	.word	0x08006b29
 8006b68:	08006b29 	.word	0x08006b29
 8006b6c:	08006cab 	.word	0x08006cab
 8006b70:	08006bd7 	.word	0x08006bd7
 8006b74:	08006c65 	.word	0x08006c65
 8006b78:	08006b29 	.word	0x08006b29
 8006b7c:	08006b29 	.word	0x08006b29
 8006b80:	08006ccd 	.word	0x08006ccd
 8006b84:	08006b29 	.word	0x08006b29
 8006b88:	08006bd7 	.word	0x08006bd7
 8006b8c:	08006b29 	.word	0x08006b29
 8006b90:	08006b29 	.word	0x08006b29
 8006b94:	08006c6d 	.word	0x08006c6d
 8006b98:	6833      	ldr	r3, [r6, #0]
 8006b9a:	1d1a      	adds	r2, r3, #4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6032      	str	r2, [r6, #0]
 8006ba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ba4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e09c      	b.n	8006ce6 <_printf_i+0x1e6>
 8006bac:	6833      	ldr	r3, [r6, #0]
 8006bae:	6820      	ldr	r0, [r4, #0]
 8006bb0:	1d19      	adds	r1, r3, #4
 8006bb2:	6031      	str	r1, [r6, #0]
 8006bb4:	0606      	lsls	r6, r0, #24
 8006bb6:	d501      	bpl.n	8006bbc <_printf_i+0xbc>
 8006bb8:	681d      	ldr	r5, [r3, #0]
 8006bba:	e003      	b.n	8006bc4 <_printf_i+0xc4>
 8006bbc:	0645      	lsls	r5, r0, #25
 8006bbe:	d5fb      	bpl.n	8006bb8 <_printf_i+0xb8>
 8006bc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006bc4:	2d00      	cmp	r5, #0
 8006bc6:	da03      	bge.n	8006bd0 <_printf_i+0xd0>
 8006bc8:	232d      	movs	r3, #45	@ 0x2d
 8006bca:	426d      	negs	r5, r5
 8006bcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bd0:	4858      	ldr	r0, [pc, #352]	@ (8006d34 <_printf_i+0x234>)
 8006bd2:	230a      	movs	r3, #10
 8006bd4:	e011      	b.n	8006bfa <_printf_i+0xfa>
 8006bd6:	6821      	ldr	r1, [r4, #0]
 8006bd8:	6833      	ldr	r3, [r6, #0]
 8006bda:	0608      	lsls	r0, r1, #24
 8006bdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006be0:	d402      	bmi.n	8006be8 <_printf_i+0xe8>
 8006be2:	0649      	lsls	r1, r1, #25
 8006be4:	bf48      	it	mi
 8006be6:	b2ad      	uxthmi	r5, r5
 8006be8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bea:	4852      	ldr	r0, [pc, #328]	@ (8006d34 <_printf_i+0x234>)
 8006bec:	6033      	str	r3, [r6, #0]
 8006bee:	bf14      	ite	ne
 8006bf0:	230a      	movne	r3, #10
 8006bf2:	2308      	moveq	r3, #8
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bfa:	6866      	ldr	r6, [r4, #4]
 8006bfc:	60a6      	str	r6, [r4, #8]
 8006bfe:	2e00      	cmp	r6, #0
 8006c00:	db05      	blt.n	8006c0e <_printf_i+0x10e>
 8006c02:	6821      	ldr	r1, [r4, #0]
 8006c04:	432e      	orrs	r6, r5
 8006c06:	f021 0104 	bic.w	r1, r1, #4
 8006c0a:	6021      	str	r1, [r4, #0]
 8006c0c:	d04b      	beq.n	8006ca6 <_printf_i+0x1a6>
 8006c0e:	4616      	mov	r6, r2
 8006c10:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c14:	fb03 5711 	mls	r7, r3, r1, r5
 8006c18:	5dc7      	ldrb	r7, [r0, r7]
 8006c1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c1e:	462f      	mov	r7, r5
 8006c20:	42bb      	cmp	r3, r7
 8006c22:	460d      	mov	r5, r1
 8006c24:	d9f4      	bls.n	8006c10 <_printf_i+0x110>
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d10b      	bne.n	8006c42 <_printf_i+0x142>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	07df      	lsls	r7, r3, #31
 8006c2e:	d508      	bpl.n	8006c42 <_printf_i+0x142>
 8006c30:	6923      	ldr	r3, [r4, #16]
 8006c32:	6861      	ldr	r1, [r4, #4]
 8006c34:	4299      	cmp	r1, r3
 8006c36:	bfde      	ittt	le
 8006c38:	2330      	movle	r3, #48	@ 0x30
 8006c3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c42:	1b92      	subs	r2, r2, r6
 8006c44:	6122      	str	r2, [r4, #16]
 8006c46:	f8cd a000 	str.w	sl, [sp]
 8006c4a:	464b      	mov	r3, r9
 8006c4c:	aa03      	add	r2, sp, #12
 8006c4e:	4621      	mov	r1, r4
 8006c50:	4640      	mov	r0, r8
 8006c52:	f7ff fee7 	bl	8006a24 <_printf_common>
 8006c56:	3001      	adds	r0, #1
 8006c58:	d14a      	bne.n	8006cf0 <_printf_i+0x1f0>
 8006c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5e:	b004      	add	sp, #16
 8006c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	f043 0320 	orr.w	r3, r3, #32
 8006c6a:	6023      	str	r3, [r4, #0]
 8006c6c:	4832      	ldr	r0, [pc, #200]	@ (8006d38 <_printf_i+0x238>)
 8006c6e:	2778      	movs	r7, #120	@ 0x78
 8006c70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	6831      	ldr	r1, [r6, #0]
 8006c78:	061f      	lsls	r7, r3, #24
 8006c7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c7e:	d402      	bmi.n	8006c86 <_printf_i+0x186>
 8006c80:	065f      	lsls	r7, r3, #25
 8006c82:	bf48      	it	mi
 8006c84:	b2ad      	uxthmi	r5, r5
 8006c86:	6031      	str	r1, [r6, #0]
 8006c88:	07d9      	lsls	r1, r3, #31
 8006c8a:	bf44      	itt	mi
 8006c8c:	f043 0320 	orrmi.w	r3, r3, #32
 8006c90:	6023      	strmi	r3, [r4, #0]
 8006c92:	b11d      	cbz	r5, 8006c9c <_printf_i+0x19c>
 8006c94:	2310      	movs	r3, #16
 8006c96:	e7ad      	b.n	8006bf4 <_printf_i+0xf4>
 8006c98:	4826      	ldr	r0, [pc, #152]	@ (8006d34 <_printf_i+0x234>)
 8006c9a:	e7e9      	b.n	8006c70 <_printf_i+0x170>
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	f023 0320 	bic.w	r3, r3, #32
 8006ca2:	6023      	str	r3, [r4, #0]
 8006ca4:	e7f6      	b.n	8006c94 <_printf_i+0x194>
 8006ca6:	4616      	mov	r6, r2
 8006ca8:	e7bd      	b.n	8006c26 <_printf_i+0x126>
 8006caa:	6833      	ldr	r3, [r6, #0]
 8006cac:	6825      	ldr	r5, [r4, #0]
 8006cae:	6961      	ldr	r1, [r4, #20]
 8006cb0:	1d18      	adds	r0, r3, #4
 8006cb2:	6030      	str	r0, [r6, #0]
 8006cb4:	062e      	lsls	r6, r5, #24
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	d501      	bpl.n	8006cbe <_printf_i+0x1be>
 8006cba:	6019      	str	r1, [r3, #0]
 8006cbc:	e002      	b.n	8006cc4 <_printf_i+0x1c4>
 8006cbe:	0668      	lsls	r0, r5, #25
 8006cc0:	d5fb      	bpl.n	8006cba <_printf_i+0x1ba>
 8006cc2:	8019      	strh	r1, [r3, #0]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	6123      	str	r3, [r4, #16]
 8006cc8:	4616      	mov	r6, r2
 8006cca:	e7bc      	b.n	8006c46 <_printf_i+0x146>
 8006ccc:	6833      	ldr	r3, [r6, #0]
 8006cce:	1d1a      	adds	r2, r3, #4
 8006cd0:	6032      	str	r2, [r6, #0]
 8006cd2:	681e      	ldr	r6, [r3, #0]
 8006cd4:	6862      	ldr	r2, [r4, #4]
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	4630      	mov	r0, r6
 8006cda:	f7f9 fa99 	bl	8000210 <memchr>
 8006cde:	b108      	cbz	r0, 8006ce4 <_printf_i+0x1e4>
 8006ce0:	1b80      	subs	r0, r0, r6
 8006ce2:	6060      	str	r0, [r4, #4]
 8006ce4:	6863      	ldr	r3, [r4, #4]
 8006ce6:	6123      	str	r3, [r4, #16]
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cee:	e7aa      	b.n	8006c46 <_printf_i+0x146>
 8006cf0:	6923      	ldr	r3, [r4, #16]
 8006cf2:	4632      	mov	r2, r6
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	47d0      	blx	sl
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	d0ad      	beq.n	8006c5a <_printf_i+0x15a>
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	079b      	lsls	r3, r3, #30
 8006d02:	d413      	bmi.n	8006d2c <_printf_i+0x22c>
 8006d04:	68e0      	ldr	r0, [r4, #12]
 8006d06:	9b03      	ldr	r3, [sp, #12]
 8006d08:	4298      	cmp	r0, r3
 8006d0a:	bfb8      	it	lt
 8006d0c:	4618      	movlt	r0, r3
 8006d0e:	e7a6      	b.n	8006c5e <_printf_i+0x15e>
 8006d10:	2301      	movs	r3, #1
 8006d12:	4632      	mov	r2, r6
 8006d14:	4649      	mov	r1, r9
 8006d16:	4640      	mov	r0, r8
 8006d18:	47d0      	blx	sl
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	d09d      	beq.n	8006c5a <_printf_i+0x15a>
 8006d1e:	3501      	adds	r5, #1
 8006d20:	68e3      	ldr	r3, [r4, #12]
 8006d22:	9903      	ldr	r1, [sp, #12]
 8006d24:	1a5b      	subs	r3, r3, r1
 8006d26:	42ab      	cmp	r3, r5
 8006d28:	dcf2      	bgt.n	8006d10 <_printf_i+0x210>
 8006d2a:	e7eb      	b.n	8006d04 <_printf_i+0x204>
 8006d2c:	2500      	movs	r5, #0
 8006d2e:	f104 0619 	add.w	r6, r4, #25
 8006d32:	e7f5      	b.n	8006d20 <_printf_i+0x220>
 8006d34:	0800b994 	.word	0x0800b994
 8006d38:	0800b9a5 	.word	0x0800b9a5

08006d3c <_scanf_float>:
 8006d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d40:	b087      	sub	sp, #28
 8006d42:	4691      	mov	r9, r2
 8006d44:	9303      	str	r3, [sp, #12]
 8006d46:	688b      	ldr	r3, [r1, #8]
 8006d48:	1e5a      	subs	r2, r3, #1
 8006d4a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006d4e:	bf81      	itttt	hi
 8006d50:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006d54:	eb03 0b05 	addhi.w	fp, r3, r5
 8006d58:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006d5c:	608b      	strhi	r3, [r1, #8]
 8006d5e:	680b      	ldr	r3, [r1, #0]
 8006d60:	460a      	mov	r2, r1
 8006d62:	f04f 0500 	mov.w	r5, #0
 8006d66:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006d6a:	f842 3b1c 	str.w	r3, [r2], #28
 8006d6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006d72:	4680      	mov	r8, r0
 8006d74:	460c      	mov	r4, r1
 8006d76:	bf98      	it	ls
 8006d78:	f04f 0b00 	movls.w	fp, #0
 8006d7c:	9201      	str	r2, [sp, #4]
 8006d7e:	4616      	mov	r6, r2
 8006d80:	46aa      	mov	sl, r5
 8006d82:	462f      	mov	r7, r5
 8006d84:	9502      	str	r5, [sp, #8]
 8006d86:	68a2      	ldr	r2, [r4, #8]
 8006d88:	b15a      	cbz	r2, 8006da2 <_scanf_float+0x66>
 8006d8a:	f8d9 3000 	ldr.w	r3, [r9]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	2b4e      	cmp	r3, #78	@ 0x4e
 8006d92:	d863      	bhi.n	8006e5c <_scanf_float+0x120>
 8006d94:	2b40      	cmp	r3, #64	@ 0x40
 8006d96:	d83b      	bhi.n	8006e10 <_scanf_float+0xd4>
 8006d98:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006d9c:	b2c8      	uxtb	r0, r1
 8006d9e:	280e      	cmp	r0, #14
 8006da0:	d939      	bls.n	8006e16 <_scanf_float+0xda>
 8006da2:	b11f      	cbz	r7, 8006dac <_scanf_float+0x70>
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006daa:	6023      	str	r3, [r4, #0]
 8006dac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006db0:	f1ba 0f01 	cmp.w	sl, #1
 8006db4:	f200 8114 	bhi.w	8006fe0 <_scanf_float+0x2a4>
 8006db8:	9b01      	ldr	r3, [sp, #4]
 8006dba:	429e      	cmp	r6, r3
 8006dbc:	f200 8105 	bhi.w	8006fca <_scanf_float+0x28e>
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	b007      	add	sp, #28
 8006dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006dcc:	2a0d      	cmp	r2, #13
 8006dce:	d8e8      	bhi.n	8006da2 <_scanf_float+0x66>
 8006dd0:	a101      	add	r1, pc, #4	@ (adr r1, 8006dd8 <_scanf_float+0x9c>)
 8006dd2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006dd6:	bf00      	nop
 8006dd8:	08006f21 	.word	0x08006f21
 8006ddc:	08006da3 	.word	0x08006da3
 8006de0:	08006da3 	.word	0x08006da3
 8006de4:	08006da3 	.word	0x08006da3
 8006de8:	08006f7d 	.word	0x08006f7d
 8006dec:	08006f57 	.word	0x08006f57
 8006df0:	08006da3 	.word	0x08006da3
 8006df4:	08006da3 	.word	0x08006da3
 8006df8:	08006f2f 	.word	0x08006f2f
 8006dfc:	08006da3 	.word	0x08006da3
 8006e00:	08006da3 	.word	0x08006da3
 8006e04:	08006da3 	.word	0x08006da3
 8006e08:	08006da3 	.word	0x08006da3
 8006e0c:	08006eeb 	.word	0x08006eeb
 8006e10:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006e14:	e7da      	b.n	8006dcc <_scanf_float+0x90>
 8006e16:	290e      	cmp	r1, #14
 8006e18:	d8c3      	bhi.n	8006da2 <_scanf_float+0x66>
 8006e1a:	a001      	add	r0, pc, #4	@ (adr r0, 8006e20 <_scanf_float+0xe4>)
 8006e1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006e20:	08006edb 	.word	0x08006edb
 8006e24:	08006da3 	.word	0x08006da3
 8006e28:	08006edb 	.word	0x08006edb
 8006e2c:	08006f6b 	.word	0x08006f6b
 8006e30:	08006da3 	.word	0x08006da3
 8006e34:	08006e7d 	.word	0x08006e7d
 8006e38:	08006ec1 	.word	0x08006ec1
 8006e3c:	08006ec1 	.word	0x08006ec1
 8006e40:	08006ec1 	.word	0x08006ec1
 8006e44:	08006ec1 	.word	0x08006ec1
 8006e48:	08006ec1 	.word	0x08006ec1
 8006e4c:	08006ec1 	.word	0x08006ec1
 8006e50:	08006ec1 	.word	0x08006ec1
 8006e54:	08006ec1 	.word	0x08006ec1
 8006e58:	08006ec1 	.word	0x08006ec1
 8006e5c:	2b6e      	cmp	r3, #110	@ 0x6e
 8006e5e:	d809      	bhi.n	8006e74 <_scanf_float+0x138>
 8006e60:	2b60      	cmp	r3, #96	@ 0x60
 8006e62:	d8b1      	bhi.n	8006dc8 <_scanf_float+0x8c>
 8006e64:	2b54      	cmp	r3, #84	@ 0x54
 8006e66:	d07b      	beq.n	8006f60 <_scanf_float+0x224>
 8006e68:	2b59      	cmp	r3, #89	@ 0x59
 8006e6a:	d19a      	bne.n	8006da2 <_scanf_float+0x66>
 8006e6c:	2d07      	cmp	r5, #7
 8006e6e:	d198      	bne.n	8006da2 <_scanf_float+0x66>
 8006e70:	2508      	movs	r5, #8
 8006e72:	e02f      	b.n	8006ed4 <_scanf_float+0x198>
 8006e74:	2b74      	cmp	r3, #116	@ 0x74
 8006e76:	d073      	beq.n	8006f60 <_scanf_float+0x224>
 8006e78:	2b79      	cmp	r3, #121	@ 0x79
 8006e7a:	e7f6      	b.n	8006e6a <_scanf_float+0x12e>
 8006e7c:	6821      	ldr	r1, [r4, #0]
 8006e7e:	05c8      	lsls	r0, r1, #23
 8006e80:	d51e      	bpl.n	8006ec0 <_scanf_float+0x184>
 8006e82:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006e86:	6021      	str	r1, [r4, #0]
 8006e88:	3701      	adds	r7, #1
 8006e8a:	f1bb 0f00 	cmp.w	fp, #0
 8006e8e:	d003      	beq.n	8006e98 <_scanf_float+0x15c>
 8006e90:	3201      	adds	r2, #1
 8006e92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e96:	60a2      	str	r2, [r4, #8]
 8006e98:	68a3      	ldr	r3, [r4, #8]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	60a3      	str	r3, [r4, #8]
 8006e9e:	6923      	ldr	r3, [r4, #16]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	6123      	str	r3, [r4, #16]
 8006ea4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f8c9 3004 	str.w	r3, [r9, #4]
 8006eb0:	f340 8082 	ble.w	8006fb8 <_scanf_float+0x27c>
 8006eb4:	f8d9 3000 	ldr.w	r3, [r9]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	f8c9 3000 	str.w	r3, [r9]
 8006ebe:	e762      	b.n	8006d86 <_scanf_float+0x4a>
 8006ec0:	eb1a 0105 	adds.w	r1, sl, r5
 8006ec4:	f47f af6d 	bne.w	8006da2 <_scanf_float+0x66>
 8006ec8:	6822      	ldr	r2, [r4, #0]
 8006eca:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006ece:	6022      	str	r2, [r4, #0]
 8006ed0:	460d      	mov	r5, r1
 8006ed2:	468a      	mov	sl, r1
 8006ed4:	f806 3b01 	strb.w	r3, [r6], #1
 8006ed8:	e7de      	b.n	8006e98 <_scanf_float+0x15c>
 8006eda:	6822      	ldr	r2, [r4, #0]
 8006edc:	0610      	lsls	r0, r2, #24
 8006ede:	f57f af60 	bpl.w	8006da2 <_scanf_float+0x66>
 8006ee2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ee6:	6022      	str	r2, [r4, #0]
 8006ee8:	e7f4      	b.n	8006ed4 <_scanf_float+0x198>
 8006eea:	f1ba 0f00 	cmp.w	sl, #0
 8006eee:	d10c      	bne.n	8006f0a <_scanf_float+0x1ce>
 8006ef0:	b977      	cbnz	r7, 8006f10 <_scanf_float+0x1d4>
 8006ef2:	6822      	ldr	r2, [r4, #0]
 8006ef4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006ef8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006efc:	d108      	bne.n	8006f10 <_scanf_float+0x1d4>
 8006efe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006f02:	6022      	str	r2, [r4, #0]
 8006f04:	f04f 0a01 	mov.w	sl, #1
 8006f08:	e7e4      	b.n	8006ed4 <_scanf_float+0x198>
 8006f0a:	f1ba 0f02 	cmp.w	sl, #2
 8006f0e:	d050      	beq.n	8006fb2 <_scanf_float+0x276>
 8006f10:	2d01      	cmp	r5, #1
 8006f12:	d002      	beq.n	8006f1a <_scanf_float+0x1de>
 8006f14:	2d04      	cmp	r5, #4
 8006f16:	f47f af44 	bne.w	8006da2 <_scanf_float+0x66>
 8006f1a:	3501      	adds	r5, #1
 8006f1c:	b2ed      	uxtb	r5, r5
 8006f1e:	e7d9      	b.n	8006ed4 <_scanf_float+0x198>
 8006f20:	f1ba 0f01 	cmp.w	sl, #1
 8006f24:	f47f af3d 	bne.w	8006da2 <_scanf_float+0x66>
 8006f28:	f04f 0a02 	mov.w	sl, #2
 8006f2c:	e7d2      	b.n	8006ed4 <_scanf_float+0x198>
 8006f2e:	b975      	cbnz	r5, 8006f4e <_scanf_float+0x212>
 8006f30:	2f00      	cmp	r7, #0
 8006f32:	f47f af37 	bne.w	8006da4 <_scanf_float+0x68>
 8006f36:	6822      	ldr	r2, [r4, #0]
 8006f38:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006f3c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006f40:	f040 8103 	bne.w	800714a <_scanf_float+0x40e>
 8006f44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006f48:	6022      	str	r2, [r4, #0]
 8006f4a:	2501      	movs	r5, #1
 8006f4c:	e7c2      	b.n	8006ed4 <_scanf_float+0x198>
 8006f4e:	2d03      	cmp	r5, #3
 8006f50:	d0e3      	beq.n	8006f1a <_scanf_float+0x1de>
 8006f52:	2d05      	cmp	r5, #5
 8006f54:	e7df      	b.n	8006f16 <_scanf_float+0x1da>
 8006f56:	2d02      	cmp	r5, #2
 8006f58:	f47f af23 	bne.w	8006da2 <_scanf_float+0x66>
 8006f5c:	2503      	movs	r5, #3
 8006f5e:	e7b9      	b.n	8006ed4 <_scanf_float+0x198>
 8006f60:	2d06      	cmp	r5, #6
 8006f62:	f47f af1e 	bne.w	8006da2 <_scanf_float+0x66>
 8006f66:	2507      	movs	r5, #7
 8006f68:	e7b4      	b.n	8006ed4 <_scanf_float+0x198>
 8006f6a:	6822      	ldr	r2, [r4, #0]
 8006f6c:	0591      	lsls	r1, r2, #22
 8006f6e:	f57f af18 	bpl.w	8006da2 <_scanf_float+0x66>
 8006f72:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006f76:	6022      	str	r2, [r4, #0]
 8006f78:	9702      	str	r7, [sp, #8]
 8006f7a:	e7ab      	b.n	8006ed4 <_scanf_float+0x198>
 8006f7c:	6822      	ldr	r2, [r4, #0]
 8006f7e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006f82:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006f86:	d005      	beq.n	8006f94 <_scanf_float+0x258>
 8006f88:	0550      	lsls	r0, r2, #21
 8006f8a:	f57f af0a 	bpl.w	8006da2 <_scanf_float+0x66>
 8006f8e:	2f00      	cmp	r7, #0
 8006f90:	f000 80db 	beq.w	800714a <_scanf_float+0x40e>
 8006f94:	0591      	lsls	r1, r2, #22
 8006f96:	bf58      	it	pl
 8006f98:	9902      	ldrpl	r1, [sp, #8]
 8006f9a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006f9e:	bf58      	it	pl
 8006fa0:	1a79      	subpl	r1, r7, r1
 8006fa2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006fa6:	bf58      	it	pl
 8006fa8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006fac:	6022      	str	r2, [r4, #0]
 8006fae:	2700      	movs	r7, #0
 8006fb0:	e790      	b.n	8006ed4 <_scanf_float+0x198>
 8006fb2:	f04f 0a03 	mov.w	sl, #3
 8006fb6:	e78d      	b.n	8006ed4 <_scanf_float+0x198>
 8006fb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	4798      	blx	r3
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	f43f aedf 	beq.w	8006d86 <_scanf_float+0x4a>
 8006fc8:	e6eb      	b.n	8006da2 <_scanf_float+0x66>
 8006fca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fd2:	464a      	mov	r2, r9
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	4798      	blx	r3
 8006fd8:	6923      	ldr	r3, [r4, #16]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	6123      	str	r3, [r4, #16]
 8006fde:	e6eb      	b.n	8006db8 <_scanf_float+0x7c>
 8006fe0:	1e6b      	subs	r3, r5, #1
 8006fe2:	2b06      	cmp	r3, #6
 8006fe4:	d824      	bhi.n	8007030 <_scanf_float+0x2f4>
 8006fe6:	2d02      	cmp	r5, #2
 8006fe8:	d836      	bhi.n	8007058 <_scanf_float+0x31c>
 8006fea:	9b01      	ldr	r3, [sp, #4]
 8006fec:	429e      	cmp	r6, r3
 8006fee:	f67f aee7 	bls.w	8006dc0 <_scanf_float+0x84>
 8006ff2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ff6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ffa:	464a      	mov	r2, r9
 8006ffc:	4640      	mov	r0, r8
 8006ffe:	4798      	blx	r3
 8007000:	6923      	ldr	r3, [r4, #16]
 8007002:	3b01      	subs	r3, #1
 8007004:	6123      	str	r3, [r4, #16]
 8007006:	e7f0      	b.n	8006fea <_scanf_float+0x2ae>
 8007008:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800700c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007010:	464a      	mov	r2, r9
 8007012:	4640      	mov	r0, r8
 8007014:	4798      	blx	r3
 8007016:	6923      	ldr	r3, [r4, #16]
 8007018:	3b01      	subs	r3, #1
 800701a:	6123      	str	r3, [r4, #16]
 800701c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007020:	fa5f fa8a 	uxtb.w	sl, sl
 8007024:	f1ba 0f02 	cmp.w	sl, #2
 8007028:	d1ee      	bne.n	8007008 <_scanf_float+0x2cc>
 800702a:	3d03      	subs	r5, #3
 800702c:	b2ed      	uxtb	r5, r5
 800702e:	1b76      	subs	r6, r6, r5
 8007030:	6823      	ldr	r3, [r4, #0]
 8007032:	05da      	lsls	r2, r3, #23
 8007034:	d530      	bpl.n	8007098 <_scanf_float+0x35c>
 8007036:	055b      	lsls	r3, r3, #21
 8007038:	d511      	bpl.n	800705e <_scanf_float+0x322>
 800703a:	9b01      	ldr	r3, [sp, #4]
 800703c:	429e      	cmp	r6, r3
 800703e:	f67f aebf 	bls.w	8006dc0 <_scanf_float+0x84>
 8007042:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007046:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800704a:	464a      	mov	r2, r9
 800704c:	4640      	mov	r0, r8
 800704e:	4798      	blx	r3
 8007050:	6923      	ldr	r3, [r4, #16]
 8007052:	3b01      	subs	r3, #1
 8007054:	6123      	str	r3, [r4, #16]
 8007056:	e7f0      	b.n	800703a <_scanf_float+0x2fe>
 8007058:	46aa      	mov	sl, r5
 800705a:	46b3      	mov	fp, r6
 800705c:	e7de      	b.n	800701c <_scanf_float+0x2e0>
 800705e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007062:	6923      	ldr	r3, [r4, #16]
 8007064:	2965      	cmp	r1, #101	@ 0x65
 8007066:	f103 33ff 	add.w	r3, r3, #4294967295
 800706a:	f106 35ff 	add.w	r5, r6, #4294967295
 800706e:	6123      	str	r3, [r4, #16]
 8007070:	d00c      	beq.n	800708c <_scanf_float+0x350>
 8007072:	2945      	cmp	r1, #69	@ 0x45
 8007074:	d00a      	beq.n	800708c <_scanf_float+0x350>
 8007076:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800707a:	464a      	mov	r2, r9
 800707c:	4640      	mov	r0, r8
 800707e:	4798      	blx	r3
 8007080:	6923      	ldr	r3, [r4, #16]
 8007082:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007086:	3b01      	subs	r3, #1
 8007088:	1eb5      	subs	r5, r6, #2
 800708a:	6123      	str	r3, [r4, #16]
 800708c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007090:	464a      	mov	r2, r9
 8007092:	4640      	mov	r0, r8
 8007094:	4798      	blx	r3
 8007096:	462e      	mov	r6, r5
 8007098:	6822      	ldr	r2, [r4, #0]
 800709a:	f012 0210 	ands.w	r2, r2, #16
 800709e:	d001      	beq.n	80070a4 <_scanf_float+0x368>
 80070a0:	2000      	movs	r0, #0
 80070a2:	e68e      	b.n	8006dc2 <_scanf_float+0x86>
 80070a4:	7032      	strb	r2, [r6, #0]
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80070ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070b0:	d125      	bne.n	80070fe <_scanf_float+0x3c2>
 80070b2:	9b02      	ldr	r3, [sp, #8]
 80070b4:	429f      	cmp	r7, r3
 80070b6:	d00a      	beq.n	80070ce <_scanf_float+0x392>
 80070b8:	1bda      	subs	r2, r3, r7
 80070ba:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80070be:	429e      	cmp	r6, r3
 80070c0:	bf28      	it	cs
 80070c2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80070c6:	4922      	ldr	r1, [pc, #136]	@ (8007150 <_scanf_float+0x414>)
 80070c8:	4630      	mov	r0, r6
 80070ca:	f000 f907 	bl	80072dc <siprintf>
 80070ce:	9901      	ldr	r1, [sp, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	4640      	mov	r0, r8
 80070d4:	f002 fca0 	bl	8009a18 <_strtod_r>
 80070d8:	9b03      	ldr	r3, [sp, #12]
 80070da:	6821      	ldr	r1, [r4, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f011 0f02 	tst.w	r1, #2
 80070e2:	ec57 6b10 	vmov	r6, r7, d0
 80070e6:	f103 0204 	add.w	r2, r3, #4
 80070ea:	d015      	beq.n	8007118 <_scanf_float+0x3dc>
 80070ec:	9903      	ldr	r1, [sp, #12]
 80070ee:	600a      	str	r2, [r1, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	e9c3 6700 	strd	r6, r7, [r3]
 80070f6:	68e3      	ldr	r3, [r4, #12]
 80070f8:	3301      	adds	r3, #1
 80070fa:	60e3      	str	r3, [r4, #12]
 80070fc:	e7d0      	b.n	80070a0 <_scanf_float+0x364>
 80070fe:	9b04      	ldr	r3, [sp, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0e4      	beq.n	80070ce <_scanf_float+0x392>
 8007104:	9905      	ldr	r1, [sp, #20]
 8007106:	230a      	movs	r3, #10
 8007108:	3101      	adds	r1, #1
 800710a:	4640      	mov	r0, r8
 800710c:	f002 fd04 	bl	8009b18 <_strtol_r>
 8007110:	9b04      	ldr	r3, [sp, #16]
 8007112:	9e05      	ldr	r6, [sp, #20]
 8007114:	1ac2      	subs	r2, r0, r3
 8007116:	e7d0      	b.n	80070ba <_scanf_float+0x37e>
 8007118:	f011 0f04 	tst.w	r1, #4
 800711c:	9903      	ldr	r1, [sp, #12]
 800711e:	600a      	str	r2, [r1, #0]
 8007120:	d1e6      	bne.n	80070f0 <_scanf_float+0x3b4>
 8007122:	681d      	ldr	r5, [r3, #0]
 8007124:	4632      	mov	r2, r6
 8007126:	463b      	mov	r3, r7
 8007128:	4630      	mov	r0, r6
 800712a:	4639      	mov	r1, r7
 800712c:	f7f9 fd1e 	bl	8000b6c <__aeabi_dcmpun>
 8007130:	b128      	cbz	r0, 800713e <_scanf_float+0x402>
 8007132:	4808      	ldr	r0, [pc, #32]	@ (8007154 <_scanf_float+0x418>)
 8007134:	f000 fa66 	bl	8007604 <nanf>
 8007138:	ed85 0a00 	vstr	s0, [r5]
 800713c:	e7db      	b.n	80070f6 <_scanf_float+0x3ba>
 800713e:	4630      	mov	r0, r6
 8007140:	4639      	mov	r1, r7
 8007142:	f7f9 fd71 	bl	8000c28 <__aeabi_d2f>
 8007146:	6028      	str	r0, [r5, #0]
 8007148:	e7d5      	b.n	80070f6 <_scanf_float+0x3ba>
 800714a:	2700      	movs	r7, #0
 800714c:	e62e      	b.n	8006dac <_scanf_float+0x70>
 800714e:	bf00      	nop
 8007150:	0800b9b6 	.word	0x0800b9b6
 8007154:	0800bb12 	.word	0x0800bb12

08007158 <std>:
 8007158:	2300      	movs	r3, #0
 800715a:	b510      	push	{r4, lr}
 800715c:	4604      	mov	r4, r0
 800715e:	e9c0 3300 	strd	r3, r3, [r0]
 8007162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007166:	6083      	str	r3, [r0, #8]
 8007168:	8181      	strh	r1, [r0, #12]
 800716a:	6643      	str	r3, [r0, #100]	@ 0x64
 800716c:	81c2      	strh	r2, [r0, #14]
 800716e:	6183      	str	r3, [r0, #24]
 8007170:	4619      	mov	r1, r3
 8007172:	2208      	movs	r2, #8
 8007174:	305c      	adds	r0, #92	@ 0x5c
 8007176:	f000 f991 	bl	800749c <memset>
 800717a:	4b0d      	ldr	r3, [pc, #52]	@ (80071b0 <std+0x58>)
 800717c:	6263      	str	r3, [r4, #36]	@ 0x24
 800717e:	4b0d      	ldr	r3, [pc, #52]	@ (80071b4 <std+0x5c>)
 8007180:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007182:	4b0d      	ldr	r3, [pc, #52]	@ (80071b8 <std+0x60>)
 8007184:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007186:	4b0d      	ldr	r3, [pc, #52]	@ (80071bc <std+0x64>)
 8007188:	6323      	str	r3, [r4, #48]	@ 0x30
 800718a:	4b0d      	ldr	r3, [pc, #52]	@ (80071c0 <std+0x68>)
 800718c:	6224      	str	r4, [r4, #32]
 800718e:	429c      	cmp	r4, r3
 8007190:	d006      	beq.n	80071a0 <std+0x48>
 8007192:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007196:	4294      	cmp	r4, r2
 8007198:	d002      	beq.n	80071a0 <std+0x48>
 800719a:	33d0      	adds	r3, #208	@ 0xd0
 800719c:	429c      	cmp	r4, r3
 800719e:	d105      	bne.n	80071ac <std+0x54>
 80071a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80071a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071a8:	f000 ba1a 	b.w	80075e0 <__retarget_lock_init_recursive>
 80071ac:	bd10      	pop	{r4, pc}
 80071ae:	bf00      	nop
 80071b0:	08007379 	.word	0x08007379
 80071b4:	0800739f 	.word	0x0800739f
 80071b8:	080073d7 	.word	0x080073d7
 80071bc:	080073fb 	.word	0x080073fb
 80071c0:	200025a0 	.word	0x200025a0

080071c4 <stdio_exit_handler>:
 80071c4:	4a02      	ldr	r2, [pc, #8]	@ (80071d0 <stdio_exit_handler+0xc>)
 80071c6:	4903      	ldr	r1, [pc, #12]	@ (80071d4 <stdio_exit_handler+0x10>)
 80071c8:	4803      	ldr	r0, [pc, #12]	@ (80071d8 <stdio_exit_handler+0x14>)
 80071ca:	f000 b869 	b.w	80072a0 <_fwalk_sglue>
 80071ce:	bf00      	nop
 80071d0:	20000018 	.word	0x20000018
 80071d4:	0800a511 	.word	0x0800a511
 80071d8:	20000028 	.word	0x20000028

080071dc <cleanup_stdio>:
 80071dc:	6841      	ldr	r1, [r0, #4]
 80071de:	4b0c      	ldr	r3, [pc, #48]	@ (8007210 <cleanup_stdio+0x34>)
 80071e0:	4299      	cmp	r1, r3
 80071e2:	b510      	push	{r4, lr}
 80071e4:	4604      	mov	r4, r0
 80071e6:	d001      	beq.n	80071ec <cleanup_stdio+0x10>
 80071e8:	f003 f992 	bl	800a510 <_fflush_r>
 80071ec:	68a1      	ldr	r1, [r4, #8]
 80071ee:	4b09      	ldr	r3, [pc, #36]	@ (8007214 <cleanup_stdio+0x38>)
 80071f0:	4299      	cmp	r1, r3
 80071f2:	d002      	beq.n	80071fa <cleanup_stdio+0x1e>
 80071f4:	4620      	mov	r0, r4
 80071f6:	f003 f98b 	bl	800a510 <_fflush_r>
 80071fa:	68e1      	ldr	r1, [r4, #12]
 80071fc:	4b06      	ldr	r3, [pc, #24]	@ (8007218 <cleanup_stdio+0x3c>)
 80071fe:	4299      	cmp	r1, r3
 8007200:	d004      	beq.n	800720c <cleanup_stdio+0x30>
 8007202:	4620      	mov	r0, r4
 8007204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007208:	f003 b982 	b.w	800a510 <_fflush_r>
 800720c:	bd10      	pop	{r4, pc}
 800720e:	bf00      	nop
 8007210:	200025a0 	.word	0x200025a0
 8007214:	20002608 	.word	0x20002608
 8007218:	20002670 	.word	0x20002670

0800721c <global_stdio_init.part.0>:
 800721c:	b510      	push	{r4, lr}
 800721e:	4b0b      	ldr	r3, [pc, #44]	@ (800724c <global_stdio_init.part.0+0x30>)
 8007220:	4c0b      	ldr	r4, [pc, #44]	@ (8007250 <global_stdio_init.part.0+0x34>)
 8007222:	4a0c      	ldr	r2, [pc, #48]	@ (8007254 <global_stdio_init.part.0+0x38>)
 8007224:	601a      	str	r2, [r3, #0]
 8007226:	4620      	mov	r0, r4
 8007228:	2200      	movs	r2, #0
 800722a:	2104      	movs	r1, #4
 800722c:	f7ff ff94 	bl	8007158 <std>
 8007230:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007234:	2201      	movs	r2, #1
 8007236:	2109      	movs	r1, #9
 8007238:	f7ff ff8e 	bl	8007158 <std>
 800723c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007240:	2202      	movs	r2, #2
 8007242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007246:	2112      	movs	r1, #18
 8007248:	f7ff bf86 	b.w	8007158 <std>
 800724c:	200026d8 	.word	0x200026d8
 8007250:	200025a0 	.word	0x200025a0
 8007254:	080071c5 	.word	0x080071c5

08007258 <__sfp_lock_acquire>:
 8007258:	4801      	ldr	r0, [pc, #4]	@ (8007260 <__sfp_lock_acquire+0x8>)
 800725a:	f000 b9c2 	b.w	80075e2 <__retarget_lock_acquire_recursive>
 800725e:	bf00      	nop
 8007260:	200026e1 	.word	0x200026e1

08007264 <__sfp_lock_release>:
 8007264:	4801      	ldr	r0, [pc, #4]	@ (800726c <__sfp_lock_release+0x8>)
 8007266:	f000 b9bd 	b.w	80075e4 <__retarget_lock_release_recursive>
 800726a:	bf00      	nop
 800726c:	200026e1 	.word	0x200026e1

08007270 <__sinit>:
 8007270:	b510      	push	{r4, lr}
 8007272:	4604      	mov	r4, r0
 8007274:	f7ff fff0 	bl	8007258 <__sfp_lock_acquire>
 8007278:	6a23      	ldr	r3, [r4, #32]
 800727a:	b11b      	cbz	r3, 8007284 <__sinit+0x14>
 800727c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007280:	f7ff bff0 	b.w	8007264 <__sfp_lock_release>
 8007284:	4b04      	ldr	r3, [pc, #16]	@ (8007298 <__sinit+0x28>)
 8007286:	6223      	str	r3, [r4, #32]
 8007288:	4b04      	ldr	r3, [pc, #16]	@ (800729c <__sinit+0x2c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1f5      	bne.n	800727c <__sinit+0xc>
 8007290:	f7ff ffc4 	bl	800721c <global_stdio_init.part.0>
 8007294:	e7f2      	b.n	800727c <__sinit+0xc>
 8007296:	bf00      	nop
 8007298:	080071dd 	.word	0x080071dd
 800729c:	200026d8 	.word	0x200026d8

080072a0 <_fwalk_sglue>:
 80072a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072a4:	4607      	mov	r7, r0
 80072a6:	4688      	mov	r8, r1
 80072a8:	4614      	mov	r4, r2
 80072aa:	2600      	movs	r6, #0
 80072ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072b0:	f1b9 0901 	subs.w	r9, r9, #1
 80072b4:	d505      	bpl.n	80072c2 <_fwalk_sglue+0x22>
 80072b6:	6824      	ldr	r4, [r4, #0]
 80072b8:	2c00      	cmp	r4, #0
 80072ba:	d1f7      	bne.n	80072ac <_fwalk_sglue+0xc>
 80072bc:	4630      	mov	r0, r6
 80072be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072c2:	89ab      	ldrh	r3, [r5, #12]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d907      	bls.n	80072d8 <_fwalk_sglue+0x38>
 80072c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072cc:	3301      	adds	r3, #1
 80072ce:	d003      	beq.n	80072d8 <_fwalk_sglue+0x38>
 80072d0:	4629      	mov	r1, r5
 80072d2:	4638      	mov	r0, r7
 80072d4:	47c0      	blx	r8
 80072d6:	4306      	orrs	r6, r0
 80072d8:	3568      	adds	r5, #104	@ 0x68
 80072da:	e7e9      	b.n	80072b0 <_fwalk_sglue+0x10>

080072dc <siprintf>:
 80072dc:	b40e      	push	{r1, r2, r3}
 80072de:	b510      	push	{r4, lr}
 80072e0:	b09d      	sub	sp, #116	@ 0x74
 80072e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80072e4:	9002      	str	r0, [sp, #8]
 80072e6:	9006      	str	r0, [sp, #24]
 80072e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80072ec:	480a      	ldr	r0, [pc, #40]	@ (8007318 <siprintf+0x3c>)
 80072ee:	9107      	str	r1, [sp, #28]
 80072f0:	9104      	str	r1, [sp, #16]
 80072f2:	490a      	ldr	r1, [pc, #40]	@ (800731c <siprintf+0x40>)
 80072f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80072f8:	9105      	str	r1, [sp, #20]
 80072fa:	2400      	movs	r4, #0
 80072fc:	a902      	add	r1, sp, #8
 80072fe:	6800      	ldr	r0, [r0, #0]
 8007300:	9301      	str	r3, [sp, #4]
 8007302:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007304:	f002 fc66 	bl	8009bd4 <_svfiprintf_r>
 8007308:	9b02      	ldr	r3, [sp, #8]
 800730a:	701c      	strb	r4, [r3, #0]
 800730c:	b01d      	add	sp, #116	@ 0x74
 800730e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007312:	b003      	add	sp, #12
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	20000024 	.word	0x20000024
 800731c:	ffff0208 	.word	0xffff0208

08007320 <siscanf>:
 8007320:	b40e      	push	{r1, r2, r3}
 8007322:	b570      	push	{r4, r5, r6, lr}
 8007324:	b09d      	sub	sp, #116	@ 0x74
 8007326:	ac21      	add	r4, sp, #132	@ 0x84
 8007328:	2500      	movs	r5, #0
 800732a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800732e:	f854 6b04 	ldr.w	r6, [r4], #4
 8007332:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007336:	951b      	str	r5, [sp, #108]	@ 0x6c
 8007338:	9002      	str	r0, [sp, #8]
 800733a:	9006      	str	r0, [sp, #24]
 800733c:	f7f8 ffb8 	bl	80002b0 <strlen>
 8007340:	4b0b      	ldr	r3, [pc, #44]	@ (8007370 <siscanf+0x50>)
 8007342:	9003      	str	r0, [sp, #12]
 8007344:	9007      	str	r0, [sp, #28]
 8007346:	480b      	ldr	r0, [pc, #44]	@ (8007374 <siscanf+0x54>)
 8007348:	930b      	str	r3, [sp, #44]	@ 0x2c
 800734a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800734e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007352:	4632      	mov	r2, r6
 8007354:	4623      	mov	r3, r4
 8007356:	a902      	add	r1, sp, #8
 8007358:	6800      	ldr	r0, [r0, #0]
 800735a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800735c:	9514      	str	r5, [sp, #80]	@ 0x50
 800735e:	9401      	str	r4, [sp, #4]
 8007360:	f002 fd8e 	bl	8009e80 <__ssvfiscanf_r>
 8007364:	b01d      	add	sp, #116	@ 0x74
 8007366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800736a:	b003      	add	sp, #12
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	0800739b 	.word	0x0800739b
 8007374:	20000024 	.word	0x20000024

08007378 <__sread>:
 8007378:	b510      	push	{r4, lr}
 800737a:	460c      	mov	r4, r1
 800737c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007380:	f000 f8e0 	bl	8007544 <_read_r>
 8007384:	2800      	cmp	r0, #0
 8007386:	bfab      	itete	ge
 8007388:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800738a:	89a3      	ldrhlt	r3, [r4, #12]
 800738c:	181b      	addge	r3, r3, r0
 800738e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007392:	bfac      	ite	ge
 8007394:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007396:	81a3      	strhlt	r3, [r4, #12]
 8007398:	bd10      	pop	{r4, pc}

0800739a <__seofread>:
 800739a:	2000      	movs	r0, #0
 800739c:	4770      	bx	lr

0800739e <__swrite>:
 800739e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a2:	461f      	mov	r7, r3
 80073a4:	898b      	ldrh	r3, [r1, #12]
 80073a6:	05db      	lsls	r3, r3, #23
 80073a8:	4605      	mov	r5, r0
 80073aa:	460c      	mov	r4, r1
 80073ac:	4616      	mov	r6, r2
 80073ae:	d505      	bpl.n	80073bc <__swrite+0x1e>
 80073b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b4:	2302      	movs	r3, #2
 80073b6:	2200      	movs	r2, #0
 80073b8:	f000 f8b2 	bl	8007520 <_lseek_r>
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073c6:	81a3      	strh	r3, [r4, #12]
 80073c8:	4632      	mov	r2, r6
 80073ca:	463b      	mov	r3, r7
 80073cc:	4628      	mov	r0, r5
 80073ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073d2:	f000 b8c9 	b.w	8007568 <_write_r>

080073d6 <__sseek>:
 80073d6:	b510      	push	{r4, lr}
 80073d8:	460c      	mov	r4, r1
 80073da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073de:	f000 f89f 	bl	8007520 <_lseek_r>
 80073e2:	1c43      	adds	r3, r0, #1
 80073e4:	89a3      	ldrh	r3, [r4, #12]
 80073e6:	bf15      	itete	ne
 80073e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80073ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80073ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80073f2:	81a3      	strheq	r3, [r4, #12]
 80073f4:	bf18      	it	ne
 80073f6:	81a3      	strhne	r3, [r4, #12]
 80073f8:	bd10      	pop	{r4, pc}

080073fa <__sclose>:
 80073fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073fe:	f000 b87f 	b.w	8007500 <_close_r>

08007402 <_vsniprintf_r>:
 8007402:	b530      	push	{r4, r5, lr}
 8007404:	4614      	mov	r4, r2
 8007406:	2c00      	cmp	r4, #0
 8007408:	b09b      	sub	sp, #108	@ 0x6c
 800740a:	4605      	mov	r5, r0
 800740c:	461a      	mov	r2, r3
 800740e:	da05      	bge.n	800741c <_vsniprintf_r+0x1a>
 8007410:	238b      	movs	r3, #139	@ 0x8b
 8007412:	6003      	str	r3, [r0, #0]
 8007414:	f04f 30ff 	mov.w	r0, #4294967295
 8007418:	b01b      	add	sp, #108	@ 0x6c
 800741a:	bd30      	pop	{r4, r5, pc}
 800741c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007420:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007424:	f04f 0300 	mov.w	r3, #0
 8007428:	9319      	str	r3, [sp, #100]	@ 0x64
 800742a:	bf14      	ite	ne
 800742c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007430:	4623      	moveq	r3, r4
 8007432:	9302      	str	r3, [sp, #8]
 8007434:	9305      	str	r3, [sp, #20]
 8007436:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800743a:	9100      	str	r1, [sp, #0]
 800743c:	9104      	str	r1, [sp, #16]
 800743e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007442:	4669      	mov	r1, sp
 8007444:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007446:	f002 fbc5 	bl	8009bd4 <_svfiprintf_r>
 800744a:	1c43      	adds	r3, r0, #1
 800744c:	bfbc      	itt	lt
 800744e:	238b      	movlt	r3, #139	@ 0x8b
 8007450:	602b      	strlt	r3, [r5, #0]
 8007452:	2c00      	cmp	r4, #0
 8007454:	d0e0      	beq.n	8007418 <_vsniprintf_r+0x16>
 8007456:	9b00      	ldr	r3, [sp, #0]
 8007458:	2200      	movs	r2, #0
 800745a:	701a      	strb	r2, [r3, #0]
 800745c:	e7dc      	b.n	8007418 <_vsniprintf_r+0x16>
	...

08007460 <vsniprintf>:
 8007460:	b507      	push	{r0, r1, r2, lr}
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	4613      	mov	r3, r2
 8007466:	460a      	mov	r2, r1
 8007468:	4601      	mov	r1, r0
 800746a:	4803      	ldr	r0, [pc, #12]	@ (8007478 <vsniprintf+0x18>)
 800746c:	6800      	ldr	r0, [r0, #0]
 800746e:	f7ff ffc8 	bl	8007402 <_vsniprintf_r>
 8007472:	b003      	add	sp, #12
 8007474:	f85d fb04 	ldr.w	pc, [sp], #4
 8007478:	20000024 	.word	0x20000024

0800747c <memcmp>:
 800747c:	b510      	push	{r4, lr}
 800747e:	3901      	subs	r1, #1
 8007480:	4402      	add	r2, r0
 8007482:	4290      	cmp	r0, r2
 8007484:	d101      	bne.n	800748a <memcmp+0xe>
 8007486:	2000      	movs	r0, #0
 8007488:	e005      	b.n	8007496 <memcmp+0x1a>
 800748a:	7803      	ldrb	r3, [r0, #0]
 800748c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007490:	42a3      	cmp	r3, r4
 8007492:	d001      	beq.n	8007498 <memcmp+0x1c>
 8007494:	1b18      	subs	r0, r3, r4
 8007496:	bd10      	pop	{r4, pc}
 8007498:	3001      	adds	r0, #1
 800749a:	e7f2      	b.n	8007482 <memcmp+0x6>

0800749c <memset>:
 800749c:	4402      	add	r2, r0
 800749e:	4603      	mov	r3, r0
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d100      	bne.n	80074a6 <memset+0xa>
 80074a4:	4770      	bx	lr
 80074a6:	f803 1b01 	strb.w	r1, [r3], #1
 80074aa:	e7f9      	b.n	80074a0 <memset+0x4>

080074ac <strncmp>:
 80074ac:	b510      	push	{r4, lr}
 80074ae:	b16a      	cbz	r2, 80074cc <strncmp+0x20>
 80074b0:	3901      	subs	r1, #1
 80074b2:	1884      	adds	r4, r0, r2
 80074b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80074bc:	429a      	cmp	r2, r3
 80074be:	d103      	bne.n	80074c8 <strncmp+0x1c>
 80074c0:	42a0      	cmp	r0, r4
 80074c2:	d001      	beq.n	80074c8 <strncmp+0x1c>
 80074c4:	2a00      	cmp	r2, #0
 80074c6:	d1f5      	bne.n	80074b4 <strncmp+0x8>
 80074c8:	1ad0      	subs	r0, r2, r3
 80074ca:	bd10      	pop	{r4, pc}
 80074cc:	4610      	mov	r0, r2
 80074ce:	e7fc      	b.n	80074ca <strncmp+0x1e>

080074d0 <strncpy>:
 80074d0:	b510      	push	{r4, lr}
 80074d2:	3901      	subs	r1, #1
 80074d4:	4603      	mov	r3, r0
 80074d6:	b132      	cbz	r2, 80074e6 <strncpy+0x16>
 80074d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80074dc:	f803 4b01 	strb.w	r4, [r3], #1
 80074e0:	3a01      	subs	r2, #1
 80074e2:	2c00      	cmp	r4, #0
 80074e4:	d1f7      	bne.n	80074d6 <strncpy+0x6>
 80074e6:	441a      	add	r2, r3
 80074e8:	2100      	movs	r1, #0
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d100      	bne.n	80074f0 <strncpy+0x20>
 80074ee:	bd10      	pop	{r4, pc}
 80074f0:	f803 1b01 	strb.w	r1, [r3], #1
 80074f4:	e7f9      	b.n	80074ea <strncpy+0x1a>
	...

080074f8 <_localeconv_r>:
 80074f8:	4800      	ldr	r0, [pc, #0]	@ (80074fc <_localeconv_r+0x4>)
 80074fa:	4770      	bx	lr
 80074fc:	20000164 	.word	0x20000164

08007500 <_close_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	4d06      	ldr	r5, [pc, #24]	@ (800751c <_close_r+0x1c>)
 8007504:	2300      	movs	r3, #0
 8007506:	4604      	mov	r4, r0
 8007508:	4608      	mov	r0, r1
 800750a:	602b      	str	r3, [r5, #0]
 800750c:	f7fb f9fc 	bl	8002908 <_close>
 8007510:	1c43      	adds	r3, r0, #1
 8007512:	d102      	bne.n	800751a <_close_r+0x1a>
 8007514:	682b      	ldr	r3, [r5, #0]
 8007516:	b103      	cbz	r3, 800751a <_close_r+0x1a>
 8007518:	6023      	str	r3, [r4, #0]
 800751a:	bd38      	pop	{r3, r4, r5, pc}
 800751c:	200026dc 	.word	0x200026dc

08007520 <_lseek_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	4d07      	ldr	r5, [pc, #28]	@ (8007540 <_lseek_r+0x20>)
 8007524:	4604      	mov	r4, r0
 8007526:	4608      	mov	r0, r1
 8007528:	4611      	mov	r1, r2
 800752a:	2200      	movs	r2, #0
 800752c:	602a      	str	r2, [r5, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	f7fb fa11 	bl	8002956 <_lseek>
 8007534:	1c43      	adds	r3, r0, #1
 8007536:	d102      	bne.n	800753e <_lseek_r+0x1e>
 8007538:	682b      	ldr	r3, [r5, #0]
 800753a:	b103      	cbz	r3, 800753e <_lseek_r+0x1e>
 800753c:	6023      	str	r3, [r4, #0]
 800753e:	bd38      	pop	{r3, r4, r5, pc}
 8007540:	200026dc 	.word	0x200026dc

08007544 <_read_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	4d07      	ldr	r5, [pc, #28]	@ (8007564 <_read_r+0x20>)
 8007548:	4604      	mov	r4, r0
 800754a:	4608      	mov	r0, r1
 800754c:	4611      	mov	r1, r2
 800754e:	2200      	movs	r2, #0
 8007550:	602a      	str	r2, [r5, #0]
 8007552:	461a      	mov	r2, r3
 8007554:	f7fb f99f 	bl	8002896 <_read>
 8007558:	1c43      	adds	r3, r0, #1
 800755a:	d102      	bne.n	8007562 <_read_r+0x1e>
 800755c:	682b      	ldr	r3, [r5, #0]
 800755e:	b103      	cbz	r3, 8007562 <_read_r+0x1e>
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	bd38      	pop	{r3, r4, r5, pc}
 8007564:	200026dc 	.word	0x200026dc

08007568 <_write_r>:
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	4d07      	ldr	r5, [pc, #28]	@ (8007588 <_write_r+0x20>)
 800756c:	4604      	mov	r4, r0
 800756e:	4608      	mov	r0, r1
 8007570:	4611      	mov	r1, r2
 8007572:	2200      	movs	r2, #0
 8007574:	602a      	str	r2, [r5, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	f7fb f9aa 	bl	80028d0 <_write>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_write_r+0x1e>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	b103      	cbz	r3, 8007586 <_write_r+0x1e>
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	200026dc 	.word	0x200026dc

0800758c <__errno>:
 800758c:	4b01      	ldr	r3, [pc, #4]	@ (8007594 <__errno+0x8>)
 800758e:	6818      	ldr	r0, [r3, #0]
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	20000024 	.word	0x20000024

08007598 <__libc_init_array>:
 8007598:	b570      	push	{r4, r5, r6, lr}
 800759a:	4d0d      	ldr	r5, [pc, #52]	@ (80075d0 <__libc_init_array+0x38>)
 800759c:	4c0d      	ldr	r4, [pc, #52]	@ (80075d4 <__libc_init_array+0x3c>)
 800759e:	1b64      	subs	r4, r4, r5
 80075a0:	10a4      	asrs	r4, r4, #2
 80075a2:	2600      	movs	r6, #0
 80075a4:	42a6      	cmp	r6, r4
 80075a6:	d109      	bne.n	80075bc <__libc_init_array+0x24>
 80075a8:	4d0b      	ldr	r5, [pc, #44]	@ (80075d8 <__libc_init_array+0x40>)
 80075aa:	4c0c      	ldr	r4, [pc, #48]	@ (80075dc <__libc_init_array+0x44>)
 80075ac:	f003 ff68 	bl	800b480 <_init>
 80075b0:	1b64      	subs	r4, r4, r5
 80075b2:	10a4      	asrs	r4, r4, #2
 80075b4:	2600      	movs	r6, #0
 80075b6:	42a6      	cmp	r6, r4
 80075b8:	d105      	bne.n	80075c6 <__libc_init_array+0x2e>
 80075ba:	bd70      	pop	{r4, r5, r6, pc}
 80075bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80075c0:	4798      	blx	r3
 80075c2:	3601      	adds	r6, #1
 80075c4:	e7ee      	b.n	80075a4 <__libc_init_array+0xc>
 80075c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ca:	4798      	blx	r3
 80075cc:	3601      	adds	r6, #1
 80075ce:	e7f2      	b.n	80075b6 <__libc_init_array+0x1e>
 80075d0:	0800bdcc 	.word	0x0800bdcc
 80075d4:	0800bdcc 	.word	0x0800bdcc
 80075d8:	0800bdcc 	.word	0x0800bdcc
 80075dc:	0800bdd0 	.word	0x0800bdd0

080075e0 <__retarget_lock_init_recursive>:
 80075e0:	4770      	bx	lr

080075e2 <__retarget_lock_acquire_recursive>:
 80075e2:	4770      	bx	lr

080075e4 <__retarget_lock_release_recursive>:
 80075e4:	4770      	bx	lr

080075e6 <memcpy>:
 80075e6:	440a      	add	r2, r1
 80075e8:	4291      	cmp	r1, r2
 80075ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80075ee:	d100      	bne.n	80075f2 <memcpy+0xc>
 80075f0:	4770      	bx	lr
 80075f2:	b510      	push	{r4, lr}
 80075f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075fc:	4291      	cmp	r1, r2
 80075fe:	d1f9      	bne.n	80075f4 <memcpy+0xe>
 8007600:	bd10      	pop	{r4, pc}
	...

08007604 <nanf>:
 8007604:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800760c <nanf+0x8>
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	7fc00000 	.word	0x7fc00000

08007610 <quorem>:
 8007610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	6903      	ldr	r3, [r0, #16]
 8007616:	690c      	ldr	r4, [r1, #16]
 8007618:	42a3      	cmp	r3, r4
 800761a:	4607      	mov	r7, r0
 800761c:	db7e      	blt.n	800771c <quorem+0x10c>
 800761e:	3c01      	subs	r4, #1
 8007620:	f101 0814 	add.w	r8, r1, #20
 8007624:	00a3      	lsls	r3, r4, #2
 8007626:	f100 0514 	add.w	r5, r0, #20
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007636:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800763a:	3301      	adds	r3, #1
 800763c:	429a      	cmp	r2, r3
 800763e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007642:	fbb2 f6f3 	udiv	r6, r2, r3
 8007646:	d32e      	bcc.n	80076a6 <quorem+0x96>
 8007648:	f04f 0a00 	mov.w	sl, #0
 800764c:	46c4      	mov	ip, r8
 800764e:	46ae      	mov	lr, r5
 8007650:	46d3      	mov	fp, sl
 8007652:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007656:	b298      	uxth	r0, r3
 8007658:	fb06 a000 	mla	r0, r6, r0, sl
 800765c:	0c02      	lsrs	r2, r0, #16
 800765e:	0c1b      	lsrs	r3, r3, #16
 8007660:	fb06 2303 	mla	r3, r6, r3, r2
 8007664:	f8de 2000 	ldr.w	r2, [lr]
 8007668:	b280      	uxth	r0, r0
 800766a:	b292      	uxth	r2, r2
 800766c:	1a12      	subs	r2, r2, r0
 800766e:	445a      	add	r2, fp
 8007670:	f8de 0000 	ldr.w	r0, [lr]
 8007674:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007678:	b29b      	uxth	r3, r3
 800767a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800767e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007682:	b292      	uxth	r2, r2
 8007684:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007688:	45e1      	cmp	r9, ip
 800768a:	f84e 2b04 	str.w	r2, [lr], #4
 800768e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007692:	d2de      	bcs.n	8007652 <quorem+0x42>
 8007694:	9b00      	ldr	r3, [sp, #0]
 8007696:	58eb      	ldr	r3, [r5, r3]
 8007698:	b92b      	cbnz	r3, 80076a6 <quorem+0x96>
 800769a:	9b01      	ldr	r3, [sp, #4]
 800769c:	3b04      	subs	r3, #4
 800769e:	429d      	cmp	r5, r3
 80076a0:	461a      	mov	r2, r3
 80076a2:	d32f      	bcc.n	8007704 <quorem+0xf4>
 80076a4:	613c      	str	r4, [r7, #16]
 80076a6:	4638      	mov	r0, r7
 80076a8:	f001 f9c6 	bl	8008a38 <__mcmp>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	db25      	blt.n	80076fc <quorem+0xec>
 80076b0:	4629      	mov	r1, r5
 80076b2:	2000      	movs	r0, #0
 80076b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80076b8:	f8d1 c000 	ldr.w	ip, [r1]
 80076bc:	fa1f fe82 	uxth.w	lr, r2
 80076c0:	fa1f f38c 	uxth.w	r3, ip
 80076c4:	eba3 030e 	sub.w	r3, r3, lr
 80076c8:	4403      	add	r3, r0
 80076ca:	0c12      	lsrs	r2, r2, #16
 80076cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80076d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076da:	45c1      	cmp	r9, r8
 80076dc:	f841 3b04 	str.w	r3, [r1], #4
 80076e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076e4:	d2e6      	bcs.n	80076b4 <quorem+0xa4>
 80076e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ee:	b922      	cbnz	r2, 80076fa <quorem+0xea>
 80076f0:	3b04      	subs	r3, #4
 80076f2:	429d      	cmp	r5, r3
 80076f4:	461a      	mov	r2, r3
 80076f6:	d30b      	bcc.n	8007710 <quorem+0x100>
 80076f8:	613c      	str	r4, [r7, #16]
 80076fa:	3601      	adds	r6, #1
 80076fc:	4630      	mov	r0, r6
 80076fe:	b003      	add	sp, #12
 8007700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007704:	6812      	ldr	r2, [r2, #0]
 8007706:	3b04      	subs	r3, #4
 8007708:	2a00      	cmp	r2, #0
 800770a:	d1cb      	bne.n	80076a4 <quorem+0x94>
 800770c:	3c01      	subs	r4, #1
 800770e:	e7c6      	b.n	800769e <quorem+0x8e>
 8007710:	6812      	ldr	r2, [r2, #0]
 8007712:	3b04      	subs	r3, #4
 8007714:	2a00      	cmp	r2, #0
 8007716:	d1ef      	bne.n	80076f8 <quorem+0xe8>
 8007718:	3c01      	subs	r4, #1
 800771a:	e7ea      	b.n	80076f2 <quorem+0xe2>
 800771c:	2000      	movs	r0, #0
 800771e:	e7ee      	b.n	80076fe <quorem+0xee>

08007720 <_dtoa_r>:
 8007720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	69c7      	ldr	r7, [r0, #28]
 8007726:	b097      	sub	sp, #92	@ 0x5c
 8007728:	ed8d 0b04 	vstr	d0, [sp, #16]
 800772c:	ec55 4b10 	vmov	r4, r5, d0
 8007730:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007732:	9107      	str	r1, [sp, #28]
 8007734:	4681      	mov	r9, r0
 8007736:	920c      	str	r2, [sp, #48]	@ 0x30
 8007738:	9311      	str	r3, [sp, #68]	@ 0x44
 800773a:	b97f      	cbnz	r7, 800775c <_dtoa_r+0x3c>
 800773c:	2010      	movs	r0, #16
 800773e:	f000 fe09 	bl	8008354 <malloc>
 8007742:	4602      	mov	r2, r0
 8007744:	f8c9 001c 	str.w	r0, [r9, #28]
 8007748:	b920      	cbnz	r0, 8007754 <_dtoa_r+0x34>
 800774a:	4ba9      	ldr	r3, [pc, #676]	@ (80079f0 <_dtoa_r+0x2d0>)
 800774c:	21ef      	movs	r1, #239	@ 0xef
 800774e:	48a9      	ldr	r0, [pc, #676]	@ (80079f4 <_dtoa_r+0x2d4>)
 8007750:	f002 ffae 	bl	800a6b0 <__assert_func>
 8007754:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007758:	6007      	str	r7, [r0, #0]
 800775a:	60c7      	str	r7, [r0, #12]
 800775c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007760:	6819      	ldr	r1, [r3, #0]
 8007762:	b159      	cbz	r1, 800777c <_dtoa_r+0x5c>
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	604a      	str	r2, [r1, #4]
 8007768:	2301      	movs	r3, #1
 800776a:	4093      	lsls	r3, r2
 800776c:	608b      	str	r3, [r1, #8]
 800776e:	4648      	mov	r0, r9
 8007770:	f000 fee6 	bl	8008540 <_Bfree>
 8007774:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	1e2b      	subs	r3, r5, #0
 800777e:	bfb9      	ittee	lt
 8007780:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007784:	9305      	strlt	r3, [sp, #20]
 8007786:	2300      	movge	r3, #0
 8007788:	6033      	strge	r3, [r6, #0]
 800778a:	9f05      	ldr	r7, [sp, #20]
 800778c:	4b9a      	ldr	r3, [pc, #616]	@ (80079f8 <_dtoa_r+0x2d8>)
 800778e:	bfbc      	itt	lt
 8007790:	2201      	movlt	r2, #1
 8007792:	6032      	strlt	r2, [r6, #0]
 8007794:	43bb      	bics	r3, r7
 8007796:	d112      	bne.n	80077be <_dtoa_r+0x9e>
 8007798:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800779a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077a4:	4323      	orrs	r3, r4
 80077a6:	f000 855a 	beq.w	800825e <_dtoa_r+0xb3e>
 80077aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80077ac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007a0c <_dtoa_r+0x2ec>
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 855c 	beq.w	800826e <_dtoa_r+0xb4e>
 80077b6:	f10a 0303 	add.w	r3, sl, #3
 80077ba:	f000 bd56 	b.w	800826a <_dtoa_r+0xb4a>
 80077be:	ed9d 7b04 	vldr	d7, [sp, #16]
 80077c2:	2200      	movs	r2, #0
 80077c4:	ec51 0b17 	vmov	r0, r1, d7
 80077c8:	2300      	movs	r3, #0
 80077ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80077ce:	f7f9 f99b 	bl	8000b08 <__aeabi_dcmpeq>
 80077d2:	4680      	mov	r8, r0
 80077d4:	b158      	cbz	r0, 80077ee <_dtoa_r+0xce>
 80077d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80077d8:	2301      	movs	r3, #1
 80077da:	6013      	str	r3, [r2, #0]
 80077dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80077de:	b113      	cbz	r3, 80077e6 <_dtoa_r+0xc6>
 80077e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80077e2:	4b86      	ldr	r3, [pc, #536]	@ (80079fc <_dtoa_r+0x2dc>)
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007a10 <_dtoa_r+0x2f0>
 80077ea:	f000 bd40 	b.w	800826e <_dtoa_r+0xb4e>
 80077ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80077f2:	aa14      	add	r2, sp, #80	@ 0x50
 80077f4:	a915      	add	r1, sp, #84	@ 0x54
 80077f6:	4648      	mov	r0, r9
 80077f8:	f001 fa3e 	bl	8008c78 <__d2b>
 80077fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007800:	9002      	str	r0, [sp, #8]
 8007802:	2e00      	cmp	r6, #0
 8007804:	d078      	beq.n	80078f8 <_dtoa_r+0x1d8>
 8007806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007808:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800780c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007810:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007814:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007818:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800781c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007820:	4619      	mov	r1, r3
 8007822:	2200      	movs	r2, #0
 8007824:	4b76      	ldr	r3, [pc, #472]	@ (8007a00 <_dtoa_r+0x2e0>)
 8007826:	f7f8 fd4f 	bl	80002c8 <__aeabi_dsub>
 800782a:	a36b      	add	r3, pc, #428	@ (adr r3, 80079d8 <_dtoa_r+0x2b8>)
 800782c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007830:	f7f8 ff02 	bl	8000638 <__aeabi_dmul>
 8007834:	a36a      	add	r3, pc, #424	@ (adr r3, 80079e0 <_dtoa_r+0x2c0>)
 8007836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783a:	f7f8 fd47 	bl	80002cc <__adddf3>
 800783e:	4604      	mov	r4, r0
 8007840:	4630      	mov	r0, r6
 8007842:	460d      	mov	r5, r1
 8007844:	f7f8 fe8e 	bl	8000564 <__aeabi_i2d>
 8007848:	a367      	add	r3, pc, #412	@ (adr r3, 80079e8 <_dtoa_r+0x2c8>)
 800784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784e:	f7f8 fef3 	bl	8000638 <__aeabi_dmul>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	4620      	mov	r0, r4
 8007858:	4629      	mov	r1, r5
 800785a:	f7f8 fd37 	bl	80002cc <__adddf3>
 800785e:	4604      	mov	r4, r0
 8007860:	460d      	mov	r5, r1
 8007862:	f7f9 f999 	bl	8000b98 <__aeabi_d2iz>
 8007866:	2200      	movs	r2, #0
 8007868:	4607      	mov	r7, r0
 800786a:	2300      	movs	r3, #0
 800786c:	4620      	mov	r0, r4
 800786e:	4629      	mov	r1, r5
 8007870:	f7f9 f954 	bl	8000b1c <__aeabi_dcmplt>
 8007874:	b140      	cbz	r0, 8007888 <_dtoa_r+0x168>
 8007876:	4638      	mov	r0, r7
 8007878:	f7f8 fe74 	bl	8000564 <__aeabi_i2d>
 800787c:	4622      	mov	r2, r4
 800787e:	462b      	mov	r3, r5
 8007880:	f7f9 f942 	bl	8000b08 <__aeabi_dcmpeq>
 8007884:	b900      	cbnz	r0, 8007888 <_dtoa_r+0x168>
 8007886:	3f01      	subs	r7, #1
 8007888:	2f16      	cmp	r7, #22
 800788a:	d852      	bhi.n	8007932 <_dtoa_r+0x212>
 800788c:	4b5d      	ldr	r3, [pc, #372]	@ (8007a04 <_dtoa_r+0x2e4>)
 800788e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800789a:	f7f9 f93f 	bl	8000b1c <__aeabi_dcmplt>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d049      	beq.n	8007936 <_dtoa_r+0x216>
 80078a2:	3f01      	subs	r7, #1
 80078a4:	2300      	movs	r3, #0
 80078a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80078a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80078aa:	1b9b      	subs	r3, r3, r6
 80078ac:	1e5a      	subs	r2, r3, #1
 80078ae:	bf45      	ittet	mi
 80078b0:	f1c3 0301 	rsbmi	r3, r3, #1
 80078b4:	9300      	strmi	r3, [sp, #0]
 80078b6:	2300      	movpl	r3, #0
 80078b8:	2300      	movmi	r3, #0
 80078ba:	9206      	str	r2, [sp, #24]
 80078bc:	bf54      	ite	pl
 80078be:	9300      	strpl	r3, [sp, #0]
 80078c0:	9306      	strmi	r3, [sp, #24]
 80078c2:	2f00      	cmp	r7, #0
 80078c4:	db39      	blt.n	800793a <_dtoa_r+0x21a>
 80078c6:	9b06      	ldr	r3, [sp, #24]
 80078c8:	970d      	str	r7, [sp, #52]	@ 0x34
 80078ca:	443b      	add	r3, r7
 80078cc:	9306      	str	r3, [sp, #24]
 80078ce:	2300      	movs	r3, #0
 80078d0:	9308      	str	r3, [sp, #32]
 80078d2:	9b07      	ldr	r3, [sp, #28]
 80078d4:	2b09      	cmp	r3, #9
 80078d6:	d863      	bhi.n	80079a0 <_dtoa_r+0x280>
 80078d8:	2b05      	cmp	r3, #5
 80078da:	bfc4      	itt	gt
 80078dc:	3b04      	subgt	r3, #4
 80078de:	9307      	strgt	r3, [sp, #28]
 80078e0:	9b07      	ldr	r3, [sp, #28]
 80078e2:	f1a3 0302 	sub.w	r3, r3, #2
 80078e6:	bfcc      	ite	gt
 80078e8:	2400      	movgt	r4, #0
 80078ea:	2401      	movle	r4, #1
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d863      	bhi.n	80079b8 <_dtoa_r+0x298>
 80078f0:	e8df f003 	tbb	[pc, r3]
 80078f4:	2b375452 	.word	0x2b375452
 80078f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80078fc:	441e      	add	r6, r3
 80078fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007902:	2b20      	cmp	r3, #32
 8007904:	bfc1      	itttt	gt
 8007906:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800790a:	409f      	lslgt	r7, r3
 800790c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007910:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007914:	bfd6      	itet	le
 8007916:	f1c3 0320 	rsble	r3, r3, #32
 800791a:	ea47 0003 	orrgt.w	r0, r7, r3
 800791e:	fa04 f003 	lslle.w	r0, r4, r3
 8007922:	f7f8 fe0f 	bl	8000544 <__aeabi_ui2d>
 8007926:	2201      	movs	r2, #1
 8007928:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800792c:	3e01      	subs	r6, #1
 800792e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007930:	e776      	b.n	8007820 <_dtoa_r+0x100>
 8007932:	2301      	movs	r3, #1
 8007934:	e7b7      	b.n	80078a6 <_dtoa_r+0x186>
 8007936:	9010      	str	r0, [sp, #64]	@ 0x40
 8007938:	e7b6      	b.n	80078a8 <_dtoa_r+0x188>
 800793a:	9b00      	ldr	r3, [sp, #0]
 800793c:	1bdb      	subs	r3, r3, r7
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	427b      	negs	r3, r7
 8007942:	9308      	str	r3, [sp, #32]
 8007944:	2300      	movs	r3, #0
 8007946:	930d      	str	r3, [sp, #52]	@ 0x34
 8007948:	e7c3      	b.n	80078d2 <_dtoa_r+0x1b2>
 800794a:	2301      	movs	r3, #1
 800794c:	9309      	str	r3, [sp, #36]	@ 0x24
 800794e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007950:	eb07 0b03 	add.w	fp, r7, r3
 8007954:	f10b 0301 	add.w	r3, fp, #1
 8007958:	2b01      	cmp	r3, #1
 800795a:	9303      	str	r3, [sp, #12]
 800795c:	bfb8      	it	lt
 800795e:	2301      	movlt	r3, #1
 8007960:	e006      	b.n	8007970 <_dtoa_r+0x250>
 8007962:	2301      	movs	r3, #1
 8007964:	9309      	str	r3, [sp, #36]	@ 0x24
 8007966:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007968:	2b00      	cmp	r3, #0
 800796a:	dd28      	ble.n	80079be <_dtoa_r+0x29e>
 800796c:	469b      	mov	fp, r3
 800796e:	9303      	str	r3, [sp, #12]
 8007970:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007974:	2100      	movs	r1, #0
 8007976:	2204      	movs	r2, #4
 8007978:	f102 0514 	add.w	r5, r2, #20
 800797c:	429d      	cmp	r5, r3
 800797e:	d926      	bls.n	80079ce <_dtoa_r+0x2ae>
 8007980:	6041      	str	r1, [r0, #4]
 8007982:	4648      	mov	r0, r9
 8007984:	f000 fd9c 	bl	80084c0 <_Balloc>
 8007988:	4682      	mov	sl, r0
 800798a:	2800      	cmp	r0, #0
 800798c:	d142      	bne.n	8007a14 <_dtoa_r+0x2f4>
 800798e:	4b1e      	ldr	r3, [pc, #120]	@ (8007a08 <_dtoa_r+0x2e8>)
 8007990:	4602      	mov	r2, r0
 8007992:	f240 11af 	movw	r1, #431	@ 0x1af
 8007996:	e6da      	b.n	800774e <_dtoa_r+0x2e>
 8007998:	2300      	movs	r3, #0
 800799a:	e7e3      	b.n	8007964 <_dtoa_r+0x244>
 800799c:	2300      	movs	r3, #0
 800799e:	e7d5      	b.n	800794c <_dtoa_r+0x22c>
 80079a0:	2401      	movs	r4, #1
 80079a2:	2300      	movs	r3, #0
 80079a4:	9307      	str	r3, [sp, #28]
 80079a6:	9409      	str	r4, [sp, #36]	@ 0x24
 80079a8:	f04f 3bff 	mov.w	fp, #4294967295
 80079ac:	2200      	movs	r2, #0
 80079ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80079b2:	2312      	movs	r3, #18
 80079b4:	920c      	str	r2, [sp, #48]	@ 0x30
 80079b6:	e7db      	b.n	8007970 <_dtoa_r+0x250>
 80079b8:	2301      	movs	r3, #1
 80079ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80079bc:	e7f4      	b.n	80079a8 <_dtoa_r+0x288>
 80079be:	f04f 0b01 	mov.w	fp, #1
 80079c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80079c6:	465b      	mov	r3, fp
 80079c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80079cc:	e7d0      	b.n	8007970 <_dtoa_r+0x250>
 80079ce:	3101      	adds	r1, #1
 80079d0:	0052      	lsls	r2, r2, #1
 80079d2:	e7d1      	b.n	8007978 <_dtoa_r+0x258>
 80079d4:	f3af 8000 	nop.w
 80079d8:	636f4361 	.word	0x636f4361
 80079dc:	3fd287a7 	.word	0x3fd287a7
 80079e0:	8b60c8b3 	.word	0x8b60c8b3
 80079e4:	3fc68a28 	.word	0x3fc68a28
 80079e8:	509f79fb 	.word	0x509f79fb
 80079ec:	3fd34413 	.word	0x3fd34413
 80079f0:	0800b9c8 	.word	0x0800b9c8
 80079f4:	0800b9df 	.word	0x0800b9df
 80079f8:	7ff00000 	.word	0x7ff00000
 80079fc:	0800bacb 	.word	0x0800bacb
 8007a00:	3ff80000 	.word	0x3ff80000
 8007a04:	0800bba8 	.word	0x0800bba8
 8007a08:	0800ba37 	.word	0x0800ba37
 8007a0c:	0800b9c4 	.word	0x0800b9c4
 8007a10:	0800baca 	.word	0x0800baca
 8007a14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a18:	6018      	str	r0, [r3, #0]
 8007a1a:	9b03      	ldr	r3, [sp, #12]
 8007a1c:	2b0e      	cmp	r3, #14
 8007a1e:	f200 80a1 	bhi.w	8007b64 <_dtoa_r+0x444>
 8007a22:	2c00      	cmp	r4, #0
 8007a24:	f000 809e 	beq.w	8007b64 <_dtoa_r+0x444>
 8007a28:	2f00      	cmp	r7, #0
 8007a2a:	dd33      	ble.n	8007a94 <_dtoa_r+0x374>
 8007a2c:	4b9c      	ldr	r3, [pc, #624]	@ (8007ca0 <_dtoa_r+0x580>)
 8007a2e:	f007 020f 	and.w	r2, r7, #15
 8007a32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a36:	ed93 7b00 	vldr	d7, [r3]
 8007a3a:	05f8      	lsls	r0, r7, #23
 8007a3c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007a40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a44:	d516      	bpl.n	8007a74 <_dtoa_r+0x354>
 8007a46:	4b97      	ldr	r3, [pc, #604]	@ (8007ca4 <_dtoa_r+0x584>)
 8007a48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007a4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a50:	f7f8 ff1c 	bl	800088c <__aeabi_ddiv>
 8007a54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a58:	f004 040f 	and.w	r4, r4, #15
 8007a5c:	2603      	movs	r6, #3
 8007a5e:	4d91      	ldr	r5, [pc, #580]	@ (8007ca4 <_dtoa_r+0x584>)
 8007a60:	b954      	cbnz	r4, 8007a78 <_dtoa_r+0x358>
 8007a62:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007a66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a6a:	f7f8 ff0f 	bl	800088c <__aeabi_ddiv>
 8007a6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a72:	e028      	b.n	8007ac6 <_dtoa_r+0x3a6>
 8007a74:	2602      	movs	r6, #2
 8007a76:	e7f2      	b.n	8007a5e <_dtoa_r+0x33e>
 8007a78:	07e1      	lsls	r1, r4, #31
 8007a7a:	d508      	bpl.n	8007a8e <_dtoa_r+0x36e>
 8007a7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007a80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a84:	f7f8 fdd8 	bl	8000638 <__aeabi_dmul>
 8007a88:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007a8c:	3601      	adds	r6, #1
 8007a8e:	1064      	asrs	r4, r4, #1
 8007a90:	3508      	adds	r5, #8
 8007a92:	e7e5      	b.n	8007a60 <_dtoa_r+0x340>
 8007a94:	f000 80af 	beq.w	8007bf6 <_dtoa_r+0x4d6>
 8007a98:	427c      	negs	r4, r7
 8007a9a:	4b81      	ldr	r3, [pc, #516]	@ (8007ca0 <_dtoa_r+0x580>)
 8007a9c:	4d81      	ldr	r5, [pc, #516]	@ (8007ca4 <_dtoa_r+0x584>)
 8007a9e:	f004 020f 	and.w	r2, r4, #15
 8007aa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007aae:	f7f8 fdc3 	bl	8000638 <__aeabi_dmul>
 8007ab2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ab6:	1124      	asrs	r4, r4, #4
 8007ab8:	2300      	movs	r3, #0
 8007aba:	2602      	movs	r6, #2
 8007abc:	2c00      	cmp	r4, #0
 8007abe:	f040 808f 	bne.w	8007be0 <_dtoa_r+0x4c0>
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1d3      	bne.n	8007a6e <_dtoa_r+0x34e>
 8007ac6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ac8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 8094 	beq.w	8007bfa <_dtoa_r+0x4da>
 8007ad2:	4b75      	ldr	r3, [pc, #468]	@ (8007ca8 <_dtoa_r+0x588>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	4629      	mov	r1, r5
 8007ada:	f7f9 f81f 	bl	8000b1c <__aeabi_dcmplt>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	f000 808b 	beq.w	8007bfa <_dtoa_r+0x4da>
 8007ae4:	9b03      	ldr	r3, [sp, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f000 8087 	beq.w	8007bfa <_dtoa_r+0x4da>
 8007aec:	f1bb 0f00 	cmp.w	fp, #0
 8007af0:	dd34      	ble.n	8007b5c <_dtoa_r+0x43c>
 8007af2:	4620      	mov	r0, r4
 8007af4:	4b6d      	ldr	r3, [pc, #436]	@ (8007cac <_dtoa_r+0x58c>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	4629      	mov	r1, r5
 8007afa:	f7f8 fd9d 	bl	8000638 <__aeabi_dmul>
 8007afe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b02:	f107 38ff 	add.w	r8, r7, #4294967295
 8007b06:	3601      	adds	r6, #1
 8007b08:	465c      	mov	r4, fp
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	f7f8 fd2a 	bl	8000564 <__aeabi_i2d>
 8007b10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b14:	f7f8 fd90 	bl	8000638 <__aeabi_dmul>
 8007b18:	4b65      	ldr	r3, [pc, #404]	@ (8007cb0 <_dtoa_r+0x590>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f7f8 fbd6 	bl	80002cc <__adddf3>
 8007b20:	4605      	mov	r5, r0
 8007b22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b26:	2c00      	cmp	r4, #0
 8007b28:	d16a      	bne.n	8007c00 <_dtoa_r+0x4e0>
 8007b2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b2e:	4b61      	ldr	r3, [pc, #388]	@ (8007cb4 <_dtoa_r+0x594>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	f7f8 fbc9 	bl	80002c8 <__aeabi_dsub>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b3e:	462a      	mov	r2, r5
 8007b40:	4633      	mov	r3, r6
 8007b42:	f7f9 f809 	bl	8000b58 <__aeabi_dcmpgt>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f040 8298 	bne.w	800807c <_dtoa_r+0x95c>
 8007b4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b50:	462a      	mov	r2, r5
 8007b52:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b56:	f7f8 ffe1 	bl	8000b1c <__aeabi_dcmplt>
 8007b5a:	bb38      	cbnz	r0, 8007bac <_dtoa_r+0x48c>
 8007b5c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007b60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f2c0 8157 	blt.w	8007e1a <_dtoa_r+0x6fa>
 8007b6c:	2f0e      	cmp	r7, #14
 8007b6e:	f300 8154 	bgt.w	8007e1a <_dtoa_r+0x6fa>
 8007b72:	4b4b      	ldr	r3, [pc, #300]	@ (8007ca0 <_dtoa_r+0x580>)
 8007b74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b78:	ed93 7b00 	vldr	d7, [r3]
 8007b7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	ed8d 7b00 	vstr	d7, [sp]
 8007b84:	f280 80e5 	bge.w	8007d52 <_dtoa_r+0x632>
 8007b88:	9b03      	ldr	r3, [sp, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f300 80e1 	bgt.w	8007d52 <_dtoa_r+0x632>
 8007b90:	d10c      	bne.n	8007bac <_dtoa_r+0x48c>
 8007b92:	4b48      	ldr	r3, [pc, #288]	@ (8007cb4 <_dtoa_r+0x594>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	ec51 0b17 	vmov	r0, r1, d7
 8007b9a:	f7f8 fd4d 	bl	8000638 <__aeabi_dmul>
 8007b9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ba2:	f7f8 ffcf 	bl	8000b44 <__aeabi_dcmpge>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	f000 8266 	beq.w	8008078 <_dtoa_r+0x958>
 8007bac:	2400      	movs	r4, #0
 8007bae:	4625      	mov	r5, r4
 8007bb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007bb2:	4656      	mov	r6, sl
 8007bb4:	ea6f 0803 	mvn.w	r8, r3
 8007bb8:	2700      	movs	r7, #0
 8007bba:	4621      	mov	r1, r4
 8007bbc:	4648      	mov	r0, r9
 8007bbe:	f000 fcbf 	bl	8008540 <_Bfree>
 8007bc2:	2d00      	cmp	r5, #0
 8007bc4:	f000 80bd 	beq.w	8007d42 <_dtoa_r+0x622>
 8007bc8:	b12f      	cbz	r7, 8007bd6 <_dtoa_r+0x4b6>
 8007bca:	42af      	cmp	r7, r5
 8007bcc:	d003      	beq.n	8007bd6 <_dtoa_r+0x4b6>
 8007bce:	4639      	mov	r1, r7
 8007bd0:	4648      	mov	r0, r9
 8007bd2:	f000 fcb5 	bl	8008540 <_Bfree>
 8007bd6:	4629      	mov	r1, r5
 8007bd8:	4648      	mov	r0, r9
 8007bda:	f000 fcb1 	bl	8008540 <_Bfree>
 8007bde:	e0b0      	b.n	8007d42 <_dtoa_r+0x622>
 8007be0:	07e2      	lsls	r2, r4, #31
 8007be2:	d505      	bpl.n	8007bf0 <_dtoa_r+0x4d0>
 8007be4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007be8:	f7f8 fd26 	bl	8000638 <__aeabi_dmul>
 8007bec:	3601      	adds	r6, #1
 8007bee:	2301      	movs	r3, #1
 8007bf0:	1064      	asrs	r4, r4, #1
 8007bf2:	3508      	adds	r5, #8
 8007bf4:	e762      	b.n	8007abc <_dtoa_r+0x39c>
 8007bf6:	2602      	movs	r6, #2
 8007bf8:	e765      	b.n	8007ac6 <_dtoa_r+0x3a6>
 8007bfa:	9c03      	ldr	r4, [sp, #12]
 8007bfc:	46b8      	mov	r8, r7
 8007bfe:	e784      	b.n	8007b0a <_dtoa_r+0x3ea>
 8007c00:	4b27      	ldr	r3, [pc, #156]	@ (8007ca0 <_dtoa_r+0x580>)
 8007c02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c0c:	4454      	add	r4, sl
 8007c0e:	2900      	cmp	r1, #0
 8007c10:	d054      	beq.n	8007cbc <_dtoa_r+0x59c>
 8007c12:	4929      	ldr	r1, [pc, #164]	@ (8007cb8 <_dtoa_r+0x598>)
 8007c14:	2000      	movs	r0, #0
 8007c16:	f7f8 fe39 	bl	800088c <__aeabi_ddiv>
 8007c1a:	4633      	mov	r3, r6
 8007c1c:	462a      	mov	r2, r5
 8007c1e:	f7f8 fb53 	bl	80002c8 <__aeabi_dsub>
 8007c22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007c26:	4656      	mov	r6, sl
 8007c28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c2c:	f7f8 ffb4 	bl	8000b98 <__aeabi_d2iz>
 8007c30:	4605      	mov	r5, r0
 8007c32:	f7f8 fc97 	bl	8000564 <__aeabi_i2d>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c3e:	f7f8 fb43 	bl	80002c8 <__aeabi_dsub>
 8007c42:	3530      	adds	r5, #48	@ 0x30
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c4c:	f806 5b01 	strb.w	r5, [r6], #1
 8007c50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c54:	f7f8 ff62 	bl	8000b1c <__aeabi_dcmplt>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d172      	bne.n	8007d42 <_dtoa_r+0x622>
 8007c5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c60:	4911      	ldr	r1, [pc, #68]	@ (8007ca8 <_dtoa_r+0x588>)
 8007c62:	2000      	movs	r0, #0
 8007c64:	f7f8 fb30 	bl	80002c8 <__aeabi_dsub>
 8007c68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c6c:	f7f8 ff56 	bl	8000b1c <__aeabi_dcmplt>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	f040 80b4 	bne.w	8007dde <_dtoa_r+0x6be>
 8007c76:	42a6      	cmp	r6, r4
 8007c78:	f43f af70 	beq.w	8007b5c <_dtoa_r+0x43c>
 8007c7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007c80:	4b0a      	ldr	r3, [pc, #40]	@ (8007cac <_dtoa_r+0x58c>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	f7f8 fcd8 	bl	8000638 <__aeabi_dmul>
 8007c88:	4b08      	ldr	r3, [pc, #32]	@ (8007cac <_dtoa_r+0x58c>)
 8007c8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007c8e:	2200      	movs	r2, #0
 8007c90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c94:	f7f8 fcd0 	bl	8000638 <__aeabi_dmul>
 8007c98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c9c:	e7c4      	b.n	8007c28 <_dtoa_r+0x508>
 8007c9e:	bf00      	nop
 8007ca0:	0800bba8 	.word	0x0800bba8
 8007ca4:	0800bb80 	.word	0x0800bb80
 8007ca8:	3ff00000 	.word	0x3ff00000
 8007cac:	40240000 	.word	0x40240000
 8007cb0:	401c0000 	.word	0x401c0000
 8007cb4:	40140000 	.word	0x40140000
 8007cb8:	3fe00000 	.word	0x3fe00000
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	f7f8 fcba 	bl	8000638 <__aeabi_dmul>
 8007cc4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007cc8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007cca:	4656      	mov	r6, sl
 8007ccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cd0:	f7f8 ff62 	bl	8000b98 <__aeabi_d2iz>
 8007cd4:	4605      	mov	r5, r0
 8007cd6:	f7f8 fc45 	bl	8000564 <__aeabi_i2d>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ce2:	f7f8 faf1 	bl	80002c8 <__aeabi_dsub>
 8007ce6:	3530      	adds	r5, #48	@ 0x30
 8007ce8:	f806 5b01 	strb.w	r5, [r6], #1
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	42a6      	cmp	r6, r4
 8007cf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007cf6:	f04f 0200 	mov.w	r2, #0
 8007cfa:	d124      	bne.n	8007d46 <_dtoa_r+0x626>
 8007cfc:	4baf      	ldr	r3, [pc, #700]	@ (8007fbc <_dtoa_r+0x89c>)
 8007cfe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007d02:	f7f8 fae3 	bl	80002cc <__adddf3>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d0e:	f7f8 ff23 	bl	8000b58 <__aeabi_dcmpgt>
 8007d12:	2800      	cmp	r0, #0
 8007d14:	d163      	bne.n	8007dde <_dtoa_r+0x6be>
 8007d16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d1a:	49a8      	ldr	r1, [pc, #672]	@ (8007fbc <_dtoa_r+0x89c>)
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	f7f8 fad3 	bl	80002c8 <__aeabi_dsub>
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d2a:	f7f8 fef7 	bl	8000b1c <__aeabi_dcmplt>
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	f43f af14 	beq.w	8007b5c <_dtoa_r+0x43c>
 8007d34:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007d36:	1e73      	subs	r3, r6, #1
 8007d38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d3e:	2b30      	cmp	r3, #48	@ 0x30
 8007d40:	d0f8      	beq.n	8007d34 <_dtoa_r+0x614>
 8007d42:	4647      	mov	r7, r8
 8007d44:	e03b      	b.n	8007dbe <_dtoa_r+0x69e>
 8007d46:	4b9e      	ldr	r3, [pc, #632]	@ (8007fc0 <_dtoa_r+0x8a0>)
 8007d48:	f7f8 fc76 	bl	8000638 <__aeabi_dmul>
 8007d4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d50:	e7bc      	b.n	8007ccc <_dtoa_r+0x5ac>
 8007d52:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007d56:	4656      	mov	r6, sl
 8007d58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	4629      	mov	r1, r5
 8007d60:	f7f8 fd94 	bl	800088c <__aeabi_ddiv>
 8007d64:	f7f8 ff18 	bl	8000b98 <__aeabi_d2iz>
 8007d68:	4680      	mov	r8, r0
 8007d6a:	f7f8 fbfb 	bl	8000564 <__aeabi_i2d>
 8007d6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d72:	f7f8 fc61 	bl	8000638 <__aeabi_dmul>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007d82:	f7f8 faa1 	bl	80002c8 <__aeabi_dsub>
 8007d86:	f806 4b01 	strb.w	r4, [r6], #1
 8007d8a:	9d03      	ldr	r5, [sp, #12]
 8007d8c:	eba6 040a 	sub.w	r4, r6, sl
 8007d90:	42a5      	cmp	r5, r4
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	d133      	bne.n	8007e00 <_dtoa_r+0x6e0>
 8007d98:	f7f8 fa98 	bl	80002cc <__adddf3>
 8007d9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007da0:	4604      	mov	r4, r0
 8007da2:	460d      	mov	r5, r1
 8007da4:	f7f8 fed8 	bl	8000b58 <__aeabi_dcmpgt>
 8007da8:	b9c0      	cbnz	r0, 8007ddc <_dtoa_r+0x6bc>
 8007daa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dae:	4620      	mov	r0, r4
 8007db0:	4629      	mov	r1, r5
 8007db2:	f7f8 fea9 	bl	8000b08 <__aeabi_dcmpeq>
 8007db6:	b110      	cbz	r0, 8007dbe <_dtoa_r+0x69e>
 8007db8:	f018 0f01 	tst.w	r8, #1
 8007dbc:	d10e      	bne.n	8007ddc <_dtoa_r+0x6bc>
 8007dbe:	9902      	ldr	r1, [sp, #8]
 8007dc0:	4648      	mov	r0, r9
 8007dc2:	f000 fbbd 	bl	8008540 <_Bfree>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	7033      	strb	r3, [r6, #0]
 8007dca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007dcc:	3701      	adds	r7, #1
 8007dce:	601f      	str	r7, [r3, #0]
 8007dd0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 824b 	beq.w	800826e <_dtoa_r+0xb4e>
 8007dd8:	601e      	str	r6, [r3, #0]
 8007dda:	e248      	b.n	800826e <_dtoa_r+0xb4e>
 8007ddc:	46b8      	mov	r8, r7
 8007dde:	4633      	mov	r3, r6
 8007de0:	461e      	mov	r6, r3
 8007de2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007de6:	2a39      	cmp	r2, #57	@ 0x39
 8007de8:	d106      	bne.n	8007df8 <_dtoa_r+0x6d8>
 8007dea:	459a      	cmp	sl, r3
 8007dec:	d1f8      	bne.n	8007de0 <_dtoa_r+0x6c0>
 8007dee:	2230      	movs	r2, #48	@ 0x30
 8007df0:	f108 0801 	add.w	r8, r8, #1
 8007df4:	f88a 2000 	strb.w	r2, [sl]
 8007df8:	781a      	ldrb	r2, [r3, #0]
 8007dfa:	3201      	adds	r2, #1
 8007dfc:	701a      	strb	r2, [r3, #0]
 8007dfe:	e7a0      	b.n	8007d42 <_dtoa_r+0x622>
 8007e00:	4b6f      	ldr	r3, [pc, #444]	@ (8007fc0 <_dtoa_r+0x8a0>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	f7f8 fc18 	bl	8000638 <__aeabi_dmul>
 8007e08:	2200      	movs	r2, #0
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	460d      	mov	r5, r1
 8007e10:	f7f8 fe7a 	bl	8000b08 <__aeabi_dcmpeq>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d09f      	beq.n	8007d58 <_dtoa_r+0x638>
 8007e18:	e7d1      	b.n	8007dbe <_dtoa_r+0x69e>
 8007e1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e1c:	2a00      	cmp	r2, #0
 8007e1e:	f000 80ea 	beq.w	8007ff6 <_dtoa_r+0x8d6>
 8007e22:	9a07      	ldr	r2, [sp, #28]
 8007e24:	2a01      	cmp	r2, #1
 8007e26:	f300 80cd 	bgt.w	8007fc4 <_dtoa_r+0x8a4>
 8007e2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007e2c:	2a00      	cmp	r2, #0
 8007e2e:	f000 80c1 	beq.w	8007fb4 <_dtoa_r+0x894>
 8007e32:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e36:	9c08      	ldr	r4, [sp, #32]
 8007e38:	9e00      	ldr	r6, [sp, #0]
 8007e3a:	9a00      	ldr	r2, [sp, #0]
 8007e3c:	441a      	add	r2, r3
 8007e3e:	9200      	str	r2, [sp, #0]
 8007e40:	9a06      	ldr	r2, [sp, #24]
 8007e42:	2101      	movs	r1, #1
 8007e44:	441a      	add	r2, r3
 8007e46:	4648      	mov	r0, r9
 8007e48:	9206      	str	r2, [sp, #24]
 8007e4a:	f000 fc77 	bl	800873c <__i2b>
 8007e4e:	4605      	mov	r5, r0
 8007e50:	b166      	cbz	r6, 8007e6c <_dtoa_r+0x74c>
 8007e52:	9b06      	ldr	r3, [sp, #24]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	dd09      	ble.n	8007e6c <_dtoa_r+0x74c>
 8007e58:	42b3      	cmp	r3, r6
 8007e5a:	9a00      	ldr	r2, [sp, #0]
 8007e5c:	bfa8      	it	ge
 8007e5e:	4633      	movge	r3, r6
 8007e60:	1ad2      	subs	r2, r2, r3
 8007e62:	9200      	str	r2, [sp, #0]
 8007e64:	9a06      	ldr	r2, [sp, #24]
 8007e66:	1af6      	subs	r6, r6, r3
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	9306      	str	r3, [sp, #24]
 8007e6c:	9b08      	ldr	r3, [sp, #32]
 8007e6e:	b30b      	cbz	r3, 8007eb4 <_dtoa_r+0x794>
 8007e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 80c6 	beq.w	8008004 <_dtoa_r+0x8e4>
 8007e78:	2c00      	cmp	r4, #0
 8007e7a:	f000 80c0 	beq.w	8007ffe <_dtoa_r+0x8de>
 8007e7e:	4629      	mov	r1, r5
 8007e80:	4622      	mov	r2, r4
 8007e82:	4648      	mov	r0, r9
 8007e84:	f000 fd12 	bl	80088ac <__pow5mult>
 8007e88:	9a02      	ldr	r2, [sp, #8]
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	4648      	mov	r0, r9
 8007e90:	f000 fc6a 	bl	8008768 <__multiply>
 8007e94:	9902      	ldr	r1, [sp, #8]
 8007e96:	4680      	mov	r8, r0
 8007e98:	4648      	mov	r0, r9
 8007e9a:	f000 fb51 	bl	8008540 <_Bfree>
 8007e9e:	9b08      	ldr	r3, [sp, #32]
 8007ea0:	1b1b      	subs	r3, r3, r4
 8007ea2:	9308      	str	r3, [sp, #32]
 8007ea4:	f000 80b1 	beq.w	800800a <_dtoa_r+0x8ea>
 8007ea8:	9a08      	ldr	r2, [sp, #32]
 8007eaa:	4641      	mov	r1, r8
 8007eac:	4648      	mov	r0, r9
 8007eae:	f000 fcfd 	bl	80088ac <__pow5mult>
 8007eb2:	9002      	str	r0, [sp, #8]
 8007eb4:	2101      	movs	r1, #1
 8007eb6:	4648      	mov	r0, r9
 8007eb8:	f000 fc40 	bl	800873c <__i2b>
 8007ebc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 81d8 	beq.w	8008276 <_dtoa_r+0xb56>
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	4601      	mov	r1, r0
 8007eca:	4648      	mov	r0, r9
 8007ecc:	f000 fcee 	bl	80088ac <__pow5mult>
 8007ed0:	9b07      	ldr	r3, [sp, #28]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	f300 809f 	bgt.w	8008018 <_dtoa_r+0x8f8>
 8007eda:	9b04      	ldr	r3, [sp, #16]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f040 8097 	bne.w	8008010 <_dtoa_r+0x8f0>
 8007ee2:	9b05      	ldr	r3, [sp, #20]
 8007ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f040 8093 	bne.w	8008014 <_dtoa_r+0x8f4>
 8007eee:	9b05      	ldr	r3, [sp, #20]
 8007ef0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ef4:	0d1b      	lsrs	r3, r3, #20
 8007ef6:	051b      	lsls	r3, r3, #20
 8007ef8:	b133      	cbz	r3, 8007f08 <_dtoa_r+0x7e8>
 8007efa:	9b00      	ldr	r3, [sp, #0]
 8007efc:	3301      	adds	r3, #1
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	9b06      	ldr	r3, [sp, #24]
 8007f02:	3301      	adds	r3, #1
 8007f04:	9306      	str	r3, [sp, #24]
 8007f06:	2301      	movs	r3, #1
 8007f08:	9308      	str	r3, [sp, #32]
 8007f0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 81b8 	beq.w	8008282 <_dtoa_r+0xb62>
 8007f12:	6923      	ldr	r3, [r4, #16]
 8007f14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f18:	6918      	ldr	r0, [r3, #16]
 8007f1a:	f000 fbc3 	bl	80086a4 <__hi0bits>
 8007f1e:	f1c0 0020 	rsb	r0, r0, #32
 8007f22:	9b06      	ldr	r3, [sp, #24]
 8007f24:	4418      	add	r0, r3
 8007f26:	f010 001f 	ands.w	r0, r0, #31
 8007f2a:	f000 8082 	beq.w	8008032 <_dtoa_r+0x912>
 8007f2e:	f1c0 0320 	rsb	r3, r0, #32
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	dd73      	ble.n	800801e <_dtoa_r+0x8fe>
 8007f36:	9b00      	ldr	r3, [sp, #0]
 8007f38:	f1c0 001c 	rsb	r0, r0, #28
 8007f3c:	4403      	add	r3, r0
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	9b06      	ldr	r3, [sp, #24]
 8007f42:	4403      	add	r3, r0
 8007f44:	4406      	add	r6, r0
 8007f46:	9306      	str	r3, [sp, #24]
 8007f48:	9b00      	ldr	r3, [sp, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	dd05      	ble.n	8007f5a <_dtoa_r+0x83a>
 8007f4e:	9902      	ldr	r1, [sp, #8]
 8007f50:	461a      	mov	r2, r3
 8007f52:	4648      	mov	r0, r9
 8007f54:	f000 fd04 	bl	8008960 <__lshift>
 8007f58:	9002      	str	r0, [sp, #8]
 8007f5a:	9b06      	ldr	r3, [sp, #24]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	dd05      	ble.n	8007f6c <_dtoa_r+0x84c>
 8007f60:	4621      	mov	r1, r4
 8007f62:	461a      	mov	r2, r3
 8007f64:	4648      	mov	r0, r9
 8007f66:	f000 fcfb 	bl	8008960 <__lshift>
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d061      	beq.n	8008036 <_dtoa_r+0x916>
 8007f72:	9802      	ldr	r0, [sp, #8]
 8007f74:	4621      	mov	r1, r4
 8007f76:	f000 fd5f 	bl	8008a38 <__mcmp>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	da5b      	bge.n	8008036 <_dtoa_r+0x916>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9902      	ldr	r1, [sp, #8]
 8007f82:	220a      	movs	r2, #10
 8007f84:	4648      	mov	r0, r9
 8007f86:	f000 fafd 	bl	8008584 <__multadd>
 8007f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f8c:	9002      	str	r0, [sp, #8]
 8007f8e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 8177 	beq.w	8008286 <_dtoa_r+0xb66>
 8007f98:	4629      	mov	r1, r5
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	220a      	movs	r2, #10
 8007f9e:	4648      	mov	r0, r9
 8007fa0:	f000 faf0 	bl	8008584 <__multadd>
 8007fa4:	f1bb 0f00 	cmp.w	fp, #0
 8007fa8:	4605      	mov	r5, r0
 8007faa:	dc6f      	bgt.n	800808c <_dtoa_r+0x96c>
 8007fac:	9b07      	ldr	r3, [sp, #28]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	dc49      	bgt.n	8008046 <_dtoa_r+0x926>
 8007fb2:	e06b      	b.n	800808c <_dtoa_r+0x96c>
 8007fb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007fb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007fba:	e73c      	b.n	8007e36 <_dtoa_r+0x716>
 8007fbc:	3fe00000 	.word	0x3fe00000
 8007fc0:	40240000 	.word	0x40240000
 8007fc4:	9b03      	ldr	r3, [sp, #12]
 8007fc6:	1e5c      	subs	r4, r3, #1
 8007fc8:	9b08      	ldr	r3, [sp, #32]
 8007fca:	42a3      	cmp	r3, r4
 8007fcc:	db09      	blt.n	8007fe2 <_dtoa_r+0x8c2>
 8007fce:	1b1c      	subs	r4, r3, r4
 8007fd0:	9b03      	ldr	r3, [sp, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f6bf af30 	bge.w	8007e38 <_dtoa_r+0x718>
 8007fd8:	9b00      	ldr	r3, [sp, #0]
 8007fda:	9a03      	ldr	r2, [sp, #12]
 8007fdc:	1a9e      	subs	r6, r3, r2
 8007fde:	2300      	movs	r3, #0
 8007fe0:	e72b      	b.n	8007e3a <_dtoa_r+0x71a>
 8007fe2:	9b08      	ldr	r3, [sp, #32]
 8007fe4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007fe6:	9408      	str	r4, [sp, #32]
 8007fe8:	1ae3      	subs	r3, r4, r3
 8007fea:	441a      	add	r2, r3
 8007fec:	9e00      	ldr	r6, [sp, #0]
 8007fee:	9b03      	ldr	r3, [sp, #12]
 8007ff0:	920d      	str	r2, [sp, #52]	@ 0x34
 8007ff2:	2400      	movs	r4, #0
 8007ff4:	e721      	b.n	8007e3a <_dtoa_r+0x71a>
 8007ff6:	9c08      	ldr	r4, [sp, #32]
 8007ff8:	9e00      	ldr	r6, [sp, #0]
 8007ffa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007ffc:	e728      	b.n	8007e50 <_dtoa_r+0x730>
 8007ffe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008002:	e751      	b.n	8007ea8 <_dtoa_r+0x788>
 8008004:	9a08      	ldr	r2, [sp, #32]
 8008006:	9902      	ldr	r1, [sp, #8]
 8008008:	e750      	b.n	8007eac <_dtoa_r+0x78c>
 800800a:	f8cd 8008 	str.w	r8, [sp, #8]
 800800e:	e751      	b.n	8007eb4 <_dtoa_r+0x794>
 8008010:	2300      	movs	r3, #0
 8008012:	e779      	b.n	8007f08 <_dtoa_r+0x7e8>
 8008014:	9b04      	ldr	r3, [sp, #16]
 8008016:	e777      	b.n	8007f08 <_dtoa_r+0x7e8>
 8008018:	2300      	movs	r3, #0
 800801a:	9308      	str	r3, [sp, #32]
 800801c:	e779      	b.n	8007f12 <_dtoa_r+0x7f2>
 800801e:	d093      	beq.n	8007f48 <_dtoa_r+0x828>
 8008020:	9a00      	ldr	r2, [sp, #0]
 8008022:	331c      	adds	r3, #28
 8008024:	441a      	add	r2, r3
 8008026:	9200      	str	r2, [sp, #0]
 8008028:	9a06      	ldr	r2, [sp, #24]
 800802a:	441a      	add	r2, r3
 800802c:	441e      	add	r6, r3
 800802e:	9206      	str	r2, [sp, #24]
 8008030:	e78a      	b.n	8007f48 <_dtoa_r+0x828>
 8008032:	4603      	mov	r3, r0
 8008034:	e7f4      	b.n	8008020 <_dtoa_r+0x900>
 8008036:	9b03      	ldr	r3, [sp, #12]
 8008038:	2b00      	cmp	r3, #0
 800803a:	46b8      	mov	r8, r7
 800803c:	dc20      	bgt.n	8008080 <_dtoa_r+0x960>
 800803e:	469b      	mov	fp, r3
 8008040:	9b07      	ldr	r3, [sp, #28]
 8008042:	2b02      	cmp	r3, #2
 8008044:	dd1e      	ble.n	8008084 <_dtoa_r+0x964>
 8008046:	f1bb 0f00 	cmp.w	fp, #0
 800804a:	f47f adb1 	bne.w	8007bb0 <_dtoa_r+0x490>
 800804e:	4621      	mov	r1, r4
 8008050:	465b      	mov	r3, fp
 8008052:	2205      	movs	r2, #5
 8008054:	4648      	mov	r0, r9
 8008056:	f000 fa95 	bl	8008584 <__multadd>
 800805a:	4601      	mov	r1, r0
 800805c:	4604      	mov	r4, r0
 800805e:	9802      	ldr	r0, [sp, #8]
 8008060:	f000 fcea 	bl	8008a38 <__mcmp>
 8008064:	2800      	cmp	r0, #0
 8008066:	f77f ada3 	ble.w	8007bb0 <_dtoa_r+0x490>
 800806a:	4656      	mov	r6, sl
 800806c:	2331      	movs	r3, #49	@ 0x31
 800806e:	f806 3b01 	strb.w	r3, [r6], #1
 8008072:	f108 0801 	add.w	r8, r8, #1
 8008076:	e59f      	b.n	8007bb8 <_dtoa_r+0x498>
 8008078:	9c03      	ldr	r4, [sp, #12]
 800807a:	46b8      	mov	r8, r7
 800807c:	4625      	mov	r5, r4
 800807e:	e7f4      	b.n	800806a <_dtoa_r+0x94a>
 8008080:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008086:	2b00      	cmp	r3, #0
 8008088:	f000 8101 	beq.w	800828e <_dtoa_r+0xb6e>
 800808c:	2e00      	cmp	r6, #0
 800808e:	dd05      	ble.n	800809c <_dtoa_r+0x97c>
 8008090:	4629      	mov	r1, r5
 8008092:	4632      	mov	r2, r6
 8008094:	4648      	mov	r0, r9
 8008096:	f000 fc63 	bl	8008960 <__lshift>
 800809a:	4605      	mov	r5, r0
 800809c:	9b08      	ldr	r3, [sp, #32]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d05c      	beq.n	800815c <_dtoa_r+0xa3c>
 80080a2:	6869      	ldr	r1, [r5, #4]
 80080a4:	4648      	mov	r0, r9
 80080a6:	f000 fa0b 	bl	80084c0 <_Balloc>
 80080aa:	4606      	mov	r6, r0
 80080ac:	b928      	cbnz	r0, 80080ba <_dtoa_r+0x99a>
 80080ae:	4b82      	ldr	r3, [pc, #520]	@ (80082b8 <_dtoa_r+0xb98>)
 80080b0:	4602      	mov	r2, r0
 80080b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80080b6:	f7ff bb4a 	b.w	800774e <_dtoa_r+0x2e>
 80080ba:	692a      	ldr	r2, [r5, #16]
 80080bc:	3202      	adds	r2, #2
 80080be:	0092      	lsls	r2, r2, #2
 80080c0:	f105 010c 	add.w	r1, r5, #12
 80080c4:	300c      	adds	r0, #12
 80080c6:	f7ff fa8e 	bl	80075e6 <memcpy>
 80080ca:	2201      	movs	r2, #1
 80080cc:	4631      	mov	r1, r6
 80080ce:	4648      	mov	r0, r9
 80080d0:	f000 fc46 	bl	8008960 <__lshift>
 80080d4:	f10a 0301 	add.w	r3, sl, #1
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	eb0a 030b 	add.w	r3, sl, fp
 80080de:	9308      	str	r3, [sp, #32]
 80080e0:	9b04      	ldr	r3, [sp, #16]
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	462f      	mov	r7, r5
 80080e8:	9306      	str	r3, [sp, #24]
 80080ea:	4605      	mov	r5, r0
 80080ec:	9b00      	ldr	r3, [sp, #0]
 80080ee:	9802      	ldr	r0, [sp, #8]
 80080f0:	4621      	mov	r1, r4
 80080f2:	f103 3bff 	add.w	fp, r3, #4294967295
 80080f6:	f7ff fa8b 	bl	8007610 <quorem>
 80080fa:	4603      	mov	r3, r0
 80080fc:	3330      	adds	r3, #48	@ 0x30
 80080fe:	9003      	str	r0, [sp, #12]
 8008100:	4639      	mov	r1, r7
 8008102:	9802      	ldr	r0, [sp, #8]
 8008104:	9309      	str	r3, [sp, #36]	@ 0x24
 8008106:	f000 fc97 	bl	8008a38 <__mcmp>
 800810a:	462a      	mov	r2, r5
 800810c:	9004      	str	r0, [sp, #16]
 800810e:	4621      	mov	r1, r4
 8008110:	4648      	mov	r0, r9
 8008112:	f000 fcad 	bl	8008a70 <__mdiff>
 8008116:	68c2      	ldr	r2, [r0, #12]
 8008118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800811a:	4606      	mov	r6, r0
 800811c:	bb02      	cbnz	r2, 8008160 <_dtoa_r+0xa40>
 800811e:	4601      	mov	r1, r0
 8008120:	9802      	ldr	r0, [sp, #8]
 8008122:	f000 fc89 	bl	8008a38 <__mcmp>
 8008126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008128:	4602      	mov	r2, r0
 800812a:	4631      	mov	r1, r6
 800812c:	4648      	mov	r0, r9
 800812e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008130:	9309      	str	r3, [sp, #36]	@ 0x24
 8008132:	f000 fa05 	bl	8008540 <_Bfree>
 8008136:	9b07      	ldr	r3, [sp, #28]
 8008138:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800813a:	9e00      	ldr	r6, [sp, #0]
 800813c:	ea42 0103 	orr.w	r1, r2, r3
 8008140:	9b06      	ldr	r3, [sp, #24]
 8008142:	4319      	orrs	r1, r3
 8008144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008146:	d10d      	bne.n	8008164 <_dtoa_r+0xa44>
 8008148:	2b39      	cmp	r3, #57	@ 0x39
 800814a:	d027      	beq.n	800819c <_dtoa_r+0xa7c>
 800814c:	9a04      	ldr	r2, [sp, #16]
 800814e:	2a00      	cmp	r2, #0
 8008150:	dd01      	ble.n	8008156 <_dtoa_r+0xa36>
 8008152:	9b03      	ldr	r3, [sp, #12]
 8008154:	3331      	adds	r3, #49	@ 0x31
 8008156:	f88b 3000 	strb.w	r3, [fp]
 800815a:	e52e      	b.n	8007bba <_dtoa_r+0x49a>
 800815c:	4628      	mov	r0, r5
 800815e:	e7b9      	b.n	80080d4 <_dtoa_r+0x9b4>
 8008160:	2201      	movs	r2, #1
 8008162:	e7e2      	b.n	800812a <_dtoa_r+0xa0a>
 8008164:	9904      	ldr	r1, [sp, #16]
 8008166:	2900      	cmp	r1, #0
 8008168:	db04      	blt.n	8008174 <_dtoa_r+0xa54>
 800816a:	9807      	ldr	r0, [sp, #28]
 800816c:	4301      	orrs	r1, r0
 800816e:	9806      	ldr	r0, [sp, #24]
 8008170:	4301      	orrs	r1, r0
 8008172:	d120      	bne.n	80081b6 <_dtoa_r+0xa96>
 8008174:	2a00      	cmp	r2, #0
 8008176:	ddee      	ble.n	8008156 <_dtoa_r+0xa36>
 8008178:	9902      	ldr	r1, [sp, #8]
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	2201      	movs	r2, #1
 800817e:	4648      	mov	r0, r9
 8008180:	f000 fbee 	bl	8008960 <__lshift>
 8008184:	4621      	mov	r1, r4
 8008186:	9002      	str	r0, [sp, #8]
 8008188:	f000 fc56 	bl	8008a38 <__mcmp>
 800818c:	2800      	cmp	r0, #0
 800818e:	9b00      	ldr	r3, [sp, #0]
 8008190:	dc02      	bgt.n	8008198 <_dtoa_r+0xa78>
 8008192:	d1e0      	bne.n	8008156 <_dtoa_r+0xa36>
 8008194:	07da      	lsls	r2, r3, #31
 8008196:	d5de      	bpl.n	8008156 <_dtoa_r+0xa36>
 8008198:	2b39      	cmp	r3, #57	@ 0x39
 800819a:	d1da      	bne.n	8008152 <_dtoa_r+0xa32>
 800819c:	2339      	movs	r3, #57	@ 0x39
 800819e:	f88b 3000 	strb.w	r3, [fp]
 80081a2:	4633      	mov	r3, r6
 80081a4:	461e      	mov	r6, r3
 80081a6:	3b01      	subs	r3, #1
 80081a8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80081ac:	2a39      	cmp	r2, #57	@ 0x39
 80081ae:	d04e      	beq.n	800824e <_dtoa_r+0xb2e>
 80081b0:	3201      	adds	r2, #1
 80081b2:	701a      	strb	r2, [r3, #0]
 80081b4:	e501      	b.n	8007bba <_dtoa_r+0x49a>
 80081b6:	2a00      	cmp	r2, #0
 80081b8:	dd03      	ble.n	80081c2 <_dtoa_r+0xaa2>
 80081ba:	2b39      	cmp	r3, #57	@ 0x39
 80081bc:	d0ee      	beq.n	800819c <_dtoa_r+0xa7c>
 80081be:	3301      	adds	r3, #1
 80081c0:	e7c9      	b.n	8008156 <_dtoa_r+0xa36>
 80081c2:	9a00      	ldr	r2, [sp, #0]
 80081c4:	9908      	ldr	r1, [sp, #32]
 80081c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80081ca:	428a      	cmp	r2, r1
 80081cc:	d028      	beq.n	8008220 <_dtoa_r+0xb00>
 80081ce:	9902      	ldr	r1, [sp, #8]
 80081d0:	2300      	movs	r3, #0
 80081d2:	220a      	movs	r2, #10
 80081d4:	4648      	mov	r0, r9
 80081d6:	f000 f9d5 	bl	8008584 <__multadd>
 80081da:	42af      	cmp	r7, r5
 80081dc:	9002      	str	r0, [sp, #8]
 80081de:	f04f 0300 	mov.w	r3, #0
 80081e2:	f04f 020a 	mov.w	r2, #10
 80081e6:	4639      	mov	r1, r7
 80081e8:	4648      	mov	r0, r9
 80081ea:	d107      	bne.n	80081fc <_dtoa_r+0xadc>
 80081ec:	f000 f9ca 	bl	8008584 <__multadd>
 80081f0:	4607      	mov	r7, r0
 80081f2:	4605      	mov	r5, r0
 80081f4:	9b00      	ldr	r3, [sp, #0]
 80081f6:	3301      	adds	r3, #1
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	e777      	b.n	80080ec <_dtoa_r+0x9cc>
 80081fc:	f000 f9c2 	bl	8008584 <__multadd>
 8008200:	4629      	mov	r1, r5
 8008202:	4607      	mov	r7, r0
 8008204:	2300      	movs	r3, #0
 8008206:	220a      	movs	r2, #10
 8008208:	4648      	mov	r0, r9
 800820a:	f000 f9bb 	bl	8008584 <__multadd>
 800820e:	4605      	mov	r5, r0
 8008210:	e7f0      	b.n	80081f4 <_dtoa_r+0xad4>
 8008212:	f1bb 0f00 	cmp.w	fp, #0
 8008216:	bfcc      	ite	gt
 8008218:	465e      	movgt	r6, fp
 800821a:	2601      	movle	r6, #1
 800821c:	4456      	add	r6, sl
 800821e:	2700      	movs	r7, #0
 8008220:	9902      	ldr	r1, [sp, #8]
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	2201      	movs	r2, #1
 8008226:	4648      	mov	r0, r9
 8008228:	f000 fb9a 	bl	8008960 <__lshift>
 800822c:	4621      	mov	r1, r4
 800822e:	9002      	str	r0, [sp, #8]
 8008230:	f000 fc02 	bl	8008a38 <__mcmp>
 8008234:	2800      	cmp	r0, #0
 8008236:	dcb4      	bgt.n	80081a2 <_dtoa_r+0xa82>
 8008238:	d102      	bne.n	8008240 <_dtoa_r+0xb20>
 800823a:	9b00      	ldr	r3, [sp, #0]
 800823c:	07db      	lsls	r3, r3, #31
 800823e:	d4b0      	bmi.n	80081a2 <_dtoa_r+0xa82>
 8008240:	4633      	mov	r3, r6
 8008242:	461e      	mov	r6, r3
 8008244:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008248:	2a30      	cmp	r2, #48	@ 0x30
 800824a:	d0fa      	beq.n	8008242 <_dtoa_r+0xb22>
 800824c:	e4b5      	b.n	8007bba <_dtoa_r+0x49a>
 800824e:	459a      	cmp	sl, r3
 8008250:	d1a8      	bne.n	80081a4 <_dtoa_r+0xa84>
 8008252:	2331      	movs	r3, #49	@ 0x31
 8008254:	f108 0801 	add.w	r8, r8, #1
 8008258:	f88a 3000 	strb.w	r3, [sl]
 800825c:	e4ad      	b.n	8007bba <_dtoa_r+0x49a>
 800825e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008260:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80082bc <_dtoa_r+0xb9c>
 8008264:	b11b      	cbz	r3, 800826e <_dtoa_r+0xb4e>
 8008266:	f10a 0308 	add.w	r3, sl, #8
 800826a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800826c:	6013      	str	r3, [r2, #0]
 800826e:	4650      	mov	r0, sl
 8008270:	b017      	add	sp, #92	@ 0x5c
 8008272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008276:	9b07      	ldr	r3, [sp, #28]
 8008278:	2b01      	cmp	r3, #1
 800827a:	f77f ae2e 	ble.w	8007eda <_dtoa_r+0x7ba>
 800827e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008280:	9308      	str	r3, [sp, #32]
 8008282:	2001      	movs	r0, #1
 8008284:	e64d      	b.n	8007f22 <_dtoa_r+0x802>
 8008286:	f1bb 0f00 	cmp.w	fp, #0
 800828a:	f77f aed9 	ble.w	8008040 <_dtoa_r+0x920>
 800828e:	4656      	mov	r6, sl
 8008290:	9802      	ldr	r0, [sp, #8]
 8008292:	4621      	mov	r1, r4
 8008294:	f7ff f9bc 	bl	8007610 <quorem>
 8008298:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800829c:	f806 3b01 	strb.w	r3, [r6], #1
 80082a0:	eba6 020a 	sub.w	r2, r6, sl
 80082a4:	4593      	cmp	fp, r2
 80082a6:	ddb4      	ble.n	8008212 <_dtoa_r+0xaf2>
 80082a8:	9902      	ldr	r1, [sp, #8]
 80082aa:	2300      	movs	r3, #0
 80082ac:	220a      	movs	r2, #10
 80082ae:	4648      	mov	r0, r9
 80082b0:	f000 f968 	bl	8008584 <__multadd>
 80082b4:	9002      	str	r0, [sp, #8]
 80082b6:	e7eb      	b.n	8008290 <_dtoa_r+0xb70>
 80082b8:	0800ba37 	.word	0x0800ba37
 80082bc:	0800b9bb 	.word	0x0800b9bb

080082c0 <_free_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4605      	mov	r5, r0
 80082c4:	2900      	cmp	r1, #0
 80082c6:	d041      	beq.n	800834c <_free_r+0x8c>
 80082c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082cc:	1f0c      	subs	r4, r1, #4
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	bfb8      	it	lt
 80082d2:	18e4      	addlt	r4, r4, r3
 80082d4:	f000 f8e8 	bl	80084a8 <__malloc_lock>
 80082d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008350 <_free_r+0x90>)
 80082da:	6813      	ldr	r3, [r2, #0]
 80082dc:	b933      	cbnz	r3, 80082ec <_free_r+0x2c>
 80082de:	6063      	str	r3, [r4, #4]
 80082e0:	6014      	str	r4, [r2, #0]
 80082e2:	4628      	mov	r0, r5
 80082e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082e8:	f000 b8e4 	b.w	80084b4 <__malloc_unlock>
 80082ec:	42a3      	cmp	r3, r4
 80082ee:	d908      	bls.n	8008302 <_free_r+0x42>
 80082f0:	6820      	ldr	r0, [r4, #0]
 80082f2:	1821      	adds	r1, r4, r0
 80082f4:	428b      	cmp	r3, r1
 80082f6:	bf01      	itttt	eq
 80082f8:	6819      	ldreq	r1, [r3, #0]
 80082fa:	685b      	ldreq	r3, [r3, #4]
 80082fc:	1809      	addeq	r1, r1, r0
 80082fe:	6021      	streq	r1, [r4, #0]
 8008300:	e7ed      	b.n	80082de <_free_r+0x1e>
 8008302:	461a      	mov	r2, r3
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	b10b      	cbz	r3, 800830c <_free_r+0x4c>
 8008308:	42a3      	cmp	r3, r4
 800830a:	d9fa      	bls.n	8008302 <_free_r+0x42>
 800830c:	6811      	ldr	r1, [r2, #0]
 800830e:	1850      	adds	r0, r2, r1
 8008310:	42a0      	cmp	r0, r4
 8008312:	d10b      	bne.n	800832c <_free_r+0x6c>
 8008314:	6820      	ldr	r0, [r4, #0]
 8008316:	4401      	add	r1, r0
 8008318:	1850      	adds	r0, r2, r1
 800831a:	4283      	cmp	r3, r0
 800831c:	6011      	str	r1, [r2, #0]
 800831e:	d1e0      	bne.n	80082e2 <_free_r+0x22>
 8008320:	6818      	ldr	r0, [r3, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	6053      	str	r3, [r2, #4]
 8008326:	4408      	add	r0, r1
 8008328:	6010      	str	r0, [r2, #0]
 800832a:	e7da      	b.n	80082e2 <_free_r+0x22>
 800832c:	d902      	bls.n	8008334 <_free_r+0x74>
 800832e:	230c      	movs	r3, #12
 8008330:	602b      	str	r3, [r5, #0]
 8008332:	e7d6      	b.n	80082e2 <_free_r+0x22>
 8008334:	6820      	ldr	r0, [r4, #0]
 8008336:	1821      	adds	r1, r4, r0
 8008338:	428b      	cmp	r3, r1
 800833a:	bf04      	itt	eq
 800833c:	6819      	ldreq	r1, [r3, #0]
 800833e:	685b      	ldreq	r3, [r3, #4]
 8008340:	6063      	str	r3, [r4, #4]
 8008342:	bf04      	itt	eq
 8008344:	1809      	addeq	r1, r1, r0
 8008346:	6021      	streq	r1, [r4, #0]
 8008348:	6054      	str	r4, [r2, #4]
 800834a:	e7ca      	b.n	80082e2 <_free_r+0x22>
 800834c:	bd38      	pop	{r3, r4, r5, pc}
 800834e:	bf00      	nop
 8008350:	200026e8 	.word	0x200026e8

08008354 <malloc>:
 8008354:	4b02      	ldr	r3, [pc, #8]	@ (8008360 <malloc+0xc>)
 8008356:	4601      	mov	r1, r0
 8008358:	6818      	ldr	r0, [r3, #0]
 800835a:	f000 b825 	b.w	80083a8 <_malloc_r>
 800835e:	bf00      	nop
 8008360:	20000024 	.word	0x20000024

08008364 <sbrk_aligned>:
 8008364:	b570      	push	{r4, r5, r6, lr}
 8008366:	4e0f      	ldr	r6, [pc, #60]	@ (80083a4 <sbrk_aligned+0x40>)
 8008368:	460c      	mov	r4, r1
 800836a:	6831      	ldr	r1, [r6, #0]
 800836c:	4605      	mov	r5, r0
 800836e:	b911      	cbnz	r1, 8008376 <sbrk_aligned+0x12>
 8008370:	f002 f984 	bl	800a67c <_sbrk_r>
 8008374:	6030      	str	r0, [r6, #0]
 8008376:	4621      	mov	r1, r4
 8008378:	4628      	mov	r0, r5
 800837a:	f002 f97f 	bl	800a67c <_sbrk_r>
 800837e:	1c43      	adds	r3, r0, #1
 8008380:	d103      	bne.n	800838a <sbrk_aligned+0x26>
 8008382:	f04f 34ff 	mov.w	r4, #4294967295
 8008386:	4620      	mov	r0, r4
 8008388:	bd70      	pop	{r4, r5, r6, pc}
 800838a:	1cc4      	adds	r4, r0, #3
 800838c:	f024 0403 	bic.w	r4, r4, #3
 8008390:	42a0      	cmp	r0, r4
 8008392:	d0f8      	beq.n	8008386 <sbrk_aligned+0x22>
 8008394:	1a21      	subs	r1, r4, r0
 8008396:	4628      	mov	r0, r5
 8008398:	f002 f970 	bl	800a67c <_sbrk_r>
 800839c:	3001      	adds	r0, #1
 800839e:	d1f2      	bne.n	8008386 <sbrk_aligned+0x22>
 80083a0:	e7ef      	b.n	8008382 <sbrk_aligned+0x1e>
 80083a2:	bf00      	nop
 80083a4:	200026e4 	.word	0x200026e4

080083a8 <_malloc_r>:
 80083a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083ac:	1ccd      	adds	r5, r1, #3
 80083ae:	f025 0503 	bic.w	r5, r5, #3
 80083b2:	3508      	adds	r5, #8
 80083b4:	2d0c      	cmp	r5, #12
 80083b6:	bf38      	it	cc
 80083b8:	250c      	movcc	r5, #12
 80083ba:	2d00      	cmp	r5, #0
 80083bc:	4606      	mov	r6, r0
 80083be:	db01      	blt.n	80083c4 <_malloc_r+0x1c>
 80083c0:	42a9      	cmp	r1, r5
 80083c2:	d904      	bls.n	80083ce <_malloc_r+0x26>
 80083c4:	230c      	movs	r3, #12
 80083c6:	6033      	str	r3, [r6, #0]
 80083c8:	2000      	movs	r0, #0
 80083ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084a4 <_malloc_r+0xfc>
 80083d2:	f000 f869 	bl	80084a8 <__malloc_lock>
 80083d6:	f8d8 3000 	ldr.w	r3, [r8]
 80083da:	461c      	mov	r4, r3
 80083dc:	bb44      	cbnz	r4, 8008430 <_malloc_r+0x88>
 80083de:	4629      	mov	r1, r5
 80083e0:	4630      	mov	r0, r6
 80083e2:	f7ff ffbf 	bl	8008364 <sbrk_aligned>
 80083e6:	1c43      	adds	r3, r0, #1
 80083e8:	4604      	mov	r4, r0
 80083ea:	d158      	bne.n	800849e <_malloc_r+0xf6>
 80083ec:	f8d8 4000 	ldr.w	r4, [r8]
 80083f0:	4627      	mov	r7, r4
 80083f2:	2f00      	cmp	r7, #0
 80083f4:	d143      	bne.n	800847e <_malloc_r+0xd6>
 80083f6:	2c00      	cmp	r4, #0
 80083f8:	d04b      	beq.n	8008492 <_malloc_r+0xea>
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	4639      	mov	r1, r7
 80083fe:	4630      	mov	r0, r6
 8008400:	eb04 0903 	add.w	r9, r4, r3
 8008404:	f002 f93a 	bl	800a67c <_sbrk_r>
 8008408:	4581      	cmp	r9, r0
 800840a:	d142      	bne.n	8008492 <_malloc_r+0xea>
 800840c:	6821      	ldr	r1, [r4, #0]
 800840e:	1a6d      	subs	r5, r5, r1
 8008410:	4629      	mov	r1, r5
 8008412:	4630      	mov	r0, r6
 8008414:	f7ff ffa6 	bl	8008364 <sbrk_aligned>
 8008418:	3001      	adds	r0, #1
 800841a:	d03a      	beq.n	8008492 <_malloc_r+0xea>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	442b      	add	r3, r5
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	f8d8 3000 	ldr.w	r3, [r8]
 8008426:	685a      	ldr	r2, [r3, #4]
 8008428:	bb62      	cbnz	r2, 8008484 <_malloc_r+0xdc>
 800842a:	f8c8 7000 	str.w	r7, [r8]
 800842e:	e00f      	b.n	8008450 <_malloc_r+0xa8>
 8008430:	6822      	ldr	r2, [r4, #0]
 8008432:	1b52      	subs	r2, r2, r5
 8008434:	d420      	bmi.n	8008478 <_malloc_r+0xd0>
 8008436:	2a0b      	cmp	r2, #11
 8008438:	d917      	bls.n	800846a <_malloc_r+0xc2>
 800843a:	1961      	adds	r1, r4, r5
 800843c:	42a3      	cmp	r3, r4
 800843e:	6025      	str	r5, [r4, #0]
 8008440:	bf18      	it	ne
 8008442:	6059      	strne	r1, [r3, #4]
 8008444:	6863      	ldr	r3, [r4, #4]
 8008446:	bf08      	it	eq
 8008448:	f8c8 1000 	streq.w	r1, [r8]
 800844c:	5162      	str	r2, [r4, r5]
 800844e:	604b      	str	r3, [r1, #4]
 8008450:	4630      	mov	r0, r6
 8008452:	f000 f82f 	bl	80084b4 <__malloc_unlock>
 8008456:	f104 000b 	add.w	r0, r4, #11
 800845a:	1d23      	adds	r3, r4, #4
 800845c:	f020 0007 	bic.w	r0, r0, #7
 8008460:	1ac2      	subs	r2, r0, r3
 8008462:	bf1c      	itt	ne
 8008464:	1a1b      	subne	r3, r3, r0
 8008466:	50a3      	strne	r3, [r4, r2]
 8008468:	e7af      	b.n	80083ca <_malloc_r+0x22>
 800846a:	6862      	ldr	r2, [r4, #4]
 800846c:	42a3      	cmp	r3, r4
 800846e:	bf0c      	ite	eq
 8008470:	f8c8 2000 	streq.w	r2, [r8]
 8008474:	605a      	strne	r2, [r3, #4]
 8008476:	e7eb      	b.n	8008450 <_malloc_r+0xa8>
 8008478:	4623      	mov	r3, r4
 800847a:	6864      	ldr	r4, [r4, #4]
 800847c:	e7ae      	b.n	80083dc <_malloc_r+0x34>
 800847e:	463c      	mov	r4, r7
 8008480:	687f      	ldr	r7, [r7, #4]
 8008482:	e7b6      	b.n	80083f2 <_malloc_r+0x4a>
 8008484:	461a      	mov	r2, r3
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	42a3      	cmp	r3, r4
 800848a:	d1fb      	bne.n	8008484 <_malloc_r+0xdc>
 800848c:	2300      	movs	r3, #0
 800848e:	6053      	str	r3, [r2, #4]
 8008490:	e7de      	b.n	8008450 <_malloc_r+0xa8>
 8008492:	230c      	movs	r3, #12
 8008494:	6033      	str	r3, [r6, #0]
 8008496:	4630      	mov	r0, r6
 8008498:	f000 f80c 	bl	80084b4 <__malloc_unlock>
 800849c:	e794      	b.n	80083c8 <_malloc_r+0x20>
 800849e:	6005      	str	r5, [r0, #0]
 80084a0:	e7d6      	b.n	8008450 <_malloc_r+0xa8>
 80084a2:	bf00      	nop
 80084a4:	200026e8 	.word	0x200026e8

080084a8 <__malloc_lock>:
 80084a8:	4801      	ldr	r0, [pc, #4]	@ (80084b0 <__malloc_lock+0x8>)
 80084aa:	f7ff b89a 	b.w	80075e2 <__retarget_lock_acquire_recursive>
 80084ae:	bf00      	nop
 80084b0:	200026e0 	.word	0x200026e0

080084b4 <__malloc_unlock>:
 80084b4:	4801      	ldr	r0, [pc, #4]	@ (80084bc <__malloc_unlock+0x8>)
 80084b6:	f7ff b895 	b.w	80075e4 <__retarget_lock_release_recursive>
 80084ba:	bf00      	nop
 80084bc:	200026e0 	.word	0x200026e0

080084c0 <_Balloc>:
 80084c0:	b570      	push	{r4, r5, r6, lr}
 80084c2:	69c6      	ldr	r6, [r0, #28]
 80084c4:	4604      	mov	r4, r0
 80084c6:	460d      	mov	r5, r1
 80084c8:	b976      	cbnz	r6, 80084e8 <_Balloc+0x28>
 80084ca:	2010      	movs	r0, #16
 80084cc:	f7ff ff42 	bl	8008354 <malloc>
 80084d0:	4602      	mov	r2, r0
 80084d2:	61e0      	str	r0, [r4, #28]
 80084d4:	b920      	cbnz	r0, 80084e0 <_Balloc+0x20>
 80084d6:	4b18      	ldr	r3, [pc, #96]	@ (8008538 <_Balloc+0x78>)
 80084d8:	4818      	ldr	r0, [pc, #96]	@ (800853c <_Balloc+0x7c>)
 80084da:	216b      	movs	r1, #107	@ 0x6b
 80084dc:	f002 f8e8 	bl	800a6b0 <__assert_func>
 80084e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084e4:	6006      	str	r6, [r0, #0]
 80084e6:	60c6      	str	r6, [r0, #12]
 80084e8:	69e6      	ldr	r6, [r4, #28]
 80084ea:	68f3      	ldr	r3, [r6, #12]
 80084ec:	b183      	cbz	r3, 8008510 <_Balloc+0x50>
 80084ee:	69e3      	ldr	r3, [r4, #28]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084f6:	b9b8      	cbnz	r0, 8008528 <_Balloc+0x68>
 80084f8:	2101      	movs	r1, #1
 80084fa:	fa01 f605 	lsl.w	r6, r1, r5
 80084fe:	1d72      	adds	r2, r6, #5
 8008500:	0092      	lsls	r2, r2, #2
 8008502:	4620      	mov	r0, r4
 8008504:	f002 f8f2 	bl	800a6ec <_calloc_r>
 8008508:	b160      	cbz	r0, 8008524 <_Balloc+0x64>
 800850a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800850e:	e00e      	b.n	800852e <_Balloc+0x6e>
 8008510:	2221      	movs	r2, #33	@ 0x21
 8008512:	2104      	movs	r1, #4
 8008514:	4620      	mov	r0, r4
 8008516:	f002 f8e9 	bl	800a6ec <_calloc_r>
 800851a:	69e3      	ldr	r3, [r4, #28]
 800851c:	60f0      	str	r0, [r6, #12]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1e4      	bne.n	80084ee <_Balloc+0x2e>
 8008524:	2000      	movs	r0, #0
 8008526:	bd70      	pop	{r4, r5, r6, pc}
 8008528:	6802      	ldr	r2, [r0, #0]
 800852a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800852e:	2300      	movs	r3, #0
 8008530:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008534:	e7f7      	b.n	8008526 <_Balloc+0x66>
 8008536:	bf00      	nop
 8008538:	0800b9c8 	.word	0x0800b9c8
 800853c:	0800ba48 	.word	0x0800ba48

08008540 <_Bfree>:
 8008540:	b570      	push	{r4, r5, r6, lr}
 8008542:	69c6      	ldr	r6, [r0, #28]
 8008544:	4605      	mov	r5, r0
 8008546:	460c      	mov	r4, r1
 8008548:	b976      	cbnz	r6, 8008568 <_Bfree+0x28>
 800854a:	2010      	movs	r0, #16
 800854c:	f7ff ff02 	bl	8008354 <malloc>
 8008550:	4602      	mov	r2, r0
 8008552:	61e8      	str	r0, [r5, #28]
 8008554:	b920      	cbnz	r0, 8008560 <_Bfree+0x20>
 8008556:	4b09      	ldr	r3, [pc, #36]	@ (800857c <_Bfree+0x3c>)
 8008558:	4809      	ldr	r0, [pc, #36]	@ (8008580 <_Bfree+0x40>)
 800855a:	218f      	movs	r1, #143	@ 0x8f
 800855c:	f002 f8a8 	bl	800a6b0 <__assert_func>
 8008560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008564:	6006      	str	r6, [r0, #0]
 8008566:	60c6      	str	r6, [r0, #12]
 8008568:	b13c      	cbz	r4, 800857a <_Bfree+0x3a>
 800856a:	69eb      	ldr	r3, [r5, #28]
 800856c:	6862      	ldr	r2, [r4, #4]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008574:	6021      	str	r1, [r4, #0]
 8008576:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800857a:	bd70      	pop	{r4, r5, r6, pc}
 800857c:	0800b9c8 	.word	0x0800b9c8
 8008580:	0800ba48 	.word	0x0800ba48

08008584 <__multadd>:
 8008584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008588:	690d      	ldr	r5, [r1, #16]
 800858a:	4607      	mov	r7, r0
 800858c:	460c      	mov	r4, r1
 800858e:	461e      	mov	r6, r3
 8008590:	f101 0c14 	add.w	ip, r1, #20
 8008594:	2000      	movs	r0, #0
 8008596:	f8dc 3000 	ldr.w	r3, [ip]
 800859a:	b299      	uxth	r1, r3
 800859c:	fb02 6101 	mla	r1, r2, r1, r6
 80085a0:	0c1e      	lsrs	r6, r3, #16
 80085a2:	0c0b      	lsrs	r3, r1, #16
 80085a4:	fb02 3306 	mla	r3, r2, r6, r3
 80085a8:	b289      	uxth	r1, r1
 80085aa:	3001      	adds	r0, #1
 80085ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085b0:	4285      	cmp	r5, r0
 80085b2:	f84c 1b04 	str.w	r1, [ip], #4
 80085b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085ba:	dcec      	bgt.n	8008596 <__multadd+0x12>
 80085bc:	b30e      	cbz	r6, 8008602 <__multadd+0x7e>
 80085be:	68a3      	ldr	r3, [r4, #8]
 80085c0:	42ab      	cmp	r3, r5
 80085c2:	dc19      	bgt.n	80085f8 <__multadd+0x74>
 80085c4:	6861      	ldr	r1, [r4, #4]
 80085c6:	4638      	mov	r0, r7
 80085c8:	3101      	adds	r1, #1
 80085ca:	f7ff ff79 	bl	80084c0 <_Balloc>
 80085ce:	4680      	mov	r8, r0
 80085d0:	b928      	cbnz	r0, 80085de <__multadd+0x5a>
 80085d2:	4602      	mov	r2, r0
 80085d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008608 <__multadd+0x84>)
 80085d6:	480d      	ldr	r0, [pc, #52]	@ (800860c <__multadd+0x88>)
 80085d8:	21ba      	movs	r1, #186	@ 0xba
 80085da:	f002 f869 	bl	800a6b0 <__assert_func>
 80085de:	6922      	ldr	r2, [r4, #16]
 80085e0:	3202      	adds	r2, #2
 80085e2:	f104 010c 	add.w	r1, r4, #12
 80085e6:	0092      	lsls	r2, r2, #2
 80085e8:	300c      	adds	r0, #12
 80085ea:	f7fe fffc 	bl	80075e6 <memcpy>
 80085ee:	4621      	mov	r1, r4
 80085f0:	4638      	mov	r0, r7
 80085f2:	f7ff ffa5 	bl	8008540 <_Bfree>
 80085f6:	4644      	mov	r4, r8
 80085f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085fc:	3501      	adds	r5, #1
 80085fe:	615e      	str	r6, [r3, #20]
 8008600:	6125      	str	r5, [r4, #16]
 8008602:	4620      	mov	r0, r4
 8008604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008608:	0800ba37 	.word	0x0800ba37
 800860c:	0800ba48 	.word	0x0800ba48

08008610 <__s2b>:
 8008610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008614:	460c      	mov	r4, r1
 8008616:	4615      	mov	r5, r2
 8008618:	461f      	mov	r7, r3
 800861a:	2209      	movs	r2, #9
 800861c:	3308      	adds	r3, #8
 800861e:	4606      	mov	r6, r0
 8008620:	fb93 f3f2 	sdiv	r3, r3, r2
 8008624:	2100      	movs	r1, #0
 8008626:	2201      	movs	r2, #1
 8008628:	429a      	cmp	r2, r3
 800862a:	db09      	blt.n	8008640 <__s2b+0x30>
 800862c:	4630      	mov	r0, r6
 800862e:	f7ff ff47 	bl	80084c0 <_Balloc>
 8008632:	b940      	cbnz	r0, 8008646 <__s2b+0x36>
 8008634:	4602      	mov	r2, r0
 8008636:	4b19      	ldr	r3, [pc, #100]	@ (800869c <__s2b+0x8c>)
 8008638:	4819      	ldr	r0, [pc, #100]	@ (80086a0 <__s2b+0x90>)
 800863a:	21d3      	movs	r1, #211	@ 0xd3
 800863c:	f002 f838 	bl	800a6b0 <__assert_func>
 8008640:	0052      	lsls	r2, r2, #1
 8008642:	3101      	adds	r1, #1
 8008644:	e7f0      	b.n	8008628 <__s2b+0x18>
 8008646:	9b08      	ldr	r3, [sp, #32]
 8008648:	6143      	str	r3, [r0, #20]
 800864a:	2d09      	cmp	r5, #9
 800864c:	f04f 0301 	mov.w	r3, #1
 8008650:	6103      	str	r3, [r0, #16]
 8008652:	dd16      	ble.n	8008682 <__s2b+0x72>
 8008654:	f104 0909 	add.w	r9, r4, #9
 8008658:	46c8      	mov	r8, r9
 800865a:	442c      	add	r4, r5
 800865c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008660:	4601      	mov	r1, r0
 8008662:	3b30      	subs	r3, #48	@ 0x30
 8008664:	220a      	movs	r2, #10
 8008666:	4630      	mov	r0, r6
 8008668:	f7ff ff8c 	bl	8008584 <__multadd>
 800866c:	45a0      	cmp	r8, r4
 800866e:	d1f5      	bne.n	800865c <__s2b+0x4c>
 8008670:	f1a5 0408 	sub.w	r4, r5, #8
 8008674:	444c      	add	r4, r9
 8008676:	1b2d      	subs	r5, r5, r4
 8008678:	1963      	adds	r3, r4, r5
 800867a:	42bb      	cmp	r3, r7
 800867c:	db04      	blt.n	8008688 <__s2b+0x78>
 800867e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008682:	340a      	adds	r4, #10
 8008684:	2509      	movs	r5, #9
 8008686:	e7f6      	b.n	8008676 <__s2b+0x66>
 8008688:	f814 3b01 	ldrb.w	r3, [r4], #1
 800868c:	4601      	mov	r1, r0
 800868e:	3b30      	subs	r3, #48	@ 0x30
 8008690:	220a      	movs	r2, #10
 8008692:	4630      	mov	r0, r6
 8008694:	f7ff ff76 	bl	8008584 <__multadd>
 8008698:	e7ee      	b.n	8008678 <__s2b+0x68>
 800869a:	bf00      	nop
 800869c:	0800ba37 	.word	0x0800ba37
 80086a0:	0800ba48 	.word	0x0800ba48

080086a4 <__hi0bits>:
 80086a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086a8:	4603      	mov	r3, r0
 80086aa:	bf36      	itet	cc
 80086ac:	0403      	lslcc	r3, r0, #16
 80086ae:	2000      	movcs	r0, #0
 80086b0:	2010      	movcc	r0, #16
 80086b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086b6:	bf3c      	itt	cc
 80086b8:	021b      	lslcc	r3, r3, #8
 80086ba:	3008      	addcc	r0, #8
 80086bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086c0:	bf3c      	itt	cc
 80086c2:	011b      	lslcc	r3, r3, #4
 80086c4:	3004      	addcc	r0, #4
 80086c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ca:	bf3c      	itt	cc
 80086cc:	009b      	lslcc	r3, r3, #2
 80086ce:	3002      	addcc	r0, #2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	db05      	blt.n	80086e0 <__hi0bits+0x3c>
 80086d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086d8:	f100 0001 	add.w	r0, r0, #1
 80086dc:	bf08      	it	eq
 80086de:	2020      	moveq	r0, #32
 80086e0:	4770      	bx	lr

080086e2 <__lo0bits>:
 80086e2:	6803      	ldr	r3, [r0, #0]
 80086e4:	4602      	mov	r2, r0
 80086e6:	f013 0007 	ands.w	r0, r3, #7
 80086ea:	d00b      	beq.n	8008704 <__lo0bits+0x22>
 80086ec:	07d9      	lsls	r1, r3, #31
 80086ee:	d421      	bmi.n	8008734 <__lo0bits+0x52>
 80086f0:	0798      	lsls	r0, r3, #30
 80086f2:	bf49      	itett	mi
 80086f4:	085b      	lsrmi	r3, r3, #1
 80086f6:	089b      	lsrpl	r3, r3, #2
 80086f8:	2001      	movmi	r0, #1
 80086fa:	6013      	strmi	r3, [r2, #0]
 80086fc:	bf5c      	itt	pl
 80086fe:	6013      	strpl	r3, [r2, #0]
 8008700:	2002      	movpl	r0, #2
 8008702:	4770      	bx	lr
 8008704:	b299      	uxth	r1, r3
 8008706:	b909      	cbnz	r1, 800870c <__lo0bits+0x2a>
 8008708:	0c1b      	lsrs	r3, r3, #16
 800870a:	2010      	movs	r0, #16
 800870c:	b2d9      	uxtb	r1, r3
 800870e:	b909      	cbnz	r1, 8008714 <__lo0bits+0x32>
 8008710:	3008      	adds	r0, #8
 8008712:	0a1b      	lsrs	r3, r3, #8
 8008714:	0719      	lsls	r1, r3, #28
 8008716:	bf04      	itt	eq
 8008718:	091b      	lsreq	r3, r3, #4
 800871a:	3004      	addeq	r0, #4
 800871c:	0799      	lsls	r1, r3, #30
 800871e:	bf04      	itt	eq
 8008720:	089b      	lsreq	r3, r3, #2
 8008722:	3002      	addeq	r0, #2
 8008724:	07d9      	lsls	r1, r3, #31
 8008726:	d403      	bmi.n	8008730 <__lo0bits+0x4e>
 8008728:	085b      	lsrs	r3, r3, #1
 800872a:	f100 0001 	add.w	r0, r0, #1
 800872e:	d003      	beq.n	8008738 <__lo0bits+0x56>
 8008730:	6013      	str	r3, [r2, #0]
 8008732:	4770      	bx	lr
 8008734:	2000      	movs	r0, #0
 8008736:	4770      	bx	lr
 8008738:	2020      	movs	r0, #32
 800873a:	4770      	bx	lr

0800873c <__i2b>:
 800873c:	b510      	push	{r4, lr}
 800873e:	460c      	mov	r4, r1
 8008740:	2101      	movs	r1, #1
 8008742:	f7ff febd 	bl	80084c0 <_Balloc>
 8008746:	4602      	mov	r2, r0
 8008748:	b928      	cbnz	r0, 8008756 <__i2b+0x1a>
 800874a:	4b05      	ldr	r3, [pc, #20]	@ (8008760 <__i2b+0x24>)
 800874c:	4805      	ldr	r0, [pc, #20]	@ (8008764 <__i2b+0x28>)
 800874e:	f240 1145 	movw	r1, #325	@ 0x145
 8008752:	f001 ffad 	bl	800a6b0 <__assert_func>
 8008756:	2301      	movs	r3, #1
 8008758:	6144      	str	r4, [r0, #20]
 800875a:	6103      	str	r3, [r0, #16]
 800875c:	bd10      	pop	{r4, pc}
 800875e:	bf00      	nop
 8008760:	0800ba37 	.word	0x0800ba37
 8008764:	0800ba48 	.word	0x0800ba48

08008768 <__multiply>:
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	4617      	mov	r7, r2
 800876e:	690a      	ldr	r2, [r1, #16]
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	429a      	cmp	r2, r3
 8008774:	bfa8      	it	ge
 8008776:	463b      	movge	r3, r7
 8008778:	4689      	mov	r9, r1
 800877a:	bfa4      	itt	ge
 800877c:	460f      	movge	r7, r1
 800877e:	4699      	movge	r9, r3
 8008780:	693d      	ldr	r5, [r7, #16]
 8008782:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	6879      	ldr	r1, [r7, #4]
 800878a:	eb05 060a 	add.w	r6, r5, sl
 800878e:	42b3      	cmp	r3, r6
 8008790:	b085      	sub	sp, #20
 8008792:	bfb8      	it	lt
 8008794:	3101      	addlt	r1, #1
 8008796:	f7ff fe93 	bl	80084c0 <_Balloc>
 800879a:	b930      	cbnz	r0, 80087aa <__multiply+0x42>
 800879c:	4602      	mov	r2, r0
 800879e:	4b41      	ldr	r3, [pc, #260]	@ (80088a4 <__multiply+0x13c>)
 80087a0:	4841      	ldr	r0, [pc, #260]	@ (80088a8 <__multiply+0x140>)
 80087a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087a6:	f001 ff83 	bl	800a6b0 <__assert_func>
 80087aa:	f100 0414 	add.w	r4, r0, #20
 80087ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80087b2:	4623      	mov	r3, r4
 80087b4:	2200      	movs	r2, #0
 80087b6:	4573      	cmp	r3, lr
 80087b8:	d320      	bcc.n	80087fc <__multiply+0x94>
 80087ba:	f107 0814 	add.w	r8, r7, #20
 80087be:	f109 0114 	add.w	r1, r9, #20
 80087c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80087c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80087ca:	9302      	str	r3, [sp, #8]
 80087cc:	1beb      	subs	r3, r5, r7
 80087ce:	3b15      	subs	r3, #21
 80087d0:	f023 0303 	bic.w	r3, r3, #3
 80087d4:	3304      	adds	r3, #4
 80087d6:	3715      	adds	r7, #21
 80087d8:	42bd      	cmp	r5, r7
 80087da:	bf38      	it	cc
 80087dc:	2304      	movcc	r3, #4
 80087de:	9301      	str	r3, [sp, #4]
 80087e0:	9b02      	ldr	r3, [sp, #8]
 80087e2:	9103      	str	r1, [sp, #12]
 80087e4:	428b      	cmp	r3, r1
 80087e6:	d80c      	bhi.n	8008802 <__multiply+0x9a>
 80087e8:	2e00      	cmp	r6, #0
 80087ea:	dd03      	ble.n	80087f4 <__multiply+0x8c>
 80087ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d055      	beq.n	80088a0 <__multiply+0x138>
 80087f4:	6106      	str	r6, [r0, #16]
 80087f6:	b005      	add	sp, #20
 80087f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fc:	f843 2b04 	str.w	r2, [r3], #4
 8008800:	e7d9      	b.n	80087b6 <__multiply+0x4e>
 8008802:	f8b1 a000 	ldrh.w	sl, [r1]
 8008806:	f1ba 0f00 	cmp.w	sl, #0
 800880a:	d01f      	beq.n	800884c <__multiply+0xe4>
 800880c:	46c4      	mov	ip, r8
 800880e:	46a1      	mov	r9, r4
 8008810:	2700      	movs	r7, #0
 8008812:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008816:	f8d9 3000 	ldr.w	r3, [r9]
 800881a:	fa1f fb82 	uxth.w	fp, r2
 800881e:	b29b      	uxth	r3, r3
 8008820:	fb0a 330b 	mla	r3, sl, fp, r3
 8008824:	443b      	add	r3, r7
 8008826:	f8d9 7000 	ldr.w	r7, [r9]
 800882a:	0c12      	lsrs	r2, r2, #16
 800882c:	0c3f      	lsrs	r7, r7, #16
 800882e:	fb0a 7202 	mla	r2, sl, r2, r7
 8008832:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008836:	b29b      	uxth	r3, r3
 8008838:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800883c:	4565      	cmp	r5, ip
 800883e:	f849 3b04 	str.w	r3, [r9], #4
 8008842:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008846:	d8e4      	bhi.n	8008812 <__multiply+0xaa>
 8008848:	9b01      	ldr	r3, [sp, #4]
 800884a:	50e7      	str	r7, [r4, r3]
 800884c:	9b03      	ldr	r3, [sp, #12]
 800884e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008852:	3104      	adds	r1, #4
 8008854:	f1b9 0f00 	cmp.w	r9, #0
 8008858:	d020      	beq.n	800889c <__multiply+0x134>
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	4647      	mov	r7, r8
 800885e:	46a4      	mov	ip, r4
 8008860:	f04f 0a00 	mov.w	sl, #0
 8008864:	f8b7 b000 	ldrh.w	fp, [r7]
 8008868:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800886c:	fb09 220b 	mla	r2, r9, fp, r2
 8008870:	4452      	add	r2, sl
 8008872:	b29b      	uxth	r3, r3
 8008874:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008878:	f84c 3b04 	str.w	r3, [ip], #4
 800887c:	f857 3b04 	ldr.w	r3, [r7], #4
 8008880:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008884:	f8bc 3000 	ldrh.w	r3, [ip]
 8008888:	fb09 330a 	mla	r3, r9, sl, r3
 800888c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008890:	42bd      	cmp	r5, r7
 8008892:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008896:	d8e5      	bhi.n	8008864 <__multiply+0xfc>
 8008898:	9a01      	ldr	r2, [sp, #4]
 800889a:	50a3      	str	r3, [r4, r2]
 800889c:	3404      	adds	r4, #4
 800889e:	e79f      	b.n	80087e0 <__multiply+0x78>
 80088a0:	3e01      	subs	r6, #1
 80088a2:	e7a1      	b.n	80087e8 <__multiply+0x80>
 80088a4:	0800ba37 	.word	0x0800ba37
 80088a8:	0800ba48 	.word	0x0800ba48

080088ac <__pow5mult>:
 80088ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088b0:	4615      	mov	r5, r2
 80088b2:	f012 0203 	ands.w	r2, r2, #3
 80088b6:	4607      	mov	r7, r0
 80088b8:	460e      	mov	r6, r1
 80088ba:	d007      	beq.n	80088cc <__pow5mult+0x20>
 80088bc:	4c25      	ldr	r4, [pc, #148]	@ (8008954 <__pow5mult+0xa8>)
 80088be:	3a01      	subs	r2, #1
 80088c0:	2300      	movs	r3, #0
 80088c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088c6:	f7ff fe5d 	bl	8008584 <__multadd>
 80088ca:	4606      	mov	r6, r0
 80088cc:	10ad      	asrs	r5, r5, #2
 80088ce:	d03d      	beq.n	800894c <__pow5mult+0xa0>
 80088d0:	69fc      	ldr	r4, [r7, #28]
 80088d2:	b97c      	cbnz	r4, 80088f4 <__pow5mult+0x48>
 80088d4:	2010      	movs	r0, #16
 80088d6:	f7ff fd3d 	bl	8008354 <malloc>
 80088da:	4602      	mov	r2, r0
 80088dc:	61f8      	str	r0, [r7, #28]
 80088de:	b928      	cbnz	r0, 80088ec <__pow5mult+0x40>
 80088e0:	4b1d      	ldr	r3, [pc, #116]	@ (8008958 <__pow5mult+0xac>)
 80088e2:	481e      	ldr	r0, [pc, #120]	@ (800895c <__pow5mult+0xb0>)
 80088e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80088e8:	f001 fee2 	bl	800a6b0 <__assert_func>
 80088ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088f0:	6004      	str	r4, [r0, #0]
 80088f2:	60c4      	str	r4, [r0, #12]
 80088f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80088f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088fc:	b94c      	cbnz	r4, 8008912 <__pow5mult+0x66>
 80088fe:	f240 2171 	movw	r1, #625	@ 0x271
 8008902:	4638      	mov	r0, r7
 8008904:	f7ff ff1a 	bl	800873c <__i2b>
 8008908:	2300      	movs	r3, #0
 800890a:	f8c8 0008 	str.w	r0, [r8, #8]
 800890e:	4604      	mov	r4, r0
 8008910:	6003      	str	r3, [r0, #0]
 8008912:	f04f 0900 	mov.w	r9, #0
 8008916:	07eb      	lsls	r3, r5, #31
 8008918:	d50a      	bpl.n	8008930 <__pow5mult+0x84>
 800891a:	4631      	mov	r1, r6
 800891c:	4622      	mov	r2, r4
 800891e:	4638      	mov	r0, r7
 8008920:	f7ff ff22 	bl	8008768 <__multiply>
 8008924:	4631      	mov	r1, r6
 8008926:	4680      	mov	r8, r0
 8008928:	4638      	mov	r0, r7
 800892a:	f7ff fe09 	bl	8008540 <_Bfree>
 800892e:	4646      	mov	r6, r8
 8008930:	106d      	asrs	r5, r5, #1
 8008932:	d00b      	beq.n	800894c <__pow5mult+0xa0>
 8008934:	6820      	ldr	r0, [r4, #0]
 8008936:	b938      	cbnz	r0, 8008948 <__pow5mult+0x9c>
 8008938:	4622      	mov	r2, r4
 800893a:	4621      	mov	r1, r4
 800893c:	4638      	mov	r0, r7
 800893e:	f7ff ff13 	bl	8008768 <__multiply>
 8008942:	6020      	str	r0, [r4, #0]
 8008944:	f8c0 9000 	str.w	r9, [r0]
 8008948:	4604      	mov	r4, r0
 800894a:	e7e4      	b.n	8008916 <__pow5mult+0x6a>
 800894c:	4630      	mov	r0, r6
 800894e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008952:	bf00      	nop
 8008954:	0800bb74 	.word	0x0800bb74
 8008958:	0800b9c8 	.word	0x0800b9c8
 800895c:	0800ba48 	.word	0x0800ba48

08008960 <__lshift>:
 8008960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008964:	460c      	mov	r4, r1
 8008966:	6849      	ldr	r1, [r1, #4]
 8008968:	6923      	ldr	r3, [r4, #16]
 800896a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800896e:	68a3      	ldr	r3, [r4, #8]
 8008970:	4607      	mov	r7, r0
 8008972:	4691      	mov	r9, r2
 8008974:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008978:	f108 0601 	add.w	r6, r8, #1
 800897c:	42b3      	cmp	r3, r6
 800897e:	db0b      	blt.n	8008998 <__lshift+0x38>
 8008980:	4638      	mov	r0, r7
 8008982:	f7ff fd9d 	bl	80084c0 <_Balloc>
 8008986:	4605      	mov	r5, r0
 8008988:	b948      	cbnz	r0, 800899e <__lshift+0x3e>
 800898a:	4602      	mov	r2, r0
 800898c:	4b28      	ldr	r3, [pc, #160]	@ (8008a30 <__lshift+0xd0>)
 800898e:	4829      	ldr	r0, [pc, #164]	@ (8008a34 <__lshift+0xd4>)
 8008990:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008994:	f001 fe8c 	bl	800a6b0 <__assert_func>
 8008998:	3101      	adds	r1, #1
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	e7ee      	b.n	800897c <__lshift+0x1c>
 800899e:	2300      	movs	r3, #0
 80089a0:	f100 0114 	add.w	r1, r0, #20
 80089a4:	f100 0210 	add.w	r2, r0, #16
 80089a8:	4618      	mov	r0, r3
 80089aa:	4553      	cmp	r3, sl
 80089ac:	db33      	blt.n	8008a16 <__lshift+0xb6>
 80089ae:	6920      	ldr	r0, [r4, #16]
 80089b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089b4:	f104 0314 	add.w	r3, r4, #20
 80089b8:	f019 091f 	ands.w	r9, r9, #31
 80089bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089c4:	d02b      	beq.n	8008a1e <__lshift+0xbe>
 80089c6:	f1c9 0e20 	rsb	lr, r9, #32
 80089ca:	468a      	mov	sl, r1
 80089cc:	2200      	movs	r2, #0
 80089ce:	6818      	ldr	r0, [r3, #0]
 80089d0:	fa00 f009 	lsl.w	r0, r0, r9
 80089d4:	4310      	orrs	r0, r2
 80089d6:	f84a 0b04 	str.w	r0, [sl], #4
 80089da:	f853 2b04 	ldr.w	r2, [r3], #4
 80089de:	459c      	cmp	ip, r3
 80089e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80089e4:	d8f3      	bhi.n	80089ce <__lshift+0x6e>
 80089e6:	ebac 0304 	sub.w	r3, ip, r4
 80089ea:	3b15      	subs	r3, #21
 80089ec:	f023 0303 	bic.w	r3, r3, #3
 80089f0:	3304      	adds	r3, #4
 80089f2:	f104 0015 	add.w	r0, r4, #21
 80089f6:	4560      	cmp	r0, ip
 80089f8:	bf88      	it	hi
 80089fa:	2304      	movhi	r3, #4
 80089fc:	50ca      	str	r2, [r1, r3]
 80089fe:	b10a      	cbz	r2, 8008a04 <__lshift+0xa4>
 8008a00:	f108 0602 	add.w	r6, r8, #2
 8008a04:	3e01      	subs	r6, #1
 8008a06:	4638      	mov	r0, r7
 8008a08:	612e      	str	r6, [r5, #16]
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	f7ff fd98 	bl	8008540 <_Bfree>
 8008a10:	4628      	mov	r0, r5
 8008a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a16:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	e7c5      	b.n	80089aa <__lshift+0x4a>
 8008a1e:	3904      	subs	r1, #4
 8008a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a24:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a28:	459c      	cmp	ip, r3
 8008a2a:	d8f9      	bhi.n	8008a20 <__lshift+0xc0>
 8008a2c:	e7ea      	b.n	8008a04 <__lshift+0xa4>
 8008a2e:	bf00      	nop
 8008a30:	0800ba37 	.word	0x0800ba37
 8008a34:	0800ba48 	.word	0x0800ba48

08008a38 <__mcmp>:
 8008a38:	690a      	ldr	r2, [r1, #16]
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	6900      	ldr	r0, [r0, #16]
 8008a3e:	1a80      	subs	r0, r0, r2
 8008a40:	b530      	push	{r4, r5, lr}
 8008a42:	d10e      	bne.n	8008a62 <__mcmp+0x2a>
 8008a44:	3314      	adds	r3, #20
 8008a46:	3114      	adds	r1, #20
 8008a48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a58:	4295      	cmp	r5, r2
 8008a5a:	d003      	beq.n	8008a64 <__mcmp+0x2c>
 8008a5c:	d205      	bcs.n	8008a6a <__mcmp+0x32>
 8008a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a62:	bd30      	pop	{r4, r5, pc}
 8008a64:	42a3      	cmp	r3, r4
 8008a66:	d3f3      	bcc.n	8008a50 <__mcmp+0x18>
 8008a68:	e7fb      	b.n	8008a62 <__mcmp+0x2a>
 8008a6a:	2001      	movs	r0, #1
 8008a6c:	e7f9      	b.n	8008a62 <__mcmp+0x2a>
	...

08008a70 <__mdiff>:
 8008a70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	4689      	mov	r9, r1
 8008a76:	4606      	mov	r6, r0
 8008a78:	4611      	mov	r1, r2
 8008a7a:	4648      	mov	r0, r9
 8008a7c:	4614      	mov	r4, r2
 8008a7e:	f7ff ffdb 	bl	8008a38 <__mcmp>
 8008a82:	1e05      	subs	r5, r0, #0
 8008a84:	d112      	bne.n	8008aac <__mdiff+0x3c>
 8008a86:	4629      	mov	r1, r5
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f7ff fd19 	bl	80084c0 <_Balloc>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	b928      	cbnz	r0, 8008a9e <__mdiff+0x2e>
 8008a92:	4b3f      	ldr	r3, [pc, #252]	@ (8008b90 <__mdiff+0x120>)
 8008a94:	f240 2137 	movw	r1, #567	@ 0x237
 8008a98:	483e      	ldr	r0, [pc, #248]	@ (8008b94 <__mdiff+0x124>)
 8008a9a:	f001 fe09 	bl	800a6b0 <__assert_func>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	b003      	add	sp, #12
 8008aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aac:	bfbc      	itt	lt
 8008aae:	464b      	movlt	r3, r9
 8008ab0:	46a1      	movlt	r9, r4
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ab8:	bfba      	itte	lt
 8008aba:	461c      	movlt	r4, r3
 8008abc:	2501      	movlt	r5, #1
 8008abe:	2500      	movge	r5, #0
 8008ac0:	f7ff fcfe 	bl	80084c0 <_Balloc>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	b918      	cbnz	r0, 8008ad0 <__mdiff+0x60>
 8008ac8:	4b31      	ldr	r3, [pc, #196]	@ (8008b90 <__mdiff+0x120>)
 8008aca:	f240 2145 	movw	r1, #581	@ 0x245
 8008ace:	e7e3      	b.n	8008a98 <__mdiff+0x28>
 8008ad0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ad4:	6926      	ldr	r6, [r4, #16]
 8008ad6:	60c5      	str	r5, [r0, #12]
 8008ad8:	f109 0310 	add.w	r3, r9, #16
 8008adc:	f109 0514 	add.w	r5, r9, #20
 8008ae0:	f104 0e14 	add.w	lr, r4, #20
 8008ae4:	f100 0b14 	add.w	fp, r0, #20
 8008ae8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008aec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008af0:	9301      	str	r3, [sp, #4]
 8008af2:	46d9      	mov	r9, fp
 8008af4:	f04f 0c00 	mov.w	ip, #0
 8008af8:	9b01      	ldr	r3, [sp, #4]
 8008afa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008afe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	fa1f f38a 	uxth.w	r3, sl
 8008b08:	4619      	mov	r1, r3
 8008b0a:	b283      	uxth	r3, r0
 8008b0c:	1acb      	subs	r3, r1, r3
 8008b0e:	0c00      	lsrs	r0, r0, #16
 8008b10:	4463      	add	r3, ip
 8008b12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b20:	4576      	cmp	r6, lr
 8008b22:	f849 3b04 	str.w	r3, [r9], #4
 8008b26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b2a:	d8e5      	bhi.n	8008af8 <__mdiff+0x88>
 8008b2c:	1b33      	subs	r3, r6, r4
 8008b2e:	3b15      	subs	r3, #21
 8008b30:	f023 0303 	bic.w	r3, r3, #3
 8008b34:	3415      	adds	r4, #21
 8008b36:	3304      	adds	r3, #4
 8008b38:	42a6      	cmp	r6, r4
 8008b3a:	bf38      	it	cc
 8008b3c:	2304      	movcc	r3, #4
 8008b3e:	441d      	add	r5, r3
 8008b40:	445b      	add	r3, fp
 8008b42:	461e      	mov	r6, r3
 8008b44:	462c      	mov	r4, r5
 8008b46:	4544      	cmp	r4, r8
 8008b48:	d30e      	bcc.n	8008b68 <__mdiff+0xf8>
 8008b4a:	f108 0103 	add.w	r1, r8, #3
 8008b4e:	1b49      	subs	r1, r1, r5
 8008b50:	f021 0103 	bic.w	r1, r1, #3
 8008b54:	3d03      	subs	r5, #3
 8008b56:	45a8      	cmp	r8, r5
 8008b58:	bf38      	it	cc
 8008b5a:	2100      	movcc	r1, #0
 8008b5c:	440b      	add	r3, r1
 8008b5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b62:	b191      	cbz	r1, 8008b8a <__mdiff+0x11a>
 8008b64:	6117      	str	r7, [r2, #16]
 8008b66:	e79d      	b.n	8008aa4 <__mdiff+0x34>
 8008b68:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b6c:	46e6      	mov	lr, ip
 8008b6e:	0c08      	lsrs	r0, r1, #16
 8008b70:	fa1c fc81 	uxtah	ip, ip, r1
 8008b74:	4471      	add	r1, lr
 8008b76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b7a:	b289      	uxth	r1, r1
 8008b7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b80:	f846 1b04 	str.w	r1, [r6], #4
 8008b84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b88:	e7dd      	b.n	8008b46 <__mdiff+0xd6>
 8008b8a:	3f01      	subs	r7, #1
 8008b8c:	e7e7      	b.n	8008b5e <__mdiff+0xee>
 8008b8e:	bf00      	nop
 8008b90:	0800ba37 	.word	0x0800ba37
 8008b94:	0800ba48 	.word	0x0800ba48

08008b98 <__ulp>:
 8008b98:	b082      	sub	sp, #8
 8008b9a:	ed8d 0b00 	vstr	d0, [sp]
 8008b9e:	9a01      	ldr	r2, [sp, #4]
 8008ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8008be0 <__ulp+0x48>)
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	dc08      	bgt.n	8008bbe <__ulp+0x26>
 8008bac:	425b      	negs	r3, r3
 8008bae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008bb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008bb6:	da04      	bge.n	8008bc2 <__ulp+0x2a>
 8008bb8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008bbc:	4113      	asrs	r3, r2
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	e008      	b.n	8008bd4 <__ulp+0x3c>
 8008bc2:	f1a2 0314 	sub.w	r3, r2, #20
 8008bc6:	2b1e      	cmp	r3, #30
 8008bc8:	bfda      	itte	le
 8008bca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008bce:	40da      	lsrle	r2, r3
 8008bd0:	2201      	movgt	r2, #1
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	ec41 0b10 	vmov	d0, r0, r1
 8008bdc:	b002      	add	sp, #8
 8008bde:	4770      	bx	lr
 8008be0:	7ff00000 	.word	0x7ff00000

08008be4 <__b2d>:
 8008be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be8:	6906      	ldr	r6, [r0, #16]
 8008bea:	f100 0814 	add.w	r8, r0, #20
 8008bee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008bf2:	1f37      	subs	r7, r6, #4
 8008bf4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	f7ff fd53 	bl	80086a4 <__hi0bits>
 8008bfe:	f1c0 0320 	rsb	r3, r0, #32
 8008c02:	280a      	cmp	r0, #10
 8008c04:	600b      	str	r3, [r1, #0]
 8008c06:	491b      	ldr	r1, [pc, #108]	@ (8008c74 <__b2d+0x90>)
 8008c08:	dc15      	bgt.n	8008c36 <__b2d+0x52>
 8008c0a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008c0e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008c12:	45b8      	cmp	r8, r7
 8008c14:	ea43 0501 	orr.w	r5, r3, r1
 8008c18:	bf34      	ite	cc
 8008c1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008c1e:	2300      	movcs	r3, #0
 8008c20:	3015      	adds	r0, #21
 8008c22:	fa02 f000 	lsl.w	r0, r2, r0
 8008c26:	fa23 f30c 	lsr.w	r3, r3, ip
 8008c2a:	4303      	orrs	r3, r0
 8008c2c:	461c      	mov	r4, r3
 8008c2e:	ec45 4b10 	vmov	d0, r4, r5
 8008c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c36:	45b8      	cmp	r8, r7
 8008c38:	bf3a      	itte	cc
 8008c3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008c3e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008c42:	2300      	movcs	r3, #0
 8008c44:	380b      	subs	r0, #11
 8008c46:	d012      	beq.n	8008c6e <__b2d+0x8a>
 8008c48:	f1c0 0120 	rsb	r1, r0, #32
 8008c4c:	fa23 f401 	lsr.w	r4, r3, r1
 8008c50:	4082      	lsls	r2, r0
 8008c52:	4322      	orrs	r2, r4
 8008c54:	4547      	cmp	r7, r8
 8008c56:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008c5a:	bf8c      	ite	hi
 8008c5c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008c60:	2200      	movls	r2, #0
 8008c62:	4083      	lsls	r3, r0
 8008c64:	40ca      	lsrs	r2, r1
 8008c66:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	e7de      	b.n	8008c2c <__b2d+0x48>
 8008c6e:	ea42 0501 	orr.w	r5, r2, r1
 8008c72:	e7db      	b.n	8008c2c <__b2d+0x48>
 8008c74:	3ff00000 	.word	0x3ff00000

08008c78 <__d2b>:
 8008c78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c7c:	460f      	mov	r7, r1
 8008c7e:	2101      	movs	r1, #1
 8008c80:	ec59 8b10 	vmov	r8, r9, d0
 8008c84:	4616      	mov	r6, r2
 8008c86:	f7ff fc1b 	bl	80084c0 <_Balloc>
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	b930      	cbnz	r0, 8008c9c <__d2b+0x24>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	4b23      	ldr	r3, [pc, #140]	@ (8008d20 <__d2b+0xa8>)
 8008c92:	4824      	ldr	r0, [pc, #144]	@ (8008d24 <__d2b+0xac>)
 8008c94:	f240 310f 	movw	r1, #783	@ 0x30f
 8008c98:	f001 fd0a 	bl	800a6b0 <__assert_func>
 8008c9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ca0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ca4:	b10d      	cbz	r5, 8008caa <__d2b+0x32>
 8008ca6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008caa:	9301      	str	r3, [sp, #4]
 8008cac:	f1b8 0300 	subs.w	r3, r8, #0
 8008cb0:	d023      	beq.n	8008cfa <__d2b+0x82>
 8008cb2:	4668      	mov	r0, sp
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	f7ff fd14 	bl	80086e2 <__lo0bits>
 8008cba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008cbe:	b1d0      	cbz	r0, 8008cf6 <__d2b+0x7e>
 8008cc0:	f1c0 0320 	rsb	r3, r0, #32
 8008cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc8:	430b      	orrs	r3, r1
 8008cca:	40c2      	lsrs	r2, r0
 8008ccc:	6163      	str	r3, [r4, #20]
 8008cce:	9201      	str	r2, [sp, #4]
 8008cd0:	9b01      	ldr	r3, [sp, #4]
 8008cd2:	61a3      	str	r3, [r4, #24]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	bf0c      	ite	eq
 8008cd8:	2201      	moveq	r2, #1
 8008cda:	2202      	movne	r2, #2
 8008cdc:	6122      	str	r2, [r4, #16]
 8008cde:	b1a5      	cbz	r5, 8008d0a <__d2b+0x92>
 8008ce0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ce4:	4405      	add	r5, r0
 8008ce6:	603d      	str	r5, [r7, #0]
 8008ce8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008cec:	6030      	str	r0, [r6, #0]
 8008cee:	4620      	mov	r0, r4
 8008cf0:	b003      	add	sp, #12
 8008cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cf6:	6161      	str	r1, [r4, #20]
 8008cf8:	e7ea      	b.n	8008cd0 <__d2b+0x58>
 8008cfa:	a801      	add	r0, sp, #4
 8008cfc:	f7ff fcf1 	bl	80086e2 <__lo0bits>
 8008d00:	9b01      	ldr	r3, [sp, #4]
 8008d02:	6163      	str	r3, [r4, #20]
 8008d04:	3020      	adds	r0, #32
 8008d06:	2201      	movs	r2, #1
 8008d08:	e7e8      	b.n	8008cdc <__d2b+0x64>
 8008d0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008d12:	6038      	str	r0, [r7, #0]
 8008d14:	6918      	ldr	r0, [r3, #16]
 8008d16:	f7ff fcc5 	bl	80086a4 <__hi0bits>
 8008d1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d1e:	e7e5      	b.n	8008cec <__d2b+0x74>
 8008d20:	0800ba37 	.word	0x0800ba37
 8008d24:	0800ba48 	.word	0x0800ba48

08008d28 <__ratio>:
 8008d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2c:	b085      	sub	sp, #20
 8008d2e:	e9cd 1000 	strd	r1, r0, [sp]
 8008d32:	a902      	add	r1, sp, #8
 8008d34:	f7ff ff56 	bl	8008be4 <__b2d>
 8008d38:	9800      	ldr	r0, [sp, #0]
 8008d3a:	a903      	add	r1, sp, #12
 8008d3c:	ec55 4b10 	vmov	r4, r5, d0
 8008d40:	f7ff ff50 	bl	8008be4 <__b2d>
 8008d44:	9b01      	ldr	r3, [sp, #4]
 8008d46:	6919      	ldr	r1, [r3, #16]
 8008d48:	9b00      	ldr	r3, [sp, #0]
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	1ac9      	subs	r1, r1, r3
 8008d4e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008d52:	1a9b      	subs	r3, r3, r2
 8008d54:	ec5b ab10 	vmov	sl, fp, d0
 8008d58:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	bfce      	itee	gt
 8008d60:	462a      	movgt	r2, r5
 8008d62:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d66:	465a      	movle	r2, fp
 8008d68:	462f      	mov	r7, r5
 8008d6a:	46d9      	mov	r9, fp
 8008d6c:	bfcc      	ite	gt
 8008d6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d72:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008d76:	464b      	mov	r3, r9
 8008d78:	4652      	mov	r2, sl
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	4639      	mov	r1, r7
 8008d7e:	f7f7 fd85 	bl	800088c <__aeabi_ddiv>
 8008d82:	ec41 0b10 	vmov	d0, r0, r1
 8008d86:	b005      	add	sp, #20
 8008d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d8c <__copybits>:
 8008d8c:	3901      	subs	r1, #1
 8008d8e:	b570      	push	{r4, r5, r6, lr}
 8008d90:	1149      	asrs	r1, r1, #5
 8008d92:	6914      	ldr	r4, [r2, #16]
 8008d94:	3101      	adds	r1, #1
 8008d96:	f102 0314 	add.w	r3, r2, #20
 8008d9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008da2:	1f05      	subs	r5, r0, #4
 8008da4:	42a3      	cmp	r3, r4
 8008da6:	d30c      	bcc.n	8008dc2 <__copybits+0x36>
 8008da8:	1aa3      	subs	r3, r4, r2
 8008daa:	3b11      	subs	r3, #17
 8008dac:	f023 0303 	bic.w	r3, r3, #3
 8008db0:	3211      	adds	r2, #17
 8008db2:	42a2      	cmp	r2, r4
 8008db4:	bf88      	it	hi
 8008db6:	2300      	movhi	r3, #0
 8008db8:	4418      	add	r0, r3
 8008dba:	2300      	movs	r3, #0
 8008dbc:	4288      	cmp	r0, r1
 8008dbe:	d305      	bcc.n	8008dcc <__copybits+0x40>
 8008dc0:	bd70      	pop	{r4, r5, r6, pc}
 8008dc2:	f853 6b04 	ldr.w	r6, [r3], #4
 8008dc6:	f845 6f04 	str.w	r6, [r5, #4]!
 8008dca:	e7eb      	b.n	8008da4 <__copybits+0x18>
 8008dcc:	f840 3b04 	str.w	r3, [r0], #4
 8008dd0:	e7f4      	b.n	8008dbc <__copybits+0x30>

08008dd2 <__any_on>:
 8008dd2:	f100 0214 	add.w	r2, r0, #20
 8008dd6:	6900      	ldr	r0, [r0, #16]
 8008dd8:	114b      	asrs	r3, r1, #5
 8008dda:	4298      	cmp	r0, r3
 8008ddc:	b510      	push	{r4, lr}
 8008dde:	db11      	blt.n	8008e04 <__any_on+0x32>
 8008de0:	dd0a      	ble.n	8008df8 <__any_on+0x26>
 8008de2:	f011 011f 	ands.w	r1, r1, #31
 8008de6:	d007      	beq.n	8008df8 <__any_on+0x26>
 8008de8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008dec:	fa24 f001 	lsr.w	r0, r4, r1
 8008df0:	fa00 f101 	lsl.w	r1, r0, r1
 8008df4:	428c      	cmp	r4, r1
 8008df6:	d10b      	bne.n	8008e10 <__any_on+0x3e>
 8008df8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d803      	bhi.n	8008e08 <__any_on+0x36>
 8008e00:	2000      	movs	r0, #0
 8008e02:	bd10      	pop	{r4, pc}
 8008e04:	4603      	mov	r3, r0
 8008e06:	e7f7      	b.n	8008df8 <__any_on+0x26>
 8008e08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e0c:	2900      	cmp	r1, #0
 8008e0e:	d0f5      	beq.n	8008dfc <__any_on+0x2a>
 8008e10:	2001      	movs	r0, #1
 8008e12:	e7f6      	b.n	8008e02 <__any_on+0x30>

08008e14 <sulp>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	4604      	mov	r4, r0
 8008e18:	460d      	mov	r5, r1
 8008e1a:	ec45 4b10 	vmov	d0, r4, r5
 8008e1e:	4616      	mov	r6, r2
 8008e20:	f7ff feba 	bl	8008b98 <__ulp>
 8008e24:	ec51 0b10 	vmov	r0, r1, d0
 8008e28:	b17e      	cbz	r6, 8008e4a <sulp+0x36>
 8008e2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008e2e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	dd09      	ble.n	8008e4a <sulp+0x36>
 8008e36:	051b      	lsls	r3, r3, #20
 8008e38:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008e3c:	2400      	movs	r4, #0
 8008e3e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008e42:	4622      	mov	r2, r4
 8008e44:	462b      	mov	r3, r5
 8008e46:	f7f7 fbf7 	bl	8000638 <__aeabi_dmul>
 8008e4a:	ec41 0b10 	vmov	d0, r0, r1
 8008e4e:	bd70      	pop	{r4, r5, r6, pc}

08008e50 <_strtod_l>:
 8008e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	b09f      	sub	sp, #124	@ 0x7c
 8008e56:	460c      	mov	r4, r1
 8008e58:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008e5e:	9005      	str	r0, [sp, #20]
 8008e60:	f04f 0a00 	mov.w	sl, #0
 8008e64:	f04f 0b00 	mov.w	fp, #0
 8008e68:	460a      	mov	r2, r1
 8008e6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e6c:	7811      	ldrb	r1, [r2, #0]
 8008e6e:	292b      	cmp	r1, #43	@ 0x2b
 8008e70:	d04a      	beq.n	8008f08 <_strtod_l+0xb8>
 8008e72:	d838      	bhi.n	8008ee6 <_strtod_l+0x96>
 8008e74:	290d      	cmp	r1, #13
 8008e76:	d832      	bhi.n	8008ede <_strtod_l+0x8e>
 8008e78:	2908      	cmp	r1, #8
 8008e7a:	d832      	bhi.n	8008ee2 <_strtod_l+0x92>
 8008e7c:	2900      	cmp	r1, #0
 8008e7e:	d03b      	beq.n	8008ef8 <_strtod_l+0xa8>
 8008e80:	2200      	movs	r2, #0
 8008e82:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e84:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008e86:	782a      	ldrb	r2, [r5, #0]
 8008e88:	2a30      	cmp	r2, #48	@ 0x30
 8008e8a:	f040 80b2 	bne.w	8008ff2 <_strtod_l+0x1a2>
 8008e8e:	786a      	ldrb	r2, [r5, #1]
 8008e90:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008e94:	2a58      	cmp	r2, #88	@ 0x58
 8008e96:	d16e      	bne.n	8008f76 <_strtod_l+0x126>
 8008e98:	9302      	str	r3, [sp, #8]
 8008e9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	4a8f      	ldr	r2, [pc, #572]	@ (80090e0 <_strtod_l+0x290>)
 8008ea4:	9805      	ldr	r0, [sp, #20]
 8008ea6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008ea8:	a919      	add	r1, sp, #100	@ 0x64
 8008eaa:	f001 fc9b 	bl	800a7e4 <__gethex>
 8008eae:	f010 060f 	ands.w	r6, r0, #15
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	d005      	beq.n	8008ec2 <_strtod_l+0x72>
 8008eb6:	2e06      	cmp	r6, #6
 8008eb8:	d128      	bne.n	8008f0c <_strtod_l+0xbc>
 8008eba:	3501      	adds	r5, #1
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	9519      	str	r5, [sp, #100]	@ 0x64
 8008ec0:	930e      	str	r3, [sp, #56]	@ 0x38
 8008ec2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f040 858e 	bne.w	80099e6 <_strtod_l+0xb96>
 8008eca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ecc:	b1cb      	cbz	r3, 8008f02 <_strtod_l+0xb2>
 8008ece:	4652      	mov	r2, sl
 8008ed0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008ed4:	ec43 2b10 	vmov	d0, r2, r3
 8008ed8:	b01f      	add	sp, #124	@ 0x7c
 8008eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ede:	2920      	cmp	r1, #32
 8008ee0:	d1ce      	bne.n	8008e80 <_strtod_l+0x30>
 8008ee2:	3201      	adds	r2, #1
 8008ee4:	e7c1      	b.n	8008e6a <_strtod_l+0x1a>
 8008ee6:	292d      	cmp	r1, #45	@ 0x2d
 8008ee8:	d1ca      	bne.n	8008e80 <_strtod_l+0x30>
 8008eea:	2101      	movs	r1, #1
 8008eec:	910e      	str	r1, [sp, #56]	@ 0x38
 8008eee:	1c51      	adds	r1, r2, #1
 8008ef0:	9119      	str	r1, [sp, #100]	@ 0x64
 8008ef2:	7852      	ldrb	r2, [r2, #1]
 8008ef4:	2a00      	cmp	r2, #0
 8008ef6:	d1c5      	bne.n	8008e84 <_strtod_l+0x34>
 8008ef8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008efa:	9419      	str	r4, [sp, #100]	@ 0x64
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f040 8570 	bne.w	80099e2 <_strtod_l+0xb92>
 8008f02:	4652      	mov	r2, sl
 8008f04:	465b      	mov	r3, fp
 8008f06:	e7e5      	b.n	8008ed4 <_strtod_l+0x84>
 8008f08:	2100      	movs	r1, #0
 8008f0a:	e7ef      	b.n	8008eec <_strtod_l+0x9c>
 8008f0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f0e:	b13a      	cbz	r2, 8008f20 <_strtod_l+0xd0>
 8008f10:	2135      	movs	r1, #53	@ 0x35
 8008f12:	a81c      	add	r0, sp, #112	@ 0x70
 8008f14:	f7ff ff3a 	bl	8008d8c <__copybits>
 8008f18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f1a:	9805      	ldr	r0, [sp, #20]
 8008f1c:	f7ff fb10 	bl	8008540 <_Bfree>
 8008f20:	3e01      	subs	r6, #1
 8008f22:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008f24:	2e04      	cmp	r6, #4
 8008f26:	d806      	bhi.n	8008f36 <_strtod_l+0xe6>
 8008f28:	e8df f006 	tbb	[pc, r6]
 8008f2c:	201d0314 	.word	0x201d0314
 8008f30:	14          	.byte	0x14
 8008f31:	00          	.byte	0x00
 8008f32:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008f36:	05e1      	lsls	r1, r4, #23
 8008f38:	bf48      	it	mi
 8008f3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008f3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f42:	0d1b      	lsrs	r3, r3, #20
 8008f44:	051b      	lsls	r3, r3, #20
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1bb      	bne.n	8008ec2 <_strtod_l+0x72>
 8008f4a:	f7fe fb1f 	bl	800758c <__errno>
 8008f4e:	2322      	movs	r3, #34	@ 0x22
 8008f50:	6003      	str	r3, [r0, #0]
 8008f52:	e7b6      	b.n	8008ec2 <_strtod_l+0x72>
 8008f54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008f58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008f5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008f60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008f64:	e7e7      	b.n	8008f36 <_strtod_l+0xe6>
 8008f66:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80090e8 <_strtod_l+0x298>
 8008f6a:	e7e4      	b.n	8008f36 <_strtod_l+0xe6>
 8008f6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008f70:	f04f 3aff 	mov.w	sl, #4294967295
 8008f74:	e7df      	b.n	8008f36 <_strtod_l+0xe6>
 8008f76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f78:	1c5a      	adds	r2, r3, #1
 8008f7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f7c:	785b      	ldrb	r3, [r3, #1]
 8008f7e:	2b30      	cmp	r3, #48	@ 0x30
 8008f80:	d0f9      	beq.n	8008f76 <_strtod_l+0x126>
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d09d      	beq.n	8008ec2 <_strtod_l+0x72>
 8008f86:	2301      	movs	r3, #1
 8008f88:	2700      	movs	r7, #0
 8008f8a:	9308      	str	r3, [sp, #32]
 8008f8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f8e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f90:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008f92:	46b9      	mov	r9, r7
 8008f94:	220a      	movs	r2, #10
 8008f96:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008f98:	7805      	ldrb	r5, [r0, #0]
 8008f9a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008f9e:	b2d9      	uxtb	r1, r3
 8008fa0:	2909      	cmp	r1, #9
 8008fa2:	d928      	bls.n	8008ff6 <_strtod_l+0x1a6>
 8008fa4:	494f      	ldr	r1, [pc, #316]	@ (80090e4 <_strtod_l+0x294>)
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f7fe fa80 	bl	80074ac <strncmp>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	d032      	beq.n	8009016 <_strtod_l+0x1c6>
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	462a      	mov	r2, r5
 8008fb4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008fb6:	464d      	mov	r5, r9
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2a65      	cmp	r2, #101	@ 0x65
 8008fbc:	d001      	beq.n	8008fc2 <_strtod_l+0x172>
 8008fbe:	2a45      	cmp	r2, #69	@ 0x45
 8008fc0:	d114      	bne.n	8008fec <_strtod_l+0x19c>
 8008fc2:	b91d      	cbnz	r5, 8008fcc <_strtod_l+0x17c>
 8008fc4:	9a08      	ldr	r2, [sp, #32]
 8008fc6:	4302      	orrs	r2, r0
 8008fc8:	d096      	beq.n	8008ef8 <_strtod_l+0xa8>
 8008fca:	2500      	movs	r5, #0
 8008fcc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008fce:	1c62      	adds	r2, r4, #1
 8008fd0:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fd2:	7862      	ldrb	r2, [r4, #1]
 8008fd4:	2a2b      	cmp	r2, #43	@ 0x2b
 8008fd6:	d07a      	beq.n	80090ce <_strtod_l+0x27e>
 8008fd8:	2a2d      	cmp	r2, #45	@ 0x2d
 8008fda:	d07e      	beq.n	80090da <_strtod_l+0x28a>
 8008fdc:	f04f 0c00 	mov.w	ip, #0
 8008fe0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008fe4:	2909      	cmp	r1, #9
 8008fe6:	f240 8085 	bls.w	80090f4 <_strtod_l+0x2a4>
 8008fea:	9419      	str	r4, [sp, #100]	@ 0x64
 8008fec:	f04f 0800 	mov.w	r8, #0
 8008ff0:	e0a5      	b.n	800913e <_strtod_l+0x2ee>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	e7c8      	b.n	8008f88 <_strtod_l+0x138>
 8008ff6:	f1b9 0f08 	cmp.w	r9, #8
 8008ffa:	bfd8      	it	le
 8008ffc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008ffe:	f100 0001 	add.w	r0, r0, #1
 8009002:	bfda      	itte	le
 8009004:	fb02 3301 	mlale	r3, r2, r1, r3
 8009008:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800900a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800900e:	f109 0901 	add.w	r9, r9, #1
 8009012:	9019      	str	r0, [sp, #100]	@ 0x64
 8009014:	e7bf      	b.n	8008f96 <_strtod_l+0x146>
 8009016:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009018:	1c5a      	adds	r2, r3, #1
 800901a:	9219      	str	r2, [sp, #100]	@ 0x64
 800901c:	785a      	ldrb	r2, [r3, #1]
 800901e:	f1b9 0f00 	cmp.w	r9, #0
 8009022:	d03b      	beq.n	800909c <_strtod_l+0x24c>
 8009024:	900a      	str	r0, [sp, #40]	@ 0x28
 8009026:	464d      	mov	r5, r9
 8009028:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800902c:	2b09      	cmp	r3, #9
 800902e:	d912      	bls.n	8009056 <_strtod_l+0x206>
 8009030:	2301      	movs	r3, #1
 8009032:	e7c2      	b.n	8008fba <_strtod_l+0x16a>
 8009034:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009036:	1c5a      	adds	r2, r3, #1
 8009038:	9219      	str	r2, [sp, #100]	@ 0x64
 800903a:	785a      	ldrb	r2, [r3, #1]
 800903c:	3001      	adds	r0, #1
 800903e:	2a30      	cmp	r2, #48	@ 0x30
 8009040:	d0f8      	beq.n	8009034 <_strtod_l+0x1e4>
 8009042:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009046:	2b08      	cmp	r3, #8
 8009048:	f200 84d2 	bhi.w	80099f0 <_strtod_l+0xba0>
 800904c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800904e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009050:	2000      	movs	r0, #0
 8009052:	930c      	str	r3, [sp, #48]	@ 0x30
 8009054:	4605      	mov	r5, r0
 8009056:	3a30      	subs	r2, #48	@ 0x30
 8009058:	f100 0301 	add.w	r3, r0, #1
 800905c:	d018      	beq.n	8009090 <_strtod_l+0x240>
 800905e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009060:	4419      	add	r1, r3
 8009062:	910a      	str	r1, [sp, #40]	@ 0x28
 8009064:	462e      	mov	r6, r5
 8009066:	f04f 0e0a 	mov.w	lr, #10
 800906a:	1c71      	adds	r1, r6, #1
 800906c:	eba1 0c05 	sub.w	ip, r1, r5
 8009070:	4563      	cmp	r3, ip
 8009072:	dc15      	bgt.n	80090a0 <_strtod_l+0x250>
 8009074:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009078:	182b      	adds	r3, r5, r0
 800907a:	2b08      	cmp	r3, #8
 800907c:	f105 0501 	add.w	r5, r5, #1
 8009080:	4405      	add	r5, r0
 8009082:	dc1a      	bgt.n	80090ba <_strtod_l+0x26a>
 8009084:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009086:	230a      	movs	r3, #10
 8009088:	fb03 2301 	mla	r3, r3, r1, r2
 800908c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800908e:	2300      	movs	r3, #0
 8009090:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009092:	1c51      	adds	r1, r2, #1
 8009094:	9119      	str	r1, [sp, #100]	@ 0x64
 8009096:	7852      	ldrb	r2, [r2, #1]
 8009098:	4618      	mov	r0, r3
 800909a:	e7c5      	b.n	8009028 <_strtod_l+0x1d8>
 800909c:	4648      	mov	r0, r9
 800909e:	e7ce      	b.n	800903e <_strtod_l+0x1ee>
 80090a0:	2e08      	cmp	r6, #8
 80090a2:	dc05      	bgt.n	80090b0 <_strtod_l+0x260>
 80090a4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80090a6:	fb0e f606 	mul.w	r6, lr, r6
 80090aa:	960b      	str	r6, [sp, #44]	@ 0x2c
 80090ac:	460e      	mov	r6, r1
 80090ae:	e7dc      	b.n	800906a <_strtod_l+0x21a>
 80090b0:	2910      	cmp	r1, #16
 80090b2:	bfd8      	it	le
 80090b4:	fb0e f707 	mulle.w	r7, lr, r7
 80090b8:	e7f8      	b.n	80090ac <_strtod_l+0x25c>
 80090ba:	2b0f      	cmp	r3, #15
 80090bc:	bfdc      	itt	le
 80090be:	230a      	movle	r3, #10
 80090c0:	fb03 2707 	mlale	r7, r3, r7, r2
 80090c4:	e7e3      	b.n	800908e <_strtod_l+0x23e>
 80090c6:	2300      	movs	r3, #0
 80090c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80090ca:	2301      	movs	r3, #1
 80090cc:	e77a      	b.n	8008fc4 <_strtod_l+0x174>
 80090ce:	f04f 0c00 	mov.w	ip, #0
 80090d2:	1ca2      	adds	r2, r4, #2
 80090d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80090d6:	78a2      	ldrb	r2, [r4, #2]
 80090d8:	e782      	b.n	8008fe0 <_strtod_l+0x190>
 80090da:	f04f 0c01 	mov.w	ip, #1
 80090de:	e7f8      	b.n	80090d2 <_strtod_l+0x282>
 80090e0:	0800bc84 	.word	0x0800bc84
 80090e4:	0800baa1 	.word	0x0800baa1
 80090e8:	7ff00000 	.word	0x7ff00000
 80090ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090ee:	1c51      	adds	r1, r2, #1
 80090f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80090f2:	7852      	ldrb	r2, [r2, #1]
 80090f4:	2a30      	cmp	r2, #48	@ 0x30
 80090f6:	d0f9      	beq.n	80090ec <_strtod_l+0x29c>
 80090f8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80090fc:	2908      	cmp	r1, #8
 80090fe:	f63f af75 	bhi.w	8008fec <_strtod_l+0x19c>
 8009102:	3a30      	subs	r2, #48	@ 0x30
 8009104:	9209      	str	r2, [sp, #36]	@ 0x24
 8009106:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009108:	920f      	str	r2, [sp, #60]	@ 0x3c
 800910a:	f04f 080a 	mov.w	r8, #10
 800910e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009110:	1c56      	adds	r6, r2, #1
 8009112:	9619      	str	r6, [sp, #100]	@ 0x64
 8009114:	7852      	ldrb	r2, [r2, #1]
 8009116:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800911a:	f1be 0f09 	cmp.w	lr, #9
 800911e:	d939      	bls.n	8009194 <_strtod_l+0x344>
 8009120:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009122:	1a76      	subs	r6, r6, r1
 8009124:	2e08      	cmp	r6, #8
 8009126:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800912a:	dc03      	bgt.n	8009134 <_strtod_l+0x2e4>
 800912c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800912e:	4588      	cmp	r8, r1
 8009130:	bfa8      	it	ge
 8009132:	4688      	movge	r8, r1
 8009134:	f1bc 0f00 	cmp.w	ip, #0
 8009138:	d001      	beq.n	800913e <_strtod_l+0x2ee>
 800913a:	f1c8 0800 	rsb	r8, r8, #0
 800913e:	2d00      	cmp	r5, #0
 8009140:	d14e      	bne.n	80091e0 <_strtod_l+0x390>
 8009142:	9908      	ldr	r1, [sp, #32]
 8009144:	4308      	orrs	r0, r1
 8009146:	f47f aebc 	bne.w	8008ec2 <_strtod_l+0x72>
 800914a:	2b00      	cmp	r3, #0
 800914c:	f47f aed4 	bne.w	8008ef8 <_strtod_l+0xa8>
 8009150:	2a69      	cmp	r2, #105	@ 0x69
 8009152:	d028      	beq.n	80091a6 <_strtod_l+0x356>
 8009154:	dc25      	bgt.n	80091a2 <_strtod_l+0x352>
 8009156:	2a49      	cmp	r2, #73	@ 0x49
 8009158:	d025      	beq.n	80091a6 <_strtod_l+0x356>
 800915a:	2a4e      	cmp	r2, #78	@ 0x4e
 800915c:	f47f aecc 	bne.w	8008ef8 <_strtod_l+0xa8>
 8009160:	499a      	ldr	r1, [pc, #616]	@ (80093cc <_strtod_l+0x57c>)
 8009162:	a819      	add	r0, sp, #100	@ 0x64
 8009164:	f001 fd60 	bl	800ac28 <__match>
 8009168:	2800      	cmp	r0, #0
 800916a:	f43f aec5 	beq.w	8008ef8 <_strtod_l+0xa8>
 800916e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	2b28      	cmp	r3, #40	@ 0x28
 8009174:	d12e      	bne.n	80091d4 <_strtod_l+0x384>
 8009176:	4996      	ldr	r1, [pc, #600]	@ (80093d0 <_strtod_l+0x580>)
 8009178:	aa1c      	add	r2, sp, #112	@ 0x70
 800917a:	a819      	add	r0, sp, #100	@ 0x64
 800917c:	f001 fd68 	bl	800ac50 <__hexnan>
 8009180:	2805      	cmp	r0, #5
 8009182:	d127      	bne.n	80091d4 <_strtod_l+0x384>
 8009184:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009186:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800918a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800918e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009192:	e696      	b.n	8008ec2 <_strtod_l+0x72>
 8009194:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009196:	fb08 2101 	mla	r1, r8, r1, r2
 800919a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800919e:	9209      	str	r2, [sp, #36]	@ 0x24
 80091a0:	e7b5      	b.n	800910e <_strtod_l+0x2be>
 80091a2:	2a6e      	cmp	r2, #110	@ 0x6e
 80091a4:	e7da      	b.n	800915c <_strtod_l+0x30c>
 80091a6:	498b      	ldr	r1, [pc, #556]	@ (80093d4 <_strtod_l+0x584>)
 80091a8:	a819      	add	r0, sp, #100	@ 0x64
 80091aa:	f001 fd3d 	bl	800ac28 <__match>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	f43f aea2 	beq.w	8008ef8 <_strtod_l+0xa8>
 80091b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091b6:	4988      	ldr	r1, [pc, #544]	@ (80093d8 <_strtod_l+0x588>)
 80091b8:	3b01      	subs	r3, #1
 80091ba:	a819      	add	r0, sp, #100	@ 0x64
 80091bc:	9319      	str	r3, [sp, #100]	@ 0x64
 80091be:	f001 fd33 	bl	800ac28 <__match>
 80091c2:	b910      	cbnz	r0, 80091ca <_strtod_l+0x37a>
 80091c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091c6:	3301      	adds	r3, #1
 80091c8:	9319      	str	r3, [sp, #100]	@ 0x64
 80091ca:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80093e8 <_strtod_l+0x598>
 80091ce:	f04f 0a00 	mov.w	sl, #0
 80091d2:	e676      	b.n	8008ec2 <_strtod_l+0x72>
 80091d4:	4881      	ldr	r0, [pc, #516]	@ (80093dc <_strtod_l+0x58c>)
 80091d6:	f001 fa63 	bl	800a6a0 <nan>
 80091da:	ec5b ab10 	vmov	sl, fp, d0
 80091de:	e670      	b.n	8008ec2 <_strtod_l+0x72>
 80091e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091e2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80091e4:	eba8 0303 	sub.w	r3, r8, r3
 80091e8:	f1b9 0f00 	cmp.w	r9, #0
 80091ec:	bf08      	it	eq
 80091ee:	46a9      	moveq	r9, r5
 80091f0:	2d10      	cmp	r5, #16
 80091f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091f4:	462c      	mov	r4, r5
 80091f6:	bfa8      	it	ge
 80091f8:	2410      	movge	r4, #16
 80091fa:	f7f7 f9a3 	bl	8000544 <__aeabi_ui2d>
 80091fe:	2d09      	cmp	r5, #9
 8009200:	4682      	mov	sl, r0
 8009202:	468b      	mov	fp, r1
 8009204:	dc13      	bgt.n	800922e <_strtod_l+0x3de>
 8009206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009208:	2b00      	cmp	r3, #0
 800920a:	f43f ae5a 	beq.w	8008ec2 <_strtod_l+0x72>
 800920e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009210:	dd78      	ble.n	8009304 <_strtod_l+0x4b4>
 8009212:	2b16      	cmp	r3, #22
 8009214:	dc5f      	bgt.n	80092d6 <_strtod_l+0x486>
 8009216:	4972      	ldr	r1, [pc, #456]	@ (80093e0 <_strtod_l+0x590>)
 8009218:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800921c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009220:	4652      	mov	r2, sl
 8009222:	465b      	mov	r3, fp
 8009224:	f7f7 fa08 	bl	8000638 <__aeabi_dmul>
 8009228:	4682      	mov	sl, r0
 800922a:	468b      	mov	fp, r1
 800922c:	e649      	b.n	8008ec2 <_strtod_l+0x72>
 800922e:	4b6c      	ldr	r3, [pc, #432]	@ (80093e0 <_strtod_l+0x590>)
 8009230:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009234:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009238:	f7f7 f9fe 	bl	8000638 <__aeabi_dmul>
 800923c:	4682      	mov	sl, r0
 800923e:	4638      	mov	r0, r7
 8009240:	468b      	mov	fp, r1
 8009242:	f7f7 f97f 	bl	8000544 <__aeabi_ui2d>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4650      	mov	r0, sl
 800924c:	4659      	mov	r1, fp
 800924e:	f7f7 f83d 	bl	80002cc <__adddf3>
 8009252:	2d0f      	cmp	r5, #15
 8009254:	4682      	mov	sl, r0
 8009256:	468b      	mov	fp, r1
 8009258:	ddd5      	ble.n	8009206 <_strtod_l+0x3b6>
 800925a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800925c:	1b2c      	subs	r4, r5, r4
 800925e:	441c      	add	r4, r3
 8009260:	2c00      	cmp	r4, #0
 8009262:	f340 8093 	ble.w	800938c <_strtod_l+0x53c>
 8009266:	f014 030f 	ands.w	r3, r4, #15
 800926a:	d00a      	beq.n	8009282 <_strtod_l+0x432>
 800926c:	495c      	ldr	r1, [pc, #368]	@ (80093e0 <_strtod_l+0x590>)
 800926e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009272:	4652      	mov	r2, sl
 8009274:	465b      	mov	r3, fp
 8009276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800927a:	f7f7 f9dd 	bl	8000638 <__aeabi_dmul>
 800927e:	4682      	mov	sl, r0
 8009280:	468b      	mov	fp, r1
 8009282:	f034 040f 	bics.w	r4, r4, #15
 8009286:	d073      	beq.n	8009370 <_strtod_l+0x520>
 8009288:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800928c:	dd49      	ble.n	8009322 <_strtod_l+0x4d2>
 800928e:	2400      	movs	r4, #0
 8009290:	46a0      	mov	r8, r4
 8009292:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009294:	46a1      	mov	r9, r4
 8009296:	9a05      	ldr	r2, [sp, #20]
 8009298:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80093e8 <_strtod_l+0x598>
 800929c:	2322      	movs	r3, #34	@ 0x22
 800929e:	6013      	str	r3, [r2, #0]
 80092a0:	f04f 0a00 	mov.w	sl, #0
 80092a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f43f ae0b 	beq.w	8008ec2 <_strtod_l+0x72>
 80092ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092ae:	9805      	ldr	r0, [sp, #20]
 80092b0:	f7ff f946 	bl	8008540 <_Bfree>
 80092b4:	9805      	ldr	r0, [sp, #20]
 80092b6:	4649      	mov	r1, r9
 80092b8:	f7ff f942 	bl	8008540 <_Bfree>
 80092bc:	9805      	ldr	r0, [sp, #20]
 80092be:	4641      	mov	r1, r8
 80092c0:	f7ff f93e 	bl	8008540 <_Bfree>
 80092c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80092c6:	9805      	ldr	r0, [sp, #20]
 80092c8:	f7ff f93a 	bl	8008540 <_Bfree>
 80092cc:	9805      	ldr	r0, [sp, #20]
 80092ce:	4621      	mov	r1, r4
 80092d0:	f7ff f936 	bl	8008540 <_Bfree>
 80092d4:	e5f5      	b.n	8008ec2 <_strtod_l+0x72>
 80092d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80092dc:	4293      	cmp	r3, r2
 80092de:	dbbc      	blt.n	800925a <_strtod_l+0x40a>
 80092e0:	4c3f      	ldr	r4, [pc, #252]	@ (80093e0 <_strtod_l+0x590>)
 80092e2:	f1c5 050f 	rsb	r5, r5, #15
 80092e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80092ea:	4652      	mov	r2, sl
 80092ec:	465b      	mov	r3, fp
 80092ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092f2:	f7f7 f9a1 	bl	8000638 <__aeabi_dmul>
 80092f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092f8:	1b5d      	subs	r5, r3, r5
 80092fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80092fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009302:	e78f      	b.n	8009224 <_strtod_l+0x3d4>
 8009304:	3316      	adds	r3, #22
 8009306:	dba8      	blt.n	800925a <_strtod_l+0x40a>
 8009308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800930a:	eba3 0808 	sub.w	r8, r3, r8
 800930e:	4b34      	ldr	r3, [pc, #208]	@ (80093e0 <_strtod_l+0x590>)
 8009310:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009314:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009318:	4650      	mov	r0, sl
 800931a:	4659      	mov	r1, fp
 800931c:	f7f7 fab6 	bl	800088c <__aeabi_ddiv>
 8009320:	e782      	b.n	8009228 <_strtod_l+0x3d8>
 8009322:	2300      	movs	r3, #0
 8009324:	4f2f      	ldr	r7, [pc, #188]	@ (80093e4 <_strtod_l+0x594>)
 8009326:	1124      	asrs	r4, r4, #4
 8009328:	4650      	mov	r0, sl
 800932a:	4659      	mov	r1, fp
 800932c:	461e      	mov	r6, r3
 800932e:	2c01      	cmp	r4, #1
 8009330:	dc21      	bgt.n	8009376 <_strtod_l+0x526>
 8009332:	b10b      	cbz	r3, 8009338 <_strtod_l+0x4e8>
 8009334:	4682      	mov	sl, r0
 8009336:	468b      	mov	fp, r1
 8009338:	492a      	ldr	r1, [pc, #168]	@ (80093e4 <_strtod_l+0x594>)
 800933a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800933e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009342:	4652      	mov	r2, sl
 8009344:	465b      	mov	r3, fp
 8009346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800934a:	f7f7 f975 	bl	8000638 <__aeabi_dmul>
 800934e:	4b26      	ldr	r3, [pc, #152]	@ (80093e8 <_strtod_l+0x598>)
 8009350:	460a      	mov	r2, r1
 8009352:	400b      	ands	r3, r1
 8009354:	4925      	ldr	r1, [pc, #148]	@ (80093ec <_strtod_l+0x59c>)
 8009356:	428b      	cmp	r3, r1
 8009358:	4682      	mov	sl, r0
 800935a:	d898      	bhi.n	800928e <_strtod_l+0x43e>
 800935c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009360:	428b      	cmp	r3, r1
 8009362:	bf86      	itte	hi
 8009364:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80093f0 <_strtod_l+0x5a0>
 8009368:	f04f 3aff 	movhi.w	sl, #4294967295
 800936c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009370:	2300      	movs	r3, #0
 8009372:	9308      	str	r3, [sp, #32]
 8009374:	e076      	b.n	8009464 <_strtod_l+0x614>
 8009376:	07e2      	lsls	r2, r4, #31
 8009378:	d504      	bpl.n	8009384 <_strtod_l+0x534>
 800937a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800937e:	f7f7 f95b 	bl	8000638 <__aeabi_dmul>
 8009382:	2301      	movs	r3, #1
 8009384:	3601      	adds	r6, #1
 8009386:	1064      	asrs	r4, r4, #1
 8009388:	3708      	adds	r7, #8
 800938a:	e7d0      	b.n	800932e <_strtod_l+0x4de>
 800938c:	d0f0      	beq.n	8009370 <_strtod_l+0x520>
 800938e:	4264      	negs	r4, r4
 8009390:	f014 020f 	ands.w	r2, r4, #15
 8009394:	d00a      	beq.n	80093ac <_strtod_l+0x55c>
 8009396:	4b12      	ldr	r3, [pc, #72]	@ (80093e0 <_strtod_l+0x590>)
 8009398:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800939c:	4650      	mov	r0, sl
 800939e:	4659      	mov	r1, fp
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	f7f7 fa72 	bl	800088c <__aeabi_ddiv>
 80093a8:	4682      	mov	sl, r0
 80093aa:	468b      	mov	fp, r1
 80093ac:	1124      	asrs	r4, r4, #4
 80093ae:	d0df      	beq.n	8009370 <_strtod_l+0x520>
 80093b0:	2c1f      	cmp	r4, #31
 80093b2:	dd1f      	ble.n	80093f4 <_strtod_l+0x5a4>
 80093b4:	2400      	movs	r4, #0
 80093b6:	46a0      	mov	r8, r4
 80093b8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80093ba:	46a1      	mov	r9, r4
 80093bc:	9a05      	ldr	r2, [sp, #20]
 80093be:	2322      	movs	r3, #34	@ 0x22
 80093c0:	f04f 0a00 	mov.w	sl, #0
 80093c4:	f04f 0b00 	mov.w	fp, #0
 80093c8:	6013      	str	r3, [r2, #0]
 80093ca:	e76b      	b.n	80092a4 <_strtod_l+0x454>
 80093cc:	0800b991 	.word	0x0800b991
 80093d0:	0800bc70 	.word	0x0800bc70
 80093d4:	0800b989 	.word	0x0800b989
 80093d8:	0800b9be 	.word	0x0800b9be
 80093dc:	0800bb12 	.word	0x0800bb12
 80093e0:	0800bba8 	.word	0x0800bba8
 80093e4:	0800bb80 	.word	0x0800bb80
 80093e8:	7ff00000 	.word	0x7ff00000
 80093ec:	7ca00000 	.word	0x7ca00000
 80093f0:	7fefffff 	.word	0x7fefffff
 80093f4:	f014 0310 	ands.w	r3, r4, #16
 80093f8:	bf18      	it	ne
 80093fa:	236a      	movne	r3, #106	@ 0x6a
 80093fc:	4ea9      	ldr	r6, [pc, #676]	@ (80096a4 <_strtod_l+0x854>)
 80093fe:	9308      	str	r3, [sp, #32]
 8009400:	4650      	mov	r0, sl
 8009402:	4659      	mov	r1, fp
 8009404:	2300      	movs	r3, #0
 8009406:	07e7      	lsls	r7, r4, #31
 8009408:	d504      	bpl.n	8009414 <_strtod_l+0x5c4>
 800940a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800940e:	f7f7 f913 	bl	8000638 <__aeabi_dmul>
 8009412:	2301      	movs	r3, #1
 8009414:	1064      	asrs	r4, r4, #1
 8009416:	f106 0608 	add.w	r6, r6, #8
 800941a:	d1f4      	bne.n	8009406 <_strtod_l+0x5b6>
 800941c:	b10b      	cbz	r3, 8009422 <_strtod_l+0x5d2>
 800941e:	4682      	mov	sl, r0
 8009420:	468b      	mov	fp, r1
 8009422:	9b08      	ldr	r3, [sp, #32]
 8009424:	b1b3      	cbz	r3, 8009454 <_strtod_l+0x604>
 8009426:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800942a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800942e:	2b00      	cmp	r3, #0
 8009430:	4659      	mov	r1, fp
 8009432:	dd0f      	ble.n	8009454 <_strtod_l+0x604>
 8009434:	2b1f      	cmp	r3, #31
 8009436:	dd56      	ble.n	80094e6 <_strtod_l+0x696>
 8009438:	2b34      	cmp	r3, #52	@ 0x34
 800943a:	bfde      	ittt	le
 800943c:	f04f 33ff 	movle.w	r3, #4294967295
 8009440:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009444:	4093      	lslle	r3, r2
 8009446:	f04f 0a00 	mov.w	sl, #0
 800944a:	bfcc      	ite	gt
 800944c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009450:	ea03 0b01 	andle.w	fp, r3, r1
 8009454:	2200      	movs	r2, #0
 8009456:	2300      	movs	r3, #0
 8009458:	4650      	mov	r0, sl
 800945a:	4659      	mov	r1, fp
 800945c:	f7f7 fb54 	bl	8000b08 <__aeabi_dcmpeq>
 8009460:	2800      	cmp	r0, #0
 8009462:	d1a7      	bne.n	80093b4 <_strtod_l+0x564>
 8009464:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800946a:	9805      	ldr	r0, [sp, #20]
 800946c:	462b      	mov	r3, r5
 800946e:	464a      	mov	r2, r9
 8009470:	f7ff f8ce 	bl	8008610 <__s2b>
 8009474:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009476:	2800      	cmp	r0, #0
 8009478:	f43f af09 	beq.w	800928e <_strtod_l+0x43e>
 800947c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800947e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009480:	2a00      	cmp	r2, #0
 8009482:	eba3 0308 	sub.w	r3, r3, r8
 8009486:	bfa8      	it	ge
 8009488:	2300      	movge	r3, #0
 800948a:	9312      	str	r3, [sp, #72]	@ 0x48
 800948c:	2400      	movs	r4, #0
 800948e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009492:	9316      	str	r3, [sp, #88]	@ 0x58
 8009494:	46a0      	mov	r8, r4
 8009496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009498:	9805      	ldr	r0, [sp, #20]
 800949a:	6859      	ldr	r1, [r3, #4]
 800949c:	f7ff f810 	bl	80084c0 <_Balloc>
 80094a0:	4681      	mov	r9, r0
 80094a2:	2800      	cmp	r0, #0
 80094a4:	f43f aef7 	beq.w	8009296 <_strtod_l+0x446>
 80094a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094aa:	691a      	ldr	r2, [r3, #16]
 80094ac:	3202      	adds	r2, #2
 80094ae:	f103 010c 	add.w	r1, r3, #12
 80094b2:	0092      	lsls	r2, r2, #2
 80094b4:	300c      	adds	r0, #12
 80094b6:	f7fe f896 	bl	80075e6 <memcpy>
 80094ba:	ec4b ab10 	vmov	d0, sl, fp
 80094be:	9805      	ldr	r0, [sp, #20]
 80094c0:	aa1c      	add	r2, sp, #112	@ 0x70
 80094c2:	a91b      	add	r1, sp, #108	@ 0x6c
 80094c4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80094c8:	f7ff fbd6 	bl	8008c78 <__d2b>
 80094cc:	901a      	str	r0, [sp, #104]	@ 0x68
 80094ce:	2800      	cmp	r0, #0
 80094d0:	f43f aee1 	beq.w	8009296 <_strtod_l+0x446>
 80094d4:	9805      	ldr	r0, [sp, #20]
 80094d6:	2101      	movs	r1, #1
 80094d8:	f7ff f930 	bl	800873c <__i2b>
 80094dc:	4680      	mov	r8, r0
 80094de:	b948      	cbnz	r0, 80094f4 <_strtod_l+0x6a4>
 80094e0:	f04f 0800 	mov.w	r8, #0
 80094e4:	e6d7      	b.n	8009296 <_strtod_l+0x446>
 80094e6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ea:	fa02 f303 	lsl.w	r3, r2, r3
 80094ee:	ea03 0a0a 	and.w	sl, r3, sl
 80094f2:	e7af      	b.n	8009454 <_strtod_l+0x604>
 80094f4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80094f6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80094f8:	2d00      	cmp	r5, #0
 80094fa:	bfab      	itete	ge
 80094fc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80094fe:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009500:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009502:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009504:	bfac      	ite	ge
 8009506:	18ef      	addge	r7, r5, r3
 8009508:	1b5e      	sublt	r6, r3, r5
 800950a:	9b08      	ldr	r3, [sp, #32]
 800950c:	1aed      	subs	r5, r5, r3
 800950e:	4415      	add	r5, r2
 8009510:	4b65      	ldr	r3, [pc, #404]	@ (80096a8 <_strtod_l+0x858>)
 8009512:	3d01      	subs	r5, #1
 8009514:	429d      	cmp	r5, r3
 8009516:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800951a:	da50      	bge.n	80095be <_strtod_l+0x76e>
 800951c:	1b5b      	subs	r3, r3, r5
 800951e:	2b1f      	cmp	r3, #31
 8009520:	eba2 0203 	sub.w	r2, r2, r3
 8009524:	f04f 0101 	mov.w	r1, #1
 8009528:	dc3d      	bgt.n	80095a6 <_strtod_l+0x756>
 800952a:	fa01 f303 	lsl.w	r3, r1, r3
 800952e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009530:	2300      	movs	r3, #0
 8009532:	9310      	str	r3, [sp, #64]	@ 0x40
 8009534:	18bd      	adds	r5, r7, r2
 8009536:	9b08      	ldr	r3, [sp, #32]
 8009538:	42af      	cmp	r7, r5
 800953a:	4416      	add	r6, r2
 800953c:	441e      	add	r6, r3
 800953e:	463b      	mov	r3, r7
 8009540:	bfa8      	it	ge
 8009542:	462b      	movge	r3, r5
 8009544:	42b3      	cmp	r3, r6
 8009546:	bfa8      	it	ge
 8009548:	4633      	movge	r3, r6
 800954a:	2b00      	cmp	r3, #0
 800954c:	bfc2      	ittt	gt
 800954e:	1aed      	subgt	r5, r5, r3
 8009550:	1af6      	subgt	r6, r6, r3
 8009552:	1aff      	subgt	r7, r7, r3
 8009554:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009556:	2b00      	cmp	r3, #0
 8009558:	dd16      	ble.n	8009588 <_strtod_l+0x738>
 800955a:	4641      	mov	r1, r8
 800955c:	9805      	ldr	r0, [sp, #20]
 800955e:	461a      	mov	r2, r3
 8009560:	f7ff f9a4 	bl	80088ac <__pow5mult>
 8009564:	4680      	mov	r8, r0
 8009566:	2800      	cmp	r0, #0
 8009568:	d0ba      	beq.n	80094e0 <_strtod_l+0x690>
 800956a:	4601      	mov	r1, r0
 800956c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800956e:	9805      	ldr	r0, [sp, #20]
 8009570:	f7ff f8fa 	bl	8008768 <__multiply>
 8009574:	900a      	str	r0, [sp, #40]	@ 0x28
 8009576:	2800      	cmp	r0, #0
 8009578:	f43f ae8d 	beq.w	8009296 <_strtod_l+0x446>
 800957c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800957e:	9805      	ldr	r0, [sp, #20]
 8009580:	f7fe ffde 	bl	8008540 <_Bfree>
 8009584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009586:	931a      	str	r3, [sp, #104]	@ 0x68
 8009588:	2d00      	cmp	r5, #0
 800958a:	dc1d      	bgt.n	80095c8 <_strtod_l+0x778>
 800958c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800958e:	2b00      	cmp	r3, #0
 8009590:	dd23      	ble.n	80095da <_strtod_l+0x78a>
 8009592:	4649      	mov	r1, r9
 8009594:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009596:	9805      	ldr	r0, [sp, #20]
 8009598:	f7ff f988 	bl	80088ac <__pow5mult>
 800959c:	4681      	mov	r9, r0
 800959e:	b9e0      	cbnz	r0, 80095da <_strtod_l+0x78a>
 80095a0:	f04f 0900 	mov.w	r9, #0
 80095a4:	e677      	b.n	8009296 <_strtod_l+0x446>
 80095a6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80095aa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80095ae:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80095b2:	35e2      	adds	r5, #226	@ 0xe2
 80095b4:	fa01 f305 	lsl.w	r3, r1, r5
 80095b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80095ba:	9113      	str	r1, [sp, #76]	@ 0x4c
 80095bc:	e7ba      	b.n	8009534 <_strtod_l+0x6e4>
 80095be:	2300      	movs	r3, #0
 80095c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80095c2:	2301      	movs	r3, #1
 80095c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095c6:	e7b5      	b.n	8009534 <_strtod_l+0x6e4>
 80095c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095ca:	9805      	ldr	r0, [sp, #20]
 80095cc:	462a      	mov	r2, r5
 80095ce:	f7ff f9c7 	bl	8008960 <__lshift>
 80095d2:	901a      	str	r0, [sp, #104]	@ 0x68
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d1d9      	bne.n	800958c <_strtod_l+0x73c>
 80095d8:	e65d      	b.n	8009296 <_strtod_l+0x446>
 80095da:	2e00      	cmp	r6, #0
 80095dc:	dd07      	ble.n	80095ee <_strtod_l+0x79e>
 80095de:	4649      	mov	r1, r9
 80095e0:	9805      	ldr	r0, [sp, #20]
 80095e2:	4632      	mov	r2, r6
 80095e4:	f7ff f9bc 	bl	8008960 <__lshift>
 80095e8:	4681      	mov	r9, r0
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d0d8      	beq.n	80095a0 <_strtod_l+0x750>
 80095ee:	2f00      	cmp	r7, #0
 80095f0:	dd08      	ble.n	8009604 <_strtod_l+0x7b4>
 80095f2:	4641      	mov	r1, r8
 80095f4:	9805      	ldr	r0, [sp, #20]
 80095f6:	463a      	mov	r2, r7
 80095f8:	f7ff f9b2 	bl	8008960 <__lshift>
 80095fc:	4680      	mov	r8, r0
 80095fe:	2800      	cmp	r0, #0
 8009600:	f43f ae49 	beq.w	8009296 <_strtod_l+0x446>
 8009604:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009606:	9805      	ldr	r0, [sp, #20]
 8009608:	464a      	mov	r2, r9
 800960a:	f7ff fa31 	bl	8008a70 <__mdiff>
 800960e:	4604      	mov	r4, r0
 8009610:	2800      	cmp	r0, #0
 8009612:	f43f ae40 	beq.w	8009296 <_strtod_l+0x446>
 8009616:	68c3      	ldr	r3, [r0, #12]
 8009618:	930f      	str	r3, [sp, #60]	@ 0x3c
 800961a:	2300      	movs	r3, #0
 800961c:	60c3      	str	r3, [r0, #12]
 800961e:	4641      	mov	r1, r8
 8009620:	f7ff fa0a 	bl	8008a38 <__mcmp>
 8009624:	2800      	cmp	r0, #0
 8009626:	da45      	bge.n	80096b4 <_strtod_l+0x864>
 8009628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800962a:	ea53 030a 	orrs.w	r3, r3, sl
 800962e:	d16b      	bne.n	8009708 <_strtod_l+0x8b8>
 8009630:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009634:	2b00      	cmp	r3, #0
 8009636:	d167      	bne.n	8009708 <_strtod_l+0x8b8>
 8009638:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800963c:	0d1b      	lsrs	r3, r3, #20
 800963e:	051b      	lsls	r3, r3, #20
 8009640:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009644:	d960      	bls.n	8009708 <_strtod_l+0x8b8>
 8009646:	6963      	ldr	r3, [r4, #20]
 8009648:	b913      	cbnz	r3, 8009650 <_strtod_l+0x800>
 800964a:	6923      	ldr	r3, [r4, #16]
 800964c:	2b01      	cmp	r3, #1
 800964e:	dd5b      	ble.n	8009708 <_strtod_l+0x8b8>
 8009650:	4621      	mov	r1, r4
 8009652:	2201      	movs	r2, #1
 8009654:	9805      	ldr	r0, [sp, #20]
 8009656:	f7ff f983 	bl	8008960 <__lshift>
 800965a:	4641      	mov	r1, r8
 800965c:	4604      	mov	r4, r0
 800965e:	f7ff f9eb 	bl	8008a38 <__mcmp>
 8009662:	2800      	cmp	r0, #0
 8009664:	dd50      	ble.n	8009708 <_strtod_l+0x8b8>
 8009666:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800966a:	9a08      	ldr	r2, [sp, #32]
 800966c:	0d1b      	lsrs	r3, r3, #20
 800966e:	051b      	lsls	r3, r3, #20
 8009670:	2a00      	cmp	r2, #0
 8009672:	d06a      	beq.n	800974a <_strtod_l+0x8fa>
 8009674:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009678:	d867      	bhi.n	800974a <_strtod_l+0x8fa>
 800967a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800967e:	f67f ae9d 	bls.w	80093bc <_strtod_l+0x56c>
 8009682:	4b0a      	ldr	r3, [pc, #40]	@ (80096ac <_strtod_l+0x85c>)
 8009684:	4650      	mov	r0, sl
 8009686:	4659      	mov	r1, fp
 8009688:	2200      	movs	r2, #0
 800968a:	f7f6 ffd5 	bl	8000638 <__aeabi_dmul>
 800968e:	4b08      	ldr	r3, [pc, #32]	@ (80096b0 <_strtod_l+0x860>)
 8009690:	400b      	ands	r3, r1
 8009692:	4682      	mov	sl, r0
 8009694:	468b      	mov	fp, r1
 8009696:	2b00      	cmp	r3, #0
 8009698:	f47f ae08 	bne.w	80092ac <_strtod_l+0x45c>
 800969c:	9a05      	ldr	r2, [sp, #20]
 800969e:	2322      	movs	r3, #34	@ 0x22
 80096a0:	6013      	str	r3, [r2, #0]
 80096a2:	e603      	b.n	80092ac <_strtod_l+0x45c>
 80096a4:	0800bc98 	.word	0x0800bc98
 80096a8:	fffffc02 	.word	0xfffffc02
 80096ac:	39500000 	.word	0x39500000
 80096b0:	7ff00000 	.word	0x7ff00000
 80096b4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80096b8:	d165      	bne.n	8009786 <_strtod_l+0x936>
 80096ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80096bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096c0:	b35a      	cbz	r2, 800971a <_strtod_l+0x8ca>
 80096c2:	4a9f      	ldr	r2, [pc, #636]	@ (8009940 <_strtod_l+0xaf0>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d12b      	bne.n	8009720 <_strtod_l+0x8d0>
 80096c8:	9b08      	ldr	r3, [sp, #32]
 80096ca:	4651      	mov	r1, sl
 80096cc:	b303      	cbz	r3, 8009710 <_strtod_l+0x8c0>
 80096ce:	4b9d      	ldr	r3, [pc, #628]	@ (8009944 <_strtod_l+0xaf4>)
 80096d0:	465a      	mov	r2, fp
 80096d2:	4013      	ands	r3, r2
 80096d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80096d8:	f04f 32ff 	mov.w	r2, #4294967295
 80096dc:	d81b      	bhi.n	8009716 <_strtod_l+0x8c6>
 80096de:	0d1b      	lsrs	r3, r3, #20
 80096e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80096e4:	fa02 f303 	lsl.w	r3, r2, r3
 80096e8:	4299      	cmp	r1, r3
 80096ea:	d119      	bne.n	8009720 <_strtod_l+0x8d0>
 80096ec:	4b96      	ldr	r3, [pc, #600]	@ (8009948 <_strtod_l+0xaf8>)
 80096ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d102      	bne.n	80096fa <_strtod_l+0x8aa>
 80096f4:	3101      	adds	r1, #1
 80096f6:	f43f adce 	beq.w	8009296 <_strtod_l+0x446>
 80096fa:	4b92      	ldr	r3, [pc, #584]	@ (8009944 <_strtod_l+0xaf4>)
 80096fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096fe:	401a      	ands	r2, r3
 8009700:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009704:	f04f 0a00 	mov.w	sl, #0
 8009708:	9b08      	ldr	r3, [sp, #32]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1b9      	bne.n	8009682 <_strtod_l+0x832>
 800970e:	e5cd      	b.n	80092ac <_strtod_l+0x45c>
 8009710:	f04f 33ff 	mov.w	r3, #4294967295
 8009714:	e7e8      	b.n	80096e8 <_strtod_l+0x898>
 8009716:	4613      	mov	r3, r2
 8009718:	e7e6      	b.n	80096e8 <_strtod_l+0x898>
 800971a:	ea53 030a 	orrs.w	r3, r3, sl
 800971e:	d0a2      	beq.n	8009666 <_strtod_l+0x816>
 8009720:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009722:	b1db      	cbz	r3, 800975c <_strtod_l+0x90c>
 8009724:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009726:	4213      	tst	r3, r2
 8009728:	d0ee      	beq.n	8009708 <_strtod_l+0x8b8>
 800972a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800972c:	9a08      	ldr	r2, [sp, #32]
 800972e:	4650      	mov	r0, sl
 8009730:	4659      	mov	r1, fp
 8009732:	b1bb      	cbz	r3, 8009764 <_strtod_l+0x914>
 8009734:	f7ff fb6e 	bl	8008e14 <sulp>
 8009738:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800973c:	ec53 2b10 	vmov	r2, r3, d0
 8009740:	f7f6 fdc4 	bl	80002cc <__adddf3>
 8009744:	4682      	mov	sl, r0
 8009746:	468b      	mov	fp, r1
 8009748:	e7de      	b.n	8009708 <_strtod_l+0x8b8>
 800974a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800974e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009752:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009756:	f04f 3aff 	mov.w	sl, #4294967295
 800975a:	e7d5      	b.n	8009708 <_strtod_l+0x8b8>
 800975c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800975e:	ea13 0f0a 	tst.w	r3, sl
 8009762:	e7e1      	b.n	8009728 <_strtod_l+0x8d8>
 8009764:	f7ff fb56 	bl	8008e14 <sulp>
 8009768:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800976c:	ec53 2b10 	vmov	r2, r3, d0
 8009770:	f7f6 fdaa 	bl	80002c8 <__aeabi_dsub>
 8009774:	2200      	movs	r2, #0
 8009776:	2300      	movs	r3, #0
 8009778:	4682      	mov	sl, r0
 800977a:	468b      	mov	fp, r1
 800977c:	f7f7 f9c4 	bl	8000b08 <__aeabi_dcmpeq>
 8009780:	2800      	cmp	r0, #0
 8009782:	d0c1      	beq.n	8009708 <_strtod_l+0x8b8>
 8009784:	e61a      	b.n	80093bc <_strtod_l+0x56c>
 8009786:	4641      	mov	r1, r8
 8009788:	4620      	mov	r0, r4
 800978a:	f7ff facd 	bl	8008d28 <__ratio>
 800978e:	ec57 6b10 	vmov	r6, r7, d0
 8009792:	2200      	movs	r2, #0
 8009794:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009798:	4630      	mov	r0, r6
 800979a:	4639      	mov	r1, r7
 800979c:	f7f7 f9c8 	bl	8000b30 <__aeabi_dcmple>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d06f      	beq.n	8009884 <_strtod_l+0xa34>
 80097a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d17a      	bne.n	80098a0 <_strtod_l+0xa50>
 80097aa:	f1ba 0f00 	cmp.w	sl, #0
 80097ae:	d158      	bne.n	8009862 <_strtod_l+0xa12>
 80097b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d15a      	bne.n	8009870 <_strtod_l+0xa20>
 80097ba:	4b64      	ldr	r3, [pc, #400]	@ (800994c <_strtod_l+0xafc>)
 80097bc:	2200      	movs	r2, #0
 80097be:	4630      	mov	r0, r6
 80097c0:	4639      	mov	r1, r7
 80097c2:	f7f7 f9ab 	bl	8000b1c <__aeabi_dcmplt>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d159      	bne.n	800987e <_strtod_l+0xa2e>
 80097ca:	4630      	mov	r0, r6
 80097cc:	4639      	mov	r1, r7
 80097ce:	4b60      	ldr	r3, [pc, #384]	@ (8009950 <_strtod_l+0xb00>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	f7f6 ff31 	bl	8000638 <__aeabi_dmul>
 80097d6:	4606      	mov	r6, r0
 80097d8:	460f      	mov	r7, r1
 80097da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80097de:	9606      	str	r6, [sp, #24]
 80097e0:	9307      	str	r3, [sp, #28]
 80097e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097e6:	4d57      	ldr	r5, [pc, #348]	@ (8009944 <_strtod_l+0xaf4>)
 80097e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80097ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097ee:	401d      	ands	r5, r3
 80097f0:	4b58      	ldr	r3, [pc, #352]	@ (8009954 <_strtod_l+0xb04>)
 80097f2:	429d      	cmp	r5, r3
 80097f4:	f040 80b2 	bne.w	800995c <_strtod_l+0xb0c>
 80097f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80097fe:	ec4b ab10 	vmov	d0, sl, fp
 8009802:	f7ff f9c9 	bl	8008b98 <__ulp>
 8009806:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800980a:	ec51 0b10 	vmov	r0, r1, d0
 800980e:	f7f6 ff13 	bl	8000638 <__aeabi_dmul>
 8009812:	4652      	mov	r2, sl
 8009814:	465b      	mov	r3, fp
 8009816:	f7f6 fd59 	bl	80002cc <__adddf3>
 800981a:	460b      	mov	r3, r1
 800981c:	4949      	ldr	r1, [pc, #292]	@ (8009944 <_strtod_l+0xaf4>)
 800981e:	4a4e      	ldr	r2, [pc, #312]	@ (8009958 <_strtod_l+0xb08>)
 8009820:	4019      	ands	r1, r3
 8009822:	4291      	cmp	r1, r2
 8009824:	4682      	mov	sl, r0
 8009826:	d942      	bls.n	80098ae <_strtod_l+0xa5e>
 8009828:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800982a:	4b47      	ldr	r3, [pc, #284]	@ (8009948 <_strtod_l+0xaf8>)
 800982c:	429a      	cmp	r2, r3
 800982e:	d103      	bne.n	8009838 <_strtod_l+0x9e8>
 8009830:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009832:	3301      	adds	r3, #1
 8009834:	f43f ad2f 	beq.w	8009296 <_strtod_l+0x446>
 8009838:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009948 <_strtod_l+0xaf8>
 800983c:	f04f 3aff 	mov.w	sl, #4294967295
 8009840:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009842:	9805      	ldr	r0, [sp, #20]
 8009844:	f7fe fe7c 	bl	8008540 <_Bfree>
 8009848:	9805      	ldr	r0, [sp, #20]
 800984a:	4649      	mov	r1, r9
 800984c:	f7fe fe78 	bl	8008540 <_Bfree>
 8009850:	9805      	ldr	r0, [sp, #20]
 8009852:	4641      	mov	r1, r8
 8009854:	f7fe fe74 	bl	8008540 <_Bfree>
 8009858:	9805      	ldr	r0, [sp, #20]
 800985a:	4621      	mov	r1, r4
 800985c:	f7fe fe70 	bl	8008540 <_Bfree>
 8009860:	e619      	b.n	8009496 <_strtod_l+0x646>
 8009862:	f1ba 0f01 	cmp.w	sl, #1
 8009866:	d103      	bne.n	8009870 <_strtod_l+0xa20>
 8009868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800986a:	2b00      	cmp	r3, #0
 800986c:	f43f ada6 	beq.w	80093bc <_strtod_l+0x56c>
 8009870:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009920 <_strtod_l+0xad0>
 8009874:	4f35      	ldr	r7, [pc, #212]	@ (800994c <_strtod_l+0xafc>)
 8009876:	ed8d 7b06 	vstr	d7, [sp, #24]
 800987a:	2600      	movs	r6, #0
 800987c:	e7b1      	b.n	80097e2 <_strtod_l+0x992>
 800987e:	4f34      	ldr	r7, [pc, #208]	@ (8009950 <_strtod_l+0xb00>)
 8009880:	2600      	movs	r6, #0
 8009882:	e7aa      	b.n	80097da <_strtod_l+0x98a>
 8009884:	4b32      	ldr	r3, [pc, #200]	@ (8009950 <_strtod_l+0xb00>)
 8009886:	4630      	mov	r0, r6
 8009888:	4639      	mov	r1, r7
 800988a:	2200      	movs	r2, #0
 800988c:	f7f6 fed4 	bl	8000638 <__aeabi_dmul>
 8009890:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009892:	4606      	mov	r6, r0
 8009894:	460f      	mov	r7, r1
 8009896:	2b00      	cmp	r3, #0
 8009898:	d09f      	beq.n	80097da <_strtod_l+0x98a>
 800989a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800989e:	e7a0      	b.n	80097e2 <_strtod_l+0x992>
 80098a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009928 <_strtod_l+0xad8>
 80098a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80098a8:	ec57 6b17 	vmov	r6, r7, d7
 80098ac:	e799      	b.n	80097e2 <_strtod_l+0x992>
 80098ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80098b2:	9b08      	ldr	r3, [sp, #32]
 80098b4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1c1      	bne.n	8009840 <_strtod_l+0x9f0>
 80098bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098c0:	0d1b      	lsrs	r3, r3, #20
 80098c2:	051b      	lsls	r3, r3, #20
 80098c4:	429d      	cmp	r5, r3
 80098c6:	d1bb      	bne.n	8009840 <_strtod_l+0x9f0>
 80098c8:	4630      	mov	r0, r6
 80098ca:	4639      	mov	r1, r7
 80098cc:	f7f7 fa14 	bl	8000cf8 <__aeabi_d2lz>
 80098d0:	f7f6 fe84 	bl	80005dc <__aeabi_l2d>
 80098d4:	4602      	mov	r2, r0
 80098d6:	460b      	mov	r3, r1
 80098d8:	4630      	mov	r0, r6
 80098da:	4639      	mov	r1, r7
 80098dc:	f7f6 fcf4 	bl	80002c8 <__aeabi_dsub>
 80098e0:	460b      	mov	r3, r1
 80098e2:	4602      	mov	r2, r0
 80098e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80098e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80098ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ee:	ea46 060a 	orr.w	r6, r6, sl
 80098f2:	431e      	orrs	r6, r3
 80098f4:	d06f      	beq.n	80099d6 <_strtod_l+0xb86>
 80098f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009930 <_strtod_l+0xae0>)
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	f7f7 f90e 	bl	8000b1c <__aeabi_dcmplt>
 8009900:	2800      	cmp	r0, #0
 8009902:	f47f acd3 	bne.w	80092ac <_strtod_l+0x45c>
 8009906:	a30c      	add	r3, pc, #48	@ (adr r3, 8009938 <_strtod_l+0xae8>)
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009910:	f7f7 f922 	bl	8000b58 <__aeabi_dcmpgt>
 8009914:	2800      	cmp	r0, #0
 8009916:	d093      	beq.n	8009840 <_strtod_l+0x9f0>
 8009918:	e4c8      	b.n	80092ac <_strtod_l+0x45c>
 800991a:	bf00      	nop
 800991c:	f3af 8000 	nop.w
 8009920:	00000000 	.word	0x00000000
 8009924:	bff00000 	.word	0xbff00000
 8009928:	00000000 	.word	0x00000000
 800992c:	3ff00000 	.word	0x3ff00000
 8009930:	94a03595 	.word	0x94a03595
 8009934:	3fdfffff 	.word	0x3fdfffff
 8009938:	35afe535 	.word	0x35afe535
 800993c:	3fe00000 	.word	0x3fe00000
 8009940:	000fffff 	.word	0x000fffff
 8009944:	7ff00000 	.word	0x7ff00000
 8009948:	7fefffff 	.word	0x7fefffff
 800994c:	3ff00000 	.word	0x3ff00000
 8009950:	3fe00000 	.word	0x3fe00000
 8009954:	7fe00000 	.word	0x7fe00000
 8009958:	7c9fffff 	.word	0x7c9fffff
 800995c:	9b08      	ldr	r3, [sp, #32]
 800995e:	b323      	cbz	r3, 80099aa <_strtod_l+0xb5a>
 8009960:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009964:	d821      	bhi.n	80099aa <_strtod_l+0xb5a>
 8009966:	a328      	add	r3, pc, #160	@ (adr r3, 8009a08 <_strtod_l+0xbb8>)
 8009968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996c:	4630      	mov	r0, r6
 800996e:	4639      	mov	r1, r7
 8009970:	f7f7 f8de 	bl	8000b30 <__aeabi_dcmple>
 8009974:	b1a0      	cbz	r0, 80099a0 <_strtod_l+0xb50>
 8009976:	4639      	mov	r1, r7
 8009978:	4630      	mov	r0, r6
 800997a:	f7f7 f935 	bl	8000be8 <__aeabi_d2uiz>
 800997e:	2801      	cmp	r0, #1
 8009980:	bf38      	it	cc
 8009982:	2001      	movcc	r0, #1
 8009984:	f7f6 fdde 	bl	8000544 <__aeabi_ui2d>
 8009988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800998a:	4606      	mov	r6, r0
 800998c:	460f      	mov	r7, r1
 800998e:	b9fb      	cbnz	r3, 80099d0 <_strtod_l+0xb80>
 8009990:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009994:	9014      	str	r0, [sp, #80]	@ 0x50
 8009996:	9315      	str	r3, [sp, #84]	@ 0x54
 8009998:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800999c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80099a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80099a6:	1b5b      	subs	r3, r3, r5
 80099a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80099aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80099ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80099b2:	f7ff f8f1 	bl	8008b98 <__ulp>
 80099b6:	4650      	mov	r0, sl
 80099b8:	ec53 2b10 	vmov	r2, r3, d0
 80099bc:	4659      	mov	r1, fp
 80099be:	f7f6 fe3b 	bl	8000638 <__aeabi_dmul>
 80099c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80099c6:	f7f6 fc81 	bl	80002cc <__adddf3>
 80099ca:	4682      	mov	sl, r0
 80099cc:	468b      	mov	fp, r1
 80099ce:	e770      	b.n	80098b2 <_strtod_l+0xa62>
 80099d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80099d4:	e7e0      	b.n	8009998 <_strtod_l+0xb48>
 80099d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009a10 <_strtod_l+0xbc0>)
 80099d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099dc:	f7f7 f89e 	bl	8000b1c <__aeabi_dcmplt>
 80099e0:	e798      	b.n	8009914 <_strtod_l+0xac4>
 80099e2:	2300      	movs	r3, #0
 80099e4:	930e      	str	r3, [sp, #56]	@ 0x38
 80099e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80099e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099ea:	6013      	str	r3, [r2, #0]
 80099ec:	f7ff ba6d 	b.w	8008eca <_strtod_l+0x7a>
 80099f0:	2a65      	cmp	r2, #101	@ 0x65
 80099f2:	f43f ab68 	beq.w	80090c6 <_strtod_l+0x276>
 80099f6:	2a45      	cmp	r2, #69	@ 0x45
 80099f8:	f43f ab65 	beq.w	80090c6 <_strtod_l+0x276>
 80099fc:	2301      	movs	r3, #1
 80099fe:	f7ff bba0 	b.w	8009142 <_strtod_l+0x2f2>
 8009a02:	bf00      	nop
 8009a04:	f3af 8000 	nop.w
 8009a08:	ffc00000 	.word	0xffc00000
 8009a0c:	41dfffff 	.word	0x41dfffff
 8009a10:	94a03595 	.word	0x94a03595
 8009a14:	3fcfffff 	.word	0x3fcfffff

08009a18 <_strtod_r>:
 8009a18:	4b01      	ldr	r3, [pc, #4]	@ (8009a20 <_strtod_r+0x8>)
 8009a1a:	f7ff ba19 	b.w	8008e50 <_strtod_l>
 8009a1e:	bf00      	nop
 8009a20:	20000074 	.word	0x20000074

08009a24 <_strtol_l.isra.0>:
 8009a24:	2b24      	cmp	r3, #36	@ 0x24
 8009a26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a2a:	4686      	mov	lr, r0
 8009a2c:	4690      	mov	r8, r2
 8009a2e:	d801      	bhi.n	8009a34 <_strtol_l.isra.0+0x10>
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d106      	bne.n	8009a42 <_strtol_l.isra.0+0x1e>
 8009a34:	f7fd fdaa 	bl	800758c <__errno>
 8009a38:	2316      	movs	r3, #22
 8009a3a:	6003      	str	r3, [r0, #0]
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a42:	4834      	ldr	r0, [pc, #208]	@ (8009b14 <_strtol_l.isra.0+0xf0>)
 8009a44:	460d      	mov	r5, r1
 8009a46:	462a      	mov	r2, r5
 8009a48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a4c:	5d06      	ldrb	r6, [r0, r4]
 8009a4e:	f016 0608 	ands.w	r6, r6, #8
 8009a52:	d1f8      	bne.n	8009a46 <_strtol_l.isra.0+0x22>
 8009a54:	2c2d      	cmp	r4, #45	@ 0x2d
 8009a56:	d110      	bne.n	8009a7a <_strtol_l.isra.0+0x56>
 8009a58:	782c      	ldrb	r4, [r5, #0]
 8009a5a:	2601      	movs	r6, #1
 8009a5c:	1c95      	adds	r5, r2, #2
 8009a5e:	f033 0210 	bics.w	r2, r3, #16
 8009a62:	d115      	bne.n	8009a90 <_strtol_l.isra.0+0x6c>
 8009a64:	2c30      	cmp	r4, #48	@ 0x30
 8009a66:	d10d      	bne.n	8009a84 <_strtol_l.isra.0+0x60>
 8009a68:	782a      	ldrb	r2, [r5, #0]
 8009a6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a6e:	2a58      	cmp	r2, #88	@ 0x58
 8009a70:	d108      	bne.n	8009a84 <_strtol_l.isra.0+0x60>
 8009a72:	786c      	ldrb	r4, [r5, #1]
 8009a74:	3502      	adds	r5, #2
 8009a76:	2310      	movs	r3, #16
 8009a78:	e00a      	b.n	8009a90 <_strtol_l.isra.0+0x6c>
 8009a7a:	2c2b      	cmp	r4, #43	@ 0x2b
 8009a7c:	bf04      	itt	eq
 8009a7e:	782c      	ldrbeq	r4, [r5, #0]
 8009a80:	1c95      	addeq	r5, r2, #2
 8009a82:	e7ec      	b.n	8009a5e <_strtol_l.isra.0+0x3a>
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1f6      	bne.n	8009a76 <_strtol_l.isra.0+0x52>
 8009a88:	2c30      	cmp	r4, #48	@ 0x30
 8009a8a:	bf14      	ite	ne
 8009a8c:	230a      	movne	r3, #10
 8009a8e:	2308      	moveq	r3, #8
 8009a90:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009a94:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009a98:	2200      	movs	r2, #0
 8009a9a:	fbbc f9f3 	udiv	r9, ip, r3
 8009a9e:	4610      	mov	r0, r2
 8009aa0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009aa4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009aa8:	2f09      	cmp	r7, #9
 8009aaa:	d80f      	bhi.n	8009acc <_strtol_l.isra.0+0xa8>
 8009aac:	463c      	mov	r4, r7
 8009aae:	42a3      	cmp	r3, r4
 8009ab0:	dd1b      	ble.n	8009aea <_strtol_l.isra.0+0xc6>
 8009ab2:	1c57      	adds	r7, r2, #1
 8009ab4:	d007      	beq.n	8009ac6 <_strtol_l.isra.0+0xa2>
 8009ab6:	4581      	cmp	r9, r0
 8009ab8:	d314      	bcc.n	8009ae4 <_strtol_l.isra.0+0xc0>
 8009aba:	d101      	bne.n	8009ac0 <_strtol_l.isra.0+0x9c>
 8009abc:	45a2      	cmp	sl, r4
 8009abe:	db11      	blt.n	8009ae4 <_strtol_l.isra.0+0xc0>
 8009ac0:	fb00 4003 	mla	r0, r0, r3, r4
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009aca:	e7eb      	b.n	8009aa4 <_strtol_l.isra.0+0x80>
 8009acc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009ad0:	2f19      	cmp	r7, #25
 8009ad2:	d801      	bhi.n	8009ad8 <_strtol_l.isra.0+0xb4>
 8009ad4:	3c37      	subs	r4, #55	@ 0x37
 8009ad6:	e7ea      	b.n	8009aae <_strtol_l.isra.0+0x8a>
 8009ad8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009adc:	2f19      	cmp	r7, #25
 8009ade:	d804      	bhi.n	8009aea <_strtol_l.isra.0+0xc6>
 8009ae0:	3c57      	subs	r4, #87	@ 0x57
 8009ae2:	e7e4      	b.n	8009aae <_strtol_l.isra.0+0x8a>
 8009ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae8:	e7ed      	b.n	8009ac6 <_strtol_l.isra.0+0xa2>
 8009aea:	1c53      	adds	r3, r2, #1
 8009aec:	d108      	bne.n	8009b00 <_strtol_l.isra.0+0xdc>
 8009aee:	2322      	movs	r3, #34	@ 0x22
 8009af0:	f8ce 3000 	str.w	r3, [lr]
 8009af4:	4660      	mov	r0, ip
 8009af6:	f1b8 0f00 	cmp.w	r8, #0
 8009afa:	d0a0      	beq.n	8009a3e <_strtol_l.isra.0+0x1a>
 8009afc:	1e69      	subs	r1, r5, #1
 8009afe:	e006      	b.n	8009b0e <_strtol_l.isra.0+0xea>
 8009b00:	b106      	cbz	r6, 8009b04 <_strtol_l.isra.0+0xe0>
 8009b02:	4240      	negs	r0, r0
 8009b04:	f1b8 0f00 	cmp.w	r8, #0
 8009b08:	d099      	beq.n	8009a3e <_strtol_l.isra.0+0x1a>
 8009b0a:	2a00      	cmp	r2, #0
 8009b0c:	d1f6      	bne.n	8009afc <_strtol_l.isra.0+0xd8>
 8009b0e:	f8c8 1000 	str.w	r1, [r8]
 8009b12:	e794      	b.n	8009a3e <_strtol_l.isra.0+0x1a>
 8009b14:	0800bcc1 	.word	0x0800bcc1

08009b18 <_strtol_r>:
 8009b18:	f7ff bf84 	b.w	8009a24 <_strtol_l.isra.0>

08009b1c <__ssputs_r>:
 8009b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b20:	688e      	ldr	r6, [r1, #8]
 8009b22:	461f      	mov	r7, r3
 8009b24:	42be      	cmp	r6, r7
 8009b26:	680b      	ldr	r3, [r1, #0]
 8009b28:	4682      	mov	sl, r0
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	4690      	mov	r8, r2
 8009b2e:	d82d      	bhi.n	8009b8c <__ssputs_r+0x70>
 8009b30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009b38:	d026      	beq.n	8009b88 <__ssputs_r+0x6c>
 8009b3a:	6965      	ldr	r5, [r4, #20]
 8009b3c:	6909      	ldr	r1, [r1, #16]
 8009b3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b42:	eba3 0901 	sub.w	r9, r3, r1
 8009b46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b4a:	1c7b      	adds	r3, r7, #1
 8009b4c:	444b      	add	r3, r9
 8009b4e:	106d      	asrs	r5, r5, #1
 8009b50:	429d      	cmp	r5, r3
 8009b52:	bf38      	it	cc
 8009b54:	461d      	movcc	r5, r3
 8009b56:	0553      	lsls	r3, r2, #21
 8009b58:	d527      	bpl.n	8009baa <__ssputs_r+0x8e>
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	f7fe fc24 	bl	80083a8 <_malloc_r>
 8009b60:	4606      	mov	r6, r0
 8009b62:	b360      	cbz	r0, 8009bbe <__ssputs_r+0xa2>
 8009b64:	6921      	ldr	r1, [r4, #16]
 8009b66:	464a      	mov	r2, r9
 8009b68:	f7fd fd3d 	bl	80075e6 <memcpy>
 8009b6c:	89a3      	ldrh	r3, [r4, #12]
 8009b6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b76:	81a3      	strh	r3, [r4, #12]
 8009b78:	6126      	str	r6, [r4, #16]
 8009b7a:	6165      	str	r5, [r4, #20]
 8009b7c:	444e      	add	r6, r9
 8009b7e:	eba5 0509 	sub.w	r5, r5, r9
 8009b82:	6026      	str	r6, [r4, #0]
 8009b84:	60a5      	str	r5, [r4, #8]
 8009b86:	463e      	mov	r6, r7
 8009b88:	42be      	cmp	r6, r7
 8009b8a:	d900      	bls.n	8009b8e <__ssputs_r+0x72>
 8009b8c:	463e      	mov	r6, r7
 8009b8e:	6820      	ldr	r0, [r4, #0]
 8009b90:	4632      	mov	r2, r6
 8009b92:	4641      	mov	r1, r8
 8009b94:	f000 fd57 	bl	800a646 <memmove>
 8009b98:	68a3      	ldr	r3, [r4, #8]
 8009b9a:	1b9b      	subs	r3, r3, r6
 8009b9c:	60a3      	str	r3, [r4, #8]
 8009b9e:	6823      	ldr	r3, [r4, #0]
 8009ba0:	4433      	add	r3, r6
 8009ba2:	6023      	str	r3, [r4, #0]
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009baa:	462a      	mov	r2, r5
 8009bac:	f001 f8fd 	bl	800adaa <_realloc_r>
 8009bb0:	4606      	mov	r6, r0
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d1e0      	bne.n	8009b78 <__ssputs_r+0x5c>
 8009bb6:	6921      	ldr	r1, [r4, #16]
 8009bb8:	4650      	mov	r0, sl
 8009bba:	f7fe fb81 	bl	80082c0 <_free_r>
 8009bbe:	230c      	movs	r3, #12
 8009bc0:	f8ca 3000 	str.w	r3, [sl]
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bca:	81a3      	strh	r3, [r4, #12]
 8009bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd0:	e7e9      	b.n	8009ba6 <__ssputs_r+0x8a>
	...

08009bd4 <_svfiprintf_r>:
 8009bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd8:	4698      	mov	r8, r3
 8009bda:	898b      	ldrh	r3, [r1, #12]
 8009bdc:	061b      	lsls	r3, r3, #24
 8009bde:	b09d      	sub	sp, #116	@ 0x74
 8009be0:	4607      	mov	r7, r0
 8009be2:	460d      	mov	r5, r1
 8009be4:	4614      	mov	r4, r2
 8009be6:	d510      	bpl.n	8009c0a <_svfiprintf_r+0x36>
 8009be8:	690b      	ldr	r3, [r1, #16]
 8009bea:	b973      	cbnz	r3, 8009c0a <_svfiprintf_r+0x36>
 8009bec:	2140      	movs	r1, #64	@ 0x40
 8009bee:	f7fe fbdb 	bl	80083a8 <_malloc_r>
 8009bf2:	6028      	str	r0, [r5, #0]
 8009bf4:	6128      	str	r0, [r5, #16]
 8009bf6:	b930      	cbnz	r0, 8009c06 <_svfiprintf_r+0x32>
 8009bf8:	230c      	movs	r3, #12
 8009bfa:	603b      	str	r3, [r7, #0]
 8009bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009c00:	b01d      	add	sp, #116	@ 0x74
 8009c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c06:	2340      	movs	r3, #64	@ 0x40
 8009c08:	616b      	str	r3, [r5, #20]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c0e:	2320      	movs	r3, #32
 8009c10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c14:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c18:	2330      	movs	r3, #48	@ 0x30
 8009c1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009db8 <_svfiprintf_r+0x1e4>
 8009c1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c22:	f04f 0901 	mov.w	r9, #1
 8009c26:	4623      	mov	r3, r4
 8009c28:	469a      	mov	sl, r3
 8009c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c2e:	b10a      	cbz	r2, 8009c34 <_svfiprintf_r+0x60>
 8009c30:	2a25      	cmp	r2, #37	@ 0x25
 8009c32:	d1f9      	bne.n	8009c28 <_svfiprintf_r+0x54>
 8009c34:	ebba 0b04 	subs.w	fp, sl, r4
 8009c38:	d00b      	beq.n	8009c52 <_svfiprintf_r+0x7e>
 8009c3a:	465b      	mov	r3, fp
 8009c3c:	4622      	mov	r2, r4
 8009c3e:	4629      	mov	r1, r5
 8009c40:	4638      	mov	r0, r7
 8009c42:	f7ff ff6b 	bl	8009b1c <__ssputs_r>
 8009c46:	3001      	adds	r0, #1
 8009c48:	f000 80a7 	beq.w	8009d9a <_svfiprintf_r+0x1c6>
 8009c4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c4e:	445a      	add	r2, fp
 8009c50:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c52:	f89a 3000 	ldrb.w	r3, [sl]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f000 809f 	beq.w	8009d9a <_svfiprintf_r+0x1c6>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c66:	f10a 0a01 	add.w	sl, sl, #1
 8009c6a:	9304      	str	r3, [sp, #16]
 8009c6c:	9307      	str	r3, [sp, #28]
 8009c6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c72:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c74:	4654      	mov	r4, sl
 8009c76:	2205      	movs	r2, #5
 8009c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c7c:	484e      	ldr	r0, [pc, #312]	@ (8009db8 <_svfiprintf_r+0x1e4>)
 8009c7e:	f7f6 fac7 	bl	8000210 <memchr>
 8009c82:	9a04      	ldr	r2, [sp, #16]
 8009c84:	b9d8      	cbnz	r0, 8009cbe <_svfiprintf_r+0xea>
 8009c86:	06d0      	lsls	r0, r2, #27
 8009c88:	bf44      	itt	mi
 8009c8a:	2320      	movmi	r3, #32
 8009c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c90:	0711      	lsls	r1, r2, #28
 8009c92:	bf44      	itt	mi
 8009c94:	232b      	movmi	r3, #43	@ 0x2b
 8009c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ca0:	d015      	beq.n	8009cce <_svfiprintf_r+0xfa>
 8009ca2:	9a07      	ldr	r2, [sp, #28]
 8009ca4:	4654      	mov	r4, sl
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	f04f 0c0a 	mov.w	ip, #10
 8009cac:	4621      	mov	r1, r4
 8009cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cb2:	3b30      	subs	r3, #48	@ 0x30
 8009cb4:	2b09      	cmp	r3, #9
 8009cb6:	d94b      	bls.n	8009d50 <_svfiprintf_r+0x17c>
 8009cb8:	b1b0      	cbz	r0, 8009ce8 <_svfiprintf_r+0x114>
 8009cba:	9207      	str	r2, [sp, #28]
 8009cbc:	e014      	b.n	8009ce8 <_svfiprintf_r+0x114>
 8009cbe:	eba0 0308 	sub.w	r3, r0, r8
 8009cc2:	fa09 f303 	lsl.w	r3, r9, r3
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	9304      	str	r3, [sp, #16]
 8009cca:	46a2      	mov	sl, r4
 8009ccc:	e7d2      	b.n	8009c74 <_svfiprintf_r+0xa0>
 8009cce:	9b03      	ldr	r3, [sp, #12]
 8009cd0:	1d19      	adds	r1, r3, #4
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	9103      	str	r1, [sp, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	bfbb      	ittet	lt
 8009cda:	425b      	neglt	r3, r3
 8009cdc:	f042 0202 	orrlt.w	r2, r2, #2
 8009ce0:	9307      	strge	r3, [sp, #28]
 8009ce2:	9307      	strlt	r3, [sp, #28]
 8009ce4:	bfb8      	it	lt
 8009ce6:	9204      	strlt	r2, [sp, #16]
 8009ce8:	7823      	ldrb	r3, [r4, #0]
 8009cea:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cec:	d10a      	bne.n	8009d04 <_svfiprintf_r+0x130>
 8009cee:	7863      	ldrb	r3, [r4, #1]
 8009cf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cf2:	d132      	bne.n	8009d5a <_svfiprintf_r+0x186>
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	1d1a      	adds	r2, r3, #4
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	9203      	str	r2, [sp, #12]
 8009cfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d00:	3402      	adds	r4, #2
 8009d02:	9305      	str	r3, [sp, #20]
 8009d04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009dc8 <_svfiprintf_r+0x1f4>
 8009d08:	7821      	ldrb	r1, [r4, #0]
 8009d0a:	2203      	movs	r2, #3
 8009d0c:	4650      	mov	r0, sl
 8009d0e:	f7f6 fa7f 	bl	8000210 <memchr>
 8009d12:	b138      	cbz	r0, 8009d24 <_svfiprintf_r+0x150>
 8009d14:	9b04      	ldr	r3, [sp, #16]
 8009d16:	eba0 000a 	sub.w	r0, r0, sl
 8009d1a:	2240      	movs	r2, #64	@ 0x40
 8009d1c:	4082      	lsls	r2, r0
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	3401      	adds	r4, #1
 8009d22:	9304      	str	r3, [sp, #16]
 8009d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d28:	4824      	ldr	r0, [pc, #144]	@ (8009dbc <_svfiprintf_r+0x1e8>)
 8009d2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d2e:	2206      	movs	r2, #6
 8009d30:	f7f6 fa6e 	bl	8000210 <memchr>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	d036      	beq.n	8009da6 <_svfiprintf_r+0x1d2>
 8009d38:	4b21      	ldr	r3, [pc, #132]	@ (8009dc0 <_svfiprintf_r+0x1ec>)
 8009d3a:	bb1b      	cbnz	r3, 8009d84 <_svfiprintf_r+0x1b0>
 8009d3c:	9b03      	ldr	r3, [sp, #12]
 8009d3e:	3307      	adds	r3, #7
 8009d40:	f023 0307 	bic.w	r3, r3, #7
 8009d44:	3308      	adds	r3, #8
 8009d46:	9303      	str	r3, [sp, #12]
 8009d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d4a:	4433      	add	r3, r6
 8009d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d4e:	e76a      	b.n	8009c26 <_svfiprintf_r+0x52>
 8009d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d54:	460c      	mov	r4, r1
 8009d56:	2001      	movs	r0, #1
 8009d58:	e7a8      	b.n	8009cac <_svfiprintf_r+0xd8>
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	3401      	adds	r4, #1
 8009d5e:	9305      	str	r3, [sp, #20]
 8009d60:	4619      	mov	r1, r3
 8009d62:	f04f 0c0a 	mov.w	ip, #10
 8009d66:	4620      	mov	r0, r4
 8009d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d6c:	3a30      	subs	r2, #48	@ 0x30
 8009d6e:	2a09      	cmp	r2, #9
 8009d70:	d903      	bls.n	8009d7a <_svfiprintf_r+0x1a6>
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d0c6      	beq.n	8009d04 <_svfiprintf_r+0x130>
 8009d76:	9105      	str	r1, [sp, #20]
 8009d78:	e7c4      	b.n	8009d04 <_svfiprintf_r+0x130>
 8009d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d7e:	4604      	mov	r4, r0
 8009d80:	2301      	movs	r3, #1
 8009d82:	e7f0      	b.n	8009d66 <_svfiprintf_r+0x192>
 8009d84:	ab03      	add	r3, sp, #12
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	462a      	mov	r2, r5
 8009d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8009dc4 <_svfiprintf_r+0x1f0>)
 8009d8c:	a904      	add	r1, sp, #16
 8009d8e:	4638      	mov	r0, r7
 8009d90:	f7fc fc1e 	bl	80065d0 <_printf_float>
 8009d94:	1c42      	adds	r2, r0, #1
 8009d96:	4606      	mov	r6, r0
 8009d98:	d1d6      	bne.n	8009d48 <_svfiprintf_r+0x174>
 8009d9a:	89ab      	ldrh	r3, [r5, #12]
 8009d9c:	065b      	lsls	r3, r3, #25
 8009d9e:	f53f af2d 	bmi.w	8009bfc <_svfiprintf_r+0x28>
 8009da2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009da4:	e72c      	b.n	8009c00 <_svfiprintf_r+0x2c>
 8009da6:	ab03      	add	r3, sp, #12
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	462a      	mov	r2, r5
 8009dac:	4b05      	ldr	r3, [pc, #20]	@ (8009dc4 <_svfiprintf_r+0x1f0>)
 8009dae:	a904      	add	r1, sp, #16
 8009db0:	4638      	mov	r0, r7
 8009db2:	f7fc fea5 	bl	8006b00 <_printf_i>
 8009db6:	e7ed      	b.n	8009d94 <_svfiprintf_r+0x1c0>
 8009db8:	0800baa3 	.word	0x0800baa3
 8009dbc:	0800baad 	.word	0x0800baad
 8009dc0:	080065d1 	.word	0x080065d1
 8009dc4:	08009b1d 	.word	0x08009b1d
 8009dc8:	0800baa9 	.word	0x0800baa9

08009dcc <_sungetc_r>:
 8009dcc:	b538      	push	{r3, r4, r5, lr}
 8009dce:	1c4b      	adds	r3, r1, #1
 8009dd0:	4614      	mov	r4, r2
 8009dd2:	d103      	bne.n	8009ddc <_sungetc_r+0x10>
 8009dd4:	f04f 35ff 	mov.w	r5, #4294967295
 8009dd8:	4628      	mov	r0, r5
 8009dda:	bd38      	pop	{r3, r4, r5, pc}
 8009ddc:	8993      	ldrh	r3, [r2, #12]
 8009dde:	f023 0320 	bic.w	r3, r3, #32
 8009de2:	8193      	strh	r3, [r2, #12]
 8009de4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009de6:	6852      	ldr	r2, [r2, #4]
 8009de8:	b2cd      	uxtb	r5, r1
 8009dea:	b18b      	cbz	r3, 8009e10 <_sungetc_r+0x44>
 8009dec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009dee:	4293      	cmp	r3, r2
 8009df0:	dd08      	ble.n	8009e04 <_sungetc_r+0x38>
 8009df2:	6823      	ldr	r3, [r4, #0]
 8009df4:	1e5a      	subs	r2, r3, #1
 8009df6:	6022      	str	r2, [r4, #0]
 8009df8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009dfc:	6863      	ldr	r3, [r4, #4]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	6063      	str	r3, [r4, #4]
 8009e02:	e7e9      	b.n	8009dd8 <_sungetc_r+0xc>
 8009e04:	4621      	mov	r1, r4
 8009e06:	f000 fbe4 	bl	800a5d2 <__submore>
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	d0f1      	beq.n	8009df2 <_sungetc_r+0x26>
 8009e0e:	e7e1      	b.n	8009dd4 <_sungetc_r+0x8>
 8009e10:	6921      	ldr	r1, [r4, #16]
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	b151      	cbz	r1, 8009e2c <_sungetc_r+0x60>
 8009e16:	4299      	cmp	r1, r3
 8009e18:	d208      	bcs.n	8009e2c <_sungetc_r+0x60>
 8009e1a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009e1e:	42a9      	cmp	r1, r5
 8009e20:	d104      	bne.n	8009e2c <_sungetc_r+0x60>
 8009e22:	3b01      	subs	r3, #1
 8009e24:	3201      	adds	r2, #1
 8009e26:	6023      	str	r3, [r4, #0]
 8009e28:	6062      	str	r2, [r4, #4]
 8009e2a:	e7d5      	b.n	8009dd8 <_sungetc_r+0xc>
 8009e2c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8009e30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e34:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e36:	2303      	movs	r3, #3
 8009e38:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009e3a:	4623      	mov	r3, r4
 8009e3c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	2301      	movs	r3, #1
 8009e44:	e7dc      	b.n	8009e00 <_sungetc_r+0x34>

08009e46 <__ssrefill_r>:
 8009e46:	b510      	push	{r4, lr}
 8009e48:	460c      	mov	r4, r1
 8009e4a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009e4c:	b169      	cbz	r1, 8009e6a <__ssrefill_r+0x24>
 8009e4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e52:	4299      	cmp	r1, r3
 8009e54:	d001      	beq.n	8009e5a <__ssrefill_r+0x14>
 8009e56:	f7fe fa33 	bl	80082c0 <_free_r>
 8009e5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e5c:	6063      	str	r3, [r4, #4]
 8009e5e:	2000      	movs	r0, #0
 8009e60:	6360      	str	r0, [r4, #52]	@ 0x34
 8009e62:	b113      	cbz	r3, 8009e6a <__ssrefill_r+0x24>
 8009e64:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009e66:	6023      	str	r3, [r4, #0]
 8009e68:	bd10      	pop	{r4, pc}
 8009e6a:	6923      	ldr	r3, [r4, #16]
 8009e6c:	6023      	str	r3, [r4, #0]
 8009e6e:	2300      	movs	r3, #0
 8009e70:	6063      	str	r3, [r4, #4]
 8009e72:	89a3      	ldrh	r3, [r4, #12]
 8009e74:	f043 0320 	orr.w	r3, r3, #32
 8009e78:	81a3      	strh	r3, [r4, #12]
 8009e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e7e:	e7f3      	b.n	8009e68 <__ssrefill_r+0x22>

08009e80 <__ssvfiscanf_r>:
 8009e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e84:	460c      	mov	r4, r1
 8009e86:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009e90:	49a6      	ldr	r1, [pc, #664]	@ (800a12c <__ssvfiscanf_r+0x2ac>)
 8009e92:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009e94:	f10d 0804 	add.w	r8, sp, #4
 8009e98:	49a5      	ldr	r1, [pc, #660]	@ (800a130 <__ssvfiscanf_r+0x2b0>)
 8009e9a:	4fa6      	ldr	r7, [pc, #664]	@ (800a134 <__ssvfiscanf_r+0x2b4>)
 8009e9c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009ea0:	4606      	mov	r6, r0
 8009ea2:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	f892 9000 	ldrb.w	r9, [r2]
 8009eaa:	f1b9 0f00 	cmp.w	r9, #0
 8009eae:	f000 8158 	beq.w	800a162 <__ssvfiscanf_r+0x2e2>
 8009eb2:	f817 3009 	ldrb.w	r3, [r7, r9]
 8009eb6:	f013 0308 	ands.w	r3, r3, #8
 8009eba:	f102 0501 	add.w	r5, r2, #1
 8009ebe:	d019      	beq.n	8009ef4 <__ssvfiscanf_r+0x74>
 8009ec0:	6863      	ldr	r3, [r4, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	dd0f      	ble.n	8009ee6 <__ssvfiscanf_r+0x66>
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	781a      	ldrb	r2, [r3, #0]
 8009eca:	5cba      	ldrb	r2, [r7, r2]
 8009ecc:	0712      	lsls	r2, r2, #28
 8009ece:	d401      	bmi.n	8009ed4 <__ssvfiscanf_r+0x54>
 8009ed0:	462a      	mov	r2, r5
 8009ed2:	e7e8      	b.n	8009ea6 <__ssvfiscanf_r+0x26>
 8009ed4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009ed6:	3201      	adds	r2, #1
 8009ed8:	9245      	str	r2, [sp, #276]	@ 0x114
 8009eda:	6862      	ldr	r2, [r4, #4]
 8009edc:	3301      	adds	r3, #1
 8009ede:	3a01      	subs	r2, #1
 8009ee0:	6062      	str	r2, [r4, #4]
 8009ee2:	6023      	str	r3, [r4, #0]
 8009ee4:	e7ec      	b.n	8009ec0 <__ssvfiscanf_r+0x40>
 8009ee6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009ee8:	4621      	mov	r1, r4
 8009eea:	4630      	mov	r0, r6
 8009eec:	4798      	blx	r3
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	d0e9      	beq.n	8009ec6 <__ssvfiscanf_r+0x46>
 8009ef2:	e7ed      	b.n	8009ed0 <__ssvfiscanf_r+0x50>
 8009ef4:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8009ef8:	f040 8085 	bne.w	800a006 <__ssvfiscanf_r+0x186>
 8009efc:	9341      	str	r3, [sp, #260]	@ 0x104
 8009efe:	9343      	str	r3, [sp, #268]	@ 0x10c
 8009f00:	7853      	ldrb	r3, [r2, #1]
 8009f02:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f04:	bf02      	ittt	eq
 8009f06:	2310      	moveq	r3, #16
 8009f08:	1c95      	addeq	r5, r2, #2
 8009f0a:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009f0c:	220a      	movs	r2, #10
 8009f0e:	46aa      	mov	sl, r5
 8009f10:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009f14:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009f18:	2b09      	cmp	r3, #9
 8009f1a:	d91e      	bls.n	8009f5a <__ssvfiscanf_r+0xda>
 8009f1c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800a138 <__ssvfiscanf_r+0x2b8>
 8009f20:	2203      	movs	r2, #3
 8009f22:	4658      	mov	r0, fp
 8009f24:	f7f6 f974 	bl	8000210 <memchr>
 8009f28:	b138      	cbz	r0, 8009f3a <__ssvfiscanf_r+0xba>
 8009f2a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009f2c:	eba0 000b 	sub.w	r0, r0, fp
 8009f30:	2301      	movs	r3, #1
 8009f32:	4083      	lsls	r3, r0
 8009f34:	4313      	orrs	r3, r2
 8009f36:	9341      	str	r3, [sp, #260]	@ 0x104
 8009f38:	4655      	mov	r5, sl
 8009f3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009f3e:	2b78      	cmp	r3, #120	@ 0x78
 8009f40:	d806      	bhi.n	8009f50 <__ssvfiscanf_r+0xd0>
 8009f42:	2b57      	cmp	r3, #87	@ 0x57
 8009f44:	d810      	bhi.n	8009f68 <__ssvfiscanf_r+0xe8>
 8009f46:	2b25      	cmp	r3, #37	@ 0x25
 8009f48:	d05d      	beq.n	800a006 <__ssvfiscanf_r+0x186>
 8009f4a:	d857      	bhi.n	8009ffc <__ssvfiscanf_r+0x17c>
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d075      	beq.n	800a03c <__ssvfiscanf_r+0x1bc>
 8009f50:	2303      	movs	r3, #3
 8009f52:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009f54:	230a      	movs	r3, #10
 8009f56:	9342      	str	r3, [sp, #264]	@ 0x108
 8009f58:	e088      	b.n	800a06c <__ssvfiscanf_r+0x1ec>
 8009f5a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009f5c:	fb02 1103 	mla	r1, r2, r3, r1
 8009f60:	3930      	subs	r1, #48	@ 0x30
 8009f62:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009f64:	4655      	mov	r5, sl
 8009f66:	e7d2      	b.n	8009f0e <__ssvfiscanf_r+0x8e>
 8009f68:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009f6c:	2a20      	cmp	r2, #32
 8009f6e:	d8ef      	bhi.n	8009f50 <__ssvfiscanf_r+0xd0>
 8009f70:	a101      	add	r1, pc, #4	@ (adr r1, 8009f78 <__ssvfiscanf_r+0xf8>)
 8009f72:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009f76:	bf00      	nop
 8009f78:	0800a04b 	.word	0x0800a04b
 8009f7c:	08009f51 	.word	0x08009f51
 8009f80:	08009f51 	.word	0x08009f51
 8009f84:	0800a0a5 	.word	0x0800a0a5
 8009f88:	08009f51 	.word	0x08009f51
 8009f8c:	08009f51 	.word	0x08009f51
 8009f90:	08009f51 	.word	0x08009f51
 8009f94:	08009f51 	.word	0x08009f51
 8009f98:	08009f51 	.word	0x08009f51
 8009f9c:	08009f51 	.word	0x08009f51
 8009fa0:	08009f51 	.word	0x08009f51
 8009fa4:	0800a0bb 	.word	0x0800a0bb
 8009fa8:	0800a0a1 	.word	0x0800a0a1
 8009fac:	0800a003 	.word	0x0800a003
 8009fb0:	0800a003 	.word	0x0800a003
 8009fb4:	0800a003 	.word	0x0800a003
 8009fb8:	08009f51 	.word	0x08009f51
 8009fbc:	0800a05d 	.word	0x0800a05d
 8009fc0:	08009f51 	.word	0x08009f51
 8009fc4:	08009f51 	.word	0x08009f51
 8009fc8:	08009f51 	.word	0x08009f51
 8009fcc:	08009f51 	.word	0x08009f51
 8009fd0:	0800a0cb 	.word	0x0800a0cb
 8009fd4:	0800a065 	.word	0x0800a065
 8009fd8:	0800a043 	.word	0x0800a043
 8009fdc:	08009f51 	.word	0x08009f51
 8009fe0:	08009f51 	.word	0x08009f51
 8009fe4:	0800a0c7 	.word	0x0800a0c7
 8009fe8:	08009f51 	.word	0x08009f51
 8009fec:	0800a0a1 	.word	0x0800a0a1
 8009ff0:	08009f51 	.word	0x08009f51
 8009ff4:	08009f51 	.word	0x08009f51
 8009ff8:	0800a04b 	.word	0x0800a04b
 8009ffc:	3b45      	subs	r3, #69	@ 0x45
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d8a6      	bhi.n	8009f50 <__ssvfiscanf_r+0xd0>
 800a002:	2305      	movs	r3, #5
 800a004:	e031      	b.n	800a06a <__ssvfiscanf_r+0x1ea>
 800a006:	6863      	ldr	r3, [r4, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	dd0d      	ble.n	800a028 <__ssvfiscanf_r+0x1a8>
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	781a      	ldrb	r2, [r3, #0]
 800a010:	454a      	cmp	r2, r9
 800a012:	f040 80a6 	bne.w	800a162 <__ssvfiscanf_r+0x2e2>
 800a016:	3301      	adds	r3, #1
 800a018:	6862      	ldr	r2, [r4, #4]
 800a01a:	6023      	str	r3, [r4, #0]
 800a01c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a01e:	3a01      	subs	r2, #1
 800a020:	3301      	adds	r3, #1
 800a022:	6062      	str	r2, [r4, #4]
 800a024:	9345      	str	r3, [sp, #276]	@ 0x114
 800a026:	e753      	b.n	8009ed0 <__ssvfiscanf_r+0x50>
 800a028:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a02a:	4621      	mov	r1, r4
 800a02c:	4630      	mov	r0, r6
 800a02e:	4798      	blx	r3
 800a030:	2800      	cmp	r0, #0
 800a032:	d0eb      	beq.n	800a00c <__ssvfiscanf_r+0x18c>
 800a034:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a036:	2800      	cmp	r0, #0
 800a038:	f040 808b 	bne.w	800a152 <__ssvfiscanf_r+0x2d2>
 800a03c:	f04f 30ff 	mov.w	r0, #4294967295
 800a040:	e08b      	b.n	800a15a <__ssvfiscanf_r+0x2da>
 800a042:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a044:	f042 0220 	orr.w	r2, r2, #32
 800a048:	9241      	str	r2, [sp, #260]	@ 0x104
 800a04a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a04c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a050:	9241      	str	r2, [sp, #260]	@ 0x104
 800a052:	2210      	movs	r2, #16
 800a054:	2b6e      	cmp	r3, #110	@ 0x6e
 800a056:	9242      	str	r2, [sp, #264]	@ 0x108
 800a058:	d902      	bls.n	800a060 <__ssvfiscanf_r+0x1e0>
 800a05a:	e005      	b.n	800a068 <__ssvfiscanf_r+0x1e8>
 800a05c:	2300      	movs	r3, #0
 800a05e:	9342      	str	r3, [sp, #264]	@ 0x108
 800a060:	2303      	movs	r3, #3
 800a062:	e002      	b.n	800a06a <__ssvfiscanf_r+0x1ea>
 800a064:	2308      	movs	r3, #8
 800a066:	9342      	str	r3, [sp, #264]	@ 0x108
 800a068:	2304      	movs	r3, #4
 800a06a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a06c:	6863      	ldr	r3, [r4, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	dd39      	ble.n	800a0e6 <__ssvfiscanf_r+0x266>
 800a072:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a074:	0659      	lsls	r1, r3, #25
 800a076:	d404      	bmi.n	800a082 <__ssvfiscanf_r+0x202>
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	781a      	ldrb	r2, [r3, #0]
 800a07c:	5cba      	ldrb	r2, [r7, r2]
 800a07e:	0712      	lsls	r2, r2, #28
 800a080:	d438      	bmi.n	800a0f4 <__ssvfiscanf_r+0x274>
 800a082:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a084:	2b02      	cmp	r3, #2
 800a086:	dc47      	bgt.n	800a118 <__ssvfiscanf_r+0x298>
 800a088:	466b      	mov	r3, sp
 800a08a:	4622      	mov	r2, r4
 800a08c:	a941      	add	r1, sp, #260	@ 0x104
 800a08e:	4630      	mov	r0, r6
 800a090:	f000 f86c 	bl	800a16c <_scanf_chars>
 800a094:	2801      	cmp	r0, #1
 800a096:	d064      	beq.n	800a162 <__ssvfiscanf_r+0x2e2>
 800a098:	2802      	cmp	r0, #2
 800a09a:	f47f af19 	bne.w	8009ed0 <__ssvfiscanf_r+0x50>
 800a09e:	e7c9      	b.n	800a034 <__ssvfiscanf_r+0x1b4>
 800a0a0:	220a      	movs	r2, #10
 800a0a2:	e7d7      	b.n	800a054 <__ssvfiscanf_r+0x1d4>
 800a0a4:	4629      	mov	r1, r5
 800a0a6:	4640      	mov	r0, r8
 800a0a8:	f000 fa5a 	bl	800a560 <__sccl>
 800a0ac:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a0ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0b2:	9341      	str	r3, [sp, #260]	@ 0x104
 800a0b4:	4605      	mov	r5, r0
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e7d7      	b.n	800a06a <__ssvfiscanf_r+0x1ea>
 800a0ba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a0bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0c0:	9341      	str	r3, [sp, #260]	@ 0x104
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	e7d1      	b.n	800a06a <__ssvfiscanf_r+0x1ea>
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	e7cf      	b.n	800a06a <__ssvfiscanf_r+0x1ea>
 800a0ca:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a0cc:	06c3      	lsls	r3, r0, #27
 800a0ce:	f53f aeff 	bmi.w	8009ed0 <__ssvfiscanf_r+0x50>
 800a0d2:	9b00      	ldr	r3, [sp, #0]
 800a0d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a0d6:	1d19      	adds	r1, r3, #4
 800a0d8:	9100      	str	r1, [sp, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	07c0      	lsls	r0, r0, #31
 800a0de:	bf4c      	ite	mi
 800a0e0:	801a      	strhmi	r2, [r3, #0]
 800a0e2:	601a      	strpl	r2, [r3, #0]
 800a0e4:	e6f4      	b.n	8009ed0 <__ssvfiscanf_r+0x50>
 800a0e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	4798      	blx	r3
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d0bf      	beq.n	800a072 <__ssvfiscanf_r+0x1f2>
 800a0f2:	e79f      	b.n	800a034 <__ssvfiscanf_r+0x1b4>
 800a0f4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a0f6:	3201      	adds	r2, #1
 800a0f8:	9245      	str	r2, [sp, #276]	@ 0x114
 800a0fa:	6862      	ldr	r2, [r4, #4]
 800a0fc:	3a01      	subs	r2, #1
 800a0fe:	2a00      	cmp	r2, #0
 800a100:	6062      	str	r2, [r4, #4]
 800a102:	dd02      	ble.n	800a10a <__ssvfiscanf_r+0x28a>
 800a104:	3301      	adds	r3, #1
 800a106:	6023      	str	r3, [r4, #0]
 800a108:	e7b6      	b.n	800a078 <__ssvfiscanf_r+0x1f8>
 800a10a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a10c:	4621      	mov	r1, r4
 800a10e:	4630      	mov	r0, r6
 800a110:	4798      	blx	r3
 800a112:	2800      	cmp	r0, #0
 800a114:	d0b0      	beq.n	800a078 <__ssvfiscanf_r+0x1f8>
 800a116:	e78d      	b.n	800a034 <__ssvfiscanf_r+0x1b4>
 800a118:	2b04      	cmp	r3, #4
 800a11a:	dc0f      	bgt.n	800a13c <__ssvfiscanf_r+0x2bc>
 800a11c:	466b      	mov	r3, sp
 800a11e:	4622      	mov	r2, r4
 800a120:	a941      	add	r1, sp, #260	@ 0x104
 800a122:	4630      	mov	r0, r6
 800a124:	f000 f87c 	bl	800a220 <_scanf_i>
 800a128:	e7b4      	b.n	800a094 <__ssvfiscanf_r+0x214>
 800a12a:	bf00      	nop
 800a12c:	08009dcd 	.word	0x08009dcd
 800a130:	08009e47 	.word	0x08009e47
 800a134:	0800bcc1 	.word	0x0800bcc1
 800a138:	0800baa9 	.word	0x0800baa9
 800a13c:	4b0a      	ldr	r3, [pc, #40]	@ (800a168 <__ssvfiscanf_r+0x2e8>)
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f43f aec6 	beq.w	8009ed0 <__ssvfiscanf_r+0x50>
 800a144:	466b      	mov	r3, sp
 800a146:	4622      	mov	r2, r4
 800a148:	a941      	add	r1, sp, #260	@ 0x104
 800a14a:	4630      	mov	r0, r6
 800a14c:	f7fc fdf6 	bl	8006d3c <_scanf_float>
 800a150:	e7a0      	b.n	800a094 <__ssvfiscanf_r+0x214>
 800a152:	89a3      	ldrh	r3, [r4, #12]
 800a154:	065b      	lsls	r3, r3, #25
 800a156:	f53f af71 	bmi.w	800a03c <__ssvfiscanf_r+0x1bc>
 800a15a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800a15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a162:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a164:	e7f9      	b.n	800a15a <__ssvfiscanf_r+0x2da>
 800a166:	bf00      	nop
 800a168:	08006d3d 	.word	0x08006d3d

0800a16c <_scanf_chars>:
 800a16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a170:	4615      	mov	r5, r2
 800a172:	688a      	ldr	r2, [r1, #8]
 800a174:	4680      	mov	r8, r0
 800a176:	460c      	mov	r4, r1
 800a178:	b932      	cbnz	r2, 800a188 <_scanf_chars+0x1c>
 800a17a:	698a      	ldr	r2, [r1, #24]
 800a17c:	2a00      	cmp	r2, #0
 800a17e:	bf14      	ite	ne
 800a180:	f04f 32ff 	movne.w	r2, #4294967295
 800a184:	2201      	moveq	r2, #1
 800a186:	608a      	str	r2, [r1, #8]
 800a188:	6822      	ldr	r2, [r4, #0]
 800a18a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a21c <_scanf_chars+0xb0>
 800a18e:	06d1      	lsls	r1, r2, #27
 800a190:	bf5f      	itttt	pl
 800a192:	681a      	ldrpl	r2, [r3, #0]
 800a194:	1d11      	addpl	r1, r2, #4
 800a196:	6019      	strpl	r1, [r3, #0]
 800a198:	6816      	ldrpl	r6, [r2, #0]
 800a19a:	2700      	movs	r7, #0
 800a19c:	69a0      	ldr	r0, [r4, #24]
 800a19e:	b188      	cbz	r0, 800a1c4 <_scanf_chars+0x58>
 800a1a0:	2801      	cmp	r0, #1
 800a1a2:	d107      	bne.n	800a1b4 <_scanf_chars+0x48>
 800a1a4:	682b      	ldr	r3, [r5, #0]
 800a1a6:	781a      	ldrb	r2, [r3, #0]
 800a1a8:	6963      	ldr	r3, [r4, #20]
 800a1aa:	5c9b      	ldrb	r3, [r3, r2]
 800a1ac:	b953      	cbnz	r3, 800a1c4 <_scanf_chars+0x58>
 800a1ae:	2f00      	cmp	r7, #0
 800a1b0:	d031      	beq.n	800a216 <_scanf_chars+0xaa>
 800a1b2:	e022      	b.n	800a1fa <_scanf_chars+0x8e>
 800a1b4:	2802      	cmp	r0, #2
 800a1b6:	d120      	bne.n	800a1fa <_scanf_chars+0x8e>
 800a1b8:	682b      	ldr	r3, [r5, #0]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a1c0:	071b      	lsls	r3, r3, #28
 800a1c2:	d41a      	bmi.n	800a1fa <_scanf_chars+0x8e>
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	06da      	lsls	r2, r3, #27
 800a1c8:	bf5e      	ittt	pl
 800a1ca:	682b      	ldrpl	r3, [r5, #0]
 800a1cc:	781b      	ldrbpl	r3, [r3, #0]
 800a1ce:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a1d2:	682a      	ldr	r2, [r5, #0]
 800a1d4:	686b      	ldr	r3, [r5, #4]
 800a1d6:	3201      	adds	r2, #1
 800a1d8:	602a      	str	r2, [r5, #0]
 800a1da:	68a2      	ldr	r2, [r4, #8]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	3a01      	subs	r2, #1
 800a1e0:	606b      	str	r3, [r5, #4]
 800a1e2:	3701      	adds	r7, #1
 800a1e4:	60a2      	str	r2, [r4, #8]
 800a1e6:	b142      	cbz	r2, 800a1fa <_scanf_chars+0x8e>
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	dcd7      	bgt.n	800a19c <_scanf_chars+0x30>
 800a1ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	4640      	mov	r0, r8
 800a1f4:	4798      	blx	r3
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d0d0      	beq.n	800a19c <_scanf_chars+0x30>
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	f013 0310 	ands.w	r3, r3, #16
 800a200:	d105      	bne.n	800a20e <_scanf_chars+0xa2>
 800a202:	68e2      	ldr	r2, [r4, #12]
 800a204:	3201      	adds	r2, #1
 800a206:	60e2      	str	r2, [r4, #12]
 800a208:	69a2      	ldr	r2, [r4, #24]
 800a20a:	b102      	cbz	r2, 800a20e <_scanf_chars+0xa2>
 800a20c:	7033      	strb	r3, [r6, #0]
 800a20e:	6923      	ldr	r3, [r4, #16]
 800a210:	443b      	add	r3, r7
 800a212:	6123      	str	r3, [r4, #16]
 800a214:	2000      	movs	r0, #0
 800a216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a21a:	bf00      	nop
 800a21c:	0800bcc1 	.word	0x0800bcc1

0800a220 <_scanf_i>:
 800a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a224:	4698      	mov	r8, r3
 800a226:	4b74      	ldr	r3, [pc, #464]	@ (800a3f8 <_scanf_i+0x1d8>)
 800a228:	460c      	mov	r4, r1
 800a22a:	4682      	mov	sl, r0
 800a22c:	4616      	mov	r6, r2
 800a22e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a232:	b087      	sub	sp, #28
 800a234:	ab03      	add	r3, sp, #12
 800a236:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a23a:	4b70      	ldr	r3, [pc, #448]	@ (800a3fc <_scanf_i+0x1dc>)
 800a23c:	69a1      	ldr	r1, [r4, #24]
 800a23e:	4a70      	ldr	r2, [pc, #448]	@ (800a400 <_scanf_i+0x1e0>)
 800a240:	2903      	cmp	r1, #3
 800a242:	bf08      	it	eq
 800a244:	461a      	moveq	r2, r3
 800a246:	68a3      	ldr	r3, [r4, #8]
 800a248:	9201      	str	r2, [sp, #4]
 800a24a:	1e5a      	subs	r2, r3, #1
 800a24c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a250:	bf88      	it	hi
 800a252:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a256:	4627      	mov	r7, r4
 800a258:	bf82      	ittt	hi
 800a25a:	eb03 0905 	addhi.w	r9, r3, r5
 800a25e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a262:	60a3      	strhi	r3, [r4, #8]
 800a264:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a268:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a26c:	bf98      	it	ls
 800a26e:	f04f 0900 	movls.w	r9, #0
 800a272:	6023      	str	r3, [r4, #0]
 800a274:	463d      	mov	r5, r7
 800a276:	f04f 0b00 	mov.w	fp, #0
 800a27a:	6831      	ldr	r1, [r6, #0]
 800a27c:	ab03      	add	r3, sp, #12
 800a27e:	7809      	ldrb	r1, [r1, #0]
 800a280:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a284:	2202      	movs	r2, #2
 800a286:	f7f5 ffc3 	bl	8000210 <memchr>
 800a28a:	b328      	cbz	r0, 800a2d8 <_scanf_i+0xb8>
 800a28c:	f1bb 0f01 	cmp.w	fp, #1
 800a290:	d159      	bne.n	800a346 <_scanf_i+0x126>
 800a292:	6862      	ldr	r2, [r4, #4]
 800a294:	b92a      	cbnz	r2, 800a2a2 <_scanf_i+0x82>
 800a296:	6822      	ldr	r2, [r4, #0]
 800a298:	2108      	movs	r1, #8
 800a29a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a29e:	6061      	str	r1, [r4, #4]
 800a2a0:	6022      	str	r2, [r4, #0]
 800a2a2:	6822      	ldr	r2, [r4, #0]
 800a2a4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a2a8:	6022      	str	r2, [r4, #0]
 800a2aa:	68a2      	ldr	r2, [r4, #8]
 800a2ac:	1e51      	subs	r1, r2, #1
 800a2ae:	60a1      	str	r1, [r4, #8]
 800a2b0:	b192      	cbz	r2, 800a2d8 <_scanf_i+0xb8>
 800a2b2:	6832      	ldr	r2, [r6, #0]
 800a2b4:	1c51      	adds	r1, r2, #1
 800a2b6:	6031      	str	r1, [r6, #0]
 800a2b8:	7812      	ldrb	r2, [r2, #0]
 800a2ba:	f805 2b01 	strb.w	r2, [r5], #1
 800a2be:	6872      	ldr	r2, [r6, #4]
 800a2c0:	3a01      	subs	r2, #1
 800a2c2:	2a00      	cmp	r2, #0
 800a2c4:	6072      	str	r2, [r6, #4]
 800a2c6:	dc07      	bgt.n	800a2d8 <_scanf_i+0xb8>
 800a2c8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a2cc:	4631      	mov	r1, r6
 800a2ce:	4650      	mov	r0, sl
 800a2d0:	4790      	blx	r2
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	f040 8085 	bne.w	800a3e2 <_scanf_i+0x1c2>
 800a2d8:	f10b 0b01 	add.w	fp, fp, #1
 800a2dc:	f1bb 0f03 	cmp.w	fp, #3
 800a2e0:	d1cb      	bne.n	800a27a <_scanf_i+0x5a>
 800a2e2:	6863      	ldr	r3, [r4, #4]
 800a2e4:	b90b      	cbnz	r3, 800a2ea <_scanf_i+0xca>
 800a2e6:	230a      	movs	r3, #10
 800a2e8:	6063      	str	r3, [r4, #4]
 800a2ea:	6863      	ldr	r3, [r4, #4]
 800a2ec:	4945      	ldr	r1, [pc, #276]	@ (800a404 <_scanf_i+0x1e4>)
 800a2ee:	6960      	ldr	r0, [r4, #20]
 800a2f0:	1ac9      	subs	r1, r1, r3
 800a2f2:	f000 f935 	bl	800a560 <__sccl>
 800a2f6:	f04f 0b00 	mov.w	fp, #0
 800a2fa:	68a3      	ldr	r3, [r4, #8]
 800a2fc:	6822      	ldr	r2, [r4, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d03d      	beq.n	800a37e <_scanf_i+0x15e>
 800a302:	6831      	ldr	r1, [r6, #0]
 800a304:	6960      	ldr	r0, [r4, #20]
 800a306:	f891 c000 	ldrb.w	ip, [r1]
 800a30a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a30e:	2800      	cmp	r0, #0
 800a310:	d035      	beq.n	800a37e <_scanf_i+0x15e>
 800a312:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a316:	d124      	bne.n	800a362 <_scanf_i+0x142>
 800a318:	0510      	lsls	r0, r2, #20
 800a31a:	d522      	bpl.n	800a362 <_scanf_i+0x142>
 800a31c:	f10b 0b01 	add.w	fp, fp, #1
 800a320:	f1b9 0f00 	cmp.w	r9, #0
 800a324:	d003      	beq.n	800a32e <_scanf_i+0x10e>
 800a326:	3301      	adds	r3, #1
 800a328:	f109 39ff 	add.w	r9, r9, #4294967295
 800a32c:	60a3      	str	r3, [r4, #8]
 800a32e:	6873      	ldr	r3, [r6, #4]
 800a330:	3b01      	subs	r3, #1
 800a332:	2b00      	cmp	r3, #0
 800a334:	6073      	str	r3, [r6, #4]
 800a336:	dd1b      	ble.n	800a370 <_scanf_i+0x150>
 800a338:	6833      	ldr	r3, [r6, #0]
 800a33a:	3301      	adds	r3, #1
 800a33c:	6033      	str	r3, [r6, #0]
 800a33e:	68a3      	ldr	r3, [r4, #8]
 800a340:	3b01      	subs	r3, #1
 800a342:	60a3      	str	r3, [r4, #8]
 800a344:	e7d9      	b.n	800a2fa <_scanf_i+0xda>
 800a346:	f1bb 0f02 	cmp.w	fp, #2
 800a34a:	d1ae      	bne.n	800a2aa <_scanf_i+0x8a>
 800a34c:	6822      	ldr	r2, [r4, #0]
 800a34e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a352:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a356:	d1c4      	bne.n	800a2e2 <_scanf_i+0xc2>
 800a358:	2110      	movs	r1, #16
 800a35a:	6061      	str	r1, [r4, #4]
 800a35c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a360:	e7a2      	b.n	800a2a8 <_scanf_i+0x88>
 800a362:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a366:	6022      	str	r2, [r4, #0]
 800a368:	780b      	ldrb	r3, [r1, #0]
 800a36a:	f805 3b01 	strb.w	r3, [r5], #1
 800a36e:	e7de      	b.n	800a32e <_scanf_i+0x10e>
 800a370:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a374:	4631      	mov	r1, r6
 800a376:	4650      	mov	r0, sl
 800a378:	4798      	blx	r3
 800a37a:	2800      	cmp	r0, #0
 800a37c:	d0df      	beq.n	800a33e <_scanf_i+0x11e>
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	05d9      	lsls	r1, r3, #23
 800a382:	d50d      	bpl.n	800a3a0 <_scanf_i+0x180>
 800a384:	42bd      	cmp	r5, r7
 800a386:	d909      	bls.n	800a39c <_scanf_i+0x17c>
 800a388:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a38c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a390:	4632      	mov	r2, r6
 800a392:	4650      	mov	r0, sl
 800a394:	4798      	blx	r3
 800a396:	f105 39ff 	add.w	r9, r5, #4294967295
 800a39a:	464d      	mov	r5, r9
 800a39c:	42bd      	cmp	r5, r7
 800a39e:	d028      	beq.n	800a3f2 <_scanf_i+0x1d2>
 800a3a0:	6822      	ldr	r2, [r4, #0]
 800a3a2:	f012 0210 	ands.w	r2, r2, #16
 800a3a6:	d113      	bne.n	800a3d0 <_scanf_i+0x1b0>
 800a3a8:	702a      	strb	r2, [r5, #0]
 800a3aa:	6863      	ldr	r3, [r4, #4]
 800a3ac:	9e01      	ldr	r6, [sp, #4]
 800a3ae:	4639      	mov	r1, r7
 800a3b0:	4650      	mov	r0, sl
 800a3b2:	47b0      	blx	r6
 800a3b4:	f8d8 3000 	ldr.w	r3, [r8]
 800a3b8:	6821      	ldr	r1, [r4, #0]
 800a3ba:	1d1a      	adds	r2, r3, #4
 800a3bc:	f8c8 2000 	str.w	r2, [r8]
 800a3c0:	f011 0f20 	tst.w	r1, #32
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	d00f      	beq.n	800a3e8 <_scanf_i+0x1c8>
 800a3c8:	6018      	str	r0, [r3, #0]
 800a3ca:	68e3      	ldr	r3, [r4, #12]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	60e3      	str	r3, [r4, #12]
 800a3d0:	6923      	ldr	r3, [r4, #16]
 800a3d2:	1bed      	subs	r5, r5, r7
 800a3d4:	445d      	add	r5, fp
 800a3d6:	442b      	add	r3, r5
 800a3d8:	6123      	str	r3, [r4, #16]
 800a3da:	2000      	movs	r0, #0
 800a3dc:	b007      	add	sp, #28
 800a3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e2:	f04f 0b00 	mov.w	fp, #0
 800a3e6:	e7ca      	b.n	800a37e <_scanf_i+0x15e>
 800a3e8:	07ca      	lsls	r2, r1, #31
 800a3ea:	bf4c      	ite	mi
 800a3ec:	8018      	strhmi	r0, [r3, #0]
 800a3ee:	6018      	strpl	r0, [r3, #0]
 800a3f0:	e7eb      	b.n	800a3ca <_scanf_i+0x1aa>
 800a3f2:	2001      	movs	r0, #1
 800a3f4:	e7f2      	b.n	800a3dc <_scanf_i+0x1bc>
 800a3f6:	bf00      	nop
 800a3f8:	0800b960 	.word	0x0800b960
 800a3fc:	08009b19 	.word	0x08009b19
 800a400:	0800aee5 	.word	0x0800aee5
 800a404:	0800bac4 	.word	0x0800bac4

0800a408 <__sflush_r>:
 800a408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a410:	0716      	lsls	r6, r2, #28
 800a412:	4605      	mov	r5, r0
 800a414:	460c      	mov	r4, r1
 800a416:	d454      	bmi.n	800a4c2 <__sflush_r+0xba>
 800a418:	684b      	ldr	r3, [r1, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	dc02      	bgt.n	800a424 <__sflush_r+0x1c>
 800a41e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a420:	2b00      	cmp	r3, #0
 800a422:	dd48      	ble.n	800a4b6 <__sflush_r+0xae>
 800a424:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a426:	2e00      	cmp	r6, #0
 800a428:	d045      	beq.n	800a4b6 <__sflush_r+0xae>
 800a42a:	2300      	movs	r3, #0
 800a42c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a430:	682f      	ldr	r7, [r5, #0]
 800a432:	6a21      	ldr	r1, [r4, #32]
 800a434:	602b      	str	r3, [r5, #0]
 800a436:	d030      	beq.n	800a49a <__sflush_r+0x92>
 800a438:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a43a:	89a3      	ldrh	r3, [r4, #12]
 800a43c:	0759      	lsls	r1, r3, #29
 800a43e:	d505      	bpl.n	800a44c <__sflush_r+0x44>
 800a440:	6863      	ldr	r3, [r4, #4]
 800a442:	1ad2      	subs	r2, r2, r3
 800a444:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a446:	b10b      	cbz	r3, 800a44c <__sflush_r+0x44>
 800a448:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a44a:	1ad2      	subs	r2, r2, r3
 800a44c:	2300      	movs	r3, #0
 800a44e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a450:	6a21      	ldr	r1, [r4, #32]
 800a452:	4628      	mov	r0, r5
 800a454:	47b0      	blx	r6
 800a456:	1c43      	adds	r3, r0, #1
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	d106      	bne.n	800a46a <__sflush_r+0x62>
 800a45c:	6829      	ldr	r1, [r5, #0]
 800a45e:	291d      	cmp	r1, #29
 800a460:	d82b      	bhi.n	800a4ba <__sflush_r+0xb2>
 800a462:	4a2a      	ldr	r2, [pc, #168]	@ (800a50c <__sflush_r+0x104>)
 800a464:	40ca      	lsrs	r2, r1
 800a466:	07d6      	lsls	r6, r2, #31
 800a468:	d527      	bpl.n	800a4ba <__sflush_r+0xb2>
 800a46a:	2200      	movs	r2, #0
 800a46c:	6062      	str	r2, [r4, #4]
 800a46e:	04d9      	lsls	r1, r3, #19
 800a470:	6922      	ldr	r2, [r4, #16]
 800a472:	6022      	str	r2, [r4, #0]
 800a474:	d504      	bpl.n	800a480 <__sflush_r+0x78>
 800a476:	1c42      	adds	r2, r0, #1
 800a478:	d101      	bne.n	800a47e <__sflush_r+0x76>
 800a47a:	682b      	ldr	r3, [r5, #0]
 800a47c:	b903      	cbnz	r3, 800a480 <__sflush_r+0x78>
 800a47e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a480:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a482:	602f      	str	r7, [r5, #0]
 800a484:	b1b9      	cbz	r1, 800a4b6 <__sflush_r+0xae>
 800a486:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a48a:	4299      	cmp	r1, r3
 800a48c:	d002      	beq.n	800a494 <__sflush_r+0x8c>
 800a48e:	4628      	mov	r0, r5
 800a490:	f7fd ff16 	bl	80082c0 <_free_r>
 800a494:	2300      	movs	r3, #0
 800a496:	6363      	str	r3, [r4, #52]	@ 0x34
 800a498:	e00d      	b.n	800a4b6 <__sflush_r+0xae>
 800a49a:	2301      	movs	r3, #1
 800a49c:	4628      	mov	r0, r5
 800a49e:	47b0      	blx	r6
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	1c50      	adds	r0, r2, #1
 800a4a4:	d1c9      	bne.n	800a43a <__sflush_r+0x32>
 800a4a6:	682b      	ldr	r3, [r5, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d0c6      	beq.n	800a43a <__sflush_r+0x32>
 800a4ac:	2b1d      	cmp	r3, #29
 800a4ae:	d001      	beq.n	800a4b4 <__sflush_r+0xac>
 800a4b0:	2b16      	cmp	r3, #22
 800a4b2:	d11e      	bne.n	800a4f2 <__sflush_r+0xea>
 800a4b4:	602f      	str	r7, [r5, #0]
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	e022      	b.n	800a500 <__sflush_r+0xf8>
 800a4ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4be:	b21b      	sxth	r3, r3
 800a4c0:	e01b      	b.n	800a4fa <__sflush_r+0xf2>
 800a4c2:	690f      	ldr	r7, [r1, #16]
 800a4c4:	2f00      	cmp	r7, #0
 800a4c6:	d0f6      	beq.n	800a4b6 <__sflush_r+0xae>
 800a4c8:	0793      	lsls	r3, r2, #30
 800a4ca:	680e      	ldr	r6, [r1, #0]
 800a4cc:	bf08      	it	eq
 800a4ce:	694b      	ldreq	r3, [r1, #20]
 800a4d0:	600f      	str	r7, [r1, #0]
 800a4d2:	bf18      	it	ne
 800a4d4:	2300      	movne	r3, #0
 800a4d6:	eba6 0807 	sub.w	r8, r6, r7
 800a4da:	608b      	str	r3, [r1, #8]
 800a4dc:	f1b8 0f00 	cmp.w	r8, #0
 800a4e0:	dde9      	ble.n	800a4b6 <__sflush_r+0xae>
 800a4e2:	6a21      	ldr	r1, [r4, #32]
 800a4e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a4e6:	4643      	mov	r3, r8
 800a4e8:	463a      	mov	r2, r7
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	47b0      	blx	r6
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	dc08      	bgt.n	800a504 <__sflush_r+0xfc>
 800a4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4fa:	81a3      	strh	r3, [r4, #12]
 800a4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a504:	4407      	add	r7, r0
 800a506:	eba8 0800 	sub.w	r8, r8, r0
 800a50a:	e7e7      	b.n	800a4dc <__sflush_r+0xd4>
 800a50c:	20400001 	.word	0x20400001

0800a510 <_fflush_r>:
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	690b      	ldr	r3, [r1, #16]
 800a514:	4605      	mov	r5, r0
 800a516:	460c      	mov	r4, r1
 800a518:	b913      	cbnz	r3, 800a520 <_fflush_r+0x10>
 800a51a:	2500      	movs	r5, #0
 800a51c:	4628      	mov	r0, r5
 800a51e:	bd38      	pop	{r3, r4, r5, pc}
 800a520:	b118      	cbz	r0, 800a52a <_fflush_r+0x1a>
 800a522:	6a03      	ldr	r3, [r0, #32]
 800a524:	b90b      	cbnz	r3, 800a52a <_fflush_r+0x1a>
 800a526:	f7fc fea3 	bl	8007270 <__sinit>
 800a52a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d0f3      	beq.n	800a51a <_fflush_r+0xa>
 800a532:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a534:	07d0      	lsls	r0, r2, #31
 800a536:	d404      	bmi.n	800a542 <_fflush_r+0x32>
 800a538:	0599      	lsls	r1, r3, #22
 800a53a:	d402      	bmi.n	800a542 <_fflush_r+0x32>
 800a53c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a53e:	f7fd f850 	bl	80075e2 <__retarget_lock_acquire_recursive>
 800a542:	4628      	mov	r0, r5
 800a544:	4621      	mov	r1, r4
 800a546:	f7ff ff5f 	bl	800a408 <__sflush_r>
 800a54a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a54c:	07da      	lsls	r2, r3, #31
 800a54e:	4605      	mov	r5, r0
 800a550:	d4e4      	bmi.n	800a51c <_fflush_r+0xc>
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	059b      	lsls	r3, r3, #22
 800a556:	d4e1      	bmi.n	800a51c <_fflush_r+0xc>
 800a558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a55a:	f7fd f843 	bl	80075e4 <__retarget_lock_release_recursive>
 800a55e:	e7dd      	b.n	800a51c <_fflush_r+0xc>

0800a560 <__sccl>:
 800a560:	b570      	push	{r4, r5, r6, lr}
 800a562:	780b      	ldrb	r3, [r1, #0]
 800a564:	4604      	mov	r4, r0
 800a566:	2b5e      	cmp	r3, #94	@ 0x5e
 800a568:	bf0b      	itete	eq
 800a56a:	784b      	ldrbeq	r3, [r1, #1]
 800a56c:	1c4a      	addne	r2, r1, #1
 800a56e:	1c8a      	addeq	r2, r1, #2
 800a570:	2100      	movne	r1, #0
 800a572:	bf08      	it	eq
 800a574:	2101      	moveq	r1, #1
 800a576:	3801      	subs	r0, #1
 800a578:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a57c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a580:	42a8      	cmp	r0, r5
 800a582:	d1fb      	bne.n	800a57c <__sccl+0x1c>
 800a584:	b90b      	cbnz	r3, 800a58a <__sccl+0x2a>
 800a586:	1e50      	subs	r0, r2, #1
 800a588:	bd70      	pop	{r4, r5, r6, pc}
 800a58a:	f081 0101 	eor.w	r1, r1, #1
 800a58e:	54e1      	strb	r1, [r4, r3]
 800a590:	4610      	mov	r0, r2
 800a592:	4602      	mov	r2, r0
 800a594:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a598:	2d2d      	cmp	r5, #45	@ 0x2d
 800a59a:	d005      	beq.n	800a5a8 <__sccl+0x48>
 800a59c:	2d5d      	cmp	r5, #93	@ 0x5d
 800a59e:	d016      	beq.n	800a5ce <__sccl+0x6e>
 800a5a0:	2d00      	cmp	r5, #0
 800a5a2:	d0f1      	beq.n	800a588 <__sccl+0x28>
 800a5a4:	462b      	mov	r3, r5
 800a5a6:	e7f2      	b.n	800a58e <__sccl+0x2e>
 800a5a8:	7846      	ldrb	r6, [r0, #1]
 800a5aa:	2e5d      	cmp	r6, #93	@ 0x5d
 800a5ac:	d0fa      	beq.n	800a5a4 <__sccl+0x44>
 800a5ae:	42b3      	cmp	r3, r6
 800a5b0:	dcf8      	bgt.n	800a5a4 <__sccl+0x44>
 800a5b2:	3002      	adds	r0, #2
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	3201      	adds	r2, #1
 800a5b8:	4296      	cmp	r6, r2
 800a5ba:	54a1      	strb	r1, [r4, r2]
 800a5bc:	dcfb      	bgt.n	800a5b6 <__sccl+0x56>
 800a5be:	1af2      	subs	r2, r6, r3
 800a5c0:	3a01      	subs	r2, #1
 800a5c2:	1c5d      	adds	r5, r3, #1
 800a5c4:	42b3      	cmp	r3, r6
 800a5c6:	bfa8      	it	ge
 800a5c8:	2200      	movge	r2, #0
 800a5ca:	18ab      	adds	r3, r5, r2
 800a5cc:	e7e1      	b.n	800a592 <__sccl+0x32>
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	e7da      	b.n	800a588 <__sccl+0x28>

0800a5d2 <__submore>:
 800a5d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a5da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5de:	4299      	cmp	r1, r3
 800a5e0:	d11d      	bne.n	800a61e <__submore+0x4c>
 800a5e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a5e6:	f7fd fedf 	bl	80083a8 <_malloc_r>
 800a5ea:	b918      	cbnz	r0, 800a5f4 <__submore+0x22>
 800a5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5f8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a5fa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a5fe:	6360      	str	r0, [r4, #52]	@ 0x34
 800a600:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a604:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a608:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800a60c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a610:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800a614:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a618:	6020      	str	r0, [r4, #0]
 800a61a:	2000      	movs	r0, #0
 800a61c:	e7e8      	b.n	800a5f0 <__submore+0x1e>
 800a61e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a620:	0077      	lsls	r7, r6, #1
 800a622:	463a      	mov	r2, r7
 800a624:	f000 fbc1 	bl	800adaa <_realloc_r>
 800a628:	4605      	mov	r5, r0
 800a62a:	2800      	cmp	r0, #0
 800a62c:	d0de      	beq.n	800a5ec <__submore+0x1a>
 800a62e:	eb00 0806 	add.w	r8, r0, r6
 800a632:	4601      	mov	r1, r0
 800a634:	4632      	mov	r2, r6
 800a636:	4640      	mov	r0, r8
 800a638:	f7fc ffd5 	bl	80075e6 <memcpy>
 800a63c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a640:	f8c4 8000 	str.w	r8, [r4]
 800a644:	e7e9      	b.n	800a61a <__submore+0x48>

0800a646 <memmove>:
 800a646:	4288      	cmp	r0, r1
 800a648:	b510      	push	{r4, lr}
 800a64a:	eb01 0402 	add.w	r4, r1, r2
 800a64e:	d902      	bls.n	800a656 <memmove+0x10>
 800a650:	4284      	cmp	r4, r0
 800a652:	4623      	mov	r3, r4
 800a654:	d807      	bhi.n	800a666 <memmove+0x20>
 800a656:	1e43      	subs	r3, r0, #1
 800a658:	42a1      	cmp	r1, r4
 800a65a:	d008      	beq.n	800a66e <memmove+0x28>
 800a65c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a660:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a664:	e7f8      	b.n	800a658 <memmove+0x12>
 800a666:	4402      	add	r2, r0
 800a668:	4601      	mov	r1, r0
 800a66a:	428a      	cmp	r2, r1
 800a66c:	d100      	bne.n	800a670 <memmove+0x2a>
 800a66e:	bd10      	pop	{r4, pc}
 800a670:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a674:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a678:	e7f7      	b.n	800a66a <memmove+0x24>
	...

0800a67c <_sbrk_r>:
 800a67c:	b538      	push	{r3, r4, r5, lr}
 800a67e:	4d06      	ldr	r5, [pc, #24]	@ (800a698 <_sbrk_r+0x1c>)
 800a680:	2300      	movs	r3, #0
 800a682:	4604      	mov	r4, r0
 800a684:	4608      	mov	r0, r1
 800a686:	602b      	str	r3, [r5, #0]
 800a688:	f7f8 f972 	bl	8002970 <_sbrk>
 800a68c:	1c43      	adds	r3, r0, #1
 800a68e:	d102      	bne.n	800a696 <_sbrk_r+0x1a>
 800a690:	682b      	ldr	r3, [r5, #0]
 800a692:	b103      	cbz	r3, 800a696 <_sbrk_r+0x1a>
 800a694:	6023      	str	r3, [r4, #0]
 800a696:	bd38      	pop	{r3, r4, r5, pc}
 800a698:	200026dc 	.word	0x200026dc
 800a69c:	00000000 	.word	0x00000000

0800a6a0 <nan>:
 800a6a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a6a8 <nan+0x8>
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop
 800a6a8:	00000000 	.word	0x00000000
 800a6ac:	7ff80000 	.word	0x7ff80000

0800a6b0 <__assert_func>:
 800a6b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6b2:	4614      	mov	r4, r2
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	4b09      	ldr	r3, [pc, #36]	@ (800a6dc <__assert_func+0x2c>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4605      	mov	r5, r0
 800a6bc:	68d8      	ldr	r0, [r3, #12]
 800a6be:	b14c      	cbz	r4, 800a6d4 <__assert_func+0x24>
 800a6c0:	4b07      	ldr	r3, [pc, #28]	@ (800a6e0 <__assert_func+0x30>)
 800a6c2:	9100      	str	r1, [sp, #0]
 800a6c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6c8:	4906      	ldr	r1, [pc, #24]	@ (800a6e4 <__assert_func+0x34>)
 800a6ca:	462b      	mov	r3, r5
 800a6cc:	f000 fc1a 	bl	800af04 <fiprintf>
 800a6d0:	f000 fc2a 	bl	800af28 <abort>
 800a6d4:	4b04      	ldr	r3, [pc, #16]	@ (800a6e8 <__assert_func+0x38>)
 800a6d6:	461c      	mov	r4, r3
 800a6d8:	e7f3      	b.n	800a6c2 <__assert_func+0x12>
 800a6da:	bf00      	nop
 800a6dc:	20000024 	.word	0x20000024
 800a6e0:	0800bad7 	.word	0x0800bad7
 800a6e4:	0800bae4 	.word	0x0800bae4
 800a6e8:	0800bb12 	.word	0x0800bb12

0800a6ec <_calloc_r>:
 800a6ec:	b570      	push	{r4, r5, r6, lr}
 800a6ee:	fba1 5402 	umull	r5, r4, r1, r2
 800a6f2:	b934      	cbnz	r4, 800a702 <_calloc_r+0x16>
 800a6f4:	4629      	mov	r1, r5
 800a6f6:	f7fd fe57 	bl	80083a8 <_malloc_r>
 800a6fa:	4606      	mov	r6, r0
 800a6fc:	b928      	cbnz	r0, 800a70a <_calloc_r+0x1e>
 800a6fe:	4630      	mov	r0, r6
 800a700:	bd70      	pop	{r4, r5, r6, pc}
 800a702:	220c      	movs	r2, #12
 800a704:	6002      	str	r2, [r0, #0]
 800a706:	2600      	movs	r6, #0
 800a708:	e7f9      	b.n	800a6fe <_calloc_r+0x12>
 800a70a:	462a      	mov	r2, r5
 800a70c:	4621      	mov	r1, r4
 800a70e:	f7fc fec5 	bl	800749c <memset>
 800a712:	e7f4      	b.n	800a6fe <_calloc_r+0x12>

0800a714 <rshift>:
 800a714:	6903      	ldr	r3, [r0, #16]
 800a716:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a71a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a71e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a722:	f100 0414 	add.w	r4, r0, #20
 800a726:	dd45      	ble.n	800a7b4 <rshift+0xa0>
 800a728:	f011 011f 	ands.w	r1, r1, #31
 800a72c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a730:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a734:	d10c      	bne.n	800a750 <rshift+0x3c>
 800a736:	f100 0710 	add.w	r7, r0, #16
 800a73a:	4629      	mov	r1, r5
 800a73c:	42b1      	cmp	r1, r6
 800a73e:	d334      	bcc.n	800a7aa <rshift+0x96>
 800a740:	1a9b      	subs	r3, r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	1eea      	subs	r2, r5, #3
 800a746:	4296      	cmp	r6, r2
 800a748:	bf38      	it	cc
 800a74a:	2300      	movcc	r3, #0
 800a74c:	4423      	add	r3, r4
 800a74e:	e015      	b.n	800a77c <rshift+0x68>
 800a750:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a754:	f1c1 0820 	rsb	r8, r1, #32
 800a758:	40cf      	lsrs	r7, r1
 800a75a:	f105 0e04 	add.w	lr, r5, #4
 800a75e:	46a1      	mov	r9, r4
 800a760:	4576      	cmp	r6, lr
 800a762:	46f4      	mov	ip, lr
 800a764:	d815      	bhi.n	800a792 <rshift+0x7e>
 800a766:	1a9a      	subs	r2, r3, r2
 800a768:	0092      	lsls	r2, r2, #2
 800a76a:	3a04      	subs	r2, #4
 800a76c:	3501      	adds	r5, #1
 800a76e:	42ae      	cmp	r6, r5
 800a770:	bf38      	it	cc
 800a772:	2200      	movcc	r2, #0
 800a774:	18a3      	adds	r3, r4, r2
 800a776:	50a7      	str	r7, [r4, r2]
 800a778:	b107      	cbz	r7, 800a77c <rshift+0x68>
 800a77a:	3304      	adds	r3, #4
 800a77c:	1b1a      	subs	r2, r3, r4
 800a77e:	42a3      	cmp	r3, r4
 800a780:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a784:	bf08      	it	eq
 800a786:	2300      	moveq	r3, #0
 800a788:	6102      	str	r2, [r0, #16]
 800a78a:	bf08      	it	eq
 800a78c:	6143      	streq	r3, [r0, #20]
 800a78e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a792:	f8dc c000 	ldr.w	ip, [ip]
 800a796:	fa0c fc08 	lsl.w	ip, ip, r8
 800a79a:	ea4c 0707 	orr.w	r7, ip, r7
 800a79e:	f849 7b04 	str.w	r7, [r9], #4
 800a7a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a7a6:	40cf      	lsrs	r7, r1
 800a7a8:	e7da      	b.n	800a760 <rshift+0x4c>
 800a7aa:	f851 cb04 	ldr.w	ip, [r1], #4
 800a7ae:	f847 cf04 	str.w	ip, [r7, #4]!
 800a7b2:	e7c3      	b.n	800a73c <rshift+0x28>
 800a7b4:	4623      	mov	r3, r4
 800a7b6:	e7e1      	b.n	800a77c <rshift+0x68>

0800a7b8 <__hexdig_fun>:
 800a7b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a7bc:	2b09      	cmp	r3, #9
 800a7be:	d802      	bhi.n	800a7c6 <__hexdig_fun+0xe>
 800a7c0:	3820      	subs	r0, #32
 800a7c2:	b2c0      	uxtb	r0, r0
 800a7c4:	4770      	bx	lr
 800a7c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a7ca:	2b05      	cmp	r3, #5
 800a7cc:	d801      	bhi.n	800a7d2 <__hexdig_fun+0x1a>
 800a7ce:	3847      	subs	r0, #71	@ 0x47
 800a7d0:	e7f7      	b.n	800a7c2 <__hexdig_fun+0xa>
 800a7d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a7d6:	2b05      	cmp	r3, #5
 800a7d8:	d801      	bhi.n	800a7de <__hexdig_fun+0x26>
 800a7da:	3827      	subs	r0, #39	@ 0x27
 800a7dc:	e7f1      	b.n	800a7c2 <__hexdig_fun+0xa>
 800a7de:	2000      	movs	r0, #0
 800a7e0:	4770      	bx	lr
	...

0800a7e4 <__gethex>:
 800a7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e8:	b085      	sub	sp, #20
 800a7ea:	468a      	mov	sl, r1
 800a7ec:	9302      	str	r3, [sp, #8]
 800a7ee:	680b      	ldr	r3, [r1, #0]
 800a7f0:	9001      	str	r0, [sp, #4]
 800a7f2:	4690      	mov	r8, r2
 800a7f4:	1c9c      	adds	r4, r3, #2
 800a7f6:	46a1      	mov	r9, r4
 800a7f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a7fc:	2830      	cmp	r0, #48	@ 0x30
 800a7fe:	d0fa      	beq.n	800a7f6 <__gethex+0x12>
 800a800:	eba9 0303 	sub.w	r3, r9, r3
 800a804:	f1a3 0b02 	sub.w	fp, r3, #2
 800a808:	f7ff ffd6 	bl	800a7b8 <__hexdig_fun>
 800a80c:	4605      	mov	r5, r0
 800a80e:	2800      	cmp	r0, #0
 800a810:	d168      	bne.n	800a8e4 <__gethex+0x100>
 800a812:	49a0      	ldr	r1, [pc, #640]	@ (800aa94 <__gethex+0x2b0>)
 800a814:	2201      	movs	r2, #1
 800a816:	4648      	mov	r0, r9
 800a818:	f7fc fe48 	bl	80074ac <strncmp>
 800a81c:	4607      	mov	r7, r0
 800a81e:	2800      	cmp	r0, #0
 800a820:	d167      	bne.n	800a8f2 <__gethex+0x10e>
 800a822:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a826:	4626      	mov	r6, r4
 800a828:	f7ff ffc6 	bl	800a7b8 <__hexdig_fun>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	d062      	beq.n	800a8f6 <__gethex+0x112>
 800a830:	4623      	mov	r3, r4
 800a832:	7818      	ldrb	r0, [r3, #0]
 800a834:	2830      	cmp	r0, #48	@ 0x30
 800a836:	4699      	mov	r9, r3
 800a838:	f103 0301 	add.w	r3, r3, #1
 800a83c:	d0f9      	beq.n	800a832 <__gethex+0x4e>
 800a83e:	f7ff ffbb 	bl	800a7b8 <__hexdig_fun>
 800a842:	fab0 f580 	clz	r5, r0
 800a846:	096d      	lsrs	r5, r5, #5
 800a848:	f04f 0b01 	mov.w	fp, #1
 800a84c:	464a      	mov	r2, r9
 800a84e:	4616      	mov	r6, r2
 800a850:	3201      	adds	r2, #1
 800a852:	7830      	ldrb	r0, [r6, #0]
 800a854:	f7ff ffb0 	bl	800a7b8 <__hexdig_fun>
 800a858:	2800      	cmp	r0, #0
 800a85a:	d1f8      	bne.n	800a84e <__gethex+0x6a>
 800a85c:	498d      	ldr	r1, [pc, #564]	@ (800aa94 <__gethex+0x2b0>)
 800a85e:	2201      	movs	r2, #1
 800a860:	4630      	mov	r0, r6
 800a862:	f7fc fe23 	bl	80074ac <strncmp>
 800a866:	2800      	cmp	r0, #0
 800a868:	d13f      	bne.n	800a8ea <__gethex+0x106>
 800a86a:	b944      	cbnz	r4, 800a87e <__gethex+0x9a>
 800a86c:	1c74      	adds	r4, r6, #1
 800a86e:	4622      	mov	r2, r4
 800a870:	4616      	mov	r6, r2
 800a872:	3201      	adds	r2, #1
 800a874:	7830      	ldrb	r0, [r6, #0]
 800a876:	f7ff ff9f 	bl	800a7b8 <__hexdig_fun>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d1f8      	bne.n	800a870 <__gethex+0x8c>
 800a87e:	1ba4      	subs	r4, r4, r6
 800a880:	00a7      	lsls	r7, r4, #2
 800a882:	7833      	ldrb	r3, [r6, #0]
 800a884:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a888:	2b50      	cmp	r3, #80	@ 0x50
 800a88a:	d13e      	bne.n	800a90a <__gethex+0x126>
 800a88c:	7873      	ldrb	r3, [r6, #1]
 800a88e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a890:	d033      	beq.n	800a8fa <__gethex+0x116>
 800a892:	2b2d      	cmp	r3, #45	@ 0x2d
 800a894:	d034      	beq.n	800a900 <__gethex+0x11c>
 800a896:	1c71      	adds	r1, r6, #1
 800a898:	2400      	movs	r4, #0
 800a89a:	7808      	ldrb	r0, [r1, #0]
 800a89c:	f7ff ff8c 	bl	800a7b8 <__hexdig_fun>
 800a8a0:	1e43      	subs	r3, r0, #1
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	2b18      	cmp	r3, #24
 800a8a6:	d830      	bhi.n	800a90a <__gethex+0x126>
 800a8a8:	f1a0 0210 	sub.w	r2, r0, #16
 800a8ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a8b0:	f7ff ff82 	bl	800a7b8 <__hexdig_fun>
 800a8b4:	f100 3cff 	add.w	ip, r0, #4294967295
 800a8b8:	fa5f fc8c 	uxtb.w	ip, ip
 800a8bc:	f1bc 0f18 	cmp.w	ip, #24
 800a8c0:	f04f 030a 	mov.w	r3, #10
 800a8c4:	d91e      	bls.n	800a904 <__gethex+0x120>
 800a8c6:	b104      	cbz	r4, 800a8ca <__gethex+0xe6>
 800a8c8:	4252      	negs	r2, r2
 800a8ca:	4417      	add	r7, r2
 800a8cc:	f8ca 1000 	str.w	r1, [sl]
 800a8d0:	b1ed      	cbz	r5, 800a90e <__gethex+0x12a>
 800a8d2:	f1bb 0f00 	cmp.w	fp, #0
 800a8d6:	bf0c      	ite	eq
 800a8d8:	2506      	moveq	r5, #6
 800a8da:	2500      	movne	r5, #0
 800a8dc:	4628      	mov	r0, r5
 800a8de:	b005      	add	sp, #20
 800a8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e4:	2500      	movs	r5, #0
 800a8e6:	462c      	mov	r4, r5
 800a8e8:	e7b0      	b.n	800a84c <__gethex+0x68>
 800a8ea:	2c00      	cmp	r4, #0
 800a8ec:	d1c7      	bne.n	800a87e <__gethex+0x9a>
 800a8ee:	4627      	mov	r7, r4
 800a8f0:	e7c7      	b.n	800a882 <__gethex+0x9e>
 800a8f2:	464e      	mov	r6, r9
 800a8f4:	462f      	mov	r7, r5
 800a8f6:	2501      	movs	r5, #1
 800a8f8:	e7c3      	b.n	800a882 <__gethex+0x9e>
 800a8fa:	2400      	movs	r4, #0
 800a8fc:	1cb1      	adds	r1, r6, #2
 800a8fe:	e7cc      	b.n	800a89a <__gethex+0xb6>
 800a900:	2401      	movs	r4, #1
 800a902:	e7fb      	b.n	800a8fc <__gethex+0x118>
 800a904:	fb03 0002 	mla	r0, r3, r2, r0
 800a908:	e7ce      	b.n	800a8a8 <__gethex+0xc4>
 800a90a:	4631      	mov	r1, r6
 800a90c:	e7de      	b.n	800a8cc <__gethex+0xe8>
 800a90e:	eba6 0309 	sub.w	r3, r6, r9
 800a912:	3b01      	subs	r3, #1
 800a914:	4629      	mov	r1, r5
 800a916:	2b07      	cmp	r3, #7
 800a918:	dc0a      	bgt.n	800a930 <__gethex+0x14c>
 800a91a:	9801      	ldr	r0, [sp, #4]
 800a91c:	f7fd fdd0 	bl	80084c0 <_Balloc>
 800a920:	4604      	mov	r4, r0
 800a922:	b940      	cbnz	r0, 800a936 <__gethex+0x152>
 800a924:	4b5c      	ldr	r3, [pc, #368]	@ (800aa98 <__gethex+0x2b4>)
 800a926:	4602      	mov	r2, r0
 800a928:	21e4      	movs	r1, #228	@ 0xe4
 800a92a:	485c      	ldr	r0, [pc, #368]	@ (800aa9c <__gethex+0x2b8>)
 800a92c:	f7ff fec0 	bl	800a6b0 <__assert_func>
 800a930:	3101      	adds	r1, #1
 800a932:	105b      	asrs	r3, r3, #1
 800a934:	e7ef      	b.n	800a916 <__gethex+0x132>
 800a936:	f100 0a14 	add.w	sl, r0, #20
 800a93a:	2300      	movs	r3, #0
 800a93c:	4655      	mov	r5, sl
 800a93e:	469b      	mov	fp, r3
 800a940:	45b1      	cmp	r9, r6
 800a942:	d337      	bcc.n	800a9b4 <__gethex+0x1d0>
 800a944:	f845 bb04 	str.w	fp, [r5], #4
 800a948:	eba5 050a 	sub.w	r5, r5, sl
 800a94c:	10ad      	asrs	r5, r5, #2
 800a94e:	6125      	str	r5, [r4, #16]
 800a950:	4658      	mov	r0, fp
 800a952:	f7fd fea7 	bl	80086a4 <__hi0bits>
 800a956:	016d      	lsls	r5, r5, #5
 800a958:	f8d8 6000 	ldr.w	r6, [r8]
 800a95c:	1a2d      	subs	r5, r5, r0
 800a95e:	42b5      	cmp	r5, r6
 800a960:	dd54      	ble.n	800aa0c <__gethex+0x228>
 800a962:	1bad      	subs	r5, r5, r6
 800a964:	4629      	mov	r1, r5
 800a966:	4620      	mov	r0, r4
 800a968:	f7fe fa33 	bl	8008dd2 <__any_on>
 800a96c:	4681      	mov	r9, r0
 800a96e:	b178      	cbz	r0, 800a990 <__gethex+0x1ac>
 800a970:	1e6b      	subs	r3, r5, #1
 800a972:	1159      	asrs	r1, r3, #5
 800a974:	f003 021f 	and.w	r2, r3, #31
 800a978:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a97c:	f04f 0901 	mov.w	r9, #1
 800a980:	fa09 f202 	lsl.w	r2, r9, r2
 800a984:	420a      	tst	r2, r1
 800a986:	d003      	beq.n	800a990 <__gethex+0x1ac>
 800a988:	454b      	cmp	r3, r9
 800a98a:	dc36      	bgt.n	800a9fa <__gethex+0x216>
 800a98c:	f04f 0902 	mov.w	r9, #2
 800a990:	4629      	mov	r1, r5
 800a992:	4620      	mov	r0, r4
 800a994:	f7ff febe 	bl	800a714 <rshift>
 800a998:	442f      	add	r7, r5
 800a99a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a99e:	42bb      	cmp	r3, r7
 800a9a0:	da42      	bge.n	800aa28 <__gethex+0x244>
 800a9a2:	9801      	ldr	r0, [sp, #4]
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	f7fd fdcb 	bl	8008540 <_Bfree>
 800a9aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	6013      	str	r3, [r2, #0]
 800a9b0:	25a3      	movs	r5, #163	@ 0xa3
 800a9b2:	e793      	b.n	800a8dc <__gethex+0xf8>
 800a9b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a9b8:	2a2e      	cmp	r2, #46	@ 0x2e
 800a9ba:	d012      	beq.n	800a9e2 <__gethex+0x1fe>
 800a9bc:	2b20      	cmp	r3, #32
 800a9be:	d104      	bne.n	800a9ca <__gethex+0x1e6>
 800a9c0:	f845 bb04 	str.w	fp, [r5], #4
 800a9c4:	f04f 0b00 	mov.w	fp, #0
 800a9c8:	465b      	mov	r3, fp
 800a9ca:	7830      	ldrb	r0, [r6, #0]
 800a9cc:	9303      	str	r3, [sp, #12]
 800a9ce:	f7ff fef3 	bl	800a7b8 <__hexdig_fun>
 800a9d2:	9b03      	ldr	r3, [sp, #12]
 800a9d4:	f000 000f 	and.w	r0, r0, #15
 800a9d8:	4098      	lsls	r0, r3
 800a9da:	ea4b 0b00 	orr.w	fp, fp, r0
 800a9de:	3304      	adds	r3, #4
 800a9e0:	e7ae      	b.n	800a940 <__gethex+0x15c>
 800a9e2:	45b1      	cmp	r9, r6
 800a9e4:	d8ea      	bhi.n	800a9bc <__gethex+0x1d8>
 800a9e6:	492b      	ldr	r1, [pc, #172]	@ (800aa94 <__gethex+0x2b0>)
 800a9e8:	9303      	str	r3, [sp, #12]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	f7fc fd5d 	bl	80074ac <strncmp>
 800a9f2:	9b03      	ldr	r3, [sp, #12]
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d1e1      	bne.n	800a9bc <__gethex+0x1d8>
 800a9f8:	e7a2      	b.n	800a940 <__gethex+0x15c>
 800a9fa:	1ea9      	subs	r1, r5, #2
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	f7fe f9e8 	bl	8008dd2 <__any_on>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	d0c2      	beq.n	800a98c <__gethex+0x1a8>
 800aa06:	f04f 0903 	mov.w	r9, #3
 800aa0a:	e7c1      	b.n	800a990 <__gethex+0x1ac>
 800aa0c:	da09      	bge.n	800aa22 <__gethex+0x23e>
 800aa0e:	1b75      	subs	r5, r6, r5
 800aa10:	4621      	mov	r1, r4
 800aa12:	9801      	ldr	r0, [sp, #4]
 800aa14:	462a      	mov	r2, r5
 800aa16:	f7fd ffa3 	bl	8008960 <__lshift>
 800aa1a:	1b7f      	subs	r7, r7, r5
 800aa1c:	4604      	mov	r4, r0
 800aa1e:	f100 0a14 	add.w	sl, r0, #20
 800aa22:	f04f 0900 	mov.w	r9, #0
 800aa26:	e7b8      	b.n	800a99a <__gethex+0x1b6>
 800aa28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aa2c:	42bd      	cmp	r5, r7
 800aa2e:	dd6f      	ble.n	800ab10 <__gethex+0x32c>
 800aa30:	1bed      	subs	r5, r5, r7
 800aa32:	42ae      	cmp	r6, r5
 800aa34:	dc34      	bgt.n	800aaa0 <__gethex+0x2bc>
 800aa36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d022      	beq.n	800aa84 <__gethex+0x2a0>
 800aa3e:	2b03      	cmp	r3, #3
 800aa40:	d024      	beq.n	800aa8c <__gethex+0x2a8>
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d115      	bne.n	800aa72 <__gethex+0x28e>
 800aa46:	42ae      	cmp	r6, r5
 800aa48:	d113      	bne.n	800aa72 <__gethex+0x28e>
 800aa4a:	2e01      	cmp	r6, #1
 800aa4c:	d10b      	bne.n	800aa66 <__gethex+0x282>
 800aa4e:	9a02      	ldr	r2, [sp, #8]
 800aa50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aa54:	6013      	str	r3, [r2, #0]
 800aa56:	2301      	movs	r3, #1
 800aa58:	6123      	str	r3, [r4, #16]
 800aa5a:	f8ca 3000 	str.w	r3, [sl]
 800aa5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa60:	2562      	movs	r5, #98	@ 0x62
 800aa62:	601c      	str	r4, [r3, #0]
 800aa64:	e73a      	b.n	800a8dc <__gethex+0xf8>
 800aa66:	1e71      	subs	r1, r6, #1
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f7fe f9b2 	bl	8008dd2 <__any_on>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d1ed      	bne.n	800aa4e <__gethex+0x26a>
 800aa72:	9801      	ldr	r0, [sp, #4]
 800aa74:	4621      	mov	r1, r4
 800aa76:	f7fd fd63 	bl	8008540 <_Bfree>
 800aa7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	6013      	str	r3, [r2, #0]
 800aa80:	2550      	movs	r5, #80	@ 0x50
 800aa82:	e72b      	b.n	800a8dc <__gethex+0xf8>
 800aa84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d1f3      	bne.n	800aa72 <__gethex+0x28e>
 800aa8a:	e7e0      	b.n	800aa4e <__gethex+0x26a>
 800aa8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1dd      	bne.n	800aa4e <__gethex+0x26a>
 800aa92:	e7ee      	b.n	800aa72 <__gethex+0x28e>
 800aa94:	0800baa1 	.word	0x0800baa1
 800aa98:	0800ba37 	.word	0x0800ba37
 800aa9c:	0800bb13 	.word	0x0800bb13
 800aaa0:	1e6f      	subs	r7, r5, #1
 800aaa2:	f1b9 0f00 	cmp.w	r9, #0
 800aaa6:	d130      	bne.n	800ab0a <__gethex+0x326>
 800aaa8:	b127      	cbz	r7, 800aab4 <__gethex+0x2d0>
 800aaaa:	4639      	mov	r1, r7
 800aaac:	4620      	mov	r0, r4
 800aaae:	f7fe f990 	bl	8008dd2 <__any_on>
 800aab2:	4681      	mov	r9, r0
 800aab4:	117a      	asrs	r2, r7, #5
 800aab6:	2301      	movs	r3, #1
 800aab8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aabc:	f007 071f 	and.w	r7, r7, #31
 800aac0:	40bb      	lsls	r3, r7
 800aac2:	4213      	tst	r3, r2
 800aac4:	4629      	mov	r1, r5
 800aac6:	4620      	mov	r0, r4
 800aac8:	bf18      	it	ne
 800aaca:	f049 0902 	orrne.w	r9, r9, #2
 800aace:	f7ff fe21 	bl	800a714 <rshift>
 800aad2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800aad6:	1b76      	subs	r6, r6, r5
 800aad8:	2502      	movs	r5, #2
 800aada:	f1b9 0f00 	cmp.w	r9, #0
 800aade:	d047      	beq.n	800ab70 <__gethex+0x38c>
 800aae0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d015      	beq.n	800ab14 <__gethex+0x330>
 800aae8:	2b03      	cmp	r3, #3
 800aaea:	d017      	beq.n	800ab1c <__gethex+0x338>
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d109      	bne.n	800ab04 <__gethex+0x320>
 800aaf0:	f019 0f02 	tst.w	r9, #2
 800aaf4:	d006      	beq.n	800ab04 <__gethex+0x320>
 800aaf6:	f8da 3000 	ldr.w	r3, [sl]
 800aafa:	ea49 0903 	orr.w	r9, r9, r3
 800aafe:	f019 0f01 	tst.w	r9, #1
 800ab02:	d10e      	bne.n	800ab22 <__gethex+0x33e>
 800ab04:	f045 0510 	orr.w	r5, r5, #16
 800ab08:	e032      	b.n	800ab70 <__gethex+0x38c>
 800ab0a:	f04f 0901 	mov.w	r9, #1
 800ab0e:	e7d1      	b.n	800aab4 <__gethex+0x2d0>
 800ab10:	2501      	movs	r5, #1
 800ab12:	e7e2      	b.n	800aada <__gethex+0x2f6>
 800ab14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab16:	f1c3 0301 	rsb	r3, r3, #1
 800ab1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d0f0      	beq.n	800ab04 <__gethex+0x320>
 800ab22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ab26:	f104 0314 	add.w	r3, r4, #20
 800ab2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ab2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ab32:	f04f 0c00 	mov.w	ip, #0
 800ab36:	4618      	mov	r0, r3
 800ab38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ab40:	d01b      	beq.n	800ab7a <__gethex+0x396>
 800ab42:	3201      	adds	r2, #1
 800ab44:	6002      	str	r2, [r0, #0]
 800ab46:	2d02      	cmp	r5, #2
 800ab48:	f104 0314 	add.w	r3, r4, #20
 800ab4c:	d13c      	bne.n	800abc8 <__gethex+0x3e4>
 800ab4e:	f8d8 2000 	ldr.w	r2, [r8]
 800ab52:	3a01      	subs	r2, #1
 800ab54:	42b2      	cmp	r2, r6
 800ab56:	d109      	bne.n	800ab6c <__gethex+0x388>
 800ab58:	1171      	asrs	r1, r6, #5
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab60:	f006 061f 	and.w	r6, r6, #31
 800ab64:	fa02 f606 	lsl.w	r6, r2, r6
 800ab68:	421e      	tst	r6, r3
 800ab6a:	d13a      	bne.n	800abe2 <__gethex+0x3fe>
 800ab6c:	f045 0520 	orr.w	r5, r5, #32
 800ab70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab72:	601c      	str	r4, [r3, #0]
 800ab74:	9b02      	ldr	r3, [sp, #8]
 800ab76:	601f      	str	r7, [r3, #0]
 800ab78:	e6b0      	b.n	800a8dc <__gethex+0xf8>
 800ab7a:	4299      	cmp	r1, r3
 800ab7c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab80:	d8d9      	bhi.n	800ab36 <__gethex+0x352>
 800ab82:	68a3      	ldr	r3, [r4, #8]
 800ab84:	459b      	cmp	fp, r3
 800ab86:	db17      	blt.n	800abb8 <__gethex+0x3d4>
 800ab88:	6861      	ldr	r1, [r4, #4]
 800ab8a:	9801      	ldr	r0, [sp, #4]
 800ab8c:	3101      	adds	r1, #1
 800ab8e:	f7fd fc97 	bl	80084c0 <_Balloc>
 800ab92:	4681      	mov	r9, r0
 800ab94:	b918      	cbnz	r0, 800ab9e <__gethex+0x3ba>
 800ab96:	4b1a      	ldr	r3, [pc, #104]	@ (800ac00 <__gethex+0x41c>)
 800ab98:	4602      	mov	r2, r0
 800ab9a:	2184      	movs	r1, #132	@ 0x84
 800ab9c:	e6c5      	b.n	800a92a <__gethex+0x146>
 800ab9e:	6922      	ldr	r2, [r4, #16]
 800aba0:	3202      	adds	r2, #2
 800aba2:	f104 010c 	add.w	r1, r4, #12
 800aba6:	0092      	lsls	r2, r2, #2
 800aba8:	300c      	adds	r0, #12
 800abaa:	f7fc fd1c 	bl	80075e6 <memcpy>
 800abae:	4621      	mov	r1, r4
 800abb0:	9801      	ldr	r0, [sp, #4]
 800abb2:	f7fd fcc5 	bl	8008540 <_Bfree>
 800abb6:	464c      	mov	r4, r9
 800abb8:	6923      	ldr	r3, [r4, #16]
 800abba:	1c5a      	adds	r2, r3, #1
 800abbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800abc0:	6122      	str	r2, [r4, #16]
 800abc2:	2201      	movs	r2, #1
 800abc4:	615a      	str	r2, [r3, #20]
 800abc6:	e7be      	b.n	800ab46 <__gethex+0x362>
 800abc8:	6922      	ldr	r2, [r4, #16]
 800abca:	455a      	cmp	r2, fp
 800abcc:	dd0b      	ble.n	800abe6 <__gethex+0x402>
 800abce:	2101      	movs	r1, #1
 800abd0:	4620      	mov	r0, r4
 800abd2:	f7ff fd9f 	bl	800a714 <rshift>
 800abd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abda:	3701      	adds	r7, #1
 800abdc:	42bb      	cmp	r3, r7
 800abde:	f6ff aee0 	blt.w	800a9a2 <__gethex+0x1be>
 800abe2:	2501      	movs	r5, #1
 800abe4:	e7c2      	b.n	800ab6c <__gethex+0x388>
 800abe6:	f016 061f 	ands.w	r6, r6, #31
 800abea:	d0fa      	beq.n	800abe2 <__gethex+0x3fe>
 800abec:	4453      	add	r3, sl
 800abee:	f1c6 0620 	rsb	r6, r6, #32
 800abf2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800abf6:	f7fd fd55 	bl	80086a4 <__hi0bits>
 800abfa:	42b0      	cmp	r0, r6
 800abfc:	dbe7      	blt.n	800abce <__gethex+0x3ea>
 800abfe:	e7f0      	b.n	800abe2 <__gethex+0x3fe>
 800ac00:	0800ba37 	.word	0x0800ba37

0800ac04 <L_shift>:
 800ac04:	f1c2 0208 	rsb	r2, r2, #8
 800ac08:	0092      	lsls	r2, r2, #2
 800ac0a:	b570      	push	{r4, r5, r6, lr}
 800ac0c:	f1c2 0620 	rsb	r6, r2, #32
 800ac10:	6843      	ldr	r3, [r0, #4]
 800ac12:	6804      	ldr	r4, [r0, #0]
 800ac14:	fa03 f506 	lsl.w	r5, r3, r6
 800ac18:	432c      	orrs	r4, r5
 800ac1a:	40d3      	lsrs	r3, r2
 800ac1c:	6004      	str	r4, [r0, #0]
 800ac1e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ac22:	4288      	cmp	r0, r1
 800ac24:	d3f4      	bcc.n	800ac10 <L_shift+0xc>
 800ac26:	bd70      	pop	{r4, r5, r6, pc}

0800ac28 <__match>:
 800ac28:	b530      	push	{r4, r5, lr}
 800ac2a:	6803      	ldr	r3, [r0, #0]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac32:	b914      	cbnz	r4, 800ac3a <__match+0x12>
 800ac34:	6003      	str	r3, [r0, #0]
 800ac36:	2001      	movs	r0, #1
 800ac38:	bd30      	pop	{r4, r5, pc}
 800ac3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ac42:	2d19      	cmp	r5, #25
 800ac44:	bf98      	it	ls
 800ac46:	3220      	addls	r2, #32
 800ac48:	42a2      	cmp	r2, r4
 800ac4a:	d0f0      	beq.n	800ac2e <__match+0x6>
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	e7f3      	b.n	800ac38 <__match+0x10>

0800ac50 <__hexnan>:
 800ac50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac54:	680b      	ldr	r3, [r1, #0]
 800ac56:	6801      	ldr	r1, [r0, #0]
 800ac58:	115e      	asrs	r6, r3, #5
 800ac5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ac5e:	f013 031f 	ands.w	r3, r3, #31
 800ac62:	b087      	sub	sp, #28
 800ac64:	bf18      	it	ne
 800ac66:	3604      	addne	r6, #4
 800ac68:	2500      	movs	r5, #0
 800ac6a:	1f37      	subs	r7, r6, #4
 800ac6c:	4682      	mov	sl, r0
 800ac6e:	4690      	mov	r8, r2
 800ac70:	9301      	str	r3, [sp, #4]
 800ac72:	f846 5c04 	str.w	r5, [r6, #-4]
 800ac76:	46b9      	mov	r9, r7
 800ac78:	463c      	mov	r4, r7
 800ac7a:	9502      	str	r5, [sp, #8]
 800ac7c:	46ab      	mov	fp, r5
 800ac7e:	784a      	ldrb	r2, [r1, #1]
 800ac80:	1c4b      	adds	r3, r1, #1
 800ac82:	9303      	str	r3, [sp, #12]
 800ac84:	b342      	cbz	r2, 800acd8 <__hexnan+0x88>
 800ac86:	4610      	mov	r0, r2
 800ac88:	9105      	str	r1, [sp, #20]
 800ac8a:	9204      	str	r2, [sp, #16]
 800ac8c:	f7ff fd94 	bl	800a7b8 <__hexdig_fun>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	d151      	bne.n	800ad38 <__hexnan+0xe8>
 800ac94:	9a04      	ldr	r2, [sp, #16]
 800ac96:	9905      	ldr	r1, [sp, #20]
 800ac98:	2a20      	cmp	r2, #32
 800ac9a:	d818      	bhi.n	800acce <__hexnan+0x7e>
 800ac9c:	9b02      	ldr	r3, [sp, #8]
 800ac9e:	459b      	cmp	fp, r3
 800aca0:	dd13      	ble.n	800acca <__hexnan+0x7a>
 800aca2:	454c      	cmp	r4, r9
 800aca4:	d206      	bcs.n	800acb4 <__hexnan+0x64>
 800aca6:	2d07      	cmp	r5, #7
 800aca8:	dc04      	bgt.n	800acb4 <__hexnan+0x64>
 800acaa:	462a      	mov	r2, r5
 800acac:	4649      	mov	r1, r9
 800acae:	4620      	mov	r0, r4
 800acb0:	f7ff ffa8 	bl	800ac04 <L_shift>
 800acb4:	4544      	cmp	r4, r8
 800acb6:	d952      	bls.n	800ad5e <__hexnan+0x10e>
 800acb8:	2300      	movs	r3, #0
 800acba:	f1a4 0904 	sub.w	r9, r4, #4
 800acbe:	f844 3c04 	str.w	r3, [r4, #-4]
 800acc2:	f8cd b008 	str.w	fp, [sp, #8]
 800acc6:	464c      	mov	r4, r9
 800acc8:	461d      	mov	r5, r3
 800acca:	9903      	ldr	r1, [sp, #12]
 800accc:	e7d7      	b.n	800ac7e <__hexnan+0x2e>
 800acce:	2a29      	cmp	r2, #41	@ 0x29
 800acd0:	d157      	bne.n	800ad82 <__hexnan+0x132>
 800acd2:	3102      	adds	r1, #2
 800acd4:	f8ca 1000 	str.w	r1, [sl]
 800acd8:	f1bb 0f00 	cmp.w	fp, #0
 800acdc:	d051      	beq.n	800ad82 <__hexnan+0x132>
 800acde:	454c      	cmp	r4, r9
 800ace0:	d206      	bcs.n	800acf0 <__hexnan+0xa0>
 800ace2:	2d07      	cmp	r5, #7
 800ace4:	dc04      	bgt.n	800acf0 <__hexnan+0xa0>
 800ace6:	462a      	mov	r2, r5
 800ace8:	4649      	mov	r1, r9
 800acea:	4620      	mov	r0, r4
 800acec:	f7ff ff8a 	bl	800ac04 <L_shift>
 800acf0:	4544      	cmp	r4, r8
 800acf2:	d936      	bls.n	800ad62 <__hexnan+0x112>
 800acf4:	f1a8 0204 	sub.w	r2, r8, #4
 800acf8:	4623      	mov	r3, r4
 800acfa:	f853 1b04 	ldr.w	r1, [r3], #4
 800acfe:	f842 1f04 	str.w	r1, [r2, #4]!
 800ad02:	429f      	cmp	r7, r3
 800ad04:	d2f9      	bcs.n	800acfa <__hexnan+0xaa>
 800ad06:	1b3b      	subs	r3, r7, r4
 800ad08:	f023 0303 	bic.w	r3, r3, #3
 800ad0c:	3304      	adds	r3, #4
 800ad0e:	3401      	adds	r4, #1
 800ad10:	3e03      	subs	r6, #3
 800ad12:	42b4      	cmp	r4, r6
 800ad14:	bf88      	it	hi
 800ad16:	2304      	movhi	r3, #4
 800ad18:	4443      	add	r3, r8
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f843 2b04 	str.w	r2, [r3], #4
 800ad20:	429f      	cmp	r7, r3
 800ad22:	d2fb      	bcs.n	800ad1c <__hexnan+0xcc>
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	b91b      	cbnz	r3, 800ad30 <__hexnan+0xe0>
 800ad28:	4547      	cmp	r7, r8
 800ad2a:	d128      	bne.n	800ad7e <__hexnan+0x12e>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	603b      	str	r3, [r7, #0]
 800ad30:	2005      	movs	r0, #5
 800ad32:	b007      	add	sp, #28
 800ad34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad38:	3501      	adds	r5, #1
 800ad3a:	2d08      	cmp	r5, #8
 800ad3c:	f10b 0b01 	add.w	fp, fp, #1
 800ad40:	dd06      	ble.n	800ad50 <__hexnan+0x100>
 800ad42:	4544      	cmp	r4, r8
 800ad44:	d9c1      	bls.n	800acca <__hexnan+0x7a>
 800ad46:	2300      	movs	r3, #0
 800ad48:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad4c:	2501      	movs	r5, #1
 800ad4e:	3c04      	subs	r4, #4
 800ad50:	6822      	ldr	r2, [r4, #0]
 800ad52:	f000 000f 	and.w	r0, r0, #15
 800ad56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ad5a:	6020      	str	r0, [r4, #0]
 800ad5c:	e7b5      	b.n	800acca <__hexnan+0x7a>
 800ad5e:	2508      	movs	r5, #8
 800ad60:	e7b3      	b.n	800acca <__hexnan+0x7a>
 800ad62:	9b01      	ldr	r3, [sp, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d0dd      	beq.n	800ad24 <__hexnan+0xd4>
 800ad68:	f1c3 0320 	rsb	r3, r3, #32
 800ad6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad70:	40da      	lsrs	r2, r3
 800ad72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ad76:	4013      	ands	r3, r2
 800ad78:	f846 3c04 	str.w	r3, [r6, #-4]
 800ad7c:	e7d2      	b.n	800ad24 <__hexnan+0xd4>
 800ad7e:	3f04      	subs	r7, #4
 800ad80:	e7d0      	b.n	800ad24 <__hexnan+0xd4>
 800ad82:	2004      	movs	r0, #4
 800ad84:	e7d5      	b.n	800ad32 <__hexnan+0xe2>

0800ad86 <__ascii_mbtowc>:
 800ad86:	b082      	sub	sp, #8
 800ad88:	b901      	cbnz	r1, 800ad8c <__ascii_mbtowc+0x6>
 800ad8a:	a901      	add	r1, sp, #4
 800ad8c:	b142      	cbz	r2, 800ada0 <__ascii_mbtowc+0x1a>
 800ad8e:	b14b      	cbz	r3, 800ada4 <__ascii_mbtowc+0x1e>
 800ad90:	7813      	ldrb	r3, [r2, #0]
 800ad92:	600b      	str	r3, [r1, #0]
 800ad94:	7812      	ldrb	r2, [r2, #0]
 800ad96:	1e10      	subs	r0, r2, #0
 800ad98:	bf18      	it	ne
 800ad9a:	2001      	movne	r0, #1
 800ad9c:	b002      	add	sp, #8
 800ad9e:	4770      	bx	lr
 800ada0:	4610      	mov	r0, r2
 800ada2:	e7fb      	b.n	800ad9c <__ascii_mbtowc+0x16>
 800ada4:	f06f 0001 	mvn.w	r0, #1
 800ada8:	e7f8      	b.n	800ad9c <__ascii_mbtowc+0x16>

0800adaa <_realloc_r>:
 800adaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adae:	4607      	mov	r7, r0
 800adb0:	4614      	mov	r4, r2
 800adb2:	460d      	mov	r5, r1
 800adb4:	b921      	cbnz	r1, 800adc0 <_realloc_r+0x16>
 800adb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adba:	4611      	mov	r1, r2
 800adbc:	f7fd baf4 	b.w	80083a8 <_malloc_r>
 800adc0:	b92a      	cbnz	r2, 800adce <_realloc_r+0x24>
 800adc2:	f7fd fa7d 	bl	80082c0 <_free_r>
 800adc6:	4625      	mov	r5, r4
 800adc8:	4628      	mov	r0, r5
 800adca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adce:	f000 f8b2 	bl	800af36 <_malloc_usable_size_r>
 800add2:	4284      	cmp	r4, r0
 800add4:	4606      	mov	r6, r0
 800add6:	d802      	bhi.n	800adde <_realloc_r+0x34>
 800add8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800addc:	d8f4      	bhi.n	800adc8 <_realloc_r+0x1e>
 800adde:	4621      	mov	r1, r4
 800ade0:	4638      	mov	r0, r7
 800ade2:	f7fd fae1 	bl	80083a8 <_malloc_r>
 800ade6:	4680      	mov	r8, r0
 800ade8:	b908      	cbnz	r0, 800adee <_realloc_r+0x44>
 800adea:	4645      	mov	r5, r8
 800adec:	e7ec      	b.n	800adc8 <_realloc_r+0x1e>
 800adee:	42b4      	cmp	r4, r6
 800adf0:	4622      	mov	r2, r4
 800adf2:	4629      	mov	r1, r5
 800adf4:	bf28      	it	cs
 800adf6:	4632      	movcs	r2, r6
 800adf8:	f7fc fbf5 	bl	80075e6 <memcpy>
 800adfc:	4629      	mov	r1, r5
 800adfe:	4638      	mov	r0, r7
 800ae00:	f7fd fa5e 	bl	80082c0 <_free_r>
 800ae04:	e7f1      	b.n	800adea <_realloc_r+0x40>
	...

0800ae08 <_strtoul_l.isra.0>:
 800ae08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae0c:	4e34      	ldr	r6, [pc, #208]	@ (800aee0 <_strtoul_l.isra.0+0xd8>)
 800ae0e:	4686      	mov	lr, r0
 800ae10:	460d      	mov	r5, r1
 800ae12:	4628      	mov	r0, r5
 800ae14:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae18:	5d37      	ldrb	r7, [r6, r4]
 800ae1a:	f017 0708 	ands.w	r7, r7, #8
 800ae1e:	d1f8      	bne.n	800ae12 <_strtoul_l.isra.0+0xa>
 800ae20:	2c2d      	cmp	r4, #45	@ 0x2d
 800ae22:	d110      	bne.n	800ae46 <_strtoul_l.isra.0+0x3e>
 800ae24:	782c      	ldrb	r4, [r5, #0]
 800ae26:	2701      	movs	r7, #1
 800ae28:	1c85      	adds	r5, r0, #2
 800ae2a:	f033 0010 	bics.w	r0, r3, #16
 800ae2e:	d115      	bne.n	800ae5c <_strtoul_l.isra.0+0x54>
 800ae30:	2c30      	cmp	r4, #48	@ 0x30
 800ae32:	d10d      	bne.n	800ae50 <_strtoul_l.isra.0+0x48>
 800ae34:	7828      	ldrb	r0, [r5, #0]
 800ae36:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ae3a:	2858      	cmp	r0, #88	@ 0x58
 800ae3c:	d108      	bne.n	800ae50 <_strtoul_l.isra.0+0x48>
 800ae3e:	786c      	ldrb	r4, [r5, #1]
 800ae40:	3502      	adds	r5, #2
 800ae42:	2310      	movs	r3, #16
 800ae44:	e00a      	b.n	800ae5c <_strtoul_l.isra.0+0x54>
 800ae46:	2c2b      	cmp	r4, #43	@ 0x2b
 800ae48:	bf04      	itt	eq
 800ae4a:	782c      	ldrbeq	r4, [r5, #0]
 800ae4c:	1c85      	addeq	r5, r0, #2
 800ae4e:	e7ec      	b.n	800ae2a <_strtoul_l.isra.0+0x22>
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1f6      	bne.n	800ae42 <_strtoul_l.isra.0+0x3a>
 800ae54:	2c30      	cmp	r4, #48	@ 0x30
 800ae56:	bf14      	ite	ne
 800ae58:	230a      	movne	r3, #10
 800ae5a:	2308      	moveq	r3, #8
 800ae5c:	f04f 38ff 	mov.w	r8, #4294967295
 800ae60:	2600      	movs	r6, #0
 800ae62:	fbb8 f8f3 	udiv	r8, r8, r3
 800ae66:	fb03 f908 	mul.w	r9, r3, r8
 800ae6a:	ea6f 0909 	mvn.w	r9, r9
 800ae6e:	4630      	mov	r0, r6
 800ae70:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ae74:	f1bc 0f09 	cmp.w	ip, #9
 800ae78:	d810      	bhi.n	800ae9c <_strtoul_l.isra.0+0x94>
 800ae7a:	4664      	mov	r4, ip
 800ae7c:	42a3      	cmp	r3, r4
 800ae7e:	dd1e      	ble.n	800aebe <_strtoul_l.isra.0+0xb6>
 800ae80:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ae84:	d007      	beq.n	800ae96 <_strtoul_l.isra.0+0x8e>
 800ae86:	4580      	cmp	r8, r0
 800ae88:	d316      	bcc.n	800aeb8 <_strtoul_l.isra.0+0xb0>
 800ae8a:	d101      	bne.n	800ae90 <_strtoul_l.isra.0+0x88>
 800ae8c:	45a1      	cmp	r9, r4
 800ae8e:	db13      	blt.n	800aeb8 <_strtoul_l.isra.0+0xb0>
 800ae90:	fb00 4003 	mla	r0, r0, r3, r4
 800ae94:	2601      	movs	r6, #1
 800ae96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae9a:	e7e9      	b.n	800ae70 <_strtoul_l.isra.0+0x68>
 800ae9c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800aea0:	f1bc 0f19 	cmp.w	ip, #25
 800aea4:	d801      	bhi.n	800aeaa <_strtoul_l.isra.0+0xa2>
 800aea6:	3c37      	subs	r4, #55	@ 0x37
 800aea8:	e7e8      	b.n	800ae7c <_strtoul_l.isra.0+0x74>
 800aeaa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800aeae:	f1bc 0f19 	cmp.w	ip, #25
 800aeb2:	d804      	bhi.n	800aebe <_strtoul_l.isra.0+0xb6>
 800aeb4:	3c57      	subs	r4, #87	@ 0x57
 800aeb6:	e7e1      	b.n	800ae7c <_strtoul_l.isra.0+0x74>
 800aeb8:	f04f 36ff 	mov.w	r6, #4294967295
 800aebc:	e7eb      	b.n	800ae96 <_strtoul_l.isra.0+0x8e>
 800aebe:	1c73      	adds	r3, r6, #1
 800aec0:	d106      	bne.n	800aed0 <_strtoul_l.isra.0+0xc8>
 800aec2:	2322      	movs	r3, #34	@ 0x22
 800aec4:	f8ce 3000 	str.w	r3, [lr]
 800aec8:	4630      	mov	r0, r6
 800aeca:	b932      	cbnz	r2, 800aeda <_strtoul_l.isra.0+0xd2>
 800aecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aed0:	b107      	cbz	r7, 800aed4 <_strtoul_l.isra.0+0xcc>
 800aed2:	4240      	negs	r0, r0
 800aed4:	2a00      	cmp	r2, #0
 800aed6:	d0f9      	beq.n	800aecc <_strtoul_l.isra.0+0xc4>
 800aed8:	b106      	cbz	r6, 800aedc <_strtoul_l.isra.0+0xd4>
 800aeda:	1e69      	subs	r1, r5, #1
 800aedc:	6011      	str	r1, [r2, #0]
 800aede:	e7f5      	b.n	800aecc <_strtoul_l.isra.0+0xc4>
 800aee0:	0800bcc1 	.word	0x0800bcc1

0800aee4 <_strtoul_r>:
 800aee4:	f7ff bf90 	b.w	800ae08 <_strtoul_l.isra.0>

0800aee8 <__ascii_wctomb>:
 800aee8:	4603      	mov	r3, r0
 800aeea:	4608      	mov	r0, r1
 800aeec:	b141      	cbz	r1, 800af00 <__ascii_wctomb+0x18>
 800aeee:	2aff      	cmp	r2, #255	@ 0xff
 800aef0:	d904      	bls.n	800aefc <__ascii_wctomb+0x14>
 800aef2:	228a      	movs	r2, #138	@ 0x8a
 800aef4:	601a      	str	r2, [r3, #0]
 800aef6:	f04f 30ff 	mov.w	r0, #4294967295
 800aefa:	4770      	bx	lr
 800aefc:	700a      	strb	r2, [r1, #0]
 800aefe:	2001      	movs	r0, #1
 800af00:	4770      	bx	lr
	...

0800af04 <fiprintf>:
 800af04:	b40e      	push	{r1, r2, r3}
 800af06:	b503      	push	{r0, r1, lr}
 800af08:	4601      	mov	r1, r0
 800af0a:	ab03      	add	r3, sp, #12
 800af0c:	4805      	ldr	r0, [pc, #20]	@ (800af24 <fiprintf+0x20>)
 800af0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af12:	6800      	ldr	r0, [r0, #0]
 800af14:	9301      	str	r3, [sp, #4]
 800af16:	f000 f83f 	bl	800af98 <_vfiprintf_r>
 800af1a:	b002      	add	sp, #8
 800af1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800af20:	b003      	add	sp, #12
 800af22:	4770      	bx	lr
 800af24:	20000024 	.word	0x20000024

0800af28 <abort>:
 800af28:	b508      	push	{r3, lr}
 800af2a:	2006      	movs	r0, #6
 800af2c:	f000 fa08 	bl	800b340 <raise>
 800af30:	2001      	movs	r0, #1
 800af32:	f7f7 fca5 	bl	8002880 <_exit>

0800af36 <_malloc_usable_size_r>:
 800af36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af3a:	1f18      	subs	r0, r3, #4
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	bfbc      	itt	lt
 800af40:	580b      	ldrlt	r3, [r1, r0]
 800af42:	18c0      	addlt	r0, r0, r3
 800af44:	4770      	bx	lr

0800af46 <__sfputc_r>:
 800af46:	6893      	ldr	r3, [r2, #8]
 800af48:	3b01      	subs	r3, #1
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	b410      	push	{r4}
 800af4e:	6093      	str	r3, [r2, #8]
 800af50:	da08      	bge.n	800af64 <__sfputc_r+0x1e>
 800af52:	6994      	ldr	r4, [r2, #24]
 800af54:	42a3      	cmp	r3, r4
 800af56:	db01      	blt.n	800af5c <__sfputc_r+0x16>
 800af58:	290a      	cmp	r1, #10
 800af5a:	d103      	bne.n	800af64 <__sfputc_r+0x1e>
 800af5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af60:	f000 b932 	b.w	800b1c8 <__swbuf_r>
 800af64:	6813      	ldr	r3, [r2, #0]
 800af66:	1c58      	adds	r0, r3, #1
 800af68:	6010      	str	r0, [r2, #0]
 800af6a:	7019      	strb	r1, [r3, #0]
 800af6c:	4608      	mov	r0, r1
 800af6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <__sfputs_r>:
 800af74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af76:	4606      	mov	r6, r0
 800af78:	460f      	mov	r7, r1
 800af7a:	4614      	mov	r4, r2
 800af7c:	18d5      	adds	r5, r2, r3
 800af7e:	42ac      	cmp	r4, r5
 800af80:	d101      	bne.n	800af86 <__sfputs_r+0x12>
 800af82:	2000      	movs	r0, #0
 800af84:	e007      	b.n	800af96 <__sfputs_r+0x22>
 800af86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af8a:	463a      	mov	r2, r7
 800af8c:	4630      	mov	r0, r6
 800af8e:	f7ff ffda 	bl	800af46 <__sfputc_r>
 800af92:	1c43      	adds	r3, r0, #1
 800af94:	d1f3      	bne.n	800af7e <__sfputs_r+0xa>
 800af96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af98 <_vfiprintf_r>:
 800af98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af9c:	460d      	mov	r5, r1
 800af9e:	b09d      	sub	sp, #116	@ 0x74
 800afa0:	4614      	mov	r4, r2
 800afa2:	4698      	mov	r8, r3
 800afa4:	4606      	mov	r6, r0
 800afa6:	b118      	cbz	r0, 800afb0 <_vfiprintf_r+0x18>
 800afa8:	6a03      	ldr	r3, [r0, #32]
 800afaa:	b90b      	cbnz	r3, 800afb0 <_vfiprintf_r+0x18>
 800afac:	f7fc f960 	bl	8007270 <__sinit>
 800afb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afb2:	07d9      	lsls	r1, r3, #31
 800afb4:	d405      	bmi.n	800afc2 <_vfiprintf_r+0x2a>
 800afb6:	89ab      	ldrh	r3, [r5, #12]
 800afb8:	059a      	lsls	r2, r3, #22
 800afba:	d402      	bmi.n	800afc2 <_vfiprintf_r+0x2a>
 800afbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afbe:	f7fc fb10 	bl	80075e2 <__retarget_lock_acquire_recursive>
 800afc2:	89ab      	ldrh	r3, [r5, #12]
 800afc4:	071b      	lsls	r3, r3, #28
 800afc6:	d501      	bpl.n	800afcc <_vfiprintf_r+0x34>
 800afc8:	692b      	ldr	r3, [r5, #16]
 800afca:	b99b      	cbnz	r3, 800aff4 <_vfiprintf_r+0x5c>
 800afcc:	4629      	mov	r1, r5
 800afce:	4630      	mov	r0, r6
 800afd0:	f000 f938 	bl	800b244 <__swsetup_r>
 800afd4:	b170      	cbz	r0, 800aff4 <_vfiprintf_r+0x5c>
 800afd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afd8:	07dc      	lsls	r4, r3, #31
 800afda:	d504      	bpl.n	800afe6 <_vfiprintf_r+0x4e>
 800afdc:	f04f 30ff 	mov.w	r0, #4294967295
 800afe0:	b01d      	add	sp, #116	@ 0x74
 800afe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe6:	89ab      	ldrh	r3, [r5, #12]
 800afe8:	0598      	lsls	r0, r3, #22
 800afea:	d4f7      	bmi.n	800afdc <_vfiprintf_r+0x44>
 800afec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afee:	f7fc faf9 	bl	80075e4 <__retarget_lock_release_recursive>
 800aff2:	e7f3      	b.n	800afdc <_vfiprintf_r+0x44>
 800aff4:	2300      	movs	r3, #0
 800aff6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aff8:	2320      	movs	r3, #32
 800affa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800affe:	f8cd 800c 	str.w	r8, [sp, #12]
 800b002:	2330      	movs	r3, #48	@ 0x30
 800b004:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b1b4 <_vfiprintf_r+0x21c>
 800b008:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b00c:	f04f 0901 	mov.w	r9, #1
 800b010:	4623      	mov	r3, r4
 800b012:	469a      	mov	sl, r3
 800b014:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b018:	b10a      	cbz	r2, 800b01e <_vfiprintf_r+0x86>
 800b01a:	2a25      	cmp	r2, #37	@ 0x25
 800b01c:	d1f9      	bne.n	800b012 <_vfiprintf_r+0x7a>
 800b01e:	ebba 0b04 	subs.w	fp, sl, r4
 800b022:	d00b      	beq.n	800b03c <_vfiprintf_r+0xa4>
 800b024:	465b      	mov	r3, fp
 800b026:	4622      	mov	r2, r4
 800b028:	4629      	mov	r1, r5
 800b02a:	4630      	mov	r0, r6
 800b02c:	f7ff ffa2 	bl	800af74 <__sfputs_r>
 800b030:	3001      	adds	r0, #1
 800b032:	f000 80a7 	beq.w	800b184 <_vfiprintf_r+0x1ec>
 800b036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b038:	445a      	add	r2, fp
 800b03a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b03c:	f89a 3000 	ldrb.w	r3, [sl]
 800b040:	2b00      	cmp	r3, #0
 800b042:	f000 809f 	beq.w	800b184 <_vfiprintf_r+0x1ec>
 800b046:	2300      	movs	r3, #0
 800b048:	f04f 32ff 	mov.w	r2, #4294967295
 800b04c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b050:	f10a 0a01 	add.w	sl, sl, #1
 800b054:	9304      	str	r3, [sp, #16]
 800b056:	9307      	str	r3, [sp, #28]
 800b058:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b05c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b05e:	4654      	mov	r4, sl
 800b060:	2205      	movs	r2, #5
 800b062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b066:	4853      	ldr	r0, [pc, #332]	@ (800b1b4 <_vfiprintf_r+0x21c>)
 800b068:	f7f5 f8d2 	bl	8000210 <memchr>
 800b06c:	9a04      	ldr	r2, [sp, #16]
 800b06e:	b9d8      	cbnz	r0, 800b0a8 <_vfiprintf_r+0x110>
 800b070:	06d1      	lsls	r1, r2, #27
 800b072:	bf44      	itt	mi
 800b074:	2320      	movmi	r3, #32
 800b076:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b07a:	0713      	lsls	r3, r2, #28
 800b07c:	bf44      	itt	mi
 800b07e:	232b      	movmi	r3, #43	@ 0x2b
 800b080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b084:	f89a 3000 	ldrb.w	r3, [sl]
 800b088:	2b2a      	cmp	r3, #42	@ 0x2a
 800b08a:	d015      	beq.n	800b0b8 <_vfiprintf_r+0x120>
 800b08c:	9a07      	ldr	r2, [sp, #28]
 800b08e:	4654      	mov	r4, sl
 800b090:	2000      	movs	r0, #0
 800b092:	f04f 0c0a 	mov.w	ip, #10
 800b096:	4621      	mov	r1, r4
 800b098:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b09c:	3b30      	subs	r3, #48	@ 0x30
 800b09e:	2b09      	cmp	r3, #9
 800b0a0:	d94b      	bls.n	800b13a <_vfiprintf_r+0x1a2>
 800b0a2:	b1b0      	cbz	r0, 800b0d2 <_vfiprintf_r+0x13a>
 800b0a4:	9207      	str	r2, [sp, #28]
 800b0a6:	e014      	b.n	800b0d2 <_vfiprintf_r+0x13a>
 800b0a8:	eba0 0308 	sub.w	r3, r0, r8
 800b0ac:	fa09 f303 	lsl.w	r3, r9, r3
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	9304      	str	r3, [sp, #16]
 800b0b4:	46a2      	mov	sl, r4
 800b0b6:	e7d2      	b.n	800b05e <_vfiprintf_r+0xc6>
 800b0b8:	9b03      	ldr	r3, [sp, #12]
 800b0ba:	1d19      	adds	r1, r3, #4
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	9103      	str	r1, [sp, #12]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	bfbb      	ittet	lt
 800b0c4:	425b      	neglt	r3, r3
 800b0c6:	f042 0202 	orrlt.w	r2, r2, #2
 800b0ca:	9307      	strge	r3, [sp, #28]
 800b0cc:	9307      	strlt	r3, [sp, #28]
 800b0ce:	bfb8      	it	lt
 800b0d0:	9204      	strlt	r2, [sp, #16]
 800b0d2:	7823      	ldrb	r3, [r4, #0]
 800b0d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b0d6:	d10a      	bne.n	800b0ee <_vfiprintf_r+0x156>
 800b0d8:	7863      	ldrb	r3, [r4, #1]
 800b0da:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0dc:	d132      	bne.n	800b144 <_vfiprintf_r+0x1ac>
 800b0de:	9b03      	ldr	r3, [sp, #12]
 800b0e0:	1d1a      	adds	r2, r3, #4
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	9203      	str	r2, [sp, #12]
 800b0e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b0ea:	3402      	adds	r4, #2
 800b0ec:	9305      	str	r3, [sp, #20]
 800b0ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b1c4 <_vfiprintf_r+0x22c>
 800b0f2:	7821      	ldrb	r1, [r4, #0]
 800b0f4:	2203      	movs	r2, #3
 800b0f6:	4650      	mov	r0, sl
 800b0f8:	f7f5 f88a 	bl	8000210 <memchr>
 800b0fc:	b138      	cbz	r0, 800b10e <_vfiprintf_r+0x176>
 800b0fe:	9b04      	ldr	r3, [sp, #16]
 800b100:	eba0 000a 	sub.w	r0, r0, sl
 800b104:	2240      	movs	r2, #64	@ 0x40
 800b106:	4082      	lsls	r2, r0
 800b108:	4313      	orrs	r3, r2
 800b10a:	3401      	adds	r4, #1
 800b10c:	9304      	str	r3, [sp, #16]
 800b10e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b112:	4829      	ldr	r0, [pc, #164]	@ (800b1b8 <_vfiprintf_r+0x220>)
 800b114:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b118:	2206      	movs	r2, #6
 800b11a:	f7f5 f879 	bl	8000210 <memchr>
 800b11e:	2800      	cmp	r0, #0
 800b120:	d03f      	beq.n	800b1a2 <_vfiprintf_r+0x20a>
 800b122:	4b26      	ldr	r3, [pc, #152]	@ (800b1bc <_vfiprintf_r+0x224>)
 800b124:	bb1b      	cbnz	r3, 800b16e <_vfiprintf_r+0x1d6>
 800b126:	9b03      	ldr	r3, [sp, #12]
 800b128:	3307      	adds	r3, #7
 800b12a:	f023 0307 	bic.w	r3, r3, #7
 800b12e:	3308      	adds	r3, #8
 800b130:	9303      	str	r3, [sp, #12]
 800b132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b134:	443b      	add	r3, r7
 800b136:	9309      	str	r3, [sp, #36]	@ 0x24
 800b138:	e76a      	b.n	800b010 <_vfiprintf_r+0x78>
 800b13a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b13e:	460c      	mov	r4, r1
 800b140:	2001      	movs	r0, #1
 800b142:	e7a8      	b.n	800b096 <_vfiprintf_r+0xfe>
 800b144:	2300      	movs	r3, #0
 800b146:	3401      	adds	r4, #1
 800b148:	9305      	str	r3, [sp, #20]
 800b14a:	4619      	mov	r1, r3
 800b14c:	f04f 0c0a 	mov.w	ip, #10
 800b150:	4620      	mov	r0, r4
 800b152:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b156:	3a30      	subs	r2, #48	@ 0x30
 800b158:	2a09      	cmp	r2, #9
 800b15a:	d903      	bls.n	800b164 <_vfiprintf_r+0x1cc>
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d0c6      	beq.n	800b0ee <_vfiprintf_r+0x156>
 800b160:	9105      	str	r1, [sp, #20]
 800b162:	e7c4      	b.n	800b0ee <_vfiprintf_r+0x156>
 800b164:	fb0c 2101 	mla	r1, ip, r1, r2
 800b168:	4604      	mov	r4, r0
 800b16a:	2301      	movs	r3, #1
 800b16c:	e7f0      	b.n	800b150 <_vfiprintf_r+0x1b8>
 800b16e:	ab03      	add	r3, sp, #12
 800b170:	9300      	str	r3, [sp, #0]
 800b172:	462a      	mov	r2, r5
 800b174:	4b12      	ldr	r3, [pc, #72]	@ (800b1c0 <_vfiprintf_r+0x228>)
 800b176:	a904      	add	r1, sp, #16
 800b178:	4630      	mov	r0, r6
 800b17a:	f7fb fa29 	bl	80065d0 <_printf_float>
 800b17e:	4607      	mov	r7, r0
 800b180:	1c78      	adds	r0, r7, #1
 800b182:	d1d6      	bne.n	800b132 <_vfiprintf_r+0x19a>
 800b184:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b186:	07d9      	lsls	r1, r3, #31
 800b188:	d405      	bmi.n	800b196 <_vfiprintf_r+0x1fe>
 800b18a:	89ab      	ldrh	r3, [r5, #12]
 800b18c:	059a      	lsls	r2, r3, #22
 800b18e:	d402      	bmi.n	800b196 <_vfiprintf_r+0x1fe>
 800b190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b192:	f7fc fa27 	bl	80075e4 <__retarget_lock_release_recursive>
 800b196:	89ab      	ldrh	r3, [r5, #12]
 800b198:	065b      	lsls	r3, r3, #25
 800b19a:	f53f af1f 	bmi.w	800afdc <_vfiprintf_r+0x44>
 800b19e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1a0:	e71e      	b.n	800afe0 <_vfiprintf_r+0x48>
 800b1a2:	ab03      	add	r3, sp, #12
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	462a      	mov	r2, r5
 800b1a8:	4b05      	ldr	r3, [pc, #20]	@ (800b1c0 <_vfiprintf_r+0x228>)
 800b1aa:	a904      	add	r1, sp, #16
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	f7fb fca7 	bl	8006b00 <_printf_i>
 800b1b2:	e7e4      	b.n	800b17e <_vfiprintf_r+0x1e6>
 800b1b4:	0800baa3 	.word	0x0800baa3
 800b1b8:	0800baad 	.word	0x0800baad
 800b1bc:	080065d1 	.word	0x080065d1
 800b1c0:	0800af75 	.word	0x0800af75
 800b1c4:	0800baa9 	.word	0x0800baa9

0800b1c8 <__swbuf_r>:
 800b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ca:	460e      	mov	r6, r1
 800b1cc:	4614      	mov	r4, r2
 800b1ce:	4605      	mov	r5, r0
 800b1d0:	b118      	cbz	r0, 800b1da <__swbuf_r+0x12>
 800b1d2:	6a03      	ldr	r3, [r0, #32]
 800b1d4:	b90b      	cbnz	r3, 800b1da <__swbuf_r+0x12>
 800b1d6:	f7fc f84b 	bl	8007270 <__sinit>
 800b1da:	69a3      	ldr	r3, [r4, #24]
 800b1dc:	60a3      	str	r3, [r4, #8]
 800b1de:	89a3      	ldrh	r3, [r4, #12]
 800b1e0:	071a      	lsls	r2, r3, #28
 800b1e2:	d501      	bpl.n	800b1e8 <__swbuf_r+0x20>
 800b1e4:	6923      	ldr	r3, [r4, #16]
 800b1e6:	b943      	cbnz	r3, 800b1fa <__swbuf_r+0x32>
 800b1e8:	4621      	mov	r1, r4
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	f000 f82a 	bl	800b244 <__swsetup_r>
 800b1f0:	b118      	cbz	r0, 800b1fa <__swbuf_r+0x32>
 800b1f2:	f04f 37ff 	mov.w	r7, #4294967295
 800b1f6:	4638      	mov	r0, r7
 800b1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1fa:	6823      	ldr	r3, [r4, #0]
 800b1fc:	6922      	ldr	r2, [r4, #16]
 800b1fe:	1a98      	subs	r0, r3, r2
 800b200:	6963      	ldr	r3, [r4, #20]
 800b202:	b2f6      	uxtb	r6, r6
 800b204:	4283      	cmp	r3, r0
 800b206:	4637      	mov	r7, r6
 800b208:	dc05      	bgt.n	800b216 <__swbuf_r+0x4e>
 800b20a:	4621      	mov	r1, r4
 800b20c:	4628      	mov	r0, r5
 800b20e:	f7ff f97f 	bl	800a510 <_fflush_r>
 800b212:	2800      	cmp	r0, #0
 800b214:	d1ed      	bne.n	800b1f2 <__swbuf_r+0x2a>
 800b216:	68a3      	ldr	r3, [r4, #8]
 800b218:	3b01      	subs	r3, #1
 800b21a:	60a3      	str	r3, [r4, #8]
 800b21c:	6823      	ldr	r3, [r4, #0]
 800b21e:	1c5a      	adds	r2, r3, #1
 800b220:	6022      	str	r2, [r4, #0]
 800b222:	701e      	strb	r6, [r3, #0]
 800b224:	6962      	ldr	r2, [r4, #20]
 800b226:	1c43      	adds	r3, r0, #1
 800b228:	429a      	cmp	r2, r3
 800b22a:	d004      	beq.n	800b236 <__swbuf_r+0x6e>
 800b22c:	89a3      	ldrh	r3, [r4, #12]
 800b22e:	07db      	lsls	r3, r3, #31
 800b230:	d5e1      	bpl.n	800b1f6 <__swbuf_r+0x2e>
 800b232:	2e0a      	cmp	r6, #10
 800b234:	d1df      	bne.n	800b1f6 <__swbuf_r+0x2e>
 800b236:	4621      	mov	r1, r4
 800b238:	4628      	mov	r0, r5
 800b23a:	f7ff f969 	bl	800a510 <_fflush_r>
 800b23e:	2800      	cmp	r0, #0
 800b240:	d0d9      	beq.n	800b1f6 <__swbuf_r+0x2e>
 800b242:	e7d6      	b.n	800b1f2 <__swbuf_r+0x2a>

0800b244 <__swsetup_r>:
 800b244:	b538      	push	{r3, r4, r5, lr}
 800b246:	4b29      	ldr	r3, [pc, #164]	@ (800b2ec <__swsetup_r+0xa8>)
 800b248:	4605      	mov	r5, r0
 800b24a:	6818      	ldr	r0, [r3, #0]
 800b24c:	460c      	mov	r4, r1
 800b24e:	b118      	cbz	r0, 800b258 <__swsetup_r+0x14>
 800b250:	6a03      	ldr	r3, [r0, #32]
 800b252:	b90b      	cbnz	r3, 800b258 <__swsetup_r+0x14>
 800b254:	f7fc f80c 	bl	8007270 <__sinit>
 800b258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b25c:	0719      	lsls	r1, r3, #28
 800b25e:	d422      	bmi.n	800b2a6 <__swsetup_r+0x62>
 800b260:	06da      	lsls	r2, r3, #27
 800b262:	d407      	bmi.n	800b274 <__swsetup_r+0x30>
 800b264:	2209      	movs	r2, #9
 800b266:	602a      	str	r2, [r5, #0]
 800b268:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b26c:	81a3      	strh	r3, [r4, #12]
 800b26e:	f04f 30ff 	mov.w	r0, #4294967295
 800b272:	e033      	b.n	800b2dc <__swsetup_r+0x98>
 800b274:	0758      	lsls	r0, r3, #29
 800b276:	d512      	bpl.n	800b29e <__swsetup_r+0x5a>
 800b278:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b27a:	b141      	cbz	r1, 800b28e <__swsetup_r+0x4a>
 800b27c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b280:	4299      	cmp	r1, r3
 800b282:	d002      	beq.n	800b28a <__swsetup_r+0x46>
 800b284:	4628      	mov	r0, r5
 800b286:	f7fd f81b 	bl	80082c0 <_free_r>
 800b28a:	2300      	movs	r3, #0
 800b28c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b28e:	89a3      	ldrh	r3, [r4, #12]
 800b290:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b294:	81a3      	strh	r3, [r4, #12]
 800b296:	2300      	movs	r3, #0
 800b298:	6063      	str	r3, [r4, #4]
 800b29a:	6923      	ldr	r3, [r4, #16]
 800b29c:	6023      	str	r3, [r4, #0]
 800b29e:	89a3      	ldrh	r3, [r4, #12]
 800b2a0:	f043 0308 	orr.w	r3, r3, #8
 800b2a4:	81a3      	strh	r3, [r4, #12]
 800b2a6:	6923      	ldr	r3, [r4, #16]
 800b2a8:	b94b      	cbnz	r3, 800b2be <__swsetup_r+0x7a>
 800b2aa:	89a3      	ldrh	r3, [r4, #12]
 800b2ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b2b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2b4:	d003      	beq.n	800b2be <__swsetup_r+0x7a>
 800b2b6:	4621      	mov	r1, r4
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	f000 f883 	bl	800b3c4 <__smakebuf_r>
 800b2be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2c2:	f013 0201 	ands.w	r2, r3, #1
 800b2c6:	d00a      	beq.n	800b2de <__swsetup_r+0x9a>
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	60a2      	str	r2, [r4, #8]
 800b2cc:	6962      	ldr	r2, [r4, #20]
 800b2ce:	4252      	negs	r2, r2
 800b2d0:	61a2      	str	r2, [r4, #24]
 800b2d2:	6922      	ldr	r2, [r4, #16]
 800b2d4:	b942      	cbnz	r2, 800b2e8 <__swsetup_r+0xa4>
 800b2d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b2da:	d1c5      	bne.n	800b268 <__swsetup_r+0x24>
 800b2dc:	bd38      	pop	{r3, r4, r5, pc}
 800b2de:	0799      	lsls	r1, r3, #30
 800b2e0:	bf58      	it	pl
 800b2e2:	6962      	ldrpl	r2, [r4, #20]
 800b2e4:	60a2      	str	r2, [r4, #8]
 800b2e6:	e7f4      	b.n	800b2d2 <__swsetup_r+0x8e>
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	e7f7      	b.n	800b2dc <__swsetup_r+0x98>
 800b2ec:	20000024 	.word	0x20000024

0800b2f0 <_raise_r>:
 800b2f0:	291f      	cmp	r1, #31
 800b2f2:	b538      	push	{r3, r4, r5, lr}
 800b2f4:	4605      	mov	r5, r0
 800b2f6:	460c      	mov	r4, r1
 800b2f8:	d904      	bls.n	800b304 <_raise_r+0x14>
 800b2fa:	2316      	movs	r3, #22
 800b2fc:	6003      	str	r3, [r0, #0]
 800b2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b302:	bd38      	pop	{r3, r4, r5, pc}
 800b304:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b306:	b112      	cbz	r2, 800b30e <_raise_r+0x1e>
 800b308:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b30c:	b94b      	cbnz	r3, 800b322 <_raise_r+0x32>
 800b30e:	4628      	mov	r0, r5
 800b310:	f000 f830 	bl	800b374 <_getpid_r>
 800b314:	4622      	mov	r2, r4
 800b316:	4601      	mov	r1, r0
 800b318:	4628      	mov	r0, r5
 800b31a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b31e:	f000 b817 	b.w	800b350 <_kill_r>
 800b322:	2b01      	cmp	r3, #1
 800b324:	d00a      	beq.n	800b33c <_raise_r+0x4c>
 800b326:	1c59      	adds	r1, r3, #1
 800b328:	d103      	bne.n	800b332 <_raise_r+0x42>
 800b32a:	2316      	movs	r3, #22
 800b32c:	6003      	str	r3, [r0, #0]
 800b32e:	2001      	movs	r0, #1
 800b330:	e7e7      	b.n	800b302 <_raise_r+0x12>
 800b332:	2100      	movs	r1, #0
 800b334:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b338:	4620      	mov	r0, r4
 800b33a:	4798      	blx	r3
 800b33c:	2000      	movs	r0, #0
 800b33e:	e7e0      	b.n	800b302 <_raise_r+0x12>

0800b340 <raise>:
 800b340:	4b02      	ldr	r3, [pc, #8]	@ (800b34c <raise+0xc>)
 800b342:	4601      	mov	r1, r0
 800b344:	6818      	ldr	r0, [r3, #0]
 800b346:	f7ff bfd3 	b.w	800b2f0 <_raise_r>
 800b34a:	bf00      	nop
 800b34c:	20000024 	.word	0x20000024

0800b350 <_kill_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	4d07      	ldr	r5, [pc, #28]	@ (800b370 <_kill_r+0x20>)
 800b354:	2300      	movs	r3, #0
 800b356:	4604      	mov	r4, r0
 800b358:	4608      	mov	r0, r1
 800b35a:	4611      	mov	r1, r2
 800b35c:	602b      	str	r3, [r5, #0]
 800b35e:	f7f7 fa7f 	bl	8002860 <_kill>
 800b362:	1c43      	adds	r3, r0, #1
 800b364:	d102      	bne.n	800b36c <_kill_r+0x1c>
 800b366:	682b      	ldr	r3, [r5, #0]
 800b368:	b103      	cbz	r3, 800b36c <_kill_r+0x1c>
 800b36a:	6023      	str	r3, [r4, #0]
 800b36c:	bd38      	pop	{r3, r4, r5, pc}
 800b36e:	bf00      	nop
 800b370:	200026dc 	.word	0x200026dc

0800b374 <_getpid_r>:
 800b374:	f7f7 ba6c 	b.w	8002850 <_getpid>

0800b378 <__swhatbuf_r>:
 800b378:	b570      	push	{r4, r5, r6, lr}
 800b37a:	460c      	mov	r4, r1
 800b37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b380:	2900      	cmp	r1, #0
 800b382:	b096      	sub	sp, #88	@ 0x58
 800b384:	4615      	mov	r5, r2
 800b386:	461e      	mov	r6, r3
 800b388:	da0d      	bge.n	800b3a6 <__swhatbuf_r+0x2e>
 800b38a:	89a3      	ldrh	r3, [r4, #12]
 800b38c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b390:	f04f 0100 	mov.w	r1, #0
 800b394:	bf14      	ite	ne
 800b396:	2340      	movne	r3, #64	@ 0x40
 800b398:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b39c:	2000      	movs	r0, #0
 800b39e:	6031      	str	r1, [r6, #0]
 800b3a0:	602b      	str	r3, [r5, #0]
 800b3a2:	b016      	add	sp, #88	@ 0x58
 800b3a4:	bd70      	pop	{r4, r5, r6, pc}
 800b3a6:	466a      	mov	r2, sp
 800b3a8:	f000 f848 	bl	800b43c <_fstat_r>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	dbec      	blt.n	800b38a <__swhatbuf_r+0x12>
 800b3b0:	9901      	ldr	r1, [sp, #4]
 800b3b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b3b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b3ba:	4259      	negs	r1, r3
 800b3bc:	4159      	adcs	r1, r3
 800b3be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b3c2:	e7eb      	b.n	800b39c <__swhatbuf_r+0x24>

0800b3c4 <__smakebuf_r>:
 800b3c4:	898b      	ldrh	r3, [r1, #12]
 800b3c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3c8:	079d      	lsls	r5, r3, #30
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	460c      	mov	r4, r1
 800b3ce:	d507      	bpl.n	800b3e0 <__smakebuf_r+0x1c>
 800b3d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b3d4:	6023      	str	r3, [r4, #0]
 800b3d6:	6123      	str	r3, [r4, #16]
 800b3d8:	2301      	movs	r3, #1
 800b3da:	6163      	str	r3, [r4, #20]
 800b3dc:	b003      	add	sp, #12
 800b3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3e0:	ab01      	add	r3, sp, #4
 800b3e2:	466a      	mov	r2, sp
 800b3e4:	f7ff ffc8 	bl	800b378 <__swhatbuf_r>
 800b3e8:	9f00      	ldr	r7, [sp, #0]
 800b3ea:	4605      	mov	r5, r0
 800b3ec:	4639      	mov	r1, r7
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	f7fc ffda 	bl	80083a8 <_malloc_r>
 800b3f4:	b948      	cbnz	r0, 800b40a <__smakebuf_r+0x46>
 800b3f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3fa:	059a      	lsls	r2, r3, #22
 800b3fc:	d4ee      	bmi.n	800b3dc <__smakebuf_r+0x18>
 800b3fe:	f023 0303 	bic.w	r3, r3, #3
 800b402:	f043 0302 	orr.w	r3, r3, #2
 800b406:	81a3      	strh	r3, [r4, #12]
 800b408:	e7e2      	b.n	800b3d0 <__smakebuf_r+0xc>
 800b40a:	89a3      	ldrh	r3, [r4, #12]
 800b40c:	6020      	str	r0, [r4, #0]
 800b40e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b412:	81a3      	strh	r3, [r4, #12]
 800b414:	9b01      	ldr	r3, [sp, #4]
 800b416:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b41a:	b15b      	cbz	r3, 800b434 <__smakebuf_r+0x70>
 800b41c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b420:	4630      	mov	r0, r6
 800b422:	f000 f81d 	bl	800b460 <_isatty_r>
 800b426:	b128      	cbz	r0, 800b434 <__smakebuf_r+0x70>
 800b428:	89a3      	ldrh	r3, [r4, #12]
 800b42a:	f023 0303 	bic.w	r3, r3, #3
 800b42e:	f043 0301 	orr.w	r3, r3, #1
 800b432:	81a3      	strh	r3, [r4, #12]
 800b434:	89a3      	ldrh	r3, [r4, #12]
 800b436:	431d      	orrs	r5, r3
 800b438:	81a5      	strh	r5, [r4, #12]
 800b43a:	e7cf      	b.n	800b3dc <__smakebuf_r+0x18>

0800b43c <_fstat_r>:
 800b43c:	b538      	push	{r3, r4, r5, lr}
 800b43e:	4d07      	ldr	r5, [pc, #28]	@ (800b45c <_fstat_r+0x20>)
 800b440:	2300      	movs	r3, #0
 800b442:	4604      	mov	r4, r0
 800b444:	4608      	mov	r0, r1
 800b446:	4611      	mov	r1, r2
 800b448:	602b      	str	r3, [r5, #0]
 800b44a:	f7f7 fa69 	bl	8002920 <_fstat>
 800b44e:	1c43      	adds	r3, r0, #1
 800b450:	d102      	bne.n	800b458 <_fstat_r+0x1c>
 800b452:	682b      	ldr	r3, [r5, #0]
 800b454:	b103      	cbz	r3, 800b458 <_fstat_r+0x1c>
 800b456:	6023      	str	r3, [r4, #0]
 800b458:	bd38      	pop	{r3, r4, r5, pc}
 800b45a:	bf00      	nop
 800b45c:	200026dc 	.word	0x200026dc

0800b460 <_isatty_r>:
 800b460:	b538      	push	{r3, r4, r5, lr}
 800b462:	4d06      	ldr	r5, [pc, #24]	@ (800b47c <_isatty_r+0x1c>)
 800b464:	2300      	movs	r3, #0
 800b466:	4604      	mov	r4, r0
 800b468:	4608      	mov	r0, r1
 800b46a:	602b      	str	r3, [r5, #0]
 800b46c:	f7f7 fa68 	bl	8002940 <_isatty>
 800b470:	1c43      	adds	r3, r0, #1
 800b472:	d102      	bne.n	800b47a <_isatty_r+0x1a>
 800b474:	682b      	ldr	r3, [r5, #0]
 800b476:	b103      	cbz	r3, 800b47a <_isatty_r+0x1a>
 800b478:	6023      	str	r3, [r4, #0]
 800b47a:	bd38      	pop	{r3, r4, r5, pc}
 800b47c:	200026dc 	.word	0x200026dc

0800b480 <_init>:
 800b480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b482:	bf00      	nop
 800b484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b486:	bc08      	pop	{r3}
 800b488:	469e      	mov	lr, r3
 800b48a:	4770      	bx	lr

0800b48c <_fini>:
 800b48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48e:	bf00      	nop
 800b490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b492:	bc08      	pop	{r3}
 800b494:	469e      	mov	lr, r3
 800b496:	4770      	bx	lr
